(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":1,"buffer":2,"ieee754":3}],3:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],4:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lightTheme = exports.darkTheme = void 0;
var _view = require("@codemirror/view");
var _language = require("@codemirror/language");
var _highlight = require("@lezer/highlight");
var highlightStyle$2 = (0, _language.syntaxHighlighting)(_language.HighlightStyle.define([{
  tag: _highlight.tags.strong,
  fontWeight: 'bold'
}, {
  tag: _highlight.tags.emphasis,
  fontStyle: 'italic'
}]));
var theme$2 = _view.EditorView.theme({
  '& .cm-lintRange': {
    position: 'relative'
  },
  '& .cm-lintRange::after': {
    content: '""',
    width: '100%',
    position: 'absolute',
    left: '0px',
    bottom: '-2px',
    height: '3px',
    backgroundRepeat: 'repeat-x'
  },
  '& .cm-lintRange.cm-lintRange-warning, & .cm-lintRange.cm-lintRange-error': {
    backgroundImage: 'none'
  },
  '& .cm-lintPoint::after': {
    bottom: '-2px'
  }
});
var commonTheme = [theme$2, highlightStyle$2];
var _urlify = function _urlify(color) {
  return "%23".concat(color.slice(1));
};
var colors = {
  black: '#1f2b36',
  darkGrey: '#2f3d58',
  grey: '#404a5c',
  midGrey: '#576071',
  lightGrey: '#c5d1e5',
  offWhite: '#d9e0f5',
  snowWhite: '#eaf1ff',
  white: '#ffffff',
  mossGreen: '#7ab6aa',
  iceBlue: '#6cbfd8',
  waterBlue: '#065aaa',
  brightBlue: '#0a56b9',
  deepBlue: '#355472',
  red: '#9f1c15',
  orangeBrown: '#b4502f',
  yellow: '#debd71',
  lila: '#9a4890',
  purple: '#5b2c83'
};
var colorByRole = {
  lightBackground: colors.white,
  darkBackground: colors.snowWhite,
  selection: colors.snowWhite,
  tooltipBackground: colors.offWhite,
  error: colors.red,
  warning: colors.yellow,
  invalid: '#b40000'
};
var theme$1 = _view.EditorView.theme({
  '&': {
    color: colors.black,
    backgroundColor: colorByRole.lightBackground
  },
  '.cm-content': {
    caretColor: colors.darkGrey
  },
  '.cm-cursor, .cm-dropCursor': {
    borderLeftColor: colors.darkGrey
  },
  '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {
    backgroundColor: colorByRole.selection
  },
  '.cm-panels': {
    backgroundColor: colorByRole.darkBackground,
    color: colors.grey
  },
  '.cm-panels.cm-panels-top': {
    borderBottom: "2px solid ".concat(colors.black)
  },
  '.cm-panels.cm-panels-bottom': {
    borderTop: "2px solid ".concat(colors.black)
  },
  '.cm-searchMatch': {
    backgroundColor: '#72a1ff59',
    outline: "1px solid ".concat(colors.midGrey)
  },
  '.cm-searchMatch.cm-searchMatch-selected': {
    backgroundColor: colors.offWhite
  },
  '.cm-activeLine': {
    backgroundColor: colorByRole.selection
  },
  '.cm-selectionMatch': {
    backgroundColor: colors.offWhite
  },
  '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
    outline: "1px solid ".concat(colors.grey)
  },
  '&.cm-focused .cm-matchingBracket': {
    backgroundColor: colors.snowWhite
  },
  '.cm-gutters': {
    backgroundColor: '#f3f7fe',
    color: '#52668d',
    border: 'none',
    padding: '0 5px'
  },
  '.cm-activeLineGutter': {
    backgroundColor: colorByRole.selection
  },
  '.cm-foldPlaceholder': {
    backgroundColor: 'transparent',
    border: 'none',
    color: '#ddd'
  },
  '.cm-tooltip': {
    border: 'none',
    backgroundColor: colorByRole.tooltipBackground
  },
  '.cm-tooltip .cm-tooltip-arrow:before': {
    borderTopColor: 'transparent',
    borderBottomColor: 'transparent'
  },
  '.cm-tooltip .cm-tooltip-arrow:after': {
    borderTopColor: colorByRole.tooltipBackground,
    borderBottomColor: colorByRole.tooltipBackground
  },
  '.cm-tooltip-autocomplete': {
    '& > ul > li[aria-selected]': {
      backgroundColor: colorByRole.darkBackground,
      color: colors.midGrey
    }
  },
  '& .cm-lintRange.cm-lintRange-warning::after': {
    backgroundImage: "url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='".concat(_urlify(colorByRole.warning), "' fill='none' stroke-width='1.2'/></svg>\")")
  },
  '& .cm-lintRange.cm-lintRange-error::after': {
    backgroundImage: "url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='".concat(_urlify(colorByRole.error), "' fill='none' stroke-width='1.2'/></svg>\")")
  },
  '& .cm-diagnostic-warning': {
    border: "1px solid ".concat(colorByRole.warning),
    borderLeft: "5px solid ".concat(colorByRole.warning),
    background: colorByRole.lightBackground
  },
  '& .cm-diagnostic-error': {
    border: "1px solid ".concat(colorByRole.error),
    borderLeft: "5px solid ".concat(colorByRole.error),
    background: colorByRole.lightBackground
  },
  '& .cm-diagnostic': {
    padding: '3px 8px'
  }
}, {
  dark: false
});
var highlightStyle$1 = (0, _language.syntaxHighlighting)(_language.HighlightStyle.define([{
  tag: [_highlight.tags.macroName, _highlight.tags.variableName],
  color: colors.waterBlue
}, {
  tag: [_highlight.tags.special(_highlight.tags.bracket)],
  color: colors.waterBlue,
  fontWeight: 'bold'
}, {
  tag: [_highlight.tags.color, _highlight.tags.name, _highlight.tags.definition(_highlight.tags.name), _highlight.tags.constant(_highlight.tags.name), _highlight.tags.standard(_highlight.tags.name), _highlight.tags.propertyName],
  color: colors.deepBlue
}, {
  tag: [_highlight.tags.definition(_highlight.tags.variableName), _highlight.tags["function"](_highlight.tags.variableName), _highlight.tags["function"](_highlight.tags.propertyName)],
  color: colors.brightBlue
}, {
  tag: [_highlight.tags.labelName],
  color: colors.orangeBrown
}, {
  tag: [_highlight.tags.annotation],
  color: colorByRole.invalid
}, {
  tag: [_highlight.tags.number, _highlight.tags.changed, _highlight.tags.annotation, _highlight.tags.modifier, _highlight.tags.self, _highlight.tags.namespace, _highlight.tags.atom, _highlight.tags.bool, _highlight.tags.special(_highlight.tags.variableName)],
  color: colors.red
}, {
  tag: [_highlight.tags.typeName, _highlight.tags.className, _highlight.tags.attributeName],
  color: colors.lila
}, {
  tag: [_highlight.tags.operator, _highlight.tags.operatorKeyword, _highlight.tags.tagName, _highlight.tags.keyword],
  color: colors.purple
}, {
  tag: [_highlight.tags.angleBracket, _highlight.tags.squareBracket, _highlight.tags.brace, _highlight.tags.separator, _highlight.tags.punctuation],
  color: colors.midGrey
}, {
  tag: [_highlight.tags.regexp],
  color: colors.deepBlue
}, {
  tag: [_highlight.tags.quote],
  color: colors.darkGrey
}, {
  tag: [_highlight.tags.string, _highlight.tags.character, _highlight.tags.deleted],
  color: colors.orangeBrown
}, {
  tag: _highlight.tags.link,
  color: colors.mossGreen,
  textDecoration: 'underline',
  textUnderlinePosition: 'under'
}, {
  tag: [_highlight.tags.url, _highlight.tags.escape, _highlight.tags.special(_highlight.tags.string)],
  color: colors.red
}, {
  tag: [_highlight.tags.meta],
  color: colors.iceBlue
}, {
  tag: [_highlight.tags.comment],
  color: colors.midGrey,
  fontStyle: 'italic'
}, {
  tag: _highlight.tags.strong,
  fontWeight: 'bold',
  color: colors.deepBlue
}, {
  tag: _highlight.tags.emphasis,
  fontStyle: 'italic',
  color: colors.deepBlue
}, {
  tag: _highlight.tags.strikethrough,
  textDecoration: 'line-through'
}, {
  tag: _highlight.tags.heading,
  fontWeight: 'bold',
  color: colors.midGray
}, {
  tag: _highlight.tags.special(_highlight.tags.heading1),
  fontWeight: 'bold',
  color: colors.darkGrey
}, {
  tag: [_highlight.tags.heading1, _highlight.tags.heading2, _highlight.tags.heading3, _highlight.tags.heading4],
  fontWeight: 'bold',
  color: colors.midGrey
}, {
  tag: [_highlight.tags.heading5, _highlight.tags.heading6, _highlight.tags.processingInstruction, _highlight.tags.inserted],
  color: colors.grey
}, {
  tag: [_highlight.tags.contentSeparator],
  color: colors.yellow
}, {
  tag: _highlight.tags.invalid,
  color: colors.midGrey,
  borderBottom: "1px dotted ".concat(colorByRole.invalid)
}]));
var bpmnioLight = [theme$1, highlightStyle$1];
var ivory = '#abb2bf',
  peach = '#f07178',
  stone = '#7d8799',
  invalid = '#ffffff',
  pastelYellow = '#fffce1',
  pastelOrange = '#ec9e6f',
  raisinBlack = '#21252b',
  highlightBackground = 'rgba(0, 0, 0, 0.5)',
  background = '#292d3e',
  tooltipBackground = '#353a42',
  selection = 'rgba(128, 203, 196, 0.2)',
  cursor = '#ffcc00';
var urlHash = '%23';
var warningColorHex = 'fff890';
var errorColor = 'red';
var warningBackgroundColor = '#281e16';
var errorBackgroundColor = '#281616';
var theme = _view.EditorView.theme({
  '&': {
    color: '#ffffff',
    backgroundColor: background
  },
  '.cm-content': {
    caretColor: cursor
  },
  '&.cm-focused .cm-cursor': {
    borderLeftColor: cursor
  },
  '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {
    backgroundColor: selection
  },
  '.cm-panels': {
    backgroundColor: raisinBlack,
    color: '#ffffff'
  },
  '.cm-panels.cm-panels-top': {
    borderBottom: '2px solid black'
  },
  '.cm-panels.cm-panels-bottom': {
    borderTop: '2px solid black'
  },
  '.cm-searchMatch': {
    backgroundColor: '#72a1ff59',
    outline: '1px solid #457dff'
  },
  '.cm-searchMatch.cm-searchMatch-selected': {
    backgroundColor: '#6199ff2f'
  },
  '.cm-activeLine': {
    backgroundColor: highlightBackground
  },
  '.cm-selectionMatch': {
    backgroundColor: '#aafe661a'
  },
  '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
    backgroundColor: '#bad0f847',
    outline: '1px solid #515a6b'
  },
  '.cm-gutters': {
    background: '#292d3e',
    color: '#676e95',
    border: 'none',
    padding: '0 5px'
  },
  '.cm-activeLineGutter': {
    backgroundColor: highlightBackground
  },
  '.cm-foldPlaceholder': {
    backgroundColor: 'transparent',
    border: 'none',
    color: '#ddd'
  },
  '.cm-tooltip': {
    border: 'none',
    backgroundColor: tooltipBackground
  },
  '.cm-tooltip .cm-tooltip-arrow:before': {
    borderTopColor: 'transparent',
    borderBottomColor: 'transparent'
  },
  '.cm-tooltip .cm-tooltip-arrow:after': {
    borderTopColor: tooltipBackground,
    borderBottomColor: tooltipBackground
  },
  '.cm-tooltip-autocomplete': {
    '& > ul > li[aria-selected]': {
      backgroundColor: highlightBackground,
      color: ivory
    }
  },
  '& .cm-lintRange.cm-lintRange-warning::after': {
    backgroundImage: "url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='".concat(urlHash + warningColorHex, "' fill='none' stroke-width='1.2'/></svg>\")")
  },
  '& .cm-lintRange.cm-lintRange-error::after': {
    backgroundImage: "url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='".concat(errorColor, "' fill='none' stroke-width='1.2'/></svg>\")")
  },
  '& .cm-diagnostic-warning': {
    borderLeft: "5px solid #".concat(warningColorHex),
    background: warningBackgroundColor
  },
  '& .cm-diagnostic-error': {
    borderLeft: "5px solid ".concat(errorColor),
    background: errorBackgroundColor
  },
  '& .cm-diagnostic': {
    borderRadius: '2px',
    padding: '3px 8px'
  }
}, {
  dark: true
});
var highlightStyle = (0, _language.syntaxHighlighting)(_language.HighlightStyle.define([
// Markdown headings
{
  tag: _highlight.tags.heading1,
  color: pastelYellow
}, {
  tag: _highlight.tags.heading2,
  color: pastelYellow
}, {
  tag: _highlight.tags.heading3,
  color: pastelYellow
}, {
  tag: _highlight.tags.heading4,
  color: pastelYellow
}, {
  tag: _highlight.tags.heading5,
  color: pastelYellow
}, {
  tag: _highlight.tags.heading6,
  color: pastelYellow
},
// Feelers
{
  tag: _highlight.tags.special(_highlight.tags.bracket),
  color: pastelOrange,
  fontWeight: 'bold'
},
// Everything else
{
  tag: _highlight.tags.keyword,
  color: '#c792ea'
}, {
  tag: _highlight.tags.operator,
  color: '#89ddff'
}, {
  tag: _highlight.tags.special(_highlight.tags.variableName),
  color: '#eeffff'
}, {
  tag: _highlight.tags.typeName,
  color: '#f07178'
}, {
  tag: _highlight.tags.atom,
  color: '#f78c6c'
}, {
  tag: _highlight.tags.number,
  color: '#ff5370'
}, {
  tag: _highlight.tags.bool,
  color: '#ff5370'
}, {
  tag: _highlight.tags.definition(_highlight.tags.variableName),
  color: '#82aaff'
}, {
  tag: _highlight.tags.string,
  color: '#c3e88d'
}, {
  tag: _highlight.tags.comment,
  color: stone
}, {
  tag: _highlight.tags.tagName,
  color: '#ff5370'
}, {
  tag: _highlight.tags.bracket,
  color: '#a2a1a4'
}, {
  tag: _highlight.tags.meta,
  color: '#ffcb6b'
}, {
  tag: _highlight.tags.special(_highlight.tags.string),
  color: peach
}, {
  tag: _highlight.tags.propertyName,
  color: pastelOrange
}, {
  tag: _highlight.tags.variableName,
  color: pastelOrange
}, {
  tag: _highlight.tags.attributeName,
  color: peach
}, {
  tag: _highlight.tags.className,
  color: peach
}, {
  tag: _highlight.tags.invalid,
  color: invalid
}]));
var bpmnioDark = [theme, highlightStyle];
var lightTheme = [].concat(commonTheme, bpmnioLight);
exports.lightTheme = lightTheme;
var darkTheme = [].concat(commonTheme, bpmnioDark);
exports.darkTheme = darkTheme;

},{"@codemirror/language":18,"@codemirror/view":21,"@lezer/highlight":23}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSchemaPackage = getSchemaPackage;
exports.getSchemaVersion = getSchemaVersion;
exports.getZeebeSchemaPackage = getZeebeSchemaPackage;
exports.getZeebeSchemaVersion = getZeebeSchemaVersion;
exports.validate = validate;
exports.validateAll = validateAll;
exports.validateAllZeebe = validateAllZeebe;
exports.validateZeebe = validateZeebe;
var _minDash = require("min-dash");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var name$1 = "@camunda/element-templates-json-schema";
var version$1 = "0.12.1";
var standaloneValidator = {
  exports: {}
};
var equal = {
  exports: {}
};

// do not edit .js files directly - edit src/index.jst

var fastDeepEqual = function equal(a, b) {
  if (a === b) return true;
  if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;
      return true;
    }
    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;
    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    for (i = length; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }
    return true;
  }

  // true if both NaN, false otherwise
  return a !== a && b !== b;
};
(function (module) {
  // do NOT remove this file - it would break pre-compiled schemas
  // https://github.com/ajv-validator/ajv/issues/889
  module.exports = fastDeepEqual;
})(equal);
standaloneValidator.exports = validate14$1;
standaloneValidator.exports["default"] = validate14$1;
var schema17$1 = {
  "type": "object",
  "allOf": [{
    "required": ["name", "id", "appliesTo", "properties"],
    "properties": {
      "name": {
        "$id": "#/name",
        "type": "string",
        "description": "The name of the element template."
      },
      "id": {
        "$id": "#/id",
        "type": "string",
        "description": "The identifier of the element template."
      },
      "description": {
        "$id": "#/description",
        "type": "string",
        "description": "The description of the element template."
      },
      "version": {
        "$id": "#/version",
        "type": "integer",
        "description": "Optional version of the template. If you add a version to a template it will be considered unique based on its ID and version. Two templates can have the same ID if their version is different."
      },
      "isDefault": {
        "$id": "#/isDefault",
        "type": "boolean",
        "description": "Indicates whether the element template is a default template."
      },
      "appliesTo": {
        "$id": "#/appliesTo",
        "type": "array",
        "description": "List of BPMN types the template can be applied to.",
        "default": [],
        "items": {
          "$id": "#/appliesTo/items",
          "type": "string",
          "pattern": "^[\\w\\d]+:[\\w\\d]+$",
          "allOf": [{
            "examples": ["bpmn:Task", "bpmn:ServiceTask", "bpmn:SequenceFlow", "bpmn:Process", "bpmn:StartEvent", "bpmn:Gateway"]
          }],
          "errorMessage": {
            "pattern": "invalid item for \"appliesTo\", should contain namespaced property, example: \"bpmn:Task\""
          }
        }
      },
      "elementType": {
        "$id": "#/elementType",
        "type": "object",
        "description": "The BPMN type the element will be transformed into.",
        "default": {},
        "required": ["value"],
        "properties": {
          "value": {
            "$id": "#/elementType/value",
            "type": "string",
            "pattern": "^[\\w\\d]+:[\\w\\d]+$",
            "allOf": [{
              "examples": ["bpmn:ServiceTask", "bpmn:UserTask", "bpmn:StartEvent", "bpmn:ExclusiveGateway", "bpmn:ParallelGateway"]
            }],
            "errorMessage": {
              "pattern": "invalid item for \"elementType\", should contain namespaced property, example: \"bpmn:Task\""
            }
          }
        },
        "errorMessage": {
          "required": {
            "value": "missing elementType value"
          }
        }
      },
      "metadata": {
        "$id": "#/metadata",
        "type": "object",
        "description": "Some custom properties for further configuration.",
        "default": {}
      },
      "entriesVisible": {
        "$id": "#/entriesVisible",
        "type": "boolean",
        "description": "Select whether non-template entries are visible in the properties panel."
      },
      "groups": {
        "$id": "#/groups",
        "type": "array",
        "description": "Custom fields can be ordered together via groups.",
        "allOf": [{
          "examples": [[{
            "id": "group-1",
            "label": "My Group"
          }]]
        }],
        "items": {
          "$id": "#/groups/group",
          "type": "object",
          "default": {},
          "required": ["id", "label"],
          "properties": {
            "id": {
              "$id": "#/groups/group/id",
              "type": "string",
              "description": "The id of the custom group"
            },
            "label": {
              "$id": "#/groups/group/label",
              "type": "string",
              "description": "The label of the custom group"
            }
          },
          "errorMessage": {
            "required": {
              "id": "missing id for group \"${0#}\"",
              "label": "missing label for group \"${0#}\""
            }
          }
        }
      },
      "documentationRef": {
        "$id": "#/documentationRef",
        "type": "string",
        "pattern": "^(https|http)://.*",
        "errorMessage": {
          "pattern": "Malformed documentation URL, must match \"^(https|http)://.*\""
        }
      }
    },
    "errorMessage": {
      "required": {
        "name": "missing template name",
        "id": "missing template id",
        "appliesTo": "missing appliesTo=[]",
        "properties": "missing properties=[]"
      }
    }
  }],
  "properties": {
    "properties": {
      "$ref": "#/definitions/properties",
      "$id": "#/properties"
    },
    "scopes": {
      "$id": "#/scopes",
      "type": "array",
      "description": "Special scoped bindings that allow you to configure nested elements.",
      "allOf": [{
        "examples": [[{
          "type": "bpmn:Error",
          "id": "Error_1",
          "properties": [{
            "value": "error-code",
            "binding": {
              "type": "property",
              "name": "errorCode"
            }
          }, {
            "value": "error-message",
            "binding": {
              "type": "property",
              "name": "camunda:errorMessage"
            }
          }, {
            "value": "error-name",
            "binding": {
              "type": "property",
              "name": "name"
            }
          }]
        }]]
      }],
      "items": {
        "$id": "#/scopes/item",
        "type": "object",
        "default": {},
        "properties": {
          "type": {
            "$id": "#scopes/item/type",
            "type": "string",
            "description": "The type of a scope.",
            "enum": ["camunda:Connector", "bpmn:Error"],
            "errorMessage": "invalid scope type ${0}; must be any of { camunda:Connector, bpmn:Error }"
          },
          "properties": {
            "$id": "#/scopes/properties",
            "description": "List of properties of a scope.",
            "default": [],
            "allOf": [{
              "$ref": "#/definitions/properties/allOf/0"
            }, {
              "$ref": "#/definitions/properties/allOf/1"
            }]
          }
        },
        "required": ["type", "properties"],
        "allOf": [{
          "if": {
            "properties": {
              "type": {
                "enum": ["bpmn:Error"]
              }
            },
            "required": ["type"]
          },
          "then": {
            "required": ["id"],
            "errorMessage": "invalid scope ${0/type}, missing id"
          }
        }],
        "errorMessage": {
          "required": {
            "type": "invalid scope, missing type",
            "properties": "invalid scope ${0/type}, missing properties=[]"
          }
        }
      }
    }
  }
};
var schema24 = {
  "$schema": "http://json-schema.org/draft-07/schema",
  "type": "array",
  "description": "List of properties of the element template.",
  "items": {
    "type": "object",
    "default": {},
    "required": ["binding"],
    "allOf": [{
      "if": {
        "properties": {
          "binding": {
            "properties": {
              "type": {
                "const": "property"
              }
            },
            "required": ["type"]
          }
        },
        "required": ["binding"]
      },
      "then": {
        "properties": {
          "type": {
            "enum": ["String", "Text", "Hidden", "Dropdown", "Boolean"],
            "errorMessage": "invalid property type ${0} for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
          }
        }
      }
    }, {
      "if": {
        "properties": {
          "binding": {
            "properties": {
              "type": {
                "const": "camunda:executionListener"
              }
            },
            "required": ["type"]
          }
        },
        "required": ["binding"]
      },
      "then": {
        "properties": {
          "type": {
            "enum": ["Hidden"],
            "errorMessage": "invalid property type ${1/type} for binding type \"camunda:executionListener\"; must be \"Hidden\""
          }
        }
      }
    }, {
      "if": {
        "properties": {
          "binding": {
            "properties": {
              "type": {
                "enum": ["camunda:property", "camunda:outputParameter", "camunda:in", "camunda:in:businessKey", "camunda:out", "camunda:errorEventDefinition"]
              }
            },
            "required": ["type"]
          }
        },
        "required": ["binding"]
      },
      "then": {
        "properties": {
          "type": {
            "enum": ["String", "Hidden", "Dropdown"],
            "errorMessage": "invalid property type ${0} for binding type ${1/binding/type}; must be any of { String, Hidden, Dropdown }"
          }
        }
      }
    }, {
      "if": {
        "properties": {
          "binding": {
            "properties": {
              "type": {
                "enum": ["camunda:inputParameter", "camunda:field"]
              }
            },
            "required": ["type"]
          }
        },
        "required": ["binding"]
      },
      "then": {
        "properties": {
          "type": {
            "enum": ["String", "Text", "Hidden", "Dropdown"],
            "errorMessage": "invalid property type ${0} for binding type ${1/binding/type}; must be any of { String, Text, Hidden, Dropdown }"
          }
        }
      }
    }],
    "properties": {
      "binding": {
        "$id": "#/properties/property/binding",
        "type": "object",
        "description": "Specifying how the property is mapped to BPMN or Camunda extension elements and attributes.",
        "required": ["type"],
        "allOf": [{
          "if": {
            "properties": {
              "type": {
                "enum": ["property", "camunda:property", "camunda:inputParameter", "camunda:field"]
              }
            },
            "required": ["type"]
          },
          "then": {
            "required": ["name"],
            "errorMessage": "property.binding ${0/type} requires name"
          }
        }, {
          "if": {
            "properties": {
              "type": {
                "const": "camunda:outputParameter"
              }
            },
            "required": ["type"]
          },
          "then": {
            "required": ["source"],
            "errorMessage": "property.binding ${0/type} requires source"
          }
        }, {
          "if": {
            "properties": {
              "type": {
                "const": "camunda:in"
              }
            },
            "required": ["type"]
          },
          "then": {
            "anyOf": [{
              "required": ["variables"]
            }, {
              "required": ["target"]
            }],
            "errorMessage": "property.binding ${0/type} requires variables, target, or both"
          }
        }, {
          "if": {
            "properties": {
              "type": {
                "const": "camunda:out"
              }
            },
            "required": ["type"]
          },
          "then": {
            "oneOf": [{
              "required": ["variables"],
              "not": {
                "anyOf": [{
                  "required": ["source"]
                }, {
                  "required": ["sourceExpression"]
                }]
              }
            }, {
              "required": ["source"],
              "not": {
                "anyOf": [{
                  "required": ["variables"]
                }, {
                  "required": ["sourceExpression"]
                }]
              }
            }, {
              "required": ["sourceExpression"],
              "not": {
                "anyOf": [{
                  "required": ["variables"]
                }, {
                  "required": ["source"]
                }]
              }
            }, {
              "required": ["variables", "sourceExpression"],
              "not": {
                "required": ["source"]
              }
            }, {
              "required": ["variables", "source"],
              "not": {
                "required": ["sourceExpression"]
              }
            }],
            "errorMessage": "property.binding ${0/type} requires one of the following: variables, sourceExpression, source, (sourceExpression and variables), or (source and variables)"
          }
        }, {
          "if": {
            "properties": {
              "type": {
                "const": "camunda:errorEventDefinition"
              }
            },
            "required": ["type"]
          },
          "then": {
            "oneOf": [{
              "required": ["errorRef"]
            }],
            "errorMessage": "property.binding ${0/type} requires errorRef"
          }
        }, {
          "examples": [{
            "type": "property",
            "name": "name"
          }, {
            "type": "camunda:property",
            "name": "property"
          }, {
            "type": "camunda:inputParameter",
            "name": "input"
          }, {
            "type": "camunda:outputParameter",
            "source": "output"
          }, {
            "type": "camunda:in",
            "target": "target"
          }, {
            "type": "camunda:in:businessKey"
          }, {
            "type": "camunda:out",
            "source": "output"
          }, {
            "type": "camunda:executionListener",
            "event": "start"
          }, {
            "type": "camunda:field",
            "name": "field"
          }, {
            "type": "camunda:errorEventDefinition",
            "errorRef": "error"
          }, {
            "type": "camunda:errorEventDefinition",
            "errorRef": "error"
          }]
        }],
        "properties": {
          "type": {
            "$id": "#/properties/property/binding/type",
            "type": "string",
            "enum": ["property", "camunda:property", "camunda:inputParameter", "camunda:outputParameter", "camunda:in", "camunda:out", "camunda:in:businessKey", "camunda:executionListener", "camunda:field", "camunda:errorEventDefinition"],
            "description": "The type of a property binding.",
            "errorMessage": "invalid property.binding type ${0}; must be any of { property, camunda:property, camunda:inputParameter, camunda:outputParameter, camunda:in, camunda:out, camunda:in:businessKey, camunda:executionListener, camunda:field, camunda:errorEventDefinition }"
          },
          "name": {
            "$id": "#/properties/property/binding/name",
            "type": "string",
            "description": "The name of a property binding."
          },
          "event": {
            "$id": "#/properties/property/binding/event",
            "type": "string",
            "description": "The event type of a property binding (camunda:executionListener)."
          },
          "scriptFormat": {
            "$id": "#/properties/property/binding/scriptFormat",
            "type": "string",
            "description": "The script format of a property binding (camunda:outputParameter, camunda:inputParameter)."
          },
          "source": {
            "$id": "#/properties/property/binding/source",
            "type": "string",
            "description": "The source value of a property binding (camunda:outputParameter, camunda:out)."
          },
          "target": {
            "$id": "#/properties/property/binding/target",
            "type": "string",
            "description": "The target value of a property binding (camunda:in)."
          },
          "expression": {
            "$id": "#/properties/property/binding/expression",
            "type": "boolean",
            "description": "Indicates whether the control field value is an expression (camunda:in, camunda:field)."
          },
          "variables": {
            "$id": "#/properties/property/binding/variables",
            "type": "string",
            "enum": ["all", "local"],
            "description": "The variable mapping of a property binding (camunda:in)."
          },
          "sourceExpression": {
            "$id": "#/properties/property/binding/sourceExpression",
            "type": "string",
            "description": "The string containing the expression for the source attribute (camunda:out)."
          }
        }
      }
    },
    "errorMessage": {
      "required": "missing binding for property \"${0#}\""
    }
  }
};
var pattern0$1 = new RegExp("^[\\w\\d]+:[\\w\\d]+$", "u");
var pattern2$1 = new RegExp("^(https|http)://.*", "u");
var obj0$1 = {
  "required": "missingProperty",
  "dependencies": "property",
  "dependentRequired": "property"
};
var schema18$1 = {
  "allOf": [{
    "type": "array",
    "description": "List of properties of the element template.",
    "allOf": [{
      "examples": [[{
        "label": "Name",
        "type": "String",
        "binding": {
          "type": "property",
          "name": "name"
        }
      }]]
    }],
    "items": {
      "type": "object",
      "default": {},
      "allOf": [{
        "if": {
          "properties": {
            "type": {
              "const": "Dropdown"
            }
          },
          "required": ["type"]
        },
        "then": {
          "required": ["choices"],
          "errorMessage": "must provide choices=[] with \"Dropdown\" type"
        }
      }],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the property."
        },
        "value": {
          "$id": "#/properties/property/value",
          "type": ["string", "boolean"],
          "description": "The value of a control field."
        },
        "description": {
          "$id": "#/properties/property/description",
          "type": "string",
          "description": "The description of a control field."
        },
        "label": {
          "$id": "#/properties/property/label",
          "type": "string",
          "description": "The label of a control field."
        },
        "type": {
          "$id": "#/properties/property/type",
          "type": "string",
          "description": "The type of a control field."
        },
        "editable": {
          "$id": "#/properties/property/editable",
          "type": "boolean",
          "description": "Indicates whether a control field is editable or not."
        },
        "choices": {
          "$id": "#/properties/property/choices",
          "type": "array",
          "description": "The choices for dropdown fields.",
          "default": [],
          "items": {
            "$id": "#/properties/property/choices/item",
            "type": "object",
            "default": {},
            "properties": {
              "name": {
                "$id": "#/properties/property/choices/item/name",
                "type": "string",
                "description": "The name of a choice."
              },
              "value": {
                "$id": "#/properties/property/choices/item/value",
                "type": "string",
                "description": "The value of a choice."
              }
            },
            "required": ["value", "name"],
            "errorMessage": {
              "required": "{ name, value } must be specified for \"Dropdown\" choices"
            }
          }
        },
        "constraints": {
          "$id": "#/properties/property/constraints",
          "type": "object",
          "description": "The validation constraints of a control field.",
          "allOf": [{
            "examples": [{
              "notEmpty": true
            }]
          }],
          "properties": {
            "notEmpty": {
              "$id": "#/properties/property/constraints/notEmpty",
              "type": "boolean",
              "description": "The control field must not be empty."
            },
            "minLength": {
              "$id": "#/properties/property/constraints/minLength",
              "type": "number",
              "description": "The minimal length of a control field value."
            },
            "maxLength": {
              "$id": "#/properties/property/constraints/maxLength",
              "type": "number",
              "description": "The maximal length for a control field value."
            },
            "pattern": {
              "$id": "#/properties/property/constraints/pattern",
              "description": "A regular expression pattern for a constraint.",
              "oneOf": [{
                "type": "object",
                "default": {},
                "properties": {
                  "value": {
                    "$id": "#/properties/property/constraints/pattern/value",
                    "type": "string",
                    "description": "The regular expression of a pattern."
                  },
                  "message": {
                    "$id": "#/properties/property/constraints/pattern/message",
                    "type": "string",
                    "description": "The validation message of a pattern."
                  }
                }
              }, {
                "type": "string"
              }]
            }
          }
        },
        "group": {
          "$id": "#/properties/property/group",
          "type": "string",
          "description": "The custom group of a control field."
        },
        "condition": {
          "$id": "#/condition",
          "type": "object",
          "description": "Condition(s) to activate the binding.",
          "allOf": [{
            "examples": [{
              "type": "simple",
              "property": "httpMethod",
              "equals": "GET"
            }, {
              "type": "simple",
              "property": "httpMethod",
              "oneOf": ["POST", "PUT", "DELETE"]
            }, {
              "allMatch": [{
                "type": "simple",
                "property": "authType",
                "equals": "Basic"
              }, {
                "type": "simple",
                "property": "httpMethod",
                "oneOf": ["POST", "PUT", "DELETE"]
              }]
            }]
          }],
          "definitions": {
            "condition": {
              "type": "object",
              "required": ["property"],
              "properties": {
                "type": {
                  "$id": "#/condition/type",
                  "const": "simple",
                  "description": "The type of the condition.",
                  "default": "simple"
                },
                "property": {
                  "$id": "#/condition/property",
                  "type": "string",
                  "description": "The id of the property to check."
                }
              },
              "oneOf": [{
                "properties": {
                  "equals": {
                    "type": ["string", "number", "boolean"]
                  }
                },
                "required": ["equals"]
              }, {
                "properties": {
                  "oneOf": {
                    "type": "array",
                    "items": {
                      "type": ["string", "number"]
                    }
                  }
                },
                "required": ["oneOf"]
              }],
              "errorMessage": {
                "required": {
                  "property": "missing property name for condition"
                }
              }
            }
          },
          "oneOf": [{
            "$ref": "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition"
          }, {
            "properties": {
              "allMatch": {
                "$id": "#/allMatch",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition"
                },
                "minItems": 1
              }
            },
            "required": ["allMatch"]
          }]
        }
      }
    }
  }, {
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "array",
    "description": "List of properties of the element template.",
    "items": {
      "type": "object",
      "default": {},
      "required": ["binding"],
      "allOf": [{
        "if": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "const": "property"
                }
              },
              "required": ["type"]
            }
          },
          "required": ["binding"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["String", "Text", "Hidden", "Dropdown", "Boolean"],
              "errorMessage": "invalid property type ${0} for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "const": "camunda:executionListener"
                }
              },
              "required": ["type"]
            }
          },
          "required": ["binding"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["Hidden"],
              "errorMessage": "invalid property type ${1/type} for binding type \"camunda:executionListener\"; must be \"Hidden\""
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "enum": ["camunda:property", "camunda:outputParameter", "camunda:in", "camunda:in:businessKey", "camunda:out", "camunda:errorEventDefinition"]
                }
              },
              "required": ["type"]
            }
          },
          "required": ["binding"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["String", "Hidden", "Dropdown"],
              "errorMessage": "invalid property type ${0} for binding type ${1/binding/type}; must be any of { String, Hidden, Dropdown }"
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "enum": ["camunda:inputParameter", "camunda:field"]
                }
              },
              "required": ["type"]
            }
          },
          "required": ["binding"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["String", "Text", "Hidden", "Dropdown"],
              "errorMessage": "invalid property type ${0} for binding type ${1/binding/type}; must be any of { String, Text, Hidden, Dropdown }"
            }
          }
        }
      }],
      "properties": {
        "binding": {
          "$id": "#/properties/property/binding",
          "type": "object",
          "description": "Specifying how the property is mapped to BPMN or Camunda extension elements and attributes.",
          "required": ["type"],
          "allOf": [{
            "if": {
              "properties": {
                "type": {
                  "enum": ["property", "camunda:property", "camunda:inputParameter", "camunda:field"]
                }
              },
              "required": ["type"]
            },
            "then": {
              "required": ["name"],
              "errorMessage": "property.binding ${0/type} requires name"
            }
          }, {
            "if": {
              "properties": {
                "type": {
                  "const": "camunda:outputParameter"
                }
              },
              "required": ["type"]
            },
            "then": {
              "required": ["source"],
              "errorMessage": "property.binding ${0/type} requires source"
            }
          }, {
            "if": {
              "properties": {
                "type": {
                  "const": "camunda:in"
                }
              },
              "required": ["type"]
            },
            "then": {
              "anyOf": [{
                "required": ["variables"]
              }, {
                "required": ["target"]
              }],
              "errorMessage": "property.binding ${0/type} requires variables, target, or both"
            }
          }, {
            "if": {
              "properties": {
                "type": {
                  "const": "camunda:out"
                }
              },
              "required": ["type"]
            },
            "then": {
              "oneOf": [{
                "required": ["variables"],
                "not": {
                  "anyOf": [{
                    "required": ["source"]
                  }, {
                    "required": ["sourceExpression"]
                  }]
                }
              }, {
                "required": ["source"],
                "not": {
                  "anyOf": [{
                    "required": ["variables"]
                  }, {
                    "required": ["sourceExpression"]
                  }]
                }
              }, {
                "required": ["sourceExpression"],
                "not": {
                  "anyOf": [{
                    "required": ["variables"]
                  }, {
                    "required": ["source"]
                  }]
                }
              }, {
                "required": ["variables", "sourceExpression"],
                "not": {
                  "required": ["source"]
                }
              }, {
                "required": ["variables", "source"],
                "not": {
                  "required": ["sourceExpression"]
                }
              }],
              "errorMessage": "property.binding ${0/type} requires one of the following: variables, sourceExpression, source, (sourceExpression and variables), or (source and variables)"
            }
          }, {
            "if": {
              "properties": {
                "type": {
                  "const": "camunda:errorEventDefinition"
                }
              },
              "required": ["type"]
            },
            "then": {
              "oneOf": [{
                "required": ["errorRef"]
              }],
              "errorMessage": "property.binding ${0/type} requires errorRef"
            }
          }, {
            "examples": [{
              "type": "property",
              "name": "name"
            }, {
              "type": "camunda:property",
              "name": "property"
            }, {
              "type": "camunda:inputParameter",
              "name": "input"
            }, {
              "type": "camunda:outputParameter",
              "source": "output"
            }, {
              "type": "camunda:in",
              "target": "target"
            }, {
              "type": "camunda:in:businessKey"
            }, {
              "type": "camunda:out",
              "source": "output"
            }, {
              "type": "camunda:executionListener",
              "event": "start"
            }, {
              "type": "camunda:field",
              "name": "field"
            }, {
              "type": "camunda:errorEventDefinition",
              "errorRef": "error"
            }, {
              "type": "camunda:errorEventDefinition",
              "errorRef": "error"
            }]
          }],
          "properties": {
            "type": {
              "$id": "#/properties/property/binding/type",
              "type": "string",
              "enum": ["property", "camunda:property", "camunda:inputParameter", "camunda:outputParameter", "camunda:in", "camunda:out", "camunda:in:businessKey", "camunda:executionListener", "camunda:field", "camunda:errorEventDefinition"],
              "description": "The type of a property binding.",
              "errorMessage": "invalid property.binding type ${0}; must be any of { property, camunda:property, camunda:inputParameter, camunda:outputParameter, camunda:in, camunda:out, camunda:in:businessKey, camunda:executionListener, camunda:field, camunda:errorEventDefinition }"
            },
            "name": {
              "$id": "#/properties/property/binding/name",
              "type": "string",
              "description": "The name of a property binding."
            },
            "event": {
              "$id": "#/properties/property/binding/event",
              "type": "string",
              "description": "The event type of a property binding (camunda:executionListener)."
            },
            "scriptFormat": {
              "$id": "#/properties/property/binding/scriptFormat",
              "type": "string",
              "description": "The script format of a property binding (camunda:outputParameter, camunda:inputParameter)."
            },
            "source": {
              "$id": "#/properties/property/binding/source",
              "type": "string",
              "description": "The source value of a property binding (camunda:outputParameter, camunda:out)."
            },
            "target": {
              "$id": "#/properties/property/binding/target",
              "type": "string",
              "description": "The target value of a property binding (camunda:in)."
            },
            "expression": {
              "$id": "#/properties/property/binding/expression",
              "type": "boolean",
              "description": "Indicates whether the control field value is an expression (camunda:in, camunda:field)."
            },
            "variables": {
              "$id": "#/properties/property/binding/variables",
              "type": "string",
              "enum": ["all", "local"],
              "description": "The variable mapping of a property binding (camunda:in)."
            },
            "sourceExpression": {
              "$id": "#/properties/property/binding/sourceExpression",
              "type": "string",
              "description": "The string containing the expression for the source attribute (camunda:out)."
            }
          }
        }
      },
      "errorMessage": {
        "required": "missing binding for property \"${0#}\""
      }
    }
  }]
};
var schema19$1 = {
  "type": "object",
  "required": ["property"],
  "properties": {
    "type": {
      "$id": "#/condition/type",
      "const": "simple",
      "description": "The type of the condition.",
      "default": "simple"
    },
    "property": {
      "$id": "#/condition/property",
      "type": "string",
      "description": "The id of the property to check."
    }
  },
  "oneOf": [{
    "properties": {
      "equals": {
        "type": ["string", "number", "boolean"]
      }
    },
    "required": ["equals"]
  }, {
    "properties": {
      "oneOf": {
        "type": "array",
        "items": {
          "type": ["string", "number"]
        }
      }
    },
    "required": ["oneOf"]
  }],
  "errorMessage": {
    "required": {
      "property": "missing property name for condition"
    }
  }
};
var func0$1 = equal.exports;
function validate16$1(data) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref$dataPath = _ref.dataPath,
    dataPath = _ref$dataPath === void 0 ? "" : _ref$dataPath,
    parentData = _ref.parentData,
    parentDataProperty = _ref.parentDataProperty,
    _ref$rootData = _ref.rootData,
    rootData = _ref$rootData === void 0 ? data : _ref$rootData;
  var vErrors = null;
  var errors = 0;
  if (Array.isArray(data)) {
    var len0 = data.length;
    for (var i0 = 0; i0 < len0; i0++) {
      var data0 = data[i0];
      var _errs5 = errors;
      var valid5 = true;
      var _errs6 = errors;
      if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
        if (data0.type === undefined && "type") {
          var err0 = {};
          if (vErrors === null) {
            vErrors = [err0];
          } else {
            vErrors.push(err0);
          }
          errors++;
        } else {
          if (data0.type !== undefined) {
            if (!func0$1(data0.type, "Dropdown")) {
              var err1 = {};
              if (vErrors === null) {
                vErrors = [err1];
              } else {
                vErrors.push(err1);
              }
              errors++;
            }
          }
        }
      }
      var _valid0 = _errs6 === errors;
      errors = _errs5;
      if (vErrors !== null) {
        if (_errs5) {
          vErrors.length = _errs5;
        } else {
          vErrors = null;
        }
      }
      if (_valid0) {
        var _errs8 = errors;
        if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
          if (data0.choices === undefined) {
            var err2 = {
              keyword: "required",
              dataPath: dataPath + "/" + i0,
              schemaPath: "#/allOf/0/items/allOf/0/then/required",
              params: {
                missingProperty: "choices"
              },
              message: "should have required property '" + "choices" + "'"
            };
            if (vErrors === null) {
              vErrors = [err2];
            } else {
              vErrors.push(err2);
            }
            errors++;
          }
        }
        if (errors > 0) {
          var emErrs0 = [];
          var _iterator = _createForOfIteratorHelper(vErrors),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var err3 = _step.value;
              if (err3.keyword !== "errorMessage" && !err3.emUsed && (err3.dataPath === dataPath + "/" + i0 || err3.dataPath.indexOf(dataPath + "/" + i0) === 0 && err3.dataPath[dataPath + "/" + i0.length] === "/") && err3.schemaPath.indexOf("#/allOf/0/items/allOf/0/then") === 0 && err3.schemaPath["#/allOf/0/items/allOf/0/then".length] === "/") {
                emErrs0.push(err3);
                err3.emUsed = true;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          if (emErrs0.length) {
            var err4 = {
              keyword: "errorMessage",
              dataPath: dataPath + "/" + i0,
              schemaPath: "#/allOf/0/items/allOf/0/then/errorMessage",
              params: {
                errors: emErrs0
              },
              message: "must provide choices=[] with \"Dropdown\" type"
            };
            if (vErrors === null) {
              vErrors = [err4];
            } else {
              vErrors.push(err4);
            }
            errors++;
          }
          var emErrs1 = [];
          var _iterator2 = _createForOfIteratorHelper(vErrors),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var err5 = _step2.value;
              if (!err5.emUsed) {
                emErrs1.push(err5);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          vErrors = emErrs1;
          errors = emErrs1.length;
        }
        var _valid0 = _errs8 === errors;
        valid5 = _valid0;
      }
      if (!valid5) {
        var err6 = {
          keyword: "if",
          dataPath: dataPath + "/" + i0,
          schemaPath: "#/allOf/0/items/allOf/0/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }
        errors++;
      }
      if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
        if (data0.id !== undefined) {
          if (typeof data0.id !== "string") {
            var err7 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/id",
              schemaPath: "#/allOf/0/items/properties/id/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err7];
            } else {
              vErrors.push(err7);
            }
            errors++;
          }
        }
        if (data0.value !== undefined) {
          var data3 = data0.value;
          if (typeof data3 !== "string" && typeof data3 !== "boolean") {
            var err8 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/value",
              schemaPath: "#/allOf/0/items/properties/value/type",
              params: {
                type: schema18$1.allOf[0].items.properties.value.type
              },
              message: "should be string,boolean"
            };
            if (vErrors === null) {
              vErrors = [err8];
            } else {
              vErrors.push(err8);
            }
            errors++;
          }
        }
        if (data0.description !== undefined) {
          if (typeof data0.description !== "string") {
            var err9 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/description",
              schemaPath: "#/allOf/0/items/properties/description/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err9];
            } else {
              vErrors.push(err9);
            }
            errors++;
          }
        }
        if (data0.label !== undefined) {
          if (typeof data0.label !== "string") {
            var err10 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/label",
              schemaPath: "#/allOf/0/items/properties/label/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err10];
            } else {
              vErrors.push(err10);
            }
            errors++;
          }
        }
        if (data0.type !== undefined) {
          if (typeof data0.type !== "string") {
            var err11 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/type",
              schemaPath: "#/allOf/0/items/properties/type/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err11];
            } else {
              vErrors.push(err11);
            }
            errors++;
          }
        }
        if (data0.editable !== undefined) {
          if (typeof data0.editable !== "boolean") {
            var err12 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/editable",
              schemaPath: "#/allOf/0/items/properties/editable/type",
              params: {
                type: "boolean"
              },
              message: "should be boolean"
            };
            if (vErrors === null) {
              vErrors = [err12];
            } else {
              vErrors.push(err12);
            }
            errors++;
          }
        }
        if (data0.choices !== undefined) {
          var data8 = data0.choices;
          if (Array.isArray(data8)) {
            var len1 = data8.length;
            for (var i1 = 0; i1 < len1; i1++) {
              var data9 = data8[i1];
              if (data9 && _typeof(data9) == "object" && !Array.isArray(data9)) {
                if (data9.value === undefined) {
                  var err13 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                    schemaPath: "#/allOf/0/items/properties/choices/items/required",
                    params: {
                      missingProperty: "value"
                    },
                    message: "should have required property '" + "value" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err13];
                  } else {
                    vErrors.push(err13);
                  }
                  errors++;
                }
                if (data9.name === undefined) {
                  var err14 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                    schemaPath: "#/allOf/0/items/properties/choices/items/required",
                    params: {
                      missingProperty: "name"
                    },
                    message: "should have required property '" + "name" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err14];
                  } else {
                    vErrors.push(err14);
                  }
                  errors++;
                }
                if (data9.name !== undefined) {
                  if (typeof data9.name !== "string") {
                    var err15 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1 + "/name",
                      schemaPath: "#/allOf/0/items/properties/choices/items/properties/name/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err15];
                    } else {
                      vErrors.push(err15);
                    }
                    errors++;
                  }
                }
                if (data9.value !== undefined) {
                  if (typeof data9.value !== "string") {
                    var err16 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1 + "/value",
                      schemaPath: "#/allOf/0/items/properties/choices/items/properties/value/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err16];
                    } else {
                      vErrors.push(err16);
                    }
                    errors++;
                  }
                }
              } else {
                var err17 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                  schemaPath: "#/allOf/0/items/properties/choices/items/type",
                  params: {
                    type: "object"
                  },
                  message: "should be object"
                };
                if (vErrors === null) {
                  vErrors = [err17];
                } else {
                  vErrors.push(err17);
                }
                errors++;
              }
              if (errors > 0) {
                var emErrors0 = {
                  "required": []
                };
                var templates0 = {};
                var _iterator3 = _createForOfIteratorHelper(vErrors),
                  _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var err18 = _step3.value;
                    if (err18.keyword !== "errorMessage" && !err18.emUsed && err18.dataPath === dataPath + "/" + i0 + "/choices/" + i1 && err18.keyword in emErrors0 && err18.schemaPath.indexOf("#/allOf/0/items/properties/choices/items") === 0 && /^\/[^\/]*$/.test(err18.schemaPath.slice(40))) {
                      emErrors0[err18.keyword].push(err18);
                      err18.emUsed = true;
                    }
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
                for (var key0 in emErrors0) {
                  if (emErrors0[key0].length) {
                    var err19 = {
                      keyword: "errorMessage",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                      schemaPath: "#/allOf/0/items/properties/choices/items/errorMessage",
                      params: {
                        errors: emErrors0[key0]
                      },
                      message: key0 in templates0 ? templates0[key0]() : schema18$1.allOf[0].items.properties.choices.items.errorMessage[key0]
                    };
                    if (vErrors === null) {
                      vErrors = [err19];
                    } else {
                      vErrors.push(err19);
                    }
                    errors++;
                  }
                }
                var emErrs2 = [];
                var _iterator4 = _createForOfIteratorHelper(vErrors),
                  _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var err20 = _step4.value;
                    if (!err20.emUsed) {
                      emErrs2.push(err20);
                    }
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
                vErrors = emErrs2;
                errors = emErrs2.length;
              }
            }
          } else {
            var err21 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/choices",
              schemaPath: "#/allOf/0/items/properties/choices/type",
              params: {
                type: "array"
              },
              message: "should be array"
            };
            if (vErrors === null) {
              vErrors = [err21];
            } else {
              vErrors.push(err21);
            }
            errors++;
          }
        }
        if (data0.constraints !== undefined) {
          var data12 = data0.constraints;
          if (data12 && _typeof(data12) == "object" && !Array.isArray(data12)) {
            if (data12.notEmpty !== undefined) {
              if (typeof data12.notEmpty !== "boolean") {
                var err22 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/notEmpty",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/notEmpty/type",
                  params: {
                    type: "boolean"
                  },
                  message: "should be boolean"
                };
                if (vErrors === null) {
                  vErrors = [err22];
                } else {
                  vErrors.push(err22);
                }
                errors++;
              }
            }
            if (data12.minLength !== undefined) {
              if (!(typeof data12.minLength == "number")) {
                var err23 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/minLength",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/minLength/type",
                  params: {
                    type: "number"
                  },
                  message: "should be number"
                };
                if (vErrors === null) {
                  vErrors = [err23];
                } else {
                  vErrors.push(err23);
                }
                errors++;
              }
            }
            if (data12.maxLength !== undefined) {
              if (!(typeof data12.maxLength == "number")) {
                var err24 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/maxLength",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/maxLength/type",
                  params: {
                    type: "number"
                  },
                  message: "should be number"
                };
                if (vErrors === null) {
                  vErrors = [err24];
                } else {
                  vErrors.push(err24);
                }
                errors++;
              }
            }
            if (data12.pattern !== undefined) {
              var data16 = data12.pattern;
              var _errs38 = errors;
              var valid13 = false;
              var passing0 = null;
              var _errs39 = errors;
              if (data16 && _typeof(data16) == "object" && !Array.isArray(data16)) {
                if (data16.value !== undefined) {
                  if (typeof data16.value !== "string") {
                    var err25 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/constraints/pattern/value",
                      schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/0/properties/value/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err25];
                    } else {
                      vErrors.push(err25);
                    }
                    errors++;
                  }
                }
                if (data16.message !== undefined) {
                  if (typeof data16.message !== "string") {
                    var err26 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/constraints/pattern/message",
                      schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/0/properties/message/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err26];
                    } else {
                      vErrors.push(err26);
                    }
                    errors++;
                  }
                }
              } else {
                var err27 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/0/type",
                  params: {
                    type: "object"
                  },
                  message: "should be object"
                };
                if (vErrors === null) {
                  vErrors = [err27];
                } else {
                  vErrors.push(err27);
                }
                errors++;
              }
              var _valid1 = _errs39 === errors;
              if (_valid1) {
                valid13 = true;
                passing0 = 0;
              }
              var _errs45 = errors;
              if (typeof data16 !== "string") {
                var err28 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/1/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err28];
                } else {
                  vErrors.push(err28);
                }
                errors++;
              }
              var _valid1 = _errs45 === errors;
              if (_valid1 && valid13) {
                valid13 = false;
                passing0 = [passing0, 1];
              } else {
                if (_valid1) {
                  valid13 = true;
                  passing0 = 1;
                }
              }
              if (!valid13) {
                var err29 = {
                  keyword: "oneOf",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf",
                  params: {
                    passingSchemas: passing0
                  },
                  message: "should match exactly one schema in oneOf"
                };
                if (vErrors === null) {
                  vErrors = [err29];
                } else {
                  vErrors.push(err29);
                }
                errors++;
              } else {
                errors = _errs38;
                if (vErrors !== null) {
                  if (_errs38) {
                    vErrors.length = _errs38;
                  } else {
                    vErrors = null;
                  }
                }
              }
            }
          } else {
            var err30 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/constraints",
              schemaPath: "#/allOf/0/items/properties/constraints/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err30];
            } else {
              vErrors.push(err30);
            }
            errors++;
          }
        }
        if (data0.group !== undefined) {
          if (typeof data0.group !== "string") {
            var err31 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/group",
              schemaPath: "#/allOf/0/items/properties/group/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err31];
            } else {
              vErrors.push(err31);
            }
            errors++;
          }
        }
        if (data0.condition !== undefined) {
          var data20 = data0.condition;
          if (!(data20 && _typeof(data20) == "object" && !Array.isArray(data20))) {
            var err32 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/allOf/0/items/properties/condition/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err32];
            } else {
              vErrors.push(err32);
            }
            errors++;
          }
          var _errs51 = errors;
          var valid15 = false;
          var passing1 = null;
          var _errs52 = errors;
          var _errs55 = errors;
          var valid17 = false;
          var passing2 = null;
          var _errs56 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.equals === undefined) {
              var err33 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/required",
                params: {
                  missingProperty: "equals"
                },
                message: "should have required property '" + "equals" + "'"
              };
              if (vErrors === null) {
                vErrors = [err33];
              } else {
                vErrors.push(err33);
              }
              errors++;
            }
            if (data20.equals !== undefined) {
              var data21 = data20.equals;
              if (typeof data21 !== "string" && !(typeof data21 == "number") && typeof data21 !== "boolean") {
                var err34 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/equals",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/properties/equals/type",
                  params: {
                    type: schema19$1.oneOf[0].properties.equals.type
                  },
                  message: "should be string,number,boolean"
                };
                if (vErrors === null) {
                  vErrors = [err34];
                } else {
                  vErrors.push(err34);
                }
                errors++;
              }
            }
          }
          var _valid3 = _errs56 === errors;
          if (_valid3) {
            valid17 = true;
            passing2 = 0;
          }
          var _errs59 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.oneOf === undefined) {
              var err35 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/required",
                params: {
                  missingProperty: "oneOf"
                },
                message: "should have required property '" + "oneOf" + "'"
              };
              if (vErrors === null) {
                vErrors = [err35];
              } else {
                vErrors.push(err35);
              }
              errors++;
            }
            if (data20.oneOf !== undefined) {
              var data22 = data20.oneOf;
              if (Array.isArray(data22)) {
                var len2 = data22.length;
                for (var i2 = 0; i2 < len2; i2++) {
                  var data23 = data22[i2];
                  if (typeof data23 !== "string" && !(typeof data23 == "number")) {
                    var err36 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/condition/oneOf/" + i2,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/items/type",
                      params: {
                        type: schema19$1.oneOf[1].properties.oneOf.items.type
                      },
                      message: "should be string,number"
                    };
                    if (vErrors === null) {
                      vErrors = [err36];
                    } else {
                      vErrors.push(err36);
                    }
                    errors++;
                  }
                }
              } else {
                var err37 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/oneOf",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err37];
                } else {
                  vErrors.push(err37);
                }
                errors++;
              }
            }
          }
          var _valid3 = _errs59 === errors;
          if (_valid3 && valid17) {
            valid17 = false;
            passing2 = [passing2, 1];
          } else {
            if (_valid3) {
              valid17 = true;
              passing2 = 1;
            }
          }
          if (!valid17) {
            var err38 = {
              keyword: "oneOf",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf",
              params: {
                passingSchemas: passing2
              },
              message: "should match exactly one schema in oneOf"
            };
            if (vErrors === null) {
              vErrors = [err38];
            } else {
              vErrors.push(err38);
            }
            errors++;
          } else {
            errors = _errs55;
            if (vErrors !== null) {
              if (_errs55) {
                vErrors.length = _errs55;
              } else {
                vErrors = null;
              }
            }
          }
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.property === undefined) {
              var err39 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/required",
                params: {
                  missingProperty: "property"
                },
                message: "should have required property '" + "property" + "'"
              };
              if (vErrors === null) {
                vErrors = [err39];
              } else {
                vErrors.push(err39);
              }
              errors++;
            }
            if (data20.type !== undefined) {
              if (!func0$1(data20.type, "simple")) {
                var err40 = {
                  keyword: "const",
                  dataPath: dataPath + "/" + i0 + "/condition/type",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/type/const",
                  params: {
                    allowedValue: "simple"
                  },
                  message: "should be equal to constant"
                };
                if (vErrors === null) {
                  vErrors = [err40];
                } else {
                  vErrors.push(err40);
                }
                errors++;
              }
            }
            if (data20.property !== undefined) {
              if (typeof data20.property !== "string") {
                var err41 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/property",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/property/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err41];
                } else {
                  vErrors.push(err41);
                }
                errors++;
              }
            }
          } else {
            var err42 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err42];
            } else {
              vErrors.push(err42);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors1 = {
              "required": {
                "property": []
              }
            };
            var templates1 = {
              required: {}
            };
            var emPropParams0 = void 0;
            var emParamsErrors0 = void 0;
            var _iterator5 = _createForOfIteratorHelper(vErrors),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var err43 = _step5.value;
                if (err43.keyword !== "errorMessage" && !err43.emUsed && err43.dataPath === dataPath + "/" + i0 + "/condition" && err43.keyword in emErrors1 && err43.schemaPath.indexOf("#/definitions/properties/allOf/0/items/properties/condition/definitions/condition") === 0 && /^\/[^\/]*$/.test(err43.schemaPath.slice(81))) {
                  emPropParams0 = obj0$1[err43.keyword];
                  emParamsErrors0 = emErrors1[err43.keyword][err43.params[emPropParams0]];
                  if (emParamsErrors0) {
                    emParamsErrors0.push(err43);
                    err43.emUsed = true;
                  }
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
            for (var key1 in emErrors1) {
              for (var keyProp0 in emErrors1[key1]) {
                emParamsErrors0 = emErrors1[key1][keyProp0];
                if (emParamsErrors0.length) {
                  var tmpl0 = templates1[key1] && templates1[key1][keyProp0];
                  var err44 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/" + i0 + "/condition",
                    schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/errorMessage",
                    params: {
                      errors: emParamsErrors0
                    },
                    message: tmpl0 ? tmpl0() : schema19$1.errorMessage[key1][keyProp0]
                  };
                  if (vErrors === null) {
                    vErrors = [err44];
                  } else {
                    vErrors.push(err44);
                  }
                  errors++;
                }
              }
            }
            var emErrs3 = [];
            var _iterator6 = _createForOfIteratorHelper(vErrors),
              _step6;
            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var err45 = _step6.value;
                if (!err45.emUsed) {
                  emErrs3.push(err45);
                }
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
            vErrors = emErrs3;
            errors = emErrs3.length;
          }
          var _valid2 = _errs52 === errors;
          if (_valid2) {
            valid15 = true;
            passing1 = 0;
          }
          var _errs67 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.allMatch === undefined) {
              var err46 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/allOf/0/items/properties/condition/oneOf/1/required",
                params: {
                  missingProperty: "allMatch"
                },
                message: "should have required property '" + "allMatch" + "'"
              };
              if (vErrors === null) {
                vErrors = [err46];
              } else {
                vErrors.push(err46);
              }
              errors++;
            }
            if (data20.allMatch !== undefined) {
              var data26 = data20.allMatch;
              if (Array.isArray(data26)) {
                if (data26.length < 1) {
                  var err47 = {
                    keyword: "minItems",
                    dataPath: dataPath + "/" + i0 + "/condition/allMatch",
                    schemaPath: "#/allOf/0/items/properties/condition/oneOf/1/properties/allMatch/minItems",
                    params: {
                      limit: 1
                    },
                    message: "should NOT have fewer than 1 items"
                  };
                  if (vErrors === null) {
                    vErrors = [err47];
                  } else {
                    vErrors.push(err47);
                  }
                  errors++;
                }
                var len3 = data26.length;
                for (var i3 = 0; i3 < len3; i3++) {
                  var data27 = data26[i3];
                  var _errs73 = errors;
                  var valid27 = false;
                  var passing3 = null;
                  var _errs74 = errors;
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.equals === undefined) {
                      var err48 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/required",
                        params: {
                          missingProperty: "equals"
                        },
                        message: "should have required property '" + "equals" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err48];
                      } else {
                        vErrors.push(err48);
                      }
                      errors++;
                    }
                    if (data27.equals !== undefined) {
                      var data28 = data27.equals;
                      if (typeof data28 !== "string" && !(typeof data28 == "number") && typeof data28 !== "boolean") {
                        var err49 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/equals",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/properties/equals/type",
                          params: {
                            type: schema19$1.oneOf[0].properties.equals.type
                          },
                          message: "should be string,number,boolean"
                        };
                        if (vErrors === null) {
                          vErrors = [err49];
                        } else {
                          vErrors.push(err49);
                        }
                        errors++;
                      }
                    }
                  }
                  var _valid4 = _errs74 === errors;
                  if (_valid4) {
                    valid27 = true;
                    passing3 = 0;
                  }
                  var _errs77 = errors;
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.oneOf === undefined) {
                      var err50 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/required",
                        params: {
                          missingProperty: "oneOf"
                        },
                        message: "should have required property '" + "oneOf" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err50];
                      } else {
                        vErrors.push(err50);
                      }
                      errors++;
                    }
                    if (data27.oneOf !== undefined) {
                      var data29 = data27.oneOf;
                      if (Array.isArray(data29)) {
                        var len4 = data29.length;
                        for (var i4 = 0; i4 < len4; i4++) {
                          var data30 = data29[i4];
                          if (typeof data30 !== "string" && !(typeof data30 == "number")) {
                            var err51 = {
                              keyword: "type",
                              dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/oneOf/" + i4,
                              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/items/type",
                              params: {
                                type: schema19$1.oneOf[1].properties.oneOf.items.type
                              },
                              message: "should be string,number"
                            };
                            if (vErrors === null) {
                              vErrors = [err51];
                            } else {
                              vErrors.push(err51);
                            }
                            errors++;
                          }
                        }
                      } else {
                        var err52 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/oneOf",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/type",
                          params: {
                            type: "array"
                          },
                          message: "should be array"
                        };
                        if (vErrors === null) {
                          vErrors = [err52];
                        } else {
                          vErrors.push(err52);
                        }
                        errors++;
                      }
                    }
                  }
                  var _valid4 = _errs77 === errors;
                  if (_valid4 && valid27) {
                    valid27 = false;
                    passing3 = [passing3, 1];
                  } else {
                    if (_valid4) {
                      valid27 = true;
                      passing3 = 1;
                    }
                  }
                  if (!valid27) {
                    var err53 = {
                      keyword: "oneOf",
                      dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf",
                      params: {
                        passingSchemas: passing3
                      },
                      message: "should match exactly one schema in oneOf"
                    };
                    if (vErrors === null) {
                      vErrors = [err53];
                    } else {
                      vErrors.push(err53);
                    }
                    errors++;
                  } else {
                    errors = _errs73;
                    if (vErrors !== null) {
                      if (_errs73) {
                        vErrors.length = _errs73;
                      } else {
                        vErrors = null;
                      }
                    }
                  }
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.property === undefined) {
                      var err54 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/required",
                        params: {
                          missingProperty: "property"
                        },
                        message: "should have required property '" + "property" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err54];
                      } else {
                        vErrors.push(err54);
                      }
                      errors++;
                    }
                    if (data27.type !== undefined) {
                      if (!func0$1(data27.type, "simple")) {
                        var err55 = {
                          keyword: "const",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/type",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/type/const",
                          params: {
                            allowedValue: "simple"
                          },
                          message: "should be equal to constant"
                        };
                        if (vErrors === null) {
                          vErrors = [err55];
                        } else {
                          vErrors.push(err55);
                        }
                        errors++;
                      }
                    }
                    if (data27.property !== undefined) {
                      if (typeof data27.property !== "string") {
                        var err56 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/property",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/property/type",
                          params: {
                            type: "string"
                          },
                          message: "should be string"
                        };
                        if (vErrors === null) {
                          vErrors = [err56];
                        } else {
                          vErrors.push(err56);
                        }
                        errors++;
                      }
                    }
                  } else {
                    var err57 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/type",
                      params: {
                        type: "object"
                      },
                      message: "should be object"
                    };
                    if (vErrors === null) {
                      vErrors = [err57];
                    } else {
                      vErrors.push(err57);
                    }
                    errors++;
                  }
                  if (errors > 0) {
                    var emErrors2 = {
                      "required": {
                        "property": []
                      }
                    };
                    var templates2 = {
                      required: {}
                    };
                    var emPropParams1 = void 0;
                    var emParamsErrors1 = void 0;
                    var _iterator7 = _createForOfIteratorHelper(vErrors),
                      _step7;
                    try {
                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                        var err58 = _step7.value;
                        if (err58.keyword !== "errorMessage" && !err58.emUsed && err58.dataPath === dataPath + "/" + i0 + "/condition/allMatch/" + i3 && err58.keyword in emErrors2 && err58.schemaPath.indexOf("#/definitions/properties/allOf/0/items/properties/condition/definitions/condition") === 0 && /^\/[^\/]*$/.test(err58.schemaPath.slice(81))) {
                          emPropParams1 = obj0$1[err58.keyword];
                          emParamsErrors1 = emErrors2[err58.keyword][err58.params[emPropParams1]];
                          if (emParamsErrors1) {
                            emParamsErrors1.push(err58);
                            err58.emUsed = true;
                          }
                        }
                      }
                    } catch (err) {
                      _iterator7.e(err);
                    } finally {
                      _iterator7.f();
                    }
                    for (var key2 in emErrors2) {
                      for (var keyProp1 in emErrors2[key2]) {
                        emParamsErrors1 = emErrors2[key2][keyProp1];
                        if (emParamsErrors1.length) {
                          var tmpl1 = templates2[key2] && templates2[key2][keyProp1];
                          var err59 = {
                            keyword: "errorMessage",
                            dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                            schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/errorMessage",
                            params: {
                              errors: emParamsErrors1
                            },
                            message: tmpl1 ? tmpl1() : schema19$1.errorMessage[key2][keyProp1]
                          };
                          if (vErrors === null) {
                            vErrors = [err59];
                          } else {
                            vErrors.push(err59);
                          }
                          errors++;
                        }
                      }
                    }
                    var emErrs4 = [];
                    var _iterator8 = _createForOfIteratorHelper(vErrors),
                      _step8;
                    try {
                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                        var err60 = _step8.value;
                        if (!err60.emUsed) {
                          emErrs4.push(err60);
                        }
                      }
                    } catch (err) {
                      _iterator8.e(err);
                    } finally {
                      _iterator8.f();
                    }
                    vErrors = emErrs4;
                    errors = emErrs4.length;
                  }
                }
              } else {
                var err61 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/allMatch",
                  schemaPath: "#/allOf/0/items/properties/condition/oneOf/1/properties/allMatch/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err61];
                } else {
                  vErrors.push(err61);
                }
                errors++;
              }
            }
          }
          var _valid2 = _errs67 === errors;
          if (_valid2 && valid15) {
            valid15 = false;
            passing1 = [passing1, 1];
          } else {
            if (_valid2) {
              valid15 = true;
              passing1 = 1;
            }
          }
          if (!valid15) {
            var err62 = {
              keyword: "oneOf",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/allOf/0/items/properties/condition/oneOf",
              params: {
                passingSchemas: passing1
              },
              message: "should match exactly one schema in oneOf"
            };
            if (vErrors === null) {
              vErrors = [err62];
            } else {
              vErrors.push(err62);
            }
            errors++;
          } else {
            errors = _errs51;
            if (vErrors !== null) {
              if (_errs51) {
                vErrors.length = _errs51;
              } else {
                vErrors = null;
              }
            }
          }
        }
      } else {
        var err63 = {
          keyword: "type",
          dataPath: dataPath + "/" + i0,
          schemaPath: "#/allOf/0/items/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err63];
        } else {
          vErrors.push(err63);
        }
        errors++;
      }
    }
  } else {
    var err64 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/allOf/0/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err64];
    } else {
      vErrors.push(err64);
    }
    errors++;
  }
  if (Array.isArray(data)) {
    var len5 = data.length;
    var _loop = function _loop(i5) {
      var data33 = data[i5];
      var _errs90 = errors;
      var valid37 = true;
      var _errs91 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined && "binding") {
          var err65 = {};
          if (vErrors === null) {
            vErrors = [err65];
          } else {
            vErrors.push(err65);
          }
          errors++;
        } else {
          if (data33.binding !== undefined) {
            var data34 = data33.binding;
            if (data34 && _typeof(data34) == "object" && !Array.isArray(data34)) {
              if (data34.type === undefined && "type") {
                var err66 = {};
                if (vErrors === null) {
                  vErrors = [err66];
                } else {
                  vErrors.push(err66);
                }
                errors++;
              } else {
                if (data34.type !== undefined) {
                  if (!func0$1(data34.type, "property")) {
                    var err67 = {};
                    if (vErrors === null) {
                      vErrors = [err67];
                    } else {
                      vErrors.push(err67);
                    }
                    errors++;
                  }
                }
              }
            }
          }
        }
      }
      _valid5 = _errs91 === errors;
      errors = _errs90;
      if (vErrors !== null) {
        if (_errs90) {
          vErrors.length = _errs90;
        } else {
          vErrors = null;
        }
      }
      if (_valid5) {
        var _errs94 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            var data36 = data33.type;
            if (!(data36 === "String" || data36 === "Text" || data36 === "Hidden" || data36 === "Dropdown" || data36 === "Boolean")) {
              var err68 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/0/then/properties/type/enum",
                params: {
                  allowedValues: schema18$1.allOf[1].items.allOf[0].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err68];
              } else {
                vErrors.push(err68);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs5 = [];
              var _iterator9 = _createForOfIteratorHelper(vErrors),
                _step9;
              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var err69 = _step9.value;
                  if (err69.keyword !== "errorMessage" && !err69.emUsed && (err69.dataPath === dataPath + "/" + i5 + "/type" || err69.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err69.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err69.schemaPath.indexOf("#/allOf/1/items/allOf/0/then/properties/type") === 0 && err69.schemaPath["#/allOf/1/items/allOf/0/then/properties/type".length] === "/") {
                    emErrs5.push(err69);
                    err69.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
              if (emErrs5.length) {
                var err70 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/0/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs5
                  },
                  message: "invalid property type " + JSON.stringify(data36) + " for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
                };
                if (vErrors === null) {
                  vErrors = [err70];
                } else {
                  vErrors.push(err70);
                }
                errors++;
              }
              var emErrs6 = [];
              var _iterator10 = _createForOfIteratorHelper(vErrors),
                _step10;
              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var err71 = _step10.value;
                  if (!err71.emUsed) {
                    emErrs6.push(err71);
                  }
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }
              vErrors = emErrs6;
              errors = emErrs6.length;
            }
          }
        }
        _valid5 = _errs94 === errors;
        valid37 = _valid5;
      }
      if (!valid37) {
        var err72 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/0/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err72];
        } else {
          vErrors.push(err72);
        }
        errors++;
      }
      var _errs97 = errors;
      var valid41 = true;
      var _errs98 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined && "binding") {
          var err73 = {};
          if (vErrors === null) {
            vErrors = [err73];
          } else {
            vErrors.push(err73);
          }
          errors++;
        } else {
          if (data33.binding !== undefined) {
            var data37 = data33.binding;
            if (data37 && _typeof(data37) == "object" && !Array.isArray(data37)) {
              if (data37.type === undefined && "type") {
                var err74 = {};
                if (vErrors === null) {
                  vErrors = [err74];
                } else {
                  vErrors.push(err74);
                }
                errors++;
              } else {
                if (data37.type !== undefined) {
                  if (!func0$1(data37.type, "camunda:executionListener")) {
                    var err75 = {};
                    if (vErrors === null) {
                      vErrors = [err75];
                    } else {
                      vErrors.push(err75);
                    }
                    errors++;
                  }
                }
              }
            }
          }
        }
      }
      _valid6 = _errs98 === errors;
      errors = _errs97;
      if (vErrors !== null) {
        if (_errs97) {
          vErrors.length = _errs97;
        } else {
          vErrors = null;
        }
      }
      if (_valid6) {
        var _errs101 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            if (!(data33.type === "Hidden")) {
              var err76 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/1/then/properties/type/enum",
                params: {
                  allowedValues: schema18$1.allOf[1].items.allOf[1].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err76];
              } else {
                vErrors.push(err76);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs7 = [];
              var _iterator11 = _createForOfIteratorHelper(vErrors),
                _step11;
              try {
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  var err77 = _step11.value;
                  if (err77.keyword !== "errorMessage" && !err77.emUsed && (err77.dataPath === dataPath + "/" + i5 + "/type" || err77.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err77.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err77.schemaPath.indexOf("#/allOf/1/items/allOf/1/then/properties/type") === 0 && err77.schemaPath["#/allOf/1/items/allOf/1/then/properties/type".length] === "/") {
                    emErrs7.push(err77);
                    err77.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }
              if (emErrs7.length) {
                var err78 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/1/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs7
                  },
                  message: "invalid property type " + JSON.stringify(data33 && data33.type) + " for binding type \"camunda:executionListener\"; must be \"Hidden\""
                };
                if (vErrors === null) {
                  vErrors = [err78];
                } else {
                  vErrors.push(err78);
                }
                errors++;
              }
              var emErrs8 = [];
              var _iterator12 = _createForOfIteratorHelper(vErrors),
                _step12;
              try {
                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                  var err79 = _step12.value;
                  if (!err79.emUsed) {
                    emErrs8.push(err79);
                  }
                }
              } catch (err) {
                _iterator12.e(err);
              } finally {
                _iterator12.f();
              }
              vErrors = emErrs8;
              errors = emErrs8.length;
            }
          }
        }
        _valid6 = _errs101 === errors;
        valid41 = _valid6;
      }
      if (!valid41) {
        var err80 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/1/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err80];
        } else {
          vErrors.push(err80);
        }
        errors++;
      }
      var _errs104 = errors;
      var valid45 = true;
      var _errs105 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined && "binding") {
          var err81 = {};
          if (vErrors === null) {
            vErrors = [err81];
          } else {
            vErrors.push(err81);
          }
          errors++;
        } else {
          if (data33.binding !== undefined) {
            var data40 = data33.binding;
            if (data40 && _typeof(data40) == "object" && !Array.isArray(data40)) {
              if (data40.type === undefined && "type") {
                var err82 = {};
                if (vErrors === null) {
                  vErrors = [err82];
                } else {
                  vErrors.push(err82);
                }
                errors++;
              } else {
                if (data40.type !== undefined) {
                  var data41 = data40.type;
                  if (!(data41 === "camunda:property" || data41 === "camunda:outputParameter" || data41 === "camunda:in" || data41 === "camunda:in:businessKey" || data41 === "camunda:out" || data41 === "camunda:errorEventDefinition")) {
                    var err83 = {};
                    if (vErrors === null) {
                      vErrors = [err83];
                    } else {
                      vErrors.push(err83);
                    }
                    errors++;
                  }
                }
              }
            }
          }
        }
      }
      _valid7 = _errs105 === errors;
      errors = _errs104;
      if (vErrors !== null) {
        if (_errs104) {
          vErrors.length = _errs104;
        } else {
          vErrors = null;
        }
      }
      if (_valid7) {
        var _errs108 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            var data42 = data33.type;
            if (!(data42 === "String" || data42 === "Hidden" || data42 === "Dropdown")) {
              var err84 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/2/then/properties/type/enum",
                params: {
                  allowedValues: schema18$1.allOf[1].items.allOf[2].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err84];
              } else {
                vErrors.push(err84);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs9 = [];
              var _iterator13 = _createForOfIteratorHelper(vErrors),
                _step13;
              try {
                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                  var err85 = _step13.value;
                  if (err85.keyword !== "errorMessage" && !err85.emUsed && (err85.dataPath === dataPath + "/" + i5 + "/type" || err85.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err85.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err85.schemaPath.indexOf("#/allOf/1/items/allOf/2/then/properties/type") === 0 && err85.schemaPath["#/allOf/1/items/allOf/2/then/properties/type".length] === "/") {
                    emErrs9.push(err85);
                    err85.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator13.e(err);
              } finally {
                _iterator13.f();
              }
              if (emErrs9.length) {
                var err86 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/2/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs9
                  },
                  message: "invalid property type " + JSON.stringify(data42) + " for binding type " + JSON.stringify(data33 && data33.binding && data33.binding.type) + "; must be any of { String, Hidden, Dropdown }"
                };
                if (vErrors === null) {
                  vErrors = [err86];
                } else {
                  vErrors.push(err86);
                }
                errors++;
              }
              var emErrs10 = [];
              var _iterator14 = _createForOfIteratorHelper(vErrors),
                _step14;
              try {
                for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                  var err87 = _step14.value;
                  if (!err87.emUsed) {
                    emErrs10.push(err87);
                  }
                }
              } catch (err) {
                _iterator14.e(err);
              } finally {
                _iterator14.f();
              }
              vErrors = emErrs10;
              errors = emErrs10.length;
            }
          }
        }
        _valid7 = _errs108 === errors;
        valid45 = _valid7;
      }
      if (!valid45) {
        var err88 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/2/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err88];
        } else {
          vErrors.push(err88);
        }
        errors++;
      }
      var _errs111 = errors;
      var valid49 = true;
      var _errs112 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined && "binding") {
          var err89 = {};
          if (vErrors === null) {
            vErrors = [err89];
          } else {
            vErrors.push(err89);
          }
          errors++;
        } else {
          if (data33.binding !== undefined) {
            var data43 = data33.binding;
            if (data43 && _typeof(data43) == "object" && !Array.isArray(data43)) {
              if (data43.type === undefined && "type") {
                var err90 = {};
                if (vErrors === null) {
                  vErrors = [err90];
                } else {
                  vErrors.push(err90);
                }
                errors++;
              } else {
                if (data43.type !== undefined) {
                  var data44 = data43.type;
                  if (!(data44 === "camunda:inputParameter" || data44 === "camunda:field")) {
                    var err91 = {};
                    if (vErrors === null) {
                      vErrors = [err91];
                    } else {
                      vErrors.push(err91);
                    }
                    errors++;
                  }
                }
              }
            }
          }
        }
      }
      _valid8 = _errs112 === errors;
      errors = _errs111;
      if (vErrors !== null) {
        if (_errs111) {
          vErrors.length = _errs111;
        } else {
          vErrors = null;
        }
      }
      if (_valid8) {
        var _errs115 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            var data45 = data33.type;
            if (!(data45 === "String" || data45 === "Text" || data45 === "Hidden" || data45 === "Dropdown")) {
              var err92 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/3/then/properties/type/enum",
                params: {
                  allowedValues: schema18$1.allOf[1].items.allOf[3].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err92];
              } else {
                vErrors.push(err92);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs11 = [];
              var _iterator15 = _createForOfIteratorHelper(vErrors),
                _step15;
              try {
                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                  var err93 = _step15.value;
                  if (err93.keyword !== "errorMessage" && !err93.emUsed && (err93.dataPath === dataPath + "/" + i5 + "/type" || err93.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err93.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err93.schemaPath.indexOf("#/allOf/1/items/allOf/3/then/properties/type") === 0 && err93.schemaPath["#/allOf/1/items/allOf/3/then/properties/type".length] === "/") {
                    emErrs11.push(err93);
                    err93.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator15.e(err);
              } finally {
                _iterator15.f();
              }
              if (emErrs11.length) {
                var err94 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/3/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs11
                  },
                  message: "invalid property type " + JSON.stringify(data45) + " for binding type " + JSON.stringify(data33 && data33.binding && data33.binding.type) + "; must be any of { String, Text, Hidden, Dropdown }"
                };
                if (vErrors === null) {
                  vErrors = [err94];
                } else {
                  vErrors.push(err94);
                }
                errors++;
              }
              var emErrs12 = [];
              var _iterator16 = _createForOfIteratorHelper(vErrors),
                _step16;
              try {
                for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                  var err95 = _step16.value;
                  if (!err95.emUsed) {
                    emErrs12.push(err95);
                  }
                }
              } catch (err) {
                _iterator16.e(err);
              } finally {
                _iterator16.f();
              }
              vErrors = emErrs12;
              errors = emErrs12.length;
            }
          }
        }
        _valid8 = _errs115 === errors;
        valid49 = _valid8;
      }
      if (!valid49) {
        var err96 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/3/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err96];
        } else {
          vErrors.push(err96);
        }
        errors++;
      }
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined) {
          var err97 = {
            keyword: "required",
            dataPath: dataPath + "/" + i5,
            schemaPath: "#/allOf/1/items/required",
            params: {
              missingProperty: "binding"
            },
            message: "should have required property '" + "binding" + "'"
          };
          if (vErrors === null) {
            vErrors = [err97];
          } else {
            vErrors.push(err97);
          }
          errors++;
        }
        if (data33.binding !== undefined) {
          var data46 = data33.binding;
          var _errs120 = errors;
          var valid55 = true;
          var _errs121 = errors;
          if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
            if (data46.type === undefined && "type") {
              var err98 = {};
              if (vErrors === null) {
                vErrors = [err98];
              } else {
                vErrors.push(err98);
              }
              errors++;
            } else {
              if (data46.type !== undefined) {
                var data47 = data46.type;
                if (!(data47 === "property" || data47 === "camunda:property" || data47 === "camunda:inputParameter" || data47 === "camunda:field")) {
                  var err99 = {};
                  if (vErrors === null) {
                    vErrors = [err99];
                  } else {
                    vErrors.push(err99);
                  }
                  errors++;
                }
              }
            }
          }
          _valid9 = _errs121 === errors;
          errors = _errs120;
          if (vErrors !== null) {
            if (_errs120) {
              vErrors.length = _errs120;
            } else {
              vErrors = null;
            }
          }
          if (_valid9) {
            var _errs123 = errors;
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.name === undefined) {
                var err100 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/0/then/required",
                  params: {
                    missingProperty: "name"
                  },
                  message: "should have required property '" + "name" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err100];
                } else {
                  vErrors.push(err100);
                }
                errors++;
              }
            }
            if (errors > 0) {
              var emErrs13 = [];
              var _iterator17 = _createForOfIteratorHelper(vErrors),
                _step17;
              try {
                for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                  var err101 = _step17.value;
                  if (err101.keyword !== "errorMessage" && !err101.emUsed && (err101.dataPath === dataPath + "/" + i5 + "/binding" || err101.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err101.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err101.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/0/then") === 0 && err101.schemaPath["#/allOf/1/items/properties/binding/allOf/0/then".length] === "/") {
                    emErrs13.push(err101);
                    err101.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator17.e(err);
              } finally {
                _iterator17.f();
              }
              if (emErrs13.length) {
                var err102 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/0/then/errorMessage",
                  params: {
                    errors: emErrs13
                  },
                  message: "property.binding " + JSON.stringify(data46 && data46.type) + " requires name"
                };
                if (vErrors === null) {
                  vErrors = [err102];
                } else {
                  vErrors.push(err102);
                }
                errors++;
              }
              var emErrs14 = [];
              var _iterator18 = _createForOfIteratorHelper(vErrors),
                _step18;
              try {
                for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                  var err103 = _step18.value;
                  if (!err103.emUsed) {
                    emErrs14.push(err103);
                  }
                }
              } catch (err) {
                _iterator18.e(err);
              } finally {
                _iterator18.f();
              }
              vErrors = emErrs14;
              errors = emErrs14.length;
            }
            _valid9 = _errs123 === errors;
            valid55 = _valid9;
          }
          if (!valid55) {
            var err104 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/0/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err104];
            } else {
              vErrors.push(err104);
            }
            errors++;
          }
          var _errs125 = errors;
          var valid57 = true;
          var _errs126 = errors;
          if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
            if (data46.type === undefined && "type") {
              var err105 = {};
              if (vErrors === null) {
                vErrors = [err105];
              } else {
                vErrors.push(err105);
              }
              errors++;
            } else {
              if (data46.type !== undefined) {
                if (!func0$1(data46.type, "camunda:outputParameter")) {
                  var err106 = {};
                  if (vErrors === null) {
                    vErrors = [err106];
                  } else {
                    vErrors.push(err106);
                  }
                  errors++;
                }
              }
            }
          }
          _valid10 = _errs126 === errors;
          errors = _errs125;
          if (vErrors !== null) {
            if (_errs125) {
              vErrors.length = _errs125;
            } else {
              vErrors = null;
            }
          }
          if (_valid10) {
            var _errs128 = errors;
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.source === undefined) {
                var err107 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/1/then/required",
                  params: {
                    missingProperty: "source"
                  },
                  message: "should have required property '" + "source" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err107];
                } else {
                  vErrors.push(err107);
                }
                errors++;
              }
            }
            if (errors > 0) {
              var emErrs15 = [];
              var _iterator19 = _createForOfIteratorHelper(vErrors),
                _step19;
              try {
                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                  var err108 = _step19.value;
                  if (err108.keyword !== "errorMessage" && !err108.emUsed && (err108.dataPath === dataPath + "/" + i5 + "/binding" || err108.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err108.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err108.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/1/then") === 0 && err108.schemaPath["#/allOf/1/items/properties/binding/allOf/1/then".length] === "/") {
                    emErrs15.push(err108);
                    err108.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
              if (emErrs15.length) {
                var err109 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/1/then/errorMessage",
                  params: {
                    errors: emErrs15
                  },
                  message: "property.binding " + JSON.stringify(data46 && data46.type) + " requires source"
                };
                if (vErrors === null) {
                  vErrors = [err109];
                } else {
                  vErrors.push(err109);
                }
                errors++;
              }
              var emErrs16 = [];
              var _iterator20 = _createForOfIteratorHelper(vErrors),
                _step20;
              try {
                for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                  var err110 = _step20.value;
                  if (!err110.emUsed) {
                    emErrs16.push(err110);
                  }
                }
              } catch (err) {
                _iterator20.e(err);
              } finally {
                _iterator20.f();
              }
              vErrors = emErrs16;
              errors = emErrs16.length;
            }
            _valid10 = _errs128 === errors;
            valid57 = _valid10;
          }
          if (!valid57) {
            var err111 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/1/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err111];
            } else {
              vErrors.push(err111);
            }
            errors++;
          }
          var _errs130 = errors;
          var valid59 = true;
          var _errs131 = errors;
          if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
            if (data46.type === undefined && "type") {
              var err112 = {};
              if (vErrors === null) {
                vErrors = [err112];
              } else {
                vErrors.push(err112);
              }
              errors++;
            } else {
              if (data46.type !== undefined) {
                if (!func0$1(data46.type, "camunda:in")) {
                  var err113 = {};
                  if (vErrors === null) {
                    vErrors = [err113];
                  } else {
                    vErrors.push(err113);
                  }
                  errors++;
                }
              }
            }
          }
          _valid11 = _errs131 === errors;
          errors = _errs130;
          if (vErrors !== null) {
            if (_errs130) {
              vErrors.length = _errs130;
            } else {
              vErrors = null;
            }
          }
          if (_valid11) {
            var _errs133 = errors;
            var _errs134 = errors;
            var valid61 = false;
            var _errs135 = errors;
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.variables === undefined) {
                var err114 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/2/then/anyOf/0/required",
                  params: {
                    missingProperty: "variables"
                  },
                  message: "should have required property '" + "variables" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err114];
                } else {
                  vErrors.push(err114);
                }
                errors++;
              }
            }
            _valid12 = _errs135 === errors;
            valid61 = valid61 || _valid12;
            if (!valid61) {
              var _errs136 = errors;
              if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                if (data46.target === undefined) {
                  var err115 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i5 + "/binding",
                    schemaPath: "#/allOf/1/items/properties/binding/allOf/2/then/anyOf/1/required",
                    params: {
                      missingProperty: "target"
                    },
                    message: "should have required property '" + "target" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err115];
                  } else {
                    vErrors.push(err115);
                  }
                  errors++;
                }
              }
              _valid12 = _errs136 === errors;
              valid61 = valid61 || _valid12;
            }
            if (!valid61) {
              var err116 = {
                keyword: "anyOf",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/allOf/2/then/anyOf",
                params: {},
                message: "should match some schema in anyOf"
              };
              if (vErrors === null) {
                vErrors = [err116];
              } else {
                vErrors.push(err116);
              }
              errors++;
            } else {
              errors = _errs134;
              if (vErrors !== null) {
                if (_errs134) {
                  vErrors.length = _errs134;
                } else {
                  vErrors = null;
                }
              }
            }
            if (errors > 0) {
              var emErrs17 = [];
              var _iterator21 = _createForOfIteratorHelper(vErrors),
                _step21;
              try {
                for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                  var err117 = _step21.value;
                  if (err117.keyword !== "errorMessage" && !err117.emUsed && (err117.dataPath === dataPath + "/" + i5 + "/binding" || err117.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err117.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err117.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/2/then") === 0 && err117.schemaPath["#/allOf/1/items/properties/binding/allOf/2/then".length] === "/") {
                    emErrs17.push(err117);
                    err117.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator21.e(err);
              } finally {
                _iterator21.f();
              }
              if (emErrs17.length) {
                var err118 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/2/then/errorMessage",
                  params: {
                    errors: emErrs17
                  },
                  message: "property.binding " + JSON.stringify(data46 && data46.type) + " requires variables, target, or both"
                };
                if (vErrors === null) {
                  vErrors = [err118];
                } else {
                  vErrors.push(err118);
                }
                errors++;
              }
              var emErrs18 = [];
              var _iterator22 = _createForOfIteratorHelper(vErrors),
                _step22;
              try {
                for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                  var err119 = _step22.value;
                  if (!err119.emUsed) {
                    emErrs18.push(err119);
                  }
                }
              } catch (err) {
                _iterator22.e(err);
              } finally {
                _iterator22.f();
              }
              vErrors = emErrs18;
              errors = emErrs18.length;
            }
            _valid11 = _errs133 === errors;
            valid59 = _valid11;
          }
          if (!valid59) {
            var err120 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/2/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err120];
            } else {
              vErrors.push(err120);
            }
            errors++;
          }
          var _errs138 = errors;
          var valid62 = true;
          var _errs139 = errors;
          if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
            if (data46.type === undefined && "type") {
              var err121 = {};
              if (vErrors === null) {
                vErrors = [err121];
              } else {
                vErrors.push(err121);
              }
              errors++;
            } else {
              if (data46.type !== undefined) {
                if (!func0$1(data46.type, "camunda:out")) {
                  var err122 = {};
                  if (vErrors === null) {
                    vErrors = [err122];
                  } else {
                    vErrors.push(err122);
                  }
                  errors++;
                }
              }
            }
          }
          _valid13 = _errs139 === errors;
          errors = _errs138;
          if (vErrors !== null) {
            if (_errs138) {
              vErrors.length = _errs138;
            } else {
              vErrors = null;
            }
          }
          if (_valid13) {
            var _errs141 = errors;
            var _errs142 = errors;
            var valid64 = false;
            var passing4 = null;
            var _errs143 = errors;
            var _errs144 = errors;
            var _errs145 = errors;
            var _errs146 = errors;
            var valid66 = false;
            var _errs147 = errors;
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.source === undefined && "source") {
                var err123 = {};
                if (vErrors === null) {
                  vErrors = [err123];
                } else {
                  vErrors.push(err123);
                }
                errors++;
              }
            }
            _valid15 = _errs147 === errors;
            valid66 = valid66 || _valid15;
            if (!valid66) {
              var _errs148 = errors;
              if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                if (data46.sourceExpression === undefined && "sourceExpression") {
                  var err124 = {};
                  if (vErrors === null) {
                    vErrors = [err124];
                  } else {
                    vErrors.push(err124);
                  }
                  errors++;
                }
              }
              _valid15 = _errs148 === errors;
              valid66 = valid66 || _valid15;
            }
            if (!valid66) {
              var err125 = {};
              if (vErrors === null) {
                vErrors = [err125];
              } else {
                vErrors.push(err125);
              }
              errors++;
            } else {
              errors = _errs146;
              if (vErrors !== null) {
                if (_errs146) {
                  vErrors.length = _errs146;
                } else {
                  vErrors = null;
                }
              }
            }
            valid65 = _errs145 === errors;
            if (!valid65) {
              errors = _errs144;
              if (vErrors !== null) {
                if (_errs144) {
                  vErrors.length = _errs144;
                } else {
                  vErrors = null;
                }
              }
            } else {
              var err126 = {
                keyword: "not",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/0/not",
                params: {},
                message: "should NOT be valid"
              };
              if (vErrors === null) {
                vErrors = [err126];
              } else {
                vErrors.push(err126);
              }
              errors++;
            }
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.variables === undefined) {
                var err127 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/0/required",
                  params: {
                    missingProperty: "variables"
                  },
                  message: "should have required property '" + "variables" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err127];
                } else {
                  vErrors.push(err127);
                }
                errors++;
              }
            }
            _valid14 = _errs143 === errors;
            if (_valid14) {
              valid64 = true;
              passing4 = 0;
            }
            var _errs149 = errors;
            var _errs150 = errors;
            var _errs151 = errors;
            var _errs152 = errors;
            var valid68 = false;
            var _errs153 = errors;
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.variables === undefined && "variables") {
                var err128 = {};
                if (vErrors === null) {
                  vErrors = [err128];
                } else {
                  vErrors.push(err128);
                }
                errors++;
              }
            }
            _valid16 = _errs153 === errors;
            valid68 = valid68 || _valid16;
            if (!valid68) {
              var _errs154 = errors;
              if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                if (data46.sourceExpression === undefined && "sourceExpression") {
                  var err129 = {};
                  if (vErrors === null) {
                    vErrors = [err129];
                  } else {
                    vErrors.push(err129);
                  }
                  errors++;
                }
              }
              _valid16 = _errs154 === errors;
              valid68 = valid68 || _valid16;
            }
            if (!valid68) {
              var err130 = {};
              if (vErrors === null) {
                vErrors = [err130];
              } else {
                vErrors.push(err130);
              }
              errors++;
            } else {
              errors = _errs152;
              if (vErrors !== null) {
                if (_errs152) {
                  vErrors.length = _errs152;
                } else {
                  vErrors = null;
                }
              }
            }
            valid67 = _errs151 === errors;
            if (!valid67) {
              errors = _errs150;
              if (vErrors !== null) {
                if (_errs150) {
                  vErrors.length = _errs150;
                } else {
                  vErrors = null;
                }
              }
            } else {
              var err131 = {
                keyword: "not",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/1/not",
                params: {},
                message: "should NOT be valid"
              };
              if (vErrors === null) {
                vErrors = [err131];
              } else {
                vErrors.push(err131);
              }
              errors++;
            }
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.source === undefined) {
                var err132 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/1/required",
                  params: {
                    missingProperty: "source"
                  },
                  message: "should have required property '" + "source" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err132];
                } else {
                  vErrors.push(err132);
                }
                errors++;
              }
            }
            _valid14 = _errs149 === errors;
            if (_valid14 && valid64) {
              valid64 = false;
              passing4 = [passing4, 1];
            } else {
              if (_valid14) {
                valid64 = true;
                passing4 = 1;
              }
              var _errs155 = errors;
              var _errs156 = errors;
              var _errs157 = errors;
              var _errs158 = errors;
              var valid70 = false;
              var _errs159 = errors;
              if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                if (data46.variables === undefined && "variables") {
                  var err133 = {};
                  if (vErrors === null) {
                    vErrors = [err133];
                  } else {
                    vErrors.push(err133);
                  }
                  errors++;
                }
              }
              _valid17 = _errs159 === errors;
              valid70 = valid70 || _valid17;
              if (!valid70) {
                var _errs160 = errors;
                if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                  if (data46.source === undefined && "source") {
                    var err134 = {};
                    if (vErrors === null) {
                      vErrors = [err134];
                    } else {
                      vErrors.push(err134);
                    }
                    errors++;
                  }
                }
                _valid17 = _errs160 === errors;
                valid70 = valid70 || _valid17;
              }
              if (!valid70) {
                var err135 = {};
                if (vErrors === null) {
                  vErrors = [err135];
                } else {
                  vErrors.push(err135);
                }
                errors++;
              } else {
                errors = _errs158;
                if (vErrors !== null) {
                  if (_errs158) {
                    vErrors.length = _errs158;
                  } else {
                    vErrors = null;
                  }
                }
              }
              valid69 = _errs157 === errors;
              if (!valid69) {
                errors = _errs156;
                if (vErrors !== null) {
                  if (_errs156) {
                    vErrors.length = _errs156;
                  } else {
                    vErrors = null;
                  }
                }
              } else {
                var err136 = {
                  keyword: "not",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/2/not",
                  params: {},
                  message: "should NOT be valid"
                };
                if (vErrors === null) {
                  vErrors = [err136];
                } else {
                  vErrors.push(err136);
                }
                errors++;
              }
              if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                if (data46.sourceExpression === undefined) {
                  var err137 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i5 + "/binding",
                    schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/2/required",
                    params: {
                      missingProperty: "sourceExpression"
                    },
                    message: "should have required property '" + "sourceExpression" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err137];
                  } else {
                    vErrors.push(err137);
                  }
                  errors++;
                }
              }
              _valid14 = _errs155 === errors;
              if (_valid14 && valid64) {
                valid64 = false;
                passing4 = [passing4, 2];
              } else {
                if (_valid14) {
                  valid64 = true;
                  passing4 = 2;
                }
                var _errs161 = errors;
                var _errs162 = errors;
                var _errs163 = errors;
                if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                  if (data46.source === undefined && "source") {
                    var err138 = {};
                    if (vErrors === null) {
                      vErrors = [err138];
                    } else {
                      vErrors.push(err138);
                    }
                    errors++;
                  }
                }
                valid71 = _errs163 === errors;
                if (!valid71) {
                  errors = _errs162;
                  if (vErrors !== null) {
                    if (_errs162) {
                      vErrors.length = _errs162;
                    } else {
                      vErrors = null;
                    }
                  }
                } else {
                  var err139 = {
                    keyword: "not",
                    dataPath: dataPath + "/" + i5 + "/binding",
                    schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/3/not",
                    params: {},
                    message: "should NOT be valid"
                  };
                  if (vErrors === null) {
                    vErrors = [err139];
                  } else {
                    vErrors.push(err139);
                  }
                  errors++;
                }
                if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                  if (data46.variables === undefined) {
                    var err140 = {
                      keyword: "required",
                      dataPath: dataPath + "/" + i5 + "/binding",
                      schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/3/required",
                      params: {
                        missingProperty: "variables"
                      },
                      message: "should have required property '" + "variables" + "'"
                    };
                    if (vErrors === null) {
                      vErrors = [err140];
                    } else {
                      vErrors.push(err140);
                    }
                    errors++;
                  }
                  if (data46.sourceExpression === undefined) {
                    var err141 = {
                      keyword: "required",
                      dataPath: dataPath + "/" + i5 + "/binding",
                      schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/3/required",
                      params: {
                        missingProperty: "sourceExpression"
                      },
                      message: "should have required property '" + "sourceExpression" + "'"
                    };
                    if (vErrors === null) {
                      vErrors = [err141];
                    } else {
                      vErrors.push(err141);
                    }
                    errors++;
                  }
                }
                _valid14 = _errs161 === errors;
                if (_valid14 && valid64) {
                  valid64 = false;
                  passing4 = [passing4, 3];
                } else {
                  if (_valid14) {
                    valid64 = true;
                    passing4 = 3;
                  }
                  var _errs164 = errors;
                  var _errs165 = errors;
                  var _errs166 = errors;
                  if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                    if (data46.sourceExpression === undefined && "sourceExpression") {
                      var err142 = {};
                      if (vErrors === null) {
                        vErrors = [err142];
                      } else {
                        vErrors.push(err142);
                      }
                      errors++;
                    }
                  }
                  valid72 = _errs166 === errors;
                  if (!valid72) {
                    errors = _errs165;
                    if (vErrors !== null) {
                      if (_errs165) {
                        vErrors.length = _errs165;
                      } else {
                        vErrors = null;
                      }
                    }
                  } else {
                    var err143 = {
                      keyword: "not",
                      dataPath: dataPath + "/" + i5 + "/binding",
                      schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/4/not",
                      params: {},
                      message: "should NOT be valid"
                    };
                    if (vErrors === null) {
                      vErrors = [err143];
                    } else {
                      vErrors.push(err143);
                    }
                    errors++;
                  }
                  if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
                    if (data46.variables === undefined) {
                      var err144 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i5 + "/binding",
                        schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/4/required",
                        params: {
                          missingProperty: "variables"
                        },
                        message: "should have required property '" + "variables" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err144];
                      } else {
                        vErrors.push(err144);
                      }
                      errors++;
                    }
                    if (data46.source === undefined) {
                      var err145 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i5 + "/binding",
                        schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf/4/required",
                        params: {
                          missingProperty: "source"
                        },
                        message: "should have required property '" + "source" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err145];
                      } else {
                        vErrors.push(err145);
                      }
                      errors++;
                    }
                  }
                  _valid14 = _errs164 === errors;
                  if (_valid14 && valid64) {
                    valid64 = false;
                    passing4 = [passing4, 4];
                  } else {
                    if (_valid14) {
                      valid64 = true;
                      passing4 = 4;
                    }
                  }
                }
              }
            }
            if (!valid64) {
              var err146 = {
                keyword: "oneOf",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/oneOf",
                params: {
                  passingSchemas: passing4
                },
                message: "should match exactly one schema in oneOf"
              };
              if (vErrors === null) {
                vErrors = [err146];
              } else {
                vErrors.push(err146);
              }
              errors++;
            } else {
              errors = _errs142;
              if (vErrors !== null) {
                if (_errs142) {
                  vErrors.length = _errs142;
                } else {
                  vErrors = null;
                }
              }
            }
            if (errors > 0) {
              var emErrs19 = [];
              var _iterator23 = _createForOfIteratorHelper(vErrors),
                _step23;
              try {
                for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                  var err147 = _step23.value;
                  if (err147.keyword !== "errorMessage" && !err147.emUsed && (err147.dataPath === dataPath + "/" + i5 + "/binding" || err147.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err147.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err147.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/3/then") === 0 && err147.schemaPath["#/allOf/1/items/properties/binding/allOf/3/then".length] === "/") {
                    emErrs19.push(err147);
                    err147.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator23.e(err);
              } finally {
                _iterator23.f();
              }
              if (emErrs19.length) {
                var err148 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/3/then/errorMessage",
                  params: {
                    errors: emErrs19
                  },
                  message: "property.binding " + JSON.stringify(data46 && data46.type) + " requires one of the following: variables, sourceExpression, source, (sourceExpression and variables), or (source and variables)"
                };
                if (vErrors === null) {
                  vErrors = [err148];
                } else {
                  vErrors.push(err148);
                }
                errors++;
              }
              var emErrs20 = [];
              var _iterator24 = _createForOfIteratorHelper(vErrors),
                _step24;
              try {
                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                  var err149 = _step24.value;
                  if (!err149.emUsed) {
                    emErrs20.push(err149);
                  }
                }
              } catch (err) {
                _iterator24.e(err);
              } finally {
                _iterator24.f();
              }
              vErrors = emErrs20;
              errors = emErrs20.length;
            }
            _valid13 = _errs141 === errors;
            valid62 = _valid13;
          }
          if (!valid62) {
            var err150 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/3/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err150];
            } else {
              vErrors.push(err150);
            }
            errors++;
          }
          var _errs168 = errors;
          var valid73 = true;
          var _errs169 = errors;
          if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
            if (data46.type === undefined && "type") {
              var err151 = {};
              if (vErrors === null) {
                vErrors = [err151];
              } else {
                vErrors.push(err151);
              }
              errors++;
            } else {
              if (data46.type !== undefined) {
                if (!func0$1(data46.type, "camunda:errorEventDefinition")) {
                  var err152 = {};
                  if (vErrors === null) {
                    vErrors = [err152];
                  } else {
                    vErrors.push(err152);
                  }
                  errors++;
                }
              }
            }
          }
          _valid18 = _errs169 === errors;
          errors = _errs168;
          if (vErrors !== null) {
            if (_errs168) {
              vErrors.length = _errs168;
            } else {
              vErrors = null;
            }
          }
          if (_valid18) {
            var _errs171 = errors;
            var _errs172 = errors;
            var valid75 = false;
            var passing5 = null;
            var _errs173 = errors;
            if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
              if (data46.errorRef === undefined) {
                var err153 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/4/then/oneOf/0/required",
                  params: {
                    missingProperty: "errorRef"
                  },
                  message: "should have required property '" + "errorRef" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err153];
                } else {
                  vErrors.push(err153);
                }
                errors++;
              }
            }
            _valid19 = _errs173 === errors;
            if (_valid19) {
              valid75 = true;
              passing5 = 0;
            }
            if (!valid75) {
              var err154 = {
                keyword: "oneOf",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/allOf/4/then/oneOf",
                params: {
                  passingSchemas: passing5
                },
                message: "should match exactly one schema in oneOf"
              };
              if (vErrors === null) {
                vErrors = [err154];
              } else {
                vErrors.push(err154);
              }
              errors++;
            } else {
              errors = _errs172;
              if (vErrors !== null) {
                if (_errs172) {
                  vErrors.length = _errs172;
                } else {
                  vErrors = null;
                }
              }
            }
            if (errors > 0) {
              var emErrs21 = [];
              var _iterator25 = _createForOfIteratorHelper(vErrors),
                _step25;
              try {
                for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                  var err155 = _step25.value;
                  if (err155.keyword !== "errorMessage" && !err155.emUsed && (err155.dataPath === dataPath + "/" + i5 + "/binding" || err155.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err155.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err155.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/4/then") === 0 && err155.schemaPath["#/allOf/1/items/properties/binding/allOf/4/then".length] === "/") {
                    emErrs21.push(err155);
                    err155.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator25.e(err);
              } finally {
                _iterator25.f();
              }
              if (emErrs21.length) {
                var err156 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/4/then/errorMessage",
                  params: {
                    errors: emErrs21
                  },
                  message: "property.binding " + JSON.stringify(data46 && data46.type) + " requires errorRef"
                };
                if (vErrors === null) {
                  vErrors = [err156];
                } else {
                  vErrors.push(err156);
                }
                errors++;
              }
              var emErrs22 = [];
              var _iterator26 = _createForOfIteratorHelper(vErrors),
                _step26;
              try {
                for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
                  var err157 = _step26.value;
                  if (!err157.emUsed) {
                    emErrs22.push(err157);
                  }
                }
              } catch (err) {
                _iterator26.e(err);
              } finally {
                _iterator26.f();
              }
              vErrors = emErrs22;
              errors = emErrs22.length;
            }
            _valid18 = _errs171 === errors;
            valid73 = _valid18;
          }
          if (!valid73) {
            var err158 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/4/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err158];
            } else {
              vErrors.push(err158);
            }
            errors++;
          }
          if (data46 && _typeof(data46) == "object" && !Array.isArray(data46)) {
            if (data46.type === undefined) {
              var err159 = {
                keyword: "required",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/required",
                params: {
                  missingProperty: "type"
                },
                message: "should have required property '" + "type" + "'"
              };
              if (vErrors === null) {
                vErrors = [err159];
              } else {
                vErrors.push(err159);
              }
              errors++;
            }
            if (data46.type !== undefined) {
              var data52 = data46.type;
              if (typeof data52 !== "string") {
                var err160 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/type",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/type/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err160];
                } else {
                  vErrors.push(err160);
                }
                errors++;
              }
              if (!(data52 === "property" || data52 === "camunda:property" || data52 === "camunda:inputParameter" || data52 === "camunda:outputParameter" || data52 === "camunda:in" || data52 === "camunda:out" || data52 === "camunda:in:businessKey" || data52 === "camunda:executionListener" || data52 === "camunda:field" || data52 === "camunda:errorEventDefinition")) {
                var err161 = {
                  keyword: "enum",
                  dataPath: dataPath + "/" + i5 + "/binding/type",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/type/enum",
                  params: {
                    allowedValues: schema18$1.allOf[1].items.properties.binding.properties.type["enum"]
                  },
                  message: "should be equal to one of the allowed values"
                };
                if (vErrors === null) {
                  vErrors = [err161];
                } else {
                  vErrors.push(err161);
                }
                errors++;
              }
              if (errors > 0) {
                var emErrs23 = [];
                var _iterator27 = _createForOfIteratorHelper(vErrors),
                  _step27;
                try {
                  for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
                    var err162 = _step27.value;
                    if (err162.keyword !== "errorMessage" && !err162.emUsed && (err162.dataPath === dataPath + "/" + i5 + "/binding/type" || err162.dataPath.indexOf(dataPath + "/" + i5 + "/binding/type") === 0 && err162.dataPath[dataPath + "/" + i5 + "/binding/type".length] === "/") && err162.schemaPath.indexOf("#/allOf/1/items/properties/binding/properties/type") === 0 && err162.schemaPath["#/allOf/1/items/properties/binding/properties/type".length] === "/") {
                      emErrs23.push(err162);
                      err162.emUsed = true;
                    }
                  }
                } catch (err) {
                  _iterator27.e(err);
                } finally {
                  _iterator27.f();
                }
                if (emErrs23.length) {
                  var err163 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/" + i5 + "/binding/type",
                    schemaPath: "#/allOf/1/items/properties/binding/properties/type/errorMessage",
                    params: {
                      errors: emErrs23
                    },
                    message: "invalid property.binding type " + JSON.stringify(data52) + "; must be any of { property, camunda:property, camunda:inputParameter, camunda:outputParameter, camunda:in, camunda:out, camunda:in:businessKey, camunda:executionListener, camunda:field, camunda:errorEventDefinition }"
                  };
                  if (vErrors === null) {
                    vErrors = [err163];
                  } else {
                    vErrors.push(err163);
                  }
                  errors++;
                }
                var emErrs24 = [];
                var _iterator28 = _createForOfIteratorHelper(vErrors),
                  _step28;
                try {
                  for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                    var err164 = _step28.value;
                    if (!err164.emUsed) {
                      emErrs24.push(err164);
                    }
                  }
                } catch (err) {
                  _iterator28.e(err);
                } finally {
                  _iterator28.f();
                }
                vErrors = emErrs24;
                errors = emErrs24.length;
              }
            }
            if (data46.name !== undefined) {
              if (typeof data46.name !== "string") {
                var err165 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/name",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/name/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err165];
                } else {
                  vErrors.push(err165);
                }
                errors++;
              }
            }
            if (data46.event !== undefined) {
              if (typeof data46.event !== "string") {
                var err166 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/event",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/event/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err166];
                } else {
                  vErrors.push(err166);
                }
                errors++;
              }
            }
            if (data46.scriptFormat !== undefined) {
              if (typeof data46.scriptFormat !== "string") {
                var err167 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/scriptFormat",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/scriptFormat/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err167];
                } else {
                  vErrors.push(err167);
                }
                errors++;
              }
            }
            if (data46.source !== undefined) {
              if (typeof data46.source !== "string") {
                var err168 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/source",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/source/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err168];
                } else {
                  vErrors.push(err168);
                }
                errors++;
              }
            }
            if (data46.target !== undefined) {
              if (typeof data46.target !== "string") {
                var err169 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/target",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/target/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err169];
                } else {
                  vErrors.push(err169);
                }
                errors++;
              }
            }
            if (data46.expression !== undefined) {
              if (typeof data46.expression !== "boolean") {
                var err170 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/expression",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/expression/type",
                  params: {
                    type: "boolean"
                  },
                  message: "should be boolean"
                };
                if (vErrors === null) {
                  vErrors = [err170];
                } else {
                  vErrors.push(err170);
                }
                errors++;
              }
            }
            if (data46.variables !== undefined) {
              var data59 = data46.variables;
              if (typeof data59 !== "string") {
                var err171 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/variables",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/variables/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err171];
                } else {
                  vErrors.push(err171);
                }
                errors++;
              }
              if (!(data59 === "all" || data59 === "local")) {
                var err172 = {
                  keyword: "enum",
                  dataPath: dataPath + "/" + i5 + "/binding/variables",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/variables/enum",
                  params: {
                    allowedValues: schema18$1.allOf[1].items.properties.binding.properties.variables["enum"]
                  },
                  message: "should be equal to one of the allowed values"
                };
                if (vErrors === null) {
                  vErrors = [err172];
                } else {
                  vErrors.push(err172);
                }
                errors++;
              }
            }
            if (data46.sourceExpression !== undefined) {
              if (typeof data46.sourceExpression !== "string") {
                var err173 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/sourceExpression",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/sourceExpression/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err173];
                } else {
                  vErrors.push(err173);
                }
                errors++;
              }
            }
          } else {
            var err174 = {
              keyword: "type",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err174];
            } else {
              vErrors.push(err174);
            }
            errors++;
          }
        }
      } else {
        var err175 = {
          keyword: "type",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err175];
        } else {
          vErrors.push(err175);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors3 = {
          "required": []
        };
        var templates3 = {
          required: function required() {
            return "missing binding for property \"" + JSON.stringify(i5) + "\"";
          }
        };
        var _iterator29 = _createForOfIteratorHelper(vErrors),
          _step29;
        try {
          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
            var err176 = _step29.value;
            if (err176.keyword !== "errorMessage" && !err176.emUsed && err176.dataPath === dataPath + "/" + i5 && err176.keyword in emErrors3 && err176.schemaPath.indexOf("#/allOf/1/items") === 0 && /^\/[^\/]*$/.test(err176.schemaPath.slice(15))) {
              emErrors3[err176.keyword].push(err176);
              err176.emUsed = true;
            }
          }
        } catch (err) {
          _iterator29.e(err);
        } finally {
          _iterator29.f();
        }
        for (var key3 in emErrors3) {
          if (emErrors3[key3].length) {
            var err177 = {
              keyword: "errorMessage",
              dataPath: dataPath + "/" + i5,
              schemaPath: "#/allOf/1/items/errorMessage",
              params: {
                errors: emErrors3[key3]
              },
              message: key3 in templates3 ? templates3[key3]() : schema18$1.allOf[1].items.errorMessage[key3]
            };
            if (vErrors === null) {
              vErrors = [err177];
            } else {
              vErrors.push(err177);
            }
            errors++;
          }
        }
        var emErrs25 = [];
        var _iterator30 = _createForOfIteratorHelper(vErrors),
          _step30;
        try {
          for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
            var err178 = _step30.value;
            if (!err178.emUsed) {
              emErrs25.push(err178);
            }
          }
        } catch (err) {
          _iterator30.e(err);
        } finally {
          _iterator30.f();
        }
        vErrors = emErrs25;
        errors = emErrs25.length;
      }
    };
    for (var i5 = 0; i5 < len5; i5++) {
      var _valid5, _valid5, _valid6, _valid6, _valid7, _valid7, _valid8, _valid8, _valid9, _valid9, _valid10, _valid10, _valid11, _valid12, _valid12, _valid11, _valid13, _valid15, _valid15, valid65, _valid14, _valid16, _valid16, valid67, _valid14, _valid17, _valid17, valid69, _valid14, valid71, _valid14, valid72, _valid14, _valid13, _valid18, _valid19, _valid18;
      _loop(i5);
    }
  } else {
    var err179 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/allOf/1/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err179];
    } else {
      vErrors.push(err179);
    }
    errors++;
  }
  validate16$1.errors = vErrors;
  return errors === 0;
}
var schema21 = {
  "type": "array",
  "description": "List of properties of the element template.",
  "allOf": [{
    "examples": [[{
      "label": "Name",
      "type": "String",
      "binding": {
        "type": "property",
        "name": "name"
      }
    }]]
  }],
  "items": {
    "type": "object",
    "default": {},
    "allOf": [{
      "if": {
        "properties": {
          "type": {
            "const": "Dropdown"
          }
        },
        "required": ["type"]
      },
      "then": {
        "required": ["choices"],
        "errorMessage": "must provide choices=[] with \"Dropdown\" type"
      }
    }],
    "properties": {
      "id": {
        "type": "string",
        "description": "Unique identifier of the property."
      },
      "value": {
        "$id": "#/properties/property/value",
        "type": ["string", "boolean"],
        "description": "The value of a control field."
      },
      "description": {
        "$id": "#/properties/property/description",
        "type": "string",
        "description": "The description of a control field."
      },
      "label": {
        "$id": "#/properties/property/label",
        "type": "string",
        "description": "The label of a control field."
      },
      "type": {
        "$id": "#/properties/property/type",
        "type": "string",
        "description": "The type of a control field."
      },
      "editable": {
        "$id": "#/properties/property/editable",
        "type": "boolean",
        "description": "Indicates whether a control field is editable or not."
      },
      "choices": {
        "$id": "#/properties/property/choices",
        "type": "array",
        "description": "The choices for dropdown fields.",
        "default": [],
        "items": {
          "$id": "#/properties/property/choices/item",
          "type": "object",
          "default": {},
          "properties": {
            "name": {
              "$id": "#/properties/property/choices/item/name",
              "type": "string",
              "description": "The name of a choice."
            },
            "value": {
              "$id": "#/properties/property/choices/item/value",
              "type": "string",
              "description": "The value of a choice."
            }
          },
          "required": ["value", "name"],
          "errorMessage": {
            "required": "{ name, value } must be specified for \"Dropdown\" choices"
          }
        }
      },
      "constraints": {
        "$id": "#/properties/property/constraints",
        "type": "object",
        "description": "The validation constraints of a control field.",
        "allOf": [{
          "examples": [{
            "notEmpty": true
          }]
        }],
        "properties": {
          "notEmpty": {
            "$id": "#/properties/property/constraints/notEmpty",
            "type": "boolean",
            "description": "The control field must not be empty."
          },
          "minLength": {
            "$id": "#/properties/property/constraints/minLength",
            "type": "number",
            "description": "The minimal length of a control field value."
          },
          "maxLength": {
            "$id": "#/properties/property/constraints/maxLength",
            "type": "number",
            "description": "The maximal length for a control field value."
          },
          "pattern": {
            "$id": "#/properties/property/constraints/pattern",
            "description": "A regular expression pattern for a constraint.",
            "oneOf": [{
              "type": "object",
              "default": {},
              "properties": {
                "value": {
                  "$id": "#/properties/property/constraints/pattern/value",
                  "type": "string",
                  "description": "The regular expression of a pattern."
                },
                "message": {
                  "$id": "#/properties/property/constraints/pattern/message",
                  "type": "string",
                  "description": "The validation message of a pattern."
                }
              }
            }, {
              "type": "string"
            }]
          }
        }
      },
      "group": {
        "$id": "#/properties/property/group",
        "type": "string",
        "description": "The custom group of a control field."
      },
      "condition": {
        "$id": "#/condition",
        "type": "object",
        "description": "Condition(s) to activate the binding.",
        "allOf": [{
          "examples": [{
            "type": "simple",
            "property": "httpMethod",
            "equals": "GET"
          }, {
            "type": "simple",
            "property": "httpMethod",
            "oneOf": ["POST", "PUT", "DELETE"]
          }, {
            "allMatch": [{
              "type": "simple",
              "property": "authType",
              "equals": "Basic"
            }, {
              "type": "simple",
              "property": "httpMethod",
              "oneOf": ["POST", "PUT", "DELETE"]
            }]
          }]
        }],
        "definitions": {
          "condition": {
            "type": "object",
            "required": ["property"],
            "properties": {
              "type": {
                "$id": "#/condition/type",
                "const": "simple",
                "description": "The type of the condition.",
                "default": "simple"
              },
              "property": {
                "$id": "#/condition/property",
                "type": "string",
                "description": "The id of the property to check."
              }
            },
            "oneOf": [{
              "properties": {
                "equals": {
                  "type": ["string", "number", "boolean"]
                }
              },
              "required": ["equals"]
            }, {
              "properties": {
                "oneOf": {
                  "type": "array",
                  "items": {
                    "type": ["string", "number"]
                  }
                }
              },
              "required": ["oneOf"]
            }],
            "errorMessage": {
              "required": {
                "property": "missing property name for condition"
              }
            }
          }
        },
        "oneOf": [{
          "$ref": "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition"
        }, {
          "properties": {
            "allMatch": {
              "$id": "#/allMatch",
              "type": "array",
              "items": {
                "$ref": "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition"
              },
              "minItems": 1
            }
          },
          "required": ["allMatch"]
        }]
      }
    }
  }
};
function validate18(data) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref2$dataPath = _ref2.dataPath,
    dataPath = _ref2$dataPath === void 0 ? "" : _ref2$dataPath,
    parentData = _ref2.parentData,
    parentDataProperty = _ref2.parentDataProperty,
    _ref2$rootData = _ref2.rootData,
    rootData = _ref2$rootData === void 0 ? data : _ref2$rootData;
  var vErrors = null;
  var errors = 0;
  if (Array.isArray(data)) {
    var len0 = data.length;
    for (var i0 = 0; i0 < len0; i0++) {
      var data0 = data[i0];
      var _errs4 = errors;
      var valid4 = true;
      var _errs5 = errors;
      if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
        if (data0.type === undefined && "type") {
          var err0 = {};
          if (vErrors === null) {
            vErrors = [err0];
          } else {
            vErrors.push(err0);
          }
          errors++;
        } else {
          if (data0.type !== undefined) {
            if (!func0$1(data0.type, "Dropdown")) {
              var err1 = {};
              if (vErrors === null) {
                vErrors = [err1];
              } else {
                vErrors.push(err1);
              }
              errors++;
            }
          }
        }
      }
      var _valid0 = _errs5 === errors;
      errors = _errs4;
      if (vErrors !== null) {
        if (_errs4) {
          vErrors.length = _errs4;
        } else {
          vErrors = null;
        }
      }
      if (_valid0) {
        var _errs7 = errors;
        if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
          if (data0.choices === undefined) {
            var err2 = {
              keyword: "required",
              dataPath: dataPath + "/" + i0,
              schemaPath: "#/items/allOf/0/then/required",
              params: {
                missingProperty: "choices"
              },
              message: "should have required property '" + "choices" + "'"
            };
            if (vErrors === null) {
              vErrors = [err2];
            } else {
              vErrors.push(err2);
            }
            errors++;
          }
        }
        if (errors > 0) {
          var emErrs0 = [];
          var _iterator31 = _createForOfIteratorHelper(vErrors),
            _step31;
          try {
            for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
              var err3 = _step31.value;
              if (err3.keyword !== "errorMessage" && !err3.emUsed && (err3.dataPath === dataPath + "/" + i0 || err3.dataPath.indexOf(dataPath + "/" + i0) === 0 && err3.dataPath[dataPath + "/" + i0.length] === "/") && err3.schemaPath.indexOf("#/items/allOf/0/then") === 0 && err3.schemaPath["#/items/allOf/0/then".length] === "/") {
                emErrs0.push(err3);
                err3.emUsed = true;
              }
            }
          } catch (err) {
            _iterator31.e(err);
          } finally {
            _iterator31.f();
          }
          if (emErrs0.length) {
            var err4 = {
              keyword: "errorMessage",
              dataPath: dataPath + "/" + i0,
              schemaPath: "#/items/allOf/0/then/errorMessage",
              params: {
                errors: emErrs0
              },
              message: "must provide choices=[] with \"Dropdown\" type"
            };
            if (vErrors === null) {
              vErrors = [err4];
            } else {
              vErrors.push(err4);
            }
            errors++;
          }
          var emErrs1 = [];
          var _iterator32 = _createForOfIteratorHelper(vErrors),
            _step32;
          try {
            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
              var err5 = _step32.value;
              if (!err5.emUsed) {
                emErrs1.push(err5);
              }
            }
          } catch (err) {
            _iterator32.e(err);
          } finally {
            _iterator32.f();
          }
          vErrors = emErrs1;
          errors = emErrs1.length;
        }
        var _valid0 = _errs7 === errors;
        valid4 = _valid0;
      }
      if (!valid4) {
        var err6 = {
          keyword: "if",
          dataPath: dataPath + "/" + i0,
          schemaPath: "#/items/allOf/0/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }
        errors++;
      }
      if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
        if (data0.id !== undefined) {
          if (typeof data0.id !== "string") {
            var err7 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/id",
              schemaPath: "#/items/properties/id/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err7];
            } else {
              vErrors.push(err7);
            }
            errors++;
          }
        }
        if (data0.value !== undefined) {
          var data3 = data0.value;
          if (typeof data3 !== "string" && typeof data3 !== "boolean") {
            var err8 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/value",
              schemaPath: "#/items/properties/value/type",
              params: {
                type: schema21.items.properties.value.type
              },
              message: "should be string,boolean"
            };
            if (vErrors === null) {
              vErrors = [err8];
            } else {
              vErrors.push(err8);
            }
            errors++;
          }
        }
        if (data0.description !== undefined) {
          if (typeof data0.description !== "string") {
            var err9 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/description",
              schemaPath: "#/items/properties/description/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err9];
            } else {
              vErrors.push(err9);
            }
            errors++;
          }
        }
        if (data0.label !== undefined) {
          if (typeof data0.label !== "string") {
            var err10 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/label",
              schemaPath: "#/items/properties/label/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err10];
            } else {
              vErrors.push(err10);
            }
            errors++;
          }
        }
        if (data0.type !== undefined) {
          if (typeof data0.type !== "string") {
            var err11 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/type",
              schemaPath: "#/items/properties/type/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err11];
            } else {
              vErrors.push(err11);
            }
            errors++;
          }
        }
        if (data0.editable !== undefined) {
          if (typeof data0.editable !== "boolean") {
            var err12 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/editable",
              schemaPath: "#/items/properties/editable/type",
              params: {
                type: "boolean"
              },
              message: "should be boolean"
            };
            if (vErrors === null) {
              vErrors = [err12];
            } else {
              vErrors.push(err12);
            }
            errors++;
          }
        }
        if (data0.choices !== undefined) {
          var data8 = data0.choices;
          if (Array.isArray(data8)) {
            var len1 = data8.length;
            for (var i1 = 0; i1 < len1; i1++) {
              var data9 = data8[i1];
              if (data9 && _typeof(data9) == "object" && !Array.isArray(data9)) {
                if (data9.value === undefined) {
                  var err13 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                    schemaPath: "#/items/properties/choices/items/required",
                    params: {
                      missingProperty: "value"
                    },
                    message: "should have required property '" + "value" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err13];
                  } else {
                    vErrors.push(err13);
                  }
                  errors++;
                }
                if (data9.name === undefined) {
                  var err14 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                    schemaPath: "#/items/properties/choices/items/required",
                    params: {
                      missingProperty: "name"
                    },
                    message: "should have required property '" + "name" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err14];
                  } else {
                    vErrors.push(err14);
                  }
                  errors++;
                }
                if (data9.name !== undefined) {
                  if (typeof data9.name !== "string") {
                    var err15 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1 + "/name",
                      schemaPath: "#/items/properties/choices/items/properties/name/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err15];
                    } else {
                      vErrors.push(err15);
                    }
                    errors++;
                  }
                }
                if (data9.value !== undefined) {
                  if (typeof data9.value !== "string") {
                    var err16 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1 + "/value",
                      schemaPath: "#/items/properties/choices/items/properties/value/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err16];
                    } else {
                      vErrors.push(err16);
                    }
                    errors++;
                  }
                }
              } else {
                var err17 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                  schemaPath: "#/items/properties/choices/items/type",
                  params: {
                    type: "object"
                  },
                  message: "should be object"
                };
                if (vErrors === null) {
                  vErrors = [err17];
                } else {
                  vErrors.push(err17);
                }
                errors++;
              }
              if (errors > 0) {
                var emErrors0 = {
                  "required": []
                };
                var templates0 = {};
                var _iterator33 = _createForOfIteratorHelper(vErrors),
                  _step33;
                try {
                  for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                    var err18 = _step33.value;
                    if (err18.keyword !== "errorMessage" && !err18.emUsed && err18.dataPath === dataPath + "/" + i0 + "/choices/" + i1 && err18.keyword in emErrors0 && err18.schemaPath.indexOf("#/items/properties/choices/items") === 0 && /^\/[^\/]*$/.test(err18.schemaPath.slice(32))) {
                      emErrors0[err18.keyword].push(err18);
                      err18.emUsed = true;
                    }
                  }
                } catch (err) {
                  _iterator33.e(err);
                } finally {
                  _iterator33.f();
                }
                for (var key0 in emErrors0) {
                  if (emErrors0[key0].length) {
                    var err19 = {
                      keyword: "errorMessage",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                      schemaPath: "#/items/properties/choices/items/errorMessage",
                      params: {
                        errors: emErrors0[key0]
                      },
                      message: key0 in templates0 ? templates0[key0]() : schema21.items.properties.choices.items.errorMessage[key0]
                    };
                    if (vErrors === null) {
                      vErrors = [err19];
                    } else {
                      vErrors.push(err19);
                    }
                    errors++;
                  }
                }
                var emErrs2 = [];
                var _iterator34 = _createForOfIteratorHelper(vErrors),
                  _step34;
                try {
                  for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                    var err20 = _step34.value;
                    if (!err20.emUsed) {
                      emErrs2.push(err20);
                    }
                  }
                } catch (err) {
                  _iterator34.e(err);
                } finally {
                  _iterator34.f();
                }
                vErrors = emErrs2;
                errors = emErrs2.length;
              }
            }
          } else {
            var err21 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/choices",
              schemaPath: "#/items/properties/choices/type",
              params: {
                type: "array"
              },
              message: "should be array"
            };
            if (vErrors === null) {
              vErrors = [err21];
            } else {
              vErrors.push(err21);
            }
            errors++;
          }
        }
        if (data0.constraints !== undefined) {
          var data12 = data0.constraints;
          if (data12 && _typeof(data12) == "object" && !Array.isArray(data12)) {
            if (data12.notEmpty !== undefined) {
              if (typeof data12.notEmpty !== "boolean") {
                var err22 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/notEmpty",
                  schemaPath: "#/items/properties/constraints/properties/notEmpty/type",
                  params: {
                    type: "boolean"
                  },
                  message: "should be boolean"
                };
                if (vErrors === null) {
                  vErrors = [err22];
                } else {
                  vErrors.push(err22);
                }
                errors++;
              }
            }
            if (data12.minLength !== undefined) {
              if (!(typeof data12.minLength == "number")) {
                var err23 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/minLength",
                  schemaPath: "#/items/properties/constraints/properties/minLength/type",
                  params: {
                    type: "number"
                  },
                  message: "should be number"
                };
                if (vErrors === null) {
                  vErrors = [err23];
                } else {
                  vErrors.push(err23);
                }
                errors++;
              }
            }
            if (data12.maxLength !== undefined) {
              if (!(typeof data12.maxLength == "number")) {
                var err24 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/maxLength",
                  schemaPath: "#/items/properties/constraints/properties/maxLength/type",
                  params: {
                    type: "number"
                  },
                  message: "should be number"
                };
                if (vErrors === null) {
                  vErrors = [err24];
                } else {
                  vErrors.push(err24);
                }
                errors++;
              }
            }
            if (data12.pattern !== undefined) {
              var data16 = data12.pattern;
              var _errs37 = errors;
              var valid12 = false;
              var passing0 = null;
              var _errs38 = errors;
              if (data16 && _typeof(data16) == "object" && !Array.isArray(data16)) {
                if (data16.value !== undefined) {
                  if (typeof data16.value !== "string") {
                    var err25 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/constraints/pattern/value",
                      schemaPath: "#/items/properties/constraints/properties/pattern/oneOf/0/properties/value/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err25];
                    } else {
                      vErrors.push(err25);
                    }
                    errors++;
                  }
                }
                if (data16.message !== undefined) {
                  if (typeof data16.message !== "string") {
                    var err26 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/constraints/pattern/message",
                      schemaPath: "#/items/properties/constraints/properties/pattern/oneOf/0/properties/message/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err26];
                    } else {
                      vErrors.push(err26);
                    }
                    errors++;
                  }
                }
              } else {
                var err27 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/items/properties/constraints/properties/pattern/oneOf/0/type",
                  params: {
                    type: "object"
                  },
                  message: "should be object"
                };
                if (vErrors === null) {
                  vErrors = [err27];
                } else {
                  vErrors.push(err27);
                }
                errors++;
              }
              var _valid1 = _errs38 === errors;
              if (_valid1) {
                valid12 = true;
                passing0 = 0;
              }
              var _errs44 = errors;
              if (typeof data16 !== "string") {
                var err28 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/items/properties/constraints/properties/pattern/oneOf/1/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err28];
                } else {
                  vErrors.push(err28);
                }
                errors++;
              }
              var _valid1 = _errs44 === errors;
              if (_valid1 && valid12) {
                valid12 = false;
                passing0 = [passing0, 1];
              } else {
                if (_valid1) {
                  valid12 = true;
                  passing0 = 1;
                }
              }
              if (!valid12) {
                var err29 = {
                  keyword: "oneOf",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/items/properties/constraints/properties/pattern/oneOf",
                  params: {
                    passingSchemas: passing0
                  },
                  message: "should match exactly one schema in oneOf"
                };
                if (vErrors === null) {
                  vErrors = [err29];
                } else {
                  vErrors.push(err29);
                }
                errors++;
              } else {
                errors = _errs37;
                if (vErrors !== null) {
                  if (_errs37) {
                    vErrors.length = _errs37;
                  } else {
                    vErrors = null;
                  }
                }
              }
            }
          } else {
            var err30 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/constraints",
              schemaPath: "#/items/properties/constraints/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err30];
            } else {
              vErrors.push(err30);
            }
            errors++;
          }
        }
        if (data0.group !== undefined) {
          if (typeof data0.group !== "string") {
            var err31 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/group",
              schemaPath: "#/items/properties/group/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err31];
            } else {
              vErrors.push(err31);
            }
            errors++;
          }
        }
        if (data0.condition !== undefined) {
          var data20 = data0.condition;
          if (!(data20 && _typeof(data20) == "object" && !Array.isArray(data20))) {
            var err32 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/items/properties/condition/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err32];
            } else {
              vErrors.push(err32);
            }
            errors++;
          }
          var _errs50 = errors;
          var valid14 = false;
          var passing1 = null;
          var _errs51 = errors;
          var _errs54 = errors;
          var valid16 = false;
          var passing2 = null;
          var _errs55 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.equals === undefined) {
              var err33 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/required",
                params: {
                  missingProperty: "equals"
                },
                message: "should have required property '" + "equals" + "'"
              };
              if (vErrors === null) {
                vErrors = [err33];
              } else {
                vErrors.push(err33);
              }
              errors++;
            }
            if (data20.equals !== undefined) {
              var data21 = data20.equals;
              if (typeof data21 !== "string" && !(typeof data21 == "number") && typeof data21 !== "boolean") {
                var err34 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/equals",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/properties/equals/type",
                  params: {
                    type: schema19$1.oneOf[0].properties.equals.type
                  },
                  message: "should be string,number,boolean"
                };
                if (vErrors === null) {
                  vErrors = [err34];
                } else {
                  vErrors.push(err34);
                }
                errors++;
              }
            }
          }
          var _valid3 = _errs55 === errors;
          if (_valid3) {
            valid16 = true;
            passing2 = 0;
          }
          var _errs58 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.oneOf === undefined) {
              var err35 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/required",
                params: {
                  missingProperty: "oneOf"
                },
                message: "should have required property '" + "oneOf" + "'"
              };
              if (vErrors === null) {
                vErrors = [err35];
              } else {
                vErrors.push(err35);
              }
              errors++;
            }
            if (data20.oneOf !== undefined) {
              var data22 = data20.oneOf;
              if (Array.isArray(data22)) {
                var len2 = data22.length;
                for (var i2 = 0; i2 < len2; i2++) {
                  var data23 = data22[i2];
                  if (typeof data23 !== "string" && !(typeof data23 == "number")) {
                    var err36 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/condition/oneOf/" + i2,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/items/type",
                      params: {
                        type: schema19$1.oneOf[1].properties.oneOf.items.type
                      },
                      message: "should be string,number"
                    };
                    if (vErrors === null) {
                      vErrors = [err36];
                    } else {
                      vErrors.push(err36);
                    }
                    errors++;
                  }
                }
              } else {
                var err37 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/oneOf",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err37];
                } else {
                  vErrors.push(err37);
                }
                errors++;
              }
            }
          }
          var _valid3 = _errs58 === errors;
          if (_valid3 && valid16) {
            valid16 = false;
            passing2 = [passing2, 1];
          } else {
            if (_valid3) {
              valid16 = true;
              passing2 = 1;
            }
          }
          if (!valid16) {
            var err38 = {
              keyword: "oneOf",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf",
              params: {
                passingSchemas: passing2
              },
              message: "should match exactly one schema in oneOf"
            };
            if (vErrors === null) {
              vErrors = [err38];
            } else {
              vErrors.push(err38);
            }
            errors++;
          } else {
            errors = _errs54;
            if (vErrors !== null) {
              if (_errs54) {
                vErrors.length = _errs54;
              } else {
                vErrors = null;
              }
            }
          }
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.property === undefined) {
              var err39 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/required",
                params: {
                  missingProperty: "property"
                },
                message: "should have required property '" + "property" + "'"
              };
              if (vErrors === null) {
                vErrors = [err39];
              } else {
                vErrors.push(err39);
              }
              errors++;
            }
            if (data20.type !== undefined) {
              if (!func0$1(data20.type, "simple")) {
                var err40 = {
                  keyword: "const",
                  dataPath: dataPath + "/" + i0 + "/condition/type",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/type/const",
                  params: {
                    allowedValue: "simple"
                  },
                  message: "should be equal to constant"
                };
                if (vErrors === null) {
                  vErrors = [err40];
                } else {
                  vErrors.push(err40);
                }
                errors++;
              }
            }
            if (data20.property !== undefined) {
              if (typeof data20.property !== "string") {
                var err41 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/property",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/property/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err41];
                } else {
                  vErrors.push(err41);
                }
                errors++;
              }
            }
          } else {
            var err42 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err42];
            } else {
              vErrors.push(err42);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors1 = {
              "required": {
                "property": []
              }
            };
            var templates1 = {
              required: {}
            };
            var emPropParams0 = void 0;
            var emParamsErrors0 = void 0;
            var _iterator35 = _createForOfIteratorHelper(vErrors),
              _step35;
            try {
              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                var err43 = _step35.value;
                if (err43.keyword !== "errorMessage" && !err43.emUsed && err43.dataPath === dataPath + "/" + i0 + "/condition" && err43.keyword in emErrors1 && err43.schemaPath.indexOf("#/definitions/properties/allOf/0/items/properties/condition/definitions/condition") === 0 && /^\/[^\/]*$/.test(err43.schemaPath.slice(81))) {
                  emPropParams0 = obj0$1[err43.keyword];
                  emParamsErrors0 = emErrors1[err43.keyword][err43.params[emPropParams0]];
                  if (emParamsErrors0) {
                    emParamsErrors0.push(err43);
                    err43.emUsed = true;
                  }
                }
              }
            } catch (err) {
              _iterator35.e(err);
            } finally {
              _iterator35.f();
            }
            for (var key1 in emErrors1) {
              for (var keyProp0 in emErrors1[key1]) {
                emParamsErrors0 = emErrors1[key1][keyProp0];
                if (emParamsErrors0.length) {
                  var tmpl0 = templates1[key1] && templates1[key1][keyProp0];
                  var err44 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/" + i0 + "/condition",
                    schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/errorMessage",
                    params: {
                      errors: emParamsErrors0
                    },
                    message: tmpl0 ? tmpl0() : schema19$1.errorMessage[key1][keyProp0]
                  };
                  if (vErrors === null) {
                    vErrors = [err44];
                  } else {
                    vErrors.push(err44);
                  }
                  errors++;
                }
              }
            }
            var emErrs3 = [];
            var _iterator36 = _createForOfIteratorHelper(vErrors),
              _step36;
            try {
              for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                var err45 = _step36.value;
                if (!err45.emUsed) {
                  emErrs3.push(err45);
                }
              }
            } catch (err) {
              _iterator36.e(err);
            } finally {
              _iterator36.f();
            }
            vErrors = emErrs3;
            errors = emErrs3.length;
          }
          var _valid2 = _errs51 === errors;
          if (_valid2) {
            valid14 = true;
            passing1 = 0;
          }
          var _errs66 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.allMatch === undefined) {
              var err46 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/items/properties/condition/oneOf/1/required",
                params: {
                  missingProperty: "allMatch"
                },
                message: "should have required property '" + "allMatch" + "'"
              };
              if (vErrors === null) {
                vErrors = [err46];
              } else {
                vErrors.push(err46);
              }
              errors++;
            }
            if (data20.allMatch !== undefined) {
              var data26 = data20.allMatch;
              if (Array.isArray(data26)) {
                if (data26.length < 1) {
                  var err47 = {
                    keyword: "minItems",
                    dataPath: dataPath + "/" + i0 + "/condition/allMatch",
                    schemaPath: "#/items/properties/condition/oneOf/1/properties/allMatch/minItems",
                    params: {
                      limit: 1
                    },
                    message: "should NOT have fewer than 1 items"
                  };
                  if (vErrors === null) {
                    vErrors = [err47];
                  } else {
                    vErrors.push(err47);
                  }
                  errors++;
                }
                var len3 = data26.length;
                for (var i3 = 0; i3 < len3; i3++) {
                  var data27 = data26[i3];
                  var _errs72 = errors;
                  var valid26 = false;
                  var passing3 = null;
                  var _errs73 = errors;
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.equals === undefined) {
                      var err48 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/required",
                        params: {
                          missingProperty: "equals"
                        },
                        message: "should have required property '" + "equals" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err48];
                      } else {
                        vErrors.push(err48);
                      }
                      errors++;
                    }
                    if (data27.equals !== undefined) {
                      var data28 = data27.equals;
                      if (typeof data28 !== "string" && !(typeof data28 == "number") && typeof data28 !== "boolean") {
                        var err49 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/equals",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/properties/equals/type",
                          params: {
                            type: schema19$1.oneOf[0].properties.equals.type
                          },
                          message: "should be string,number,boolean"
                        };
                        if (vErrors === null) {
                          vErrors = [err49];
                        } else {
                          vErrors.push(err49);
                        }
                        errors++;
                      }
                    }
                  }
                  var _valid4 = _errs73 === errors;
                  if (_valid4) {
                    valid26 = true;
                    passing3 = 0;
                  }
                  var _errs76 = errors;
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.oneOf === undefined) {
                      var err50 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/required",
                        params: {
                          missingProperty: "oneOf"
                        },
                        message: "should have required property '" + "oneOf" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err50];
                      } else {
                        vErrors.push(err50);
                      }
                      errors++;
                    }
                    if (data27.oneOf !== undefined) {
                      var data29 = data27.oneOf;
                      if (Array.isArray(data29)) {
                        var len4 = data29.length;
                        for (var i4 = 0; i4 < len4; i4++) {
                          var data30 = data29[i4];
                          if (typeof data30 !== "string" && !(typeof data30 == "number")) {
                            var err51 = {
                              keyword: "type",
                              dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/oneOf/" + i4,
                              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/items/type",
                              params: {
                                type: schema19$1.oneOf[1].properties.oneOf.items.type
                              },
                              message: "should be string,number"
                            };
                            if (vErrors === null) {
                              vErrors = [err51];
                            } else {
                              vErrors.push(err51);
                            }
                            errors++;
                          }
                        }
                      } else {
                        var err52 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/oneOf",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/type",
                          params: {
                            type: "array"
                          },
                          message: "should be array"
                        };
                        if (vErrors === null) {
                          vErrors = [err52];
                        } else {
                          vErrors.push(err52);
                        }
                        errors++;
                      }
                    }
                  }
                  var _valid4 = _errs76 === errors;
                  if (_valid4 && valid26) {
                    valid26 = false;
                    passing3 = [passing3, 1];
                  } else {
                    if (_valid4) {
                      valid26 = true;
                      passing3 = 1;
                    }
                  }
                  if (!valid26) {
                    var err53 = {
                      keyword: "oneOf",
                      dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf",
                      params: {
                        passingSchemas: passing3
                      },
                      message: "should match exactly one schema in oneOf"
                    };
                    if (vErrors === null) {
                      vErrors = [err53];
                    } else {
                      vErrors.push(err53);
                    }
                    errors++;
                  } else {
                    errors = _errs72;
                    if (vErrors !== null) {
                      if (_errs72) {
                        vErrors.length = _errs72;
                      } else {
                        vErrors = null;
                      }
                    }
                  }
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.property === undefined) {
                      var err54 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/required",
                        params: {
                          missingProperty: "property"
                        },
                        message: "should have required property '" + "property" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err54];
                      } else {
                        vErrors.push(err54);
                      }
                      errors++;
                    }
                    if (data27.type !== undefined) {
                      if (!func0$1(data27.type, "simple")) {
                        var err55 = {
                          keyword: "const",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/type",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/type/const",
                          params: {
                            allowedValue: "simple"
                          },
                          message: "should be equal to constant"
                        };
                        if (vErrors === null) {
                          vErrors = [err55];
                        } else {
                          vErrors.push(err55);
                        }
                        errors++;
                      }
                    }
                    if (data27.property !== undefined) {
                      if (typeof data27.property !== "string") {
                        var err56 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/property",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/property/type",
                          params: {
                            type: "string"
                          },
                          message: "should be string"
                        };
                        if (vErrors === null) {
                          vErrors = [err56];
                        } else {
                          vErrors.push(err56);
                        }
                        errors++;
                      }
                    }
                  } else {
                    var err57 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/type",
                      params: {
                        type: "object"
                      },
                      message: "should be object"
                    };
                    if (vErrors === null) {
                      vErrors = [err57];
                    } else {
                      vErrors.push(err57);
                    }
                    errors++;
                  }
                  if (errors > 0) {
                    var emErrors2 = {
                      "required": {
                        "property": []
                      }
                    };
                    var templates2 = {
                      required: {}
                    };
                    var emPropParams1 = void 0;
                    var emParamsErrors1 = void 0;
                    var _iterator37 = _createForOfIteratorHelper(vErrors),
                      _step37;
                    try {
                      for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                        var err58 = _step37.value;
                        if (err58.keyword !== "errorMessage" && !err58.emUsed && err58.dataPath === dataPath + "/" + i0 + "/condition/allMatch/" + i3 && err58.keyword in emErrors2 && err58.schemaPath.indexOf("#/definitions/properties/allOf/0/items/properties/condition/definitions/condition") === 0 && /^\/[^\/]*$/.test(err58.schemaPath.slice(81))) {
                          emPropParams1 = obj0$1[err58.keyword];
                          emParamsErrors1 = emErrors2[err58.keyword][err58.params[emPropParams1]];
                          if (emParamsErrors1) {
                            emParamsErrors1.push(err58);
                            err58.emUsed = true;
                          }
                        }
                      }
                    } catch (err) {
                      _iterator37.e(err);
                    } finally {
                      _iterator37.f();
                    }
                    for (var key2 in emErrors2) {
                      for (var keyProp1 in emErrors2[key2]) {
                        emParamsErrors1 = emErrors2[key2][keyProp1];
                        if (emParamsErrors1.length) {
                          var tmpl1 = templates2[key2] && templates2[key2][keyProp1];
                          var err59 = {
                            keyword: "errorMessage",
                            dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                            schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/errorMessage",
                            params: {
                              errors: emParamsErrors1
                            },
                            message: tmpl1 ? tmpl1() : schema19$1.errorMessage[key2][keyProp1]
                          };
                          if (vErrors === null) {
                            vErrors = [err59];
                          } else {
                            vErrors.push(err59);
                          }
                          errors++;
                        }
                      }
                    }
                    var emErrs4 = [];
                    var _iterator38 = _createForOfIteratorHelper(vErrors),
                      _step38;
                    try {
                      for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
                        var err60 = _step38.value;
                        if (!err60.emUsed) {
                          emErrs4.push(err60);
                        }
                      }
                    } catch (err) {
                      _iterator38.e(err);
                    } finally {
                      _iterator38.f();
                    }
                    vErrors = emErrs4;
                    errors = emErrs4.length;
                  }
                }
              } else {
                var err61 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/allMatch",
                  schemaPath: "#/items/properties/condition/oneOf/1/properties/allMatch/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err61];
                } else {
                  vErrors.push(err61);
                }
                errors++;
              }
            }
          }
          var _valid2 = _errs66 === errors;
          if (_valid2 && valid14) {
            valid14 = false;
            passing1 = [passing1, 1];
          } else {
            if (_valid2) {
              valid14 = true;
              passing1 = 1;
            }
          }
          if (!valid14) {
            var err62 = {
              keyword: "oneOf",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/items/properties/condition/oneOf",
              params: {
                passingSchemas: passing1
              },
              message: "should match exactly one schema in oneOf"
            };
            if (vErrors === null) {
              vErrors = [err62];
            } else {
              vErrors.push(err62);
            }
            errors++;
          } else {
            errors = _errs50;
            if (vErrors !== null) {
              if (_errs50) {
                vErrors.length = _errs50;
              } else {
                vErrors = null;
              }
            }
          }
        }
      } else {
        var err63 = {
          keyword: "type",
          dataPath: dataPath + "/" + i0,
          schemaPath: "#/items/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err63];
        } else {
          vErrors.push(err63);
        }
        errors++;
      }
    }
  } else {
    var err64 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err64];
    } else {
      vErrors.push(err64);
    }
    errors++;
  }
  validate18.errors = vErrors;
  return errors === 0;
}
function validate15$1(data) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref3$dataPath = _ref3.dataPath,
    dataPath = _ref3$dataPath === void 0 ? "" : _ref3$dataPath,
    parentData = _ref3.parentData,
    parentDataProperty = _ref3.parentDataProperty,
    _ref3$rootData = _ref3.rootData,
    rootData = _ref3$rootData === void 0 ? data : _ref3$rootData;
  var vErrors = null;
  var errors = 0;
  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    if (data.name === undefined) {
      var err0 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "name"
        },
        message: "should have required property '" + "name" + "'"
      };
      if (vErrors === null) {
        vErrors = [err0];
      } else {
        vErrors.push(err0);
      }
      errors++;
    }
    if (data.id === undefined) {
      var err1 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "id"
        },
        message: "should have required property '" + "id" + "'"
      };
      if (vErrors === null) {
        vErrors = [err1];
      } else {
        vErrors.push(err1);
      }
      errors++;
    }
    if (data.appliesTo === undefined) {
      var err2 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "appliesTo"
        },
        message: "should have required property '" + "appliesTo" + "'"
      };
      if (vErrors === null) {
        vErrors = [err2];
      } else {
        vErrors.push(err2);
      }
      errors++;
    }
    if (data.properties === undefined) {
      var err3 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "properties"
        },
        message: "should have required property '" + "properties" + "'"
      };
      if (vErrors === null) {
        vErrors = [err3];
      } else {
        vErrors.push(err3);
      }
      errors++;
    }
    if (data.name !== undefined) {
      if (typeof data.name !== "string") {
        var err4 = {
          keyword: "type",
          dataPath: dataPath + "/name",
          schemaPath: "#/allOf/0/properties/name/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err4];
        } else {
          vErrors.push(err4);
        }
        errors++;
      }
    }
    if (data.id !== undefined) {
      if (typeof data.id !== "string") {
        var err5 = {
          keyword: "type",
          dataPath: dataPath + "/id",
          schemaPath: "#/allOf/0/properties/id/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err5];
        } else {
          vErrors.push(err5);
        }
        errors++;
      }
    }
    if (data.description !== undefined) {
      if (typeof data.description !== "string") {
        var err6 = {
          keyword: "type",
          dataPath: dataPath + "/description",
          schemaPath: "#/allOf/0/properties/description/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }
        errors++;
      }
    }
    if (data.version !== undefined) {
      var data3 = data.version;
      if (!(typeof data3 == "number" && !(data3 % 1) && !isNaN(data3))) {
        var err7 = {
          keyword: "type",
          dataPath: dataPath + "/version",
          schemaPath: "#/allOf/0/properties/version/type",
          params: {
            type: "integer"
          },
          message: "should be integer"
        };
        if (vErrors === null) {
          vErrors = [err7];
        } else {
          vErrors.push(err7);
        }
        errors++;
      }
    }
    if (data.isDefault !== undefined) {
      if (typeof data.isDefault !== "boolean") {
        var err8 = {
          keyword: "type",
          dataPath: dataPath + "/isDefault",
          schemaPath: "#/allOf/0/properties/isDefault/type",
          params: {
            type: "boolean"
          },
          message: "should be boolean"
        };
        if (vErrors === null) {
          vErrors = [err8];
        } else {
          vErrors.push(err8);
        }
        errors++;
      }
    }
    if (data.appliesTo !== undefined) {
      var data5 = data.appliesTo;
      if (Array.isArray(data5)) {
        var len0 = data5.length;
        for (var i0 = 0; i0 < len0; i0++) {
          var data6 = data5[i0];
          if (typeof data6 === "string") {
            if (!pattern0$1.test(data6)) {
              var err9 = {
                keyword: "pattern",
                dataPath: dataPath + "/appliesTo/" + i0,
                schemaPath: "#/allOf/0/properties/appliesTo/items/pattern",
                params: {
                  pattern: "^[\\w\\d]+:[\\w\\d]+$"
                },
                message: "should match pattern \"" + "^[\\w\\d]+:[\\w\\d]+$" + "\""
              };
              if (vErrors === null) {
                vErrors = [err9];
              } else {
                vErrors.push(err9);
              }
              errors++;
            }
          } else {
            var err10 = {
              keyword: "type",
              dataPath: dataPath + "/appliesTo/" + i0,
              schemaPath: "#/allOf/0/properties/appliesTo/items/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err10];
            } else {
              vErrors.push(err10);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors0 = {
              "pattern": []
            };
            var templates0 = {};
            var _iterator39 = _createForOfIteratorHelper(vErrors),
              _step39;
            try {
              for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
                var err11 = _step39.value;
                if (err11.keyword !== "errorMessage" && !err11.emUsed && err11.dataPath === dataPath + "/appliesTo/" + i0 && err11.keyword in emErrors0 && err11.schemaPath.indexOf("#/allOf/0/properties/appliesTo/items") === 0 && /^\/[^\/]*$/.test(err11.schemaPath.slice(36))) {
                  emErrors0[err11.keyword].push(err11);
                  err11.emUsed = true;
                }
              }
            } catch (err) {
              _iterator39.e(err);
            } finally {
              _iterator39.f();
            }
            for (var key0 in emErrors0) {
              if (emErrors0[key0].length) {
                var err12 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/appliesTo/" + i0,
                  schemaPath: "#/allOf/0/properties/appliesTo/items/errorMessage",
                  params: {
                    errors: emErrors0[key0]
                  },
                  message: key0 in templates0 ? templates0[key0]() : schema17$1.allOf[0].properties.appliesTo.items.errorMessage[key0]
                };
                if (vErrors === null) {
                  vErrors = [err12];
                } else {
                  vErrors.push(err12);
                }
                errors++;
              }
            }
            var emErrs0 = [];
            var _iterator40 = _createForOfIteratorHelper(vErrors),
              _step40;
            try {
              for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                var err13 = _step40.value;
                if (!err13.emUsed) {
                  emErrs0.push(err13);
                }
              }
            } catch (err) {
              _iterator40.e(err);
            } finally {
              _iterator40.f();
            }
            vErrors = emErrs0;
            errors = emErrs0.length;
          }
        }
      } else {
        var err14 = {
          keyword: "type",
          dataPath: dataPath + "/appliesTo",
          schemaPath: "#/allOf/0/properties/appliesTo/type",
          params: {
            type: "array"
          },
          message: "should be array"
        };
        if (vErrors === null) {
          vErrors = [err14];
        } else {
          vErrors.push(err14);
        }
        errors++;
      }
    }
    if (data.elementType !== undefined) {
      var data7 = data.elementType;
      if (data7 && _typeof(data7) == "object" && !Array.isArray(data7)) {
        if (data7.value === undefined) {
          var err15 = {
            keyword: "required",
            dataPath: dataPath + "/elementType",
            schemaPath: "#/allOf/0/properties/elementType/required",
            params: {
              missingProperty: "value"
            },
            message: "should have required property '" + "value" + "'"
          };
          if (vErrors === null) {
            vErrors = [err15];
          } else {
            vErrors.push(err15);
          }
          errors++;
        }
        if (data7.value !== undefined) {
          var data8 = data7.value;
          if (typeof data8 === "string") {
            if (!pattern0$1.test(data8)) {
              var err16 = {
                keyword: "pattern",
                dataPath: dataPath + "/elementType/value",
                schemaPath: "#/allOf/0/properties/elementType/properties/value/pattern",
                params: {
                  pattern: "^[\\w\\d]+:[\\w\\d]+$"
                },
                message: "should match pattern \"" + "^[\\w\\d]+:[\\w\\d]+$" + "\""
              };
              if (vErrors === null) {
                vErrors = [err16];
              } else {
                vErrors.push(err16);
              }
              errors++;
            }
          } else {
            var err17 = {
              keyword: "type",
              dataPath: dataPath + "/elementType/value",
              schemaPath: "#/allOf/0/properties/elementType/properties/value/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err17];
            } else {
              vErrors.push(err17);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors1 = {
              "pattern": []
            };
            var templates1 = {};
            var _iterator41 = _createForOfIteratorHelper(vErrors),
              _step41;
            try {
              for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
                var err18 = _step41.value;
                if (err18.keyword !== "errorMessage" && !err18.emUsed && err18.dataPath === dataPath + "/elementType/value" && err18.keyword in emErrors1 && err18.schemaPath.indexOf("#/allOf/0/properties/elementType/properties/value") === 0 && /^\/[^\/]*$/.test(err18.schemaPath.slice(49))) {
                  emErrors1[err18.keyword].push(err18);
                  err18.emUsed = true;
                }
              }
            } catch (err) {
              _iterator41.e(err);
            } finally {
              _iterator41.f();
            }
            for (var key1 in emErrors1) {
              if (emErrors1[key1].length) {
                var err19 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/elementType/value",
                  schemaPath: "#/allOf/0/properties/elementType/properties/value/errorMessage",
                  params: {
                    errors: emErrors1[key1]
                  },
                  message: key1 in templates1 ? templates1[key1]() : schema17$1.allOf[0].properties.elementType.properties.value.errorMessage[key1]
                };
                if (vErrors === null) {
                  vErrors = [err19];
                } else {
                  vErrors.push(err19);
                }
                errors++;
              }
            }
            var emErrs1 = [];
            var _iterator42 = _createForOfIteratorHelper(vErrors),
              _step42;
            try {
              for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
                var err20 = _step42.value;
                if (!err20.emUsed) {
                  emErrs1.push(err20);
                }
              }
            } catch (err) {
              _iterator42.e(err);
            } finally {
              _iterator42.f();
            }
            vErrors = emErrs1;
            errors = emErrs1.length;
          }
        }
      } else {
        var err21 = {
          keyword: "type",
          dataPath: dataPath + "/elementType",
          schemaPath: "#/allOf/0/properties/elementType/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err21];
        } else {
          vErrors.push(err21);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors2 = {
          "required": {
            "value": []
          }
        };
        var templates2 = {
          required: {}
        };
        var emPropParams0;
        var emParamsErrors0;
        var _iterator43 = _createForOfIteratorHelper(vErrors),
          _step43;
        try {
          for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
            var err22 = _step43.value;
            if (err22.keyword !== "errorMessage" && !err22.emUsed && err22.dataPath === dataPath + "/elementType" && err22.keyword in emErrors2 && err22.schemaPath.indexOf("#/allOf/0/properties/elementType") === 0 && /^\/[^\/]*$/.test(err22.schemaPath.slice(32))) {
              emPropParams0 = obj0$1[err22.keyword];
              emParamsErrors0 = emErrors2[err22.keyword][err22.params[emPropParams0]];
              if (emParamsErrors0) {
                emParamsErrors0.push(err22);
                err22.emUsed = true;
              }
            }
          }
        } catch (err) {
          _iterator43.e(err);
        } finally {
          _iterator43.f();
        }
        for (var key2 in emErrors2) {
          for (var keyProp0 in emErrors2[key2]) {
            emParamsErrors0 = emErrors2[key2][keyProp0];
            if (emParamsErrors0.length) {
              var tmpl0 = templates2[key2] && templates2[key2][keyProp0];
              var err23 = {
                keyword: "errorMessage",
                dataPath: dataPath + "/elementType",
                schemaPath: "#/allOf/0/properties/elementType/errorMessage",
                params: {
                  errors: emParamsErrors0
                },
                message: tmpl0 ? tmpl0() : schema17$1.allOf[0].properties.elementType.errorMessage[key2][keyProp0]
              };
              if (vErrors === null) {
                vErrors = [err23];
              } else {
                vErrors.push(err23);
              }
              errors++;
            }
          }
        }
        var emErrs2 = [];
        var _iterator44 = _createForOfIteratorHelper(vErrors),
          _step44;
        try {
          for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
            var err24 = _step44.value;
            if (!err24.emUsed) {
              emErrs2.push(err24);
            }
          }
        } catch (err) {
          _iterator44.e(err);
        } finally {
          _iterator44.f();
        }
        vErrors = emErrs2;
        errors = emErrs2.length;
      }
    }
    if (data.metadata !== undefined) {
      var data9 = data.metadata;
      if (!(data9 && _typeof(data9) == "object" && !Array.isArray(data9))) {
        var err25 = {
          keyword: "type",
          dataPath: dataPath + "/metadata",
          schemaPath: "#/allOf/0/properties/metadata/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err25];
        } else {
          vErrors.push(err25);
        }
        errors++;
      }
    }
    if (data.entriesVisible !== undefined) {
      if (typeof data.entriesVisible !== "boolean") {
        var err26 = {
          keyword: "type",
          dataPath: dataPath + "/entriesVisible",
          schemaPath: "#/allOf/0/properties/entriesVisible/type",
          params: {
            type: "boolean"
          },
          message: "should be boolean"
        };
        if (vErrors === null) {
          vErrors = [err26];
        } else {
          vErrors.push(err26);
        }
        errors++;
      }
    }
    if (data.groups !== undefined) {
      var data11 = data.groups;
      if (Array.isArray(data11)) {
        var len1 = data11.length;
        var _loop2 = function _loop2(i1) {
          var data12 = data11[i1];
          if (data12 && _typeof(data12) == "object" && !Array.isArray(data12)) {
            if (data12.id === undefined) {
              var err27 = {
                keyword: "required",
                dataPath: dataPath + "/groups/" + i1,
                schemaPath: "#/allOf/0/properties/groups/items/required",
                params: {
                  missingProperty: "id"
                },
                message: "should have required property '" + "id" + "'"
              };
              if (vErrors === null) {
                vErrors = [err27];
              } else {
                vErrors.push(err27);
              }
              errors++;
            }
            if (data12.label === undefined) {
              var err28 = {
                keyword: "required",
                dataPath: dataPath + "/groups/" + i1,
                schemaPath: "#/allOf/0/properties/groups/items/required",
                params: {
                  missingProperty: "label"
                },
                message: "should have required property '" + "label" + "'"
              };
              if (vErrors === null) {
                vErrors = [err28];
              } else {
                vErrors.push(err28);
              }
              errors++;
            }
            if (data12.id !== undefined) {
              if (typeof data12.id !== "string") {
                var err29 = {
                  keyword: "type",
                  dataPath: dataPath + "/groups/" + i1 + "/id",
                  schemaPath: "#/allOf/0/properties/groups/items/properties/id/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err29];
                } else {
                  vErrors.push(err29);
                }
                errors++;
              }
            }
            if (data12.label !== undefined) {
              if (typeof data12.label !== "string") {
                var err30 = {
                  keyword: "type",
                  dataPath: dataPath + "/groups/" + i1 + "/label",
                  schemaPath: "#/allOf/0/properties/groups/items/properties/label/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err30];
                } else {
                  vErrors.push(err30);
                }
                errors++;
              }
            }
          } else {
            var err31 = {
              keyword: "type",
              dataPath: dataPath + "/groups/" + i1,
              schemaPath: "#/allOf/0/properties/groups/items/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err31];
            } else {
              vErrors.push(err31);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors3 = {
              "required": {
                "id": [],
                "label": []
              }
            };
            var templates3 = {
              required: {
                id: function id() {
                  return "missing id for group \"" + JSON.stringify(i1) + "\"";
                },
                label: function label() {
                  return "missing label for group \"" + JSON.stringify(i1) + "\"";
                }
              }
            };
            var emPropParams1;
            var emParamsErrors1;
            var _iterator45 = _createForOfIteratorHelper(vErrors),
              _step45;
            try {
              for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
                var err32 = _step45.value;
                if (err32.keyword !== "errorMessage" && !err32.emUsed && err32.dataPath === dataPath + "/groups/" + i1 && err32.keyword in emErrors3 && err32.schemaPath.indexOf("#/allOf/0/properties/groups/items") === 0 && /^\/[^\/]*$/.test(err32.schemaPath.slice(33))) {
                  emPropParams1 = obj0$1[err32.keyword];
                  emParamsErrors1 = emErrors3[err32.keyword][err32.params[emPropParams1]];
                  if (emParamsErrors1) {
                    emParamsErrors1.push(err32);
                    err32.emUsed = true;
                  }
                }
              }
            } catch (err) {
              _iterator45.e(err);
            } finally {
              _iterator45.f();
            }
            for (var key3 in emErrors3) {
              for (var keyProp1 in emErrors3[key3]) {
                emParamsErrors1 = emErrors3[key3][keyProp1];
                if (emParamsErrors1.length) {
                  var tmpl1 = templates3[key3] && templates3[key3][keyProp1];
                  var err33 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/groups/" + i1,
                    schemaPath: "#/allOf/0/properties/groups/items/errorMessage",
                    params: {
                      errors: emParamsErrors1
                    },
                    message: tmpl1 ? tmpl1() : schema17$1.allOf[0].properties.groups.items.errorMessage[key3][keyProp1]
                  };
                  if (vErrors === null) {
                    vErrors = [err33];
                  } else {
                    vErrors.push(err33);
                  }
                  errors++;
                }
              }
            }
            var emErrs3 = [];
            var _iterator46 = _createForOfIteratorHelper(vErrors),
              _step46;
            try {
              for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
                var err34 = _step46.value;
                if (!err34.emUsed) {
                  emErrs3.push(err34);
                }
              }
            } catch (err) {
              _iterator46.e(err);
            } finally {
              _iterator46.f();
            }
            vErrors = emErrs3;
            errors = emErrs3.length;
          }
        };
        for (var i1 = 0; i1 < len1; i1++) {
          _loop2(i1);
        }
      } else {
        var err35 = {
          keyword: "type",
          dataPath: dataPath + "/groups",
          schemaPath: "#/allOf/0/properties/groups/type",
          params: {
            type: "array"
          },
          message: "should be array"
        };
        if (vErrors === null) {
          vErrors = [err35];
        } else {
          vErrors.push(err35);
        }
        errors++;
      }
    }
    if (data.documentationRef !== undefined) {
      var data15 = data.documentationRef;
      if (typeof data15 === "string") {
        if (!pattern2$1.test(data15)) {
          var err36 = {
            keyword: "pattern",
            dataPath: dataPath + "/documentationRef",
            schemaPath: "#/allOf/0/properties/documentationRef/pattern",
            params: {
              pattern: "^(https|http)://.*"
            },
            message: "should match pattern \"" + "^(https|http)://.*" + "\""
          };
          if (vErrors === null) {
            vErrors = [err36];
          } else {
            vErrors.push(err36);
          }
          errors++;
        }
      } else {
        var err37 = {
          keyword: "type",
          dataPath: dataPath + "/documentationRef",
          schemaPath: "#/allOf/0/properties/documentationRef/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err37];
        } else {
          vErrors.push(err37);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors4 = {
          "pattern": []
        };
        var templates4 = {};
        var _iterator47 = _createForOfIteratorHelper(vErrors),
          _step47;
        try {
          for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
            var err38 = _step47.value;
            if (err38.keyword !== "errorMessage" && !err38.emUsed && err38.dataPath === dataPath + "/documentationRef" && err38.keyword in emErrors4 && err38.schemaPath.indexOf("#/allOf/0/properties/documentationRef") === 0 && /^\/[^\/]*$/.test(err38.schemaPath.slice(37))) {
              emErrors4[err38.keyword].push(err38);
              err38.emUsed = true;
            }
          }
        } catch (err) {
          _iterator47.e(err);
        } finally {
          _iterator47.f();
        }
        for (var key4 in emErrors4) {
          if (emErrors4[key4].length) {
            var err39 = {
              keyword: "errorMessage",
              dataPath: dataPath + "/documentationRef",
              schemaPath: "#/allOf/0/properties/documentationRef/errorMessage",
              params: {
                errors: emErrors4[key4]
              },
              message: key4 in templates4 ? templates4[key4]() : schema17$1.allOf[0].properties.documentationRef.errorMessage[key4]
            };
            if (vErrors === null) {
              vErrors = [err39];
            } else {
              vErrors.push(err39);
            }
            errors++;
          }
        }
        var emErrs4 = [];
        var _iterator48 = _createForOfIteratorHelper(vErrors),
          _step48;
        try {
          for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
            var err40 = _step48.value;
            if (!err40.emUsed) {
              emErrs4.push(err40);
            }
          }
        } catch (err) {
          _iterator48.e(err);
        } finally {
          _iterator48.f();
        }
        vErrors = emErrs4;
        errors = emErrs4.length;
      }
    }
  }
  if (errors > 0) {
    var emErrors5 = {
      "required": {
        "name": [],
        "id": [],
        "appliesTo": [],
        "properties": []
      }
    };
    var templates5 = {
      required: {}
    };
    var emPropParams2;
    var emParamsErrors2;
    var _iterator49 = _createForOfIteratorHelper(vErrors),
      _step49;
    try {
      for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
        var err41 = _step49.value;
        if (err41.keyword !== "errorMessage" && !err41.emUsed && err41.dataPath === dataPath && err41.keyword in emErrors5 && err41.schemaPath.indexOf("#/allOf/0") === 0 && /^\/[^\/]*$/.test(err41.schemaPath.slice(9))) {
          emPropParams2 = obj0$1[err41.keyword];
          emParamsErrors2 = emErrors5[err41.keyword][err41.params[emPropParams2]];
          if (emParamsErrors2) {
            emParamsErrors2.push(err41);
            err41.emUsed = true;
          }
        }
      }
    } catch (err) {
      _iterator49.e(err);
    } finally {
      _iterator49.f();
    }
    for (var key5 in emErrors5) {
      for (var keyProp2 in emErrors5[key5]) {
        emParamsErrors2 = emErrors5[key5][keyProp2];
        if (emParamsErrors2.length) {
          var tmpl2 = templates5[key5] && templates5[key5][keyProp2];
          var err42 = {
            keyword: "errorMessage",
            dataPath: dataPath,
            schemaPath: "#/allOf/0/errorMessage",
            params: {
              errors: emParamsErrors2
            },
            message: tmpl2 ? tmpl2() : schema17$1.allOf[0].errorMessage[key5][keyProp2]
          };
          if (vErrors === null) {
            vErrors = [err42];
          } else {
            vErrors.push(err42);
          }
          errors++;
        }
      }
    }
    var emErrs5 = [];
    var _iterator50 = _createForOfIteratorHelper(vErrors),
      _step50;
    try {
      for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
        var err43 = _step50.value;
        if (!err43.emUsed) {
          emErrs5.push(err43);
        }
      }
    } catch (err) {
      _iterator50.e(err);
    } finally {
      _iterator50.f();
    }
    vErrors = emErrs5;
    errors = emErrs5.length;
  }
  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    if (data.properties !== undefined) {
      if (!validate16$1(data.properties, {
        dataPath: dataPath + "/properties",
        parentData: data,
        parentDataProperty: "properties",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate16$1.errors : vErrors.concat(validate16$1.errors);
        errors = vErrors.length;
      }
    }
    if (data.scopes !== undefined) {
      var data17 = data.scopes;
      if (Array.isArray(data17)) {
        var len2 = data17.length;
        var _loop3 = function _loop3() {
          var data18 = data17[i2];
          var _errs40 = errors;
          var valid16 = true;
          var _errs41 = errors;
          if (data18 && _typeof(data18) == "object" && !Array.isArray(data18)) {
            if (data18.type === undefined && "type") {
              var err44 = {};
              if (vErrors === null) {
                vErrors = [err44];
              } else {
                vErrors.push(err44);
              }
              errors++;
            } else {
              if (data18.type !== undefined) {
                if (!(data18.type === "bpmn:Error")) {
                  var err45 = {};
                  if (vErrors === null) {
                    vErrors = [err45];
                  } else {
                    vErrors.push(err45);
                  }
                  errors++;
                }
              }
            }
          }
          _valid0 = _errs41 === errors;
          errors = _errs40;
          if (vErrors !== null) {
            if (_errs40) {
              vErrors.length = _errs40;
            } else {
              vErrors = null;
            }
          }
          if (_valid0) {
            var _errs43 = errors;
            if (data18 && _typeof(data18) == "object" && !Array.isArray(data18)) {
              if (data18.id === undefined) {
                var err46 = {
                  keyword: "required",
                  dataPath: dataPath + "/scopes/" + i2,
                  schemaPath: "#/properties/scopes/items/allOf/0/then/required",
                  params: {
                    missingProperty: "id"
                  },
                  message: "should have required property '" + "id" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err46];
                } else {
                  vErrors.push(err46);
                }
                errors++;
              }
            }
            if (errors > 0) {
              var emErrs6 = [];
              var _iterator51 = _createForOfIteratorHelper(vErrors),
                _step51;
              try {
                for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
                  var err47 = _step51.value;
                  if (err47.keyword !== "errorMessage" && !err47.emUsed && (err47.dataPath === dataPath + "/scopes/" + i2 || err47.dataPath.indexOf(dataPath + "/scopes/" + i2) === 0 && err47.dataPath[dataPath + "/scopes/" + i2.length] === "/") && err47.schemaPath.indexOf("#/properties/scopes/items/allOf/0/then") === 0 && err47.schemaPath["#/properties/scopes/items/allOf/0/then".length] === "/") {
                    emErrs6.push(err47);
                    err47.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator51.e(err);
              } finally {
                _iterator51.f();
              }
              if (emErrs6.length) {
                var err48 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/scopes/" + i2,
                  schemaPath: "#/properties/scopes/items/allOf/0/then/errorMessage",
                  params: {
                    errors: emErrs6
                  },
                  message: "invalid scope " + JSON.stringify(data18 && data18.type) + ", missing id"
                };
                if (vErrors === null) {
                  vErrors = [err48];
                } else {
                  vErrors.push(err48);
                }
                errors++;
              }
              var emErrs7 = [];
              var _iterator52 = _createForOfIteratorHelper(vErrors),
                _step52;
              try {
                for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
                  var err49 = _step52.value;
                  if (!err49.emUsed) {
                    emErrs7.push(err49);
                  }
                }
              } catch (err) {
                _iterator52.e(err);
              } finally {
                _iterator52.f();
              }
              vErrors = emErrs7;
              errors = emErrs7.length;
            }
            _valid0 = _errs43 === errors;
            valid16 = _valid0;
          }
          if (!valid16) {
            var err50 = {
              keyword: "if",
              dataPath: dataPath + "/scopes/" + i2,
              schemaPath: "#/properties/scopes/items/allOf/0/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err50];
            } else {
              vErrors.push(err50);
            }
            errors++;
          }
          if (data18 && _typeof(data18) == "object" && !Array.isArray(data18)) {
            if (data18.type === undefined) {
              var err51 = {
                keyword: "required",
                dataPath: dataPath + "/scopes/" + i2,
                schemaPath: "#/properties/scopes/items/required",
                params: {
                  missingProperty: "type"
                },
                message: "should have required property '" + "type" + "'"
              };
              if (vErrors === null) {
                vErrors = [err51];
              } else {
                vErrors.push(err51);
              }
              errors++;
            }
            if (data18.properties === undefined) {
              var err52 = {
                keyword: "required",
                dataPath: dataPath + "/scopes/" + i2,
                schemaPath: "#/properties/scopes/items/required",
                params: {
                  missingProperty: "properties"
                },
                message: "should have required property '" + "properties" + "'"
              };
              if (vErrors === null) {
                vErrors = [err52];
              } else {
                vErrors.push(err52);
              }
              errors++;
            }
            if (data18.type !== undefined) {
              var data20 = data18.type;
              if (typeof data20 !== "string") {
                var err53 = {
                  keyword: "type",
                  dataPath: dataPath + "/scopes/" + i2 + "/type",
                  schemaPath: "#/properties/scopes/items/properties/type/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err53];
                } else {
                  vErrors.push(err53);
                }
                errors++;
              }
              if (!(data20 === "camunda:Connector" || data20 === "bpmn:Error")) {
                var err54 = {
                  keyword: "enum",
                  dataPath: dataPath + "/scopes/" + i2 + "/type",
                  schemaPath: "#/properties/scopes/items/properties/type/enum",
                  params: {
                    allowedValues: schema17$1.properties.scopes.items.properties.type["enum"]
                  },
                  message: "should be equal to one of the allowed values"
                };
                if (vErrors === null) {
                  vErrors = [err54];
                } else {
                  vErrors.push(err54);
                }
                errors++;
              }
              if (errors > 0) {
                var emErrs8 = [];
                var _iterator53 = _createForOfIteratorHelper(vErrors),
                  _step53;
                try {
                  for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
                    var err55 = _step53.value;
                    if (err55.keyword !== "errorMessage" && !err55.emUsed && (err55.dataPath === dataPath + "/scopes/" + i2 + "/type" || err55.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/type") === 0 && err55.dataPath[dataPath + "/scopes/" + i2 + "/type".length] === "/") && err55.schemaPath.indexOf("#/properties/scopes/items/properties/type") === 0 && err55.schemaPath["#/properties/scopes/items/properties/type".length] === "/") {
                      emErrs8.push(err55);
                      err55.emUsed = true;
                    }
                  }
                } catch (err) {
                  _iterator53.e(err);
                } finally {
                  _iterator53.f();
                }
                if (emErrs8.length) {
                  var err56 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/scopes/" + i2 + "/type",
                    schemaPath: "#/properties/scopes/items/properties/type/errorMessage",
                    params: {
                      errors: emErrs8
                    },
                    message: "invalid scope type " + JSON.stringify(data20) + "; must be any of { camunda:Connector, bpmn:Error }"
                  };
                  if (vErrors === null) {
                    vErrors = [err56];
                  } else {
                    vErrors.push(err56);
                  }
                  errors++;
                }
                var emErrs9 = [];
                var _iterator54 = _createForOfIteratorHelper(vErrors),
                  _step54;
                try {
                  for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
                    var err57 = _step54.value;
                    if (!err57.emUsed) {
                      emErrs9.push(err57);
                    }
                  }
                } catch (err) {
                  _iterator54.e(err);
                } finally {
                  _iterator54.f();
                }
                vErrors = emErrs9;
                errors = emErrs9.length;
              }
            }
            if (data18.properties !== undefined) {
              var data21 = data18.properties;
              if (!validate18(data21, {
                dataPath: dataPath + "/scopes/" + i2 + "/properties",
                parentData: data18,
                parentDataProperty: "properties",
                rootData: rootData
              })) {
                vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);
                errors = vErrors.length;
              }
              if (Array.isArray(data21)) {
                var len3 = data21.length;
                var _loop4 = function _loop4(i3) {
                  var data22 = data21[i3];
                  var _errs54 = errors;
                  var valid24 = true;
                  var _errs55 = errors;
                  if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                    if (data22.binding === undefined && "binding") {
                      var err58 = {};
                      if (vErrors === null) {
                        vErrors = [err58];
                      } else {
                        vErrors.push(err58);
                      }
                      errors++;
                    } else {
                      if (data22.binding !== undefined) {
                        var data23 = data22.binding;
                        if (data23 && _typeof(data23) == "object" && !Array.isArray(data23)) {
                          if (data23.type === undefined && "type") {
                            var err59 = {};
                            if (vErrors === null) {
                              vErrors = [err59];
                            } else {
                              vErrors.push(err59);
                            }
                            errors++;
                          } else {
                            if (data23.type !== undefined) {
                              if (!func0$1(data23.type, "property")) {
                                var err60 = {};
                                if (vErrors === null) {
                                  vErrors = [err60];
                                } else {
                                  vErrors.push(err60);
                                }
                                errors++;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  _valid1 = _errs55 === errors;
                  errors = _errs54;
                  if (vErrors !== null) {
                    if (_errs54) {
                      vErrors.length = _errs54;
                    } else {
                      vErrors = null;
                    }
                  }
                  if (_valid1) {
                    var _errs58 = errors;
                    if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                      if (data22.type !== undefined) {
                        var data25 = data22.type;
                        if (!(data25 === "String" || data25 === "Text" || data25 === "Hidden" || data25 === "Dropdown" || data25 === "Boolean")) {
                          var err61 = {
                            keyword: "enum",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                            schemaPath: "#/definitions/properties/allOf/1/items/allOf/0/then/properties/type/enum",
                            params: {
                              allowedValues: schema24.items.allOf[0].then.properties.type["enum"]
                            },
                            message: "should be equal to one of the allowed values"
                          };
                          if (vErrors === null) {
                            vErrors = [err61];
                          } else {
                            vErrors.push(err61);
                          }
                          errors++;
                        }
                        if (errors > 0) {
                          var emErrs10 = [];
                          var _iterator55 = _createForOfIteratorHelper(vErrors),
                            _step55;
                          try {
                            for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
                              var err62 = _step55.value;
                              if (err62.keyword !== "errorMessage" && !err62.emUsed && (err62.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type" || err62.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type") === 0 && err62.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type".length] === "/") && err62.schemaPath.indexOf("#/definitions/properties/allOf/1/items/allOf/0/then/properties/type") === 0 && err62.schemaPath["#/definitions/properties/allOf/1/items/allOf/0/then/properties/type".length] === "/") {
                                emErrs10.push(err62);
                                err62.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator55.e(err);
                          } finally {
                            _iterator55.f();
                          }
                          if (emErrs10.length) {
                            var err63 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                              schemaPath: "#/definitions/properties/allOf/1/items/allOf/0/then/properties/type/errorMessage",
                              params: {
                                errors: emErrs10
                              },
                              message: "invalid property type " + JSON.stringify(data25) + " for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
                            };
                            if (vErrors === null) {
                              vErrors = [err63];
                            } else {
                              vErrors.push(err63);
                            }
                            errors++;
                          }
                          var emErrs11 = [];
                          var _iterator56 = _createForOfIteratorHelper(vErrors),
                            _step56;
                          try {
                            for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
                              var err64 = _step56.value;
                              if (!err64.emUsed) {
                                emErrs11.push(err64);
                              }
                            }
                          } catch (err) {
                            _iterator56.e(err);
                          } finally {
                            _iterator56.f();
                          }
                          vErrors = emErrs11;
                          errors = emErrs11.length;
                        }
                      }
                    }
                    _valid1 = _errs58 === errors;
                    valid24 = _valid1;
                  }
                  if (!valid24) {
                    var err65 = {
                      keyword: "if",
                      dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                      schemaPath: "#/definitions/properties/allOf/1/items/allOf/0/if",
                      params: {
                        failingKeyword: "then"
                      },
                      message: "should match \"then\" schema"
                    };
                    if (vErrors === null) {
                      vErrors = [err65];
                    } else {
                      vErrors.push(err65);
                    }
                    errors++;
                  }
                  var _errs61 = errors;
                  var valid28 = true;
                  var _errs62 = errors;
                  if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                    if (data22.binding === undefined && "binding") {
                      var err66 = {};
                      if (vErrors === null) {
                        vErrors = [err66];
                      } else {
                        vErrors.push(err66);
                      }
                      errors++;
                    } else {
                      if (data22.binding !== undefined) {
                        var data26 = data22.binding;
                        if (data26 && _typeof(data26) == "object" && !Array.isArray(data26)) {
                          if (data26.type === undefined && "type") {
                            var err67 = {};
                            if (vErrors === null) {
                              vErrors = [err67];
                            } else {
                              vErrors.push(err67);
                            }
                            errors++;
                          } else {
                            if (data26.type !== undefined) {
                              if (!func0$1(data26.type, "camunda:executionListener")) {
                                var err68 = {};
                                if (vErrors === null) {
                                  vErrors = [err68];
                                } else {
                                  vErrors.push(err68);
                                }
                                errors++;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  _valid2 = _errs62 === errors;
                  errors = _errs61;
                  if (vErrors !== null) {
                    if (_errs61) {
                      vErrors.length = _errs61;
                    } else {
                      vErrors = null;
                    }
                  }
                  if (_valid2) {
                    var _errs65 = errors;
                    if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                      if (data22.type !== undefined) {
                        if (!(data22.type === "Hidden")) {
                          var err69 = {
                            keyword: "enum",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                            schemaPath: "#/definitions/properties/allOf/1/items/allOf/1/then/properties/type/enum",
                            params: {
                              allowedValues: schema24.items.allOf[1].then.properties.type["enum"]
                            },
                            message: "should be equal to one of the allowed values"
                          };
                          if (vErrors === null) {
                            vErrors = [err69];
                          } else {
                            vErrors.push(err69);
                          }
                          errors++;
                        }
                        if (errors > 0) {
                          var emErrs12 = [];
                          var _iterator57 = _createForOfIteratorHelper(vErrors),
                            _step57;
                          try {
                            for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
                              var err70 = _step57.value;
                              if (err70.keyword !== "errorMessage" && !err70.emUsed && (err70.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type" || err70.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type") === 0 && err70.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type".length] === "/") && err70.schemaPath.indexOf("#/definitions/properties/allOf/1/items/allOf/1/then/properties/type") === 0 && err70.schemaPath["#/definitions/properties/allOf/1/items/allOf/1/then/properties/type".length] === "/") {
                                emErrs12.push(err70);
                                err70.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator57.e(err);
                          } finally {
                            _iterator57.f();
                          }
                          if (emErrs12.length) {
                            var err71 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                              schemaPath: "#/definitions/properties/allOf/1/items/allOf/1/then/properties/type/errorMessage",
                              params: {
                                errors: emErrs12
                              },
                              message: "invalid property type " + JSON.stringify(data22 && data22.type) + " for binding type \"camunda:executionListener\"; must be \"Hidden\""
                            };
                            if (vErrors === null) {
                              vErrors = [err71];
                            } else {
                              vErrors.push(err71);
                            }
                            errors++;
                          }
                          var emErrs13 = [];
                          var _iterator58 = _createForOfIteratorHelper(vErrors),
                            _step58;
                          try {
                            for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
                              var err72 = _step58.value;
                              if (!err72.emUsed) {
                                emErrs13.push(err72);
                              }
                            }
                          } catch (err) {
                            _iterator58.e(err);
                          } finally {
                            _iterator58.f();
                          }
                          vErrors = emErrs13;
                          errors = emErrs13.length;
                        }
                      }
                    }
                    _valid2 = _errs65 === errors;
                    valid28 = _valid2;
                  }
                  if (!valid28) {
                    var err73 = {
                      keyword: "if",
                      dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                      schemaPath: "#/definitions/properties/allOf/1/items/allOf/1/if",
                      params: {
                        failingKeyword: "then"
                      },
                      message: "should match \"then\" schema"
                    };
                    if (vErrors === null) {
                      vErrors = [err73];
                    } else {
                      vErrors.push(err73);
                    }
                    errors++;
                  }
                  var _errs68 = errors;
                  var valid32 = true;
                  var _errs69 = errors;
                  if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                    if (data22.binding === undefined && "binding") {
                      var err74 = {};
                      if (vErrors === null) {
                        vErrors = [err74];
                      } else {
                        vErrors.push(err74);
                      }
                      errors++;
                    } else {
                      if (data22.binding !== undefined) {
                        var data29 = data22.binding;
                        if (data29 && _typeof(data29) == "object" && !Array.isArray(data29)) {
                          if (data29.type === undefined && "type") {
                            var err75 = {};
                            if (vErrors === null) {
                              vErrors = [err75];
                            } else {
                              vErrors.push(err75);
                            }
                            errors++;
                          } else {
                            if (data29.type !== undefined) {
                              var data30 = data29.type;
                              if (!(data30 === "camunda:property" || data30 === "camunda:outputParameter" || data30 === "camunda:in" || data30 === "camunda:in:businessKey" || data30 === "camunda:out" || data30 === "camunda:errorEventDefinition")) {
                                var err76 = {};
                                if (vErrors === null) {
                                  vErrors = [err76];
                                } else {
                                  vErrors.push(err76);
                                }
                                errors++;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  _valid3 = _errs69 === errors;
                  errors = _errs68;
                  if (vErrors !== null) {
                    if (_errs68) {
                      vErrors.length = _errs68;
                    } else {
                      vErrors = null;
                    }
                  }
                  if (_valid3) {
                    var _errs72 = errors;
                    if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                      if (data22.type !== undefined) {
                        var data31 = data22.type;
                        if (!(data31 === "String" || data31 === "Hidden" || data31 === "Dropdown")) {
                          var err77 = {
                            keyword: "enum",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                            schemaPath: "#/definitions/properties/allOf/1/items/allOf/2/then/properties/type/enum",
                            params: {
                              allowedValues: schema24.items.allOf[2].then.properties.type["enum"]
                            },
                            message: "should be equal to one of the allowed values"
                          };
                          if (vErrors === null) {
                            vErrors = [err77];
                          } else {
                            vErrors.push(err77);
                          }
                          errors++;
                        }
                        if (errors > 0) {
                          var emErrs14 = [];
                          var _iterator59 = _createForOfIteratorHelper(vErrors),
                            _step59;
                          try {
                            for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
                              var err78 = _step59.value;
                              if (err78.keyword !== "errorMessage" && !err78.emUsed && (err78.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type" || err78.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type") === 0 && err78.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type".length] === "/") && err78.schemaPath.indexOf("#/definitions/properties/allOf/1/items/allOf/2/then/properties/type") === 0 && err78.schemaPath["#/definitions/properties/allOf/1/items/allOf/2/then/properties/type".length] === "/") {
                                emErrs14.push(err78);
                                err78.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator59.e(err);
                          } finally {
                            _iterator59.f();
                          }
                          if (emErrs14.length) {
                            var err79 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                              schemaPath: "#/definitions/properties/allOf/1/items/allOf/2/then/properties/type/errorMessage",
                              params: {
                                errors: emErrs14
                              },
                              message: "invalid property type " + JSON.stringify(data31) + " for binding type " + JSON.stringify(data22 && data22.binding && data22.binding.type) + "; must be any of { String, Hidden, Dropdown }"
                            };
                            if (vErrors === null) {
                              vErrors = [err79];
                            } else {
                              vErrors.push(err79);
                            }
                            errors++;
                          }
                          var emErrs15 = [];
                          var _iterator60 = _createForOfIteratorHelper(vErrors),
                            _step60;
                          try {
                            for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
                              var err80 = _step60.value;
                              if (!err80.emUsed) {
                                emErrs15.push(err80);
                              }
                            }
                          } catch (err) {
                            _iterator60.e(err);
                          } finally {
                            _iterator60.f();
                          }
                          vErrors = emErrs15;
                          errors = emErrs15.length;
                        }
                      }
                    }
                    _valid3 = _errs72 === errors;
                    valid32 = _valid3;
                  }
                  if (!valid32) {
                    var err81 = {
                      keyword: "if",
                      dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                      schemaPath: "#/definitions/properties/allOf/1/items/allOf/2/if",
                      params: {
                        failingKeyword: "then"
                      },
                      message: "should match \"then\" schema"
                    };
                    if (vErrors === null) {
                      vErrors = [err81];
                    } else {
                      vErrors.push(err81);
                    }
                    errors++;
                  }
                  var _errs75 = errors;
                  var valid36 = true;
                  var _errs76 = errors;
                  if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                    if (data22.binding === undefined && "binding") {
                      var err82 = {};
                      if (vErrors === null) {
                        vErrors = [err82];
                      } else {
                        vErrors.push(err82);
                      }
                      errors++;
                    } else {
                      if (data22.binding !== undefined) {
                        var data32 = data22.binding;
                        if (data32 && _typeof(data32) == "object" && !Array.isArray(data32)) {
                          if (data32.type === undefined && "type") {
                            var err83 = {};
                            if (vErrors === null) {
                              vErrors = [err83];
                            } else {
                              vErrors.push(err83);
                            }
                            errors++;
                          } else {
                            if (data32.type !== undefined) {
                              var data33 = data32.type;
                              if (!(data33 === "camunda:inputParameter" || data33 === "camunda:field")) {
                                var err84 = {};
                                if (vErrors === null) {
                                  vErrors = [err84];
                                } else {
                                  vErrors.push(err84);
                                }
                                errors++;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  _valid4 = _errs76 === errors;
                  errors = _errs75;
                  if (vErrors !== null) {
                    if (_errs75) {
                      vErrors.length = _errs75;
                    } else {
                      vErrors = null;
                    }
                  }
                  if (_valid4) {
                    var _errs79 = errors;
                    if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                      if (data22.type !== undefined) {
                        var data34 = data22.type;
                        if (!(data34 === "String" || data34 === "Text" || data34 === "Hidden" || data34 === "Dropdown")) {
                          var err85 = {
                            keyword: "enum",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                            schemaPath: "#/definitions/properties/allOf/1/items/allOf/3/then/properties/type/enum",
                            params: {
                              allowedValues: schema24.items.allOf[3].then.properties.type["enum"]
                            },
                            message: "should be equal to one of the allowed values"
                          };
                          if (vErrors === null) {
                            vErrors = [err85];
                          } else {
                            vErrors.push(err85);
                          }
                          errors++;
                        }
                        if (errors > 0) {
                          var emErrs16 = [];
                          var _iterator61 = _createForOfIteratorHelper(vErrors),
                            _step61;
                          try {
                            for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                              var err86 = _step61.value;
                              if (err86.keyword !== "errorMessage" && !err86.emUsed && (err86.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type" || err86.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type") === 0 && err86.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type".length] === "/") && err86.schemaPath.indexOf("#/definitions/properties/allOf/1/items/allOf/3/then/properties/type") === 0 && err86.schemaPath["#/definitions/properties/allOf/1/items/allOf/3/then/properties/type".length] === "/") {
                                emErrs16.push(err86);
                                err86.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator61.e(err);
                          } finally {
                            _iterator61.f();
                          }
                          if (emErrs16.length) {
                            var err87 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/type",
                              schemaPath: "#/definitions/properties/allOf/1/items/allOf/3/then/properties/type/errorMessage",
                              params: {
                                errors: emErrs16
                              },
                              message: "invalid property type " + JSON.stringify(data34) + " for binding type " + JSON.stringify(data22 && data22.binding && data22.binding.type) + "; must be any of { String, Text, Hidden, Dropdown }"
                            };
                            if (vErrors === null) {
                              vErrors = [err87];
                            } else {
                              vErrors.push(err87);
                            }
                            errors++;
                          }
                          var emErrs17 = [];
                          var _iterator62 = _createForOfIteratorHelper(vErrors),
                            _step62;
                          try {
                            for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
                              var err88 = _step62.value;
                              if (!err88.emUsed) {
                                emErrs17.push(err88);
                              }
                            }
                          } catch (err) {
                            _iterator62.e(err);
                          } finally {
                            _iterator62.f();
                          }
                          vErrors = emErrs17;
                          errors = emErrs17.length;
                        }
                      }
                    }
                    _valid4 = _errs79 === errors;
                    valid36 = _valid4;
                  }
                  if (!valid36) {
                    var err89 = {
                      keyword: "if",
                      dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                      schemaPath: "#/definitions/properties/allOf/1/items/allOf/3/if",
                      params: {
                        failingKeyword: "then"
                      },
                      message: "should match \"then\" schema"
                    };
                    if (vErrors === null) {
                      vErrors = [err89];
                    } else {
                      vErrors.push(err89);
                    }
                    errors++;
                  }
                  if (data22 && _typeof(data22) == "object" && !Array.isArray(data22)) {
                    if (data22.binding === undefined) {
                      var err90 = {
                        keyword: "required",
                        dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                        schemaPath: "#/definitions/properties/allOf/1/items/required",
                        params: {
                          missingProperty: "binding"
                        },
                        message: "should have required property '" + "binding" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err90];
                      } else {
                        vErrors.push(err90);
                      }
                      errors++;
                    }
                    if (data22.binding !== undefined) {
                      var data35 = data22.binding;
                      var _errs84 = errors;
                      var valid42 = true;
                      var _errs85 = errors;
                      if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                        if (data35.type === undefined && "type") {
                          var err91 = {};
                          if (vErrors === null) {
                            vErrors = [err91];
                          } else {
                            vErrors.push(err91);
                          }
                          errors++;
                        } else {
                          if (data35.type !== undefined) {
                            var data36 = data35.type;
                            if (!(data36 === "property" || data36 === "camunda:property" || data36 === "camunda:inputParameter" || data36 === "camunda:field")) {
                              var err92 = {};
                              if (vErrors === null) {
                                vErrors = [err92];
                              } else {
                                vErrors.push(err92);
                              }
                              errors++;
                            }
                          }
                        }
                      }
                      _valid5 = _errs85 === errors;
                      errors = _errs84;
                      if (vErrors !== null) {
                        if (_errs84) {
                          vErrors.length = _errs84;
                        } else {
                          vErrors = null;
                        }
                      }
                      if (_valid5) {
                        var _errs87 = errors;
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.name === undefined) {
                            var err93 = {
                              keyword: "required",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/0/then/required",
                              params: {
                                missingProperty: "name"
                              },
                              message: "should have required property '" + "name" + "'"
                            };
                            if (vErrors === null) {
                              vErrors = [err93];
                            } else {
                              vErrors.push(err93);
                            }
                            errors++;
                          }
                        }
                        if (errors > 0) {
                          var emErrs18 = [];
                          var _iterator63 = _createForOfIteratorHelper(vErrors),
                            _step63;
                          try {
                            for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
                              var err94 = _step63.value;
                              if (err94.keyword !== "errorMessage" && !err94.emUsed && (err94.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding" || err94.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding") === 0 && err94.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding".length] === "/") && err94.schemaPath.indexOf("#/definitions/properties/allOf/1/items/properties/binding/allOf/0/then") === 0 && err94.schemaPath["#/definitions/properties/allOf/1/items/properties/binding/allOf/0/then".length] === "/") {
                                emErrs18.push(err94);
                                err94.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator63.e(err);
                          } finally {
                            _iterator63.f();
                          }
                          if (emErrs18.length) {
                            var err95 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/0/then/errorMessage",
                              params: {
                                errors: emErrs18
                              },
                              message: "property.binding " + JSON.stringify(data35 && data35.type) + " requires name"
                            };
                            if (vErrors === null) {
                              vErrors = [err95];
                            } else {
                              vErrors.push(err95);
                            }
                            errors++;
                          }
                          var emErrs19 = [];
                          var _iterator64 = _createForOfIteratorHelper(vErrors),
                            _step64;
                          try {
                            for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
                              var err96 = _step64.value;
                              if (!err96.emUsed) {
                                emErrs19.push(err96);
                              }
                            }
                          } catch (err) {
                            _iterator64.e(err);
                          } finally {
                            _iterator64.f();
                          }
                          vErrors = emErrs19;
                          errors = emErrs19.length;
                        }
                        _valid5 = _errs87 === errors;
                        valid42 = _valid5;
                      }
                      if (!valid42) {
                        var err97 = {
                          keyword: "if",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                          schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/0/if",
                          params: {
                            failingKeyword: "then"
                          },
                          message: "should match \"then\" schema"
                        };
                        if (vErrors === null) {
                          vErrors = [err97];
                        } else {
                          vErrors.push(err97);
                        }
                        errors++;
                      }
                      var _errs89 = errors;
                      var valid44 = true;
                      var _errs90 = errors;
                      if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                        if (data35.type === undefined && "type") {
                          var err98 = {};
                          if (vErrors === null) {
                            vErrors = [err98];
                          } else {
                            vErrors.push(err98);
                          }
                          errors++;
                        } else {
                          if (data35.type !== undefined) {
                            if (!func0$1(data35.type, "camunda:outputParameter")) {
                              var err99 = {};
                              if (vErrors === null) {
                                vErrors = [err99];
                              } else {
                                vErrors.push(err99);
                              }
                              errors++;
                            }
                          }
                        }
                      }
                      _valid6 = _errs90 === errors;
                      errors = _errs89;
                      if (vErrors !== null) {
                        if (_errs89) {
                          vErrors.length = _errs89;
                        } else {
                          vErrors = null;
                        }
                      }
                      if (_valid6) {
                        var _errs92 = errors;
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.source === undefined) {
                            var err100 = {
                              keyword: "required",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/1/then/required",
                              params: {
                                missingProperty: "source"
                              },
                              message: "should have required property '" + "source" + "'"
                            };
                            if (vErrors === null) {
                              vErrors = [err100];
                            } else {
                              vErrors.push(err100);
                            }
                            errors++;
                          }
                        }
                        if (errors > 0) {
                          var emErrs20 = [];
                          var _iterator65 = _createForOfIteratorHelper(vErrors),
                            _step65;
                          try {
                            for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
                              var err101 = _step65.value;
                              if (err101.keyword !== "errorMessage" && !err101.emUsed && (err101.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding" || err101.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding") === 0 && err101.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding".length] === "/") && err101.schemaPath.indexOf("#/definitions/properties/allOf/1/items/properties/binding/allOf/1/then") === 0 && err101.schemaPath["#/definitions/properties/allOf/1/items/properties/binding/allOf/1/then".length] === "/") {
                                emErrs20.push(err101);
                                err101.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator65.e(err);
                          } finally {
                            _iterator65.f();
                          }
                          if (emErrs20.length) {
                            var err102 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/1/then/errorMessage",
                              params: {
                                errors: emErrs20
                              },
                              message: "property.binding " + JSON.stringify(data35 && data35.type) + " requires source"
                            };
                            if (vErrors === null) {
                              vErrors = [err102];
                            } else {
                              vErrors.push(err102);
                            }
                            errors++;
                          }
                          var emErrs21 = [];
                          var _iterator66 = _createForOfIteratorHelper(vErrors),
                            _step66;
                          try {
                            for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                              var err103 = _step66.value;
                              if (!err103.emUsed) {
                                emErrs21.push(err103);
                              }
                            }
                          } catch (err) {
                            _iterator66.e(err);
                          } finally {
                            _iterator66.f();
                          }
                          vErrors = emErrs21;
                          errors = emErrs21.length;
                        }
                        _valid6 = _errs92 === errors;
                        valid44 = _valid6;
                      }
                      if (!valid44) {
                        var err104 = {
                          keyword: "if",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                          schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/1/if",
                          params: {
                            failingKeyword: "then"
                          },
                          message: "should match \"then\" schema"
                        };
                        if (vErrors === null) {
                          vErrors = [err104];
                        } else {
                          vErrors.push(err104);
                        }
                        errors++;
                      }
                      var _errs94 = errors;
                      var valid46 = true;
                      var _errs95 = errors;
                      if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                        if (data35.type === undefined && "type") {
                          var err105 = {};
                          if (vErrors === null) {
                            vErrors = [err105];
                          } else {
                            vErrors.push(err105);
                          }
                          errors++;
                        } else {
                          if (data35.type !== undefined) {
                            if (!func0$1(data35.type, "camunda:in")) {
                              var err106 = {};
                              if (vErrors === null) {
                                vErrors = [err106];
                              } else {
                                vErrors.push(err106);
                              }
                              errors++;
                            }
                          }
                        }
                      }
                      _valid7 = _errs95 === errors;
                      errors = _errs94;
                      if (vErrors !== null) {
                        if (_errs94) {
                          vErrors.length = _errs94;
                        } else {
                          vErrors = null;
                        }
                      }
                      if (_valid7) {
                        var _errs97 = errors;
                        var _errs98 = errors;
                        var valid48 = false;
                        var _errs99 = errors;
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.variables === undefined) {
                            var err107 = {
                              keyword: "required",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/2/then/anyOf/0/required",
                              params: {
                                missingProperty: "variables"
                              },
                              message: "should have required property '" + "variables" + "'"
                            };
                            if (vErrors === null) {
                              vErrors = [err107];
                            } else {
                              vErrors.push(err107);
                            }
                            errors++;
                          }
                        }
                        _valid8 = _errs99 === errors;
                        valid48 = valid48 || _valid8;
                        if (!valid48) {
                          var _errs100 = errors;
                          if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                            if (data35.target === undefined) {
                              var err108 = {
                                keyword: "required",
                                dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/2/then/anyOf/1/required",
                                params: {
                                  missingProperty: "target"
                                },
                                message: "should have required property '" + "target" + "'"
                              };
                              if (vErrors === null) {
                                vErrors = [err108];
                              } else {
                                vErrors.push(err108);
                              }
                              errors++;
                            }
                          }
                          _valid8 = _errs100 === errors;
                          valid48 = valid48 || _valid8;
                        }
                        if (!valid48) {
                          var err109 = {
                            keyword: "anyOf",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                            schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/2/then/anyOf",
                            params: {},
                            message: "should match some schema in anyOf"
                          };
                          if (vErrors === null) {
                            vErrors = [err109];
                          } else {
                            vErrors.push(err109);
                          }
                          errors++;
                        } else {
                          errors = _errs98;
                          if (vErrors !== null) {
                            if (_errs98) {
                              vErrors.length = _errs98;
                            } else {
                              vErrors = null;
                            }
                          }
                        }
                        if (errors > 0) {
                          var emErrs22 = [];
                          var _iterator67 = _createForOfIteratorHelper(vErrors),
                            _step67;
                          try {
                            for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
                              var err110 = _step67.value;
                              if (err110.keyword !== "errorMessage" && !err110.emUsed && (err110.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding" || err110.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding") === 0 && err110.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding".length] === "/") && err110.schemaPath.indexOf("#/definitions/properties/allOf/1/items/properties/binding/allOf/2/then") === 0 && err110.schemaPath["#/definitions/properties/allOf/1/items/properties/binding/allOf/2/then".length] === "/") {
                                emErrs22.push(err110);
                                err110.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator67.e(err);
                          } finally {
                            _iterator67.f();
                          }
                          if (emErrs22.length) {
                            var err111 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/2/then/errorMessage",
                              params: {
                                errors: emErrs22
                              },
                              message: "property.binding " + JSON.stringify(data35 && data35.type) + " requires variables, target, or both"
                            };
                            if (vErrors === null) {
                              vErrors = [err111];
                            } else {
                              vErrors.push(err111);
                            }
                            errors++;
                          }
                          var emErrs23 = [];
                          var _iterator68 = _createForOfIteratorHelper(vErrors),
                            _step68;
                          try {
                            for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
                              var err112 = _step68.value;
                              if (!err112.emUsed) {
                                emErrs23.push(err112);
                              }
                            }
                          } catch (err) {
                            _iterator68.e(err);
                          } finally {
                            _iterator68.f();
                          }
                          vErrors = emErrs23;
                          errors = emErrs23.length;
                        }
                        _valid7 = _errs97 === errors;
                        valid46 = _valid7;
                      }
                      if (!valid46) {
                        var err113 = {
                          keyword: "if",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                          schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/2/if",
                          params: {
                            failingKeyword: "then"
                          },
                          message: "should match \"then\" schema"
                        };
                        if (vErrors === null) {
                          vErrors = [err113];
                        } else {
                          vErrors.push(err113);
                        }
                        errors++;
                      }
                      var _errs102 = errors;
                      var valid49 = true;
                      var _errs103 = errors;
                      if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                        if (data35.type === undefined && "type") {
                          var err114 = {};
                          if (vErrors === null) {
                            vErrors = [err114];
                          } else {
                            vErrors.push(err114);
                          }
                          errors++;
                        } else {
                          if (data35.type !== undefined) {
                            if (!func0$1(data35.type, "camunda:out")) {
                              var err115 = {};
                              if (vErrors === null) {
                                vErrors = [err115];
                              } else {
                                vErrors.push(err115);
                              }
                              errors++;
                            }
                          }
                        }
                      }
                      _valid9 = _errs103 === errors;
                      errors = _errs102;
                      if (vErrors !== null) {
                        if (_errs102) {
                          vErrors.length = _errs102;
                        } else {
                          vErrors = null;
                        }
                      }
                      if (_valid9) {
                        var _errs105 = errors;
                        var _errs106 = errors;
                        var valid51 = false;
                        var passing0 = null;
                        var _errs107 = errors;
                        var _errs108 = errors;
                        var _errs109 = errors;
                        var _errs110 = errors;
                        var valid53 = false;
                        var _errs111 = errors;
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.source === undefined && "source") {
                            var err116 = {};
                            if (vErrors === null) {
                              vErrors = [err116];
                            } else {
                              vErrors.push(err116);
                            }
                            errors++;
                          }
                        }
                        _valid11 = _errs111 === errors;
                        valid53 = valid53 || _valid11;
                        if (!valid53) {
                          var _errs112 = errors;
                          if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                            if (data35.sourceExpression === undefined && "sourceExpression") {
                              var err117 = {};
                              if (vErrors === null) {
                                vErrors = [err117];
                              } else {
                                vErrors.push(err117);
                              }
                              errors++;
                            }
                          }
                          _valid11 = _errs112 === errors;
                          valid53 = valid53 || _valid11;
                        }
                        if (!valid53) {
                          var err118 = {};
                          if (vErrors === null) {
                            vErrors = [err118];
                          } else {
                            vErrors.push(err118);
                          }
                          errors++;
                        } else {
                          errors = _errs110;
                          if (vErrors !== null) {
                            if (_errs110) {
                              vErrors.length = _errs110;
                            } else {
                              vErrors = null;
                            }
                          }
                        }
                        valid52 = _errs109 === errors;
                        if (!valid52) {
                          errors = _errs108;
                          if (vErrors !== null) {
                            if (_errs108) {
                              vErrors.length = _errs108;
                            } else {
                              vErrors = null;
                            }
                          }
                        } else {
                          var err119 = {
                            keyword: "not",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                            schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/0/not",
                            params: {},
                            message: "should NOT be valid"
                          };
                          if (vErrors === null) {
                            vErrors = [err119];
                          } else {
                            vErrors.push(err119);
                          }
                          errors++;
                        }
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.variables === undefined) {
                            var err120 = {
                              keyword: "required",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/0/required",
                              params: {
                                missingProperty: "variables"
                              },
                              message: "should have required property '" + "variables" + "'"
                            };
                            if (vErrors === null) {
                              vErrors = [err120];
                            } else {
                              vErrors.push(err120);
                            }
                            errors++;
                          }
                        }
                        _valid10 = _errs107 === errors;
                        if (_valid10) {
                          valid51 = true;
                          passing0 = 0;
                        }
                        var _errs113 = errors;
                        var _errs114 = errors;
                        var _errs115 = errors;
                        var _errs116 = errors;
                        var valid55 = false;
                        var _errs117 = errors;
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.variables === undefined && "variables") {
                            var err121 = {};
                            if (vErrors === null) {
                              vErrors = [err121];
                            } else {
                              vErrors.push(err121);
                            }
                            errors++;
                          }
                        }
                        _valid12 = _errs117 === errors;
                        valid55 = valid55 || _valid12;
                        if (!valid55) {
                          var _errs118 = errors;
                          if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                            if (data35.sourceExpression === undefined && "sourceExpression") {
                              var err122 = {};
                              if (vErrors === null) {
                                vErrors = [err122];
                              } else {
                                vErrors.push(err122);
                              }
                              errors++;
                            }
                          }
                          _valid12 = _errs118 === errors;
                          valid55 = valid55 || _valid12;
                        }
                        if (!valid55) {
                          var err123 = {};
                          if (vErrors === null) {
                            vErrors = [err123];
                          } else {
                            vErrors.push(err123);
                          }
                          errors++;
                        } else {
                          errors = _errs116;
                          if (vErrors !== null) {
                            if (_errs116) {
                              vErrors.length = _errs116;
                            } else {
                              vErrors = null;
                            }
                          }
                        }
                        valid54 = _errs115 === errors;
                        if (!valid54) {
                          errors = _errs114;
                          if (vErrors !== null) {
                            if (_errs114) {
                              vErrors.length = _errs114;
                            } else {
                              vErrors = null;
                            }
                          }
                        } else {
                          var err124 = {
                            keyword: "not",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                            schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/1/not",
                            params: {},
                            message: "should NOT be valid"
                          };
                          if (vErrors === null) {
                            vErrors = [err124];
                          } else {
                            vErrors.push(err124);
                          }
                          errors++;
                        }
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.source === undefined) {
                            var err125 = {
                              keyword: "required",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/1/required",
                              params: {
                                missingProperty: "source"
                              },
                              message: "should have required property '" + "source" + "'"
                            };
                            if (vErrors === null) {
                              vErrors = [err125];
                            } else {
                              vErrors.push(err125);
                            }
                            errors++;
                          }
                        }
                        _valid10 = _errs113 === errors;
                        if (_valid10 && valid51) {
                          valid51 = false;
                          passing0 = [passing0, 1];
                        } else {
                          if (_valid10) {
                            valid51 = true;
                            passing0 = 1;
                          }
                          var _errs119 = errors;
                          var _errs120 = errors;
                          var _errs121 = errors;
                          var _errs122 = errors;
                          var valid57 = false;
                          var _errs123 = errors;
                          if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                            if (data35.variables === undefined && "variables") {
                              var err126 = {};
                              if (vErrors === null) {
                                vErrors = [err126];
                              } else {
                                vErrors.push(err126);
                              }
                              errors++;
                            }
                          }
                          _valid13 = _errs123 === errors;
                          valid57 = valid57 || _valid13;
                          if (!valid57) {
                            var _errs124 = errors;
                            if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                              if (data35.source === undefined && "source") {
                                var err127 = {};
                                if (vErrors === null) {
                                  vErrors = [err127];
                                } else {
                                  vErrors.push(err127);
                                }
                                errors++;
                              }
                            }
                            _valid13 = _errs124 === errors;
                            valid57 = valid57 || _valid13;
                          }
                          if (!valid57) {
                            var err128 = {};
                            if (vErrors === null) {
                              vErrors = [err128];
                            } else {
                              vErrors.push(err128);
                            }
                            errors++;
                          } else {
                            errors = _errs122;
                            if (vErrors !== null) {
                              if (_errs122) {
                                vErrors.length = _errs122;
                              } else {
                                vErrors = null;
                              }
                            }
                          }
                          valid56 = _errs121 === errors;
                          if (!valid56) {
                            errors = _errs120;
                            if (vErrors !== null) {
                              if (_errs120) {
                                vErrors.length = _errs120;
                              } else {
                                vErrors = null;
                              }
                            }
                          } else {
                            var err129 = {
                              keyword: "not",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/2/not",
                              params: {},
                              message: "should NOT be valid"
                            };
                            if (vErrors === null) {
                              vErrors = [err129];
                            } else {
                              vErrors.push(err129);
                            }
                            errors++;
                          }
                          if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                            if (data35.sourceExpression === undefined) {
                              var err130 = {
                                keyword: "required",
                                dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/2/required",
                                params: {
                                  missingProperty: "sourceExpression"
                                },
                                message: "should have required property '" + "sourceExpression" + "'"
                              };
                              if (vErrors === null) {
                                vErrors = [err130];
                              } else {
                                vErrors.push(err130);
                              }
                              errors++;
                            }
                          }
                          _valid10 = _errs119 === errors;
                          if (_valid10 && valid51) {
                            valid51 = false;
                            passing0 = [passing0, 2];
                          } else {
                            if (_valid10) {
                              valid51 = true;
                              passing0 = 2;
                            }
                            var _errs125 = errors;
                            var _errs126 = errors;
                            var _errs127 = errors;
                            if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                              if (data35.source === undefined && "source") {
                                var err131 = {};
                                if (vErrors === null) {
                                  vErrors = [err131];
                                } else {
                                  vErrors.push(err131);
                                }
                                errors++;
                              }
                            }
                            valid58 = _errs127 === errors;
                            if (!valid58) {
                              errors = _errs126;
                              if (vErrors !== null) {
                                if (_errs126) {
                                  vErrors.length = _errs126;
                                } else {
                                  vErrors = null;
                                }
                              }
                            } else {
                              var err132 = {
                                keyword: "not",
                                dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/3/not",
                                params: {},
                                message: "should NOT be valid"
                              };
                              if (vErrors === null) {
                                vErrors = [err132];
                              } else {
                                vErrors.push(err132);
                              }
                              errors++;
                            }
                            if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                              if (data35.variables === undefined) {
                                var err133 = {
                                  keyword: "required",
                                  dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                  schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/3/required",
                                  params: {
                                    missingProperty: "variables"
                                  },
                                  message: "should have required property '" + "variables" + "'"
                                };
                                if (vErrors === null) {
                                  vErrors = [err133];
                                } else {
                                  vErrors.push(err133);
                                }
                                errors++;
                              }
                              if (data35.sourceExpression === undefined) {
                                var err134 = {
                                  keyword: "required",
                                  dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                  schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/3/required",
                                  params: {
                                    missingProperty: "sourceExpression"
                                  },
                                  message: "should have required property '" + "sourceExpression" + "'"
                                };
                                if (vErrors === null) {
                                  vErrors = [err134];
                                } else {
                                  vErrors.push(err134);
                                }
                                errors++;
                              }
                            }
                            _valid10 = _errs125 === errors;
                            if (_valid10 && valid51) {
                              valid51 = false;
                              passing0 = [passing0, 3];
                            } else {
                              if (_valid10) {
                                valid51 = true;
                                passing0 = 3;
                              }
                              var _errs128 = errors;
                              var _errs129 = errors;
                              var _errs130 = errors;
                              if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                                if (data35.sourceExpression === undefined && "sourceExpression") {
                                  var err135 = {};
                                  if (vErrors === null) {
                                    vErrors = [err135];
                                  } else {
                                    vErrors.push(err135);
                                  }
                                  errors++;
                                }
                              }
                              valid59 = _errs130 === errors;
                              if (!valid59) {
                                errors = _errs129;
                                if (vErrors !== null) {
                                  if (_errs129) {
                                    vErrors.length = _errs129;
                                  } else {
                                    vErrors = null;
                                  }
                                }
                              } else {
                                var err136 = {
                                  keyword: "not",
                                  dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                  schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/4/not",
                                  params: {},
                                  message: "should NOT be valid"
                                };
                                if (vErrors === null) {
                                  vErrors = [err136];
                                } else {
                                  vErrors.push(err136);
                                }
                                errors++;
                              }
                              if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                                if (data35.variables === undefined) {
                                  var err137 = {
                                    keyword: "required",
                                    dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                    schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/4/required",
                                    params: {
                                      missingProperty: "variables"
                                    },
                                    message: "should have required property '" + "variables" + "'"
                                  };
                                  if (vErrors === null) {
                                    vErrors = [err137];
                                  } else {
                                    vErrors.push(err137);
                                  }
                                  errors++;
                                }
                                if (data35.source === undefined) {
                                  var err138 = {
                                    keyword: "required",
                                    dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                                    schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf/4/required",
                                    params: {
                                      missingProperty: "source"
                                    },
                                    message: "should have required property '" + "source" + "'"
                                  };
                                  if (vErrors === null) {
                                    vErrors = [err138];
                                  } else {
                                    vErrors.push(err138);
                                  }
                                  errors++;
                                }
                              }
                              _valid10 = _errs128 === errors;
                              if (_valid10 && valid51) {
                                valid51 = false;
                                passing0 = [passing0, 4];
                              } else {
                                if (_valid10) {
                                  valid51 = true;
                                  passing0 = 4;
                                }
                              }
                            }
                          }
                        }
                        if (!valid51) {
                          var err139 = {
                            keyword: "oneOf",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                            schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/oneOf",
                            params: {
                              passingSchemas: passing0
                            },
                            message: "should match exactly one schema in oneOf"
                          };
                          if (vErrors === null) {
                            vErrors = [err139];
                          } else {
                            vErrors.push(err139);
                          }
                          errors++;
                        } else {
                          errors = _errs106;
                          if (vErrors !== null) {
                            if (_errs106) {
                              vErrors.length = _errs106;
                            } else {
                              vErrors = null;
                            }
                          }
                        }
                        if (errors > 0) {
                          var emErrs24 = [];
                          var _iterator69 = _createForOfIteratorHelper(vErrors),
                            _step69;
                          try {
                            for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
                              var err140 = _step69.value;
                              if (err140.keyword !== "errorMessage" && !err140.emUsed && (err140.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding" || err140.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding") === 0 && err140.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding".length] === "/") && err140.schemaPath.indexOf("#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then") === 0 && err140.schemaPath["#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then".length] === "/") {
                                emErrs24.push(err140);
                                err140.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator69.e(err);
                          } finally {
                            _iterator69.f();
                          }
                          if (emErrs24.length) {
                            var err141 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/then/errorMessage",
                              params: {
                                errors: emErrs24
                              },
                              message: "property.binding " + JSON.stringify(data35 && data35.type) + " requires one of the following: variables, sourceExpression, source, (sourceExpression and variables), or (source and variables)"
                            };
                            if (vErrors === null) {
                              vErrors = [err141];
                            } else {
                              vErrors.push(err141);
                            }
                            errors++;
                          }
                          var emErrs25 = [];
                          var _iterator70 = _createForOfIteratorHelper(vErrors),
                            _step70;
                          try {
                            for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
                              var err142 = _step70.value;
                              if (!err142.emUsed) {
                                emErrs25.push(err142);
                              }
                            }
                          } catch (err) {
                            _iterator70.e(err);
                          } finally {
                            _iterator70.f();
                          }
                          vErrors = emErrs25;
                          errors = emErrs25.length;
                        }
                        _valid9 = _errs105 === errors;
                        valid49 = _valid9;
                      }
                      if (!valid49) {
                        var err143 = {
                          keyword: "if",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                          schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/3/if",
                          params: {
                            failingKeyword: "then"
                          },
                          message: "should match \"then\" schema"
                        };
                        if (vErrors === null) {
                          vErrors = [err143];
                        } else {
                          vErrors.push(err143);
                        }
                        errors++;
                      }
                      var _errs132 = errors;
                      var valid60 = true;
                      var _errs133 = errors;
                      if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                        if (data35.type === undefined && "type") {
                          var err144 = {};
                          if (vErrors === null) {
                            vErrors = [err144];
                          } else {
                            vErrors.push(err144);
                          }
                          errors++;
                        } else {
                          if (data35.type !== undefined) {
                            if (!func0$1(data35.type, "camunda:errorEventDefinition")) {
                              var err145 = {};
                              if (vErrors === null) {
                                vErrors = [err145];
                              } else {
                                vErrors.push(err145);
                              }
                              errors++;
                            }
                          }
                        }
                      }
                      _valid14 = _errs133 === errors;
                      errors = _errs132;
                      if (vErrors !== null) {
                        if (_errs132) {
                          vErrors.length = _errs132;
                        } else {
                          vErrors = null;
                        }
                      }
                      if (_valid14) {
                        var _errs135 = errors;
                        var _errs136 = errors;
                        var valid62 = false;
                        var passing1 = null;
                        var _errs137 = errors;
                        if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                          if (data35.errorRef === undefined) {
                            var err146 = {
                              keyword: "required",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/4/then/oneOf/0/required",
                              params: {
                                missingProperty: "errorRef"
                              },
                              message: "should have required property '" + "errorRef" + "'"
                            };
                            if (vErrors === null) {
                              vErrors = [err146];
                            } else {
                              vErrors.push(err146);
                            }
                            errors++;
                          }
                        }
                        _valid15 = _errs137 === errors;
                        if (_valid15) {
                          valid62 = true;
                          passing1 = 0;
                        }
                        if (!valid62) {
                          var err147 = {
                            keyword: "oneOf",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                            schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/4/then/oneOf",
                            params: {
                              passingSchemas: passing1
                            },
                            message: "should match exactly one schema in oneOf"
                          };
                          if (vErrors === null) {
                            vErrors = [err147];
                          } else {
                            vErrors.push(err147);
                          }
                          errors++;
                        } else {
                          errors = _errs136;
                          if (vErrors !== null) {
                            if (_errs136) {
                              vErrors.length = _errs136;
                            } else {
                              vErrors = null;
                            }
                          }
                        }
                        if (errors > 0) {
                          var emErrs26 = [];
                          var _iterator71 = _createForOfIteratorHelper(vErrors),
                            _step71;
                          try {
                            for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
                              var err148 = _step71.value;
                              if (err148.keyword !== "errorMessage" && !err148.emUsed && (err148.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding" || err148.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding") === 0 && err148.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding".length] === "/") && err148.schemaPath.indexOf("#/definitions/properties/allOf/1/items/properties/binding/allOf/4/then") === 0 && err148.schemaPath["#/definitions/properties/allOf/1/items/properties/binding/allOf/4/then".length] === "/") {
                                emErrs26.push(err148);
                                err148.emUsed = true;
                              }
                            }
                          } catch (err) {
                            _iterator71.e(err);
                          } finally {
                            _iterator71.f();
                          }
                          if (emErrs26.length) {
                            var err149 = {
                              keyword: "errorMessage",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/4/then/errorMessage",
                              params: {
                                errors: emErrs26
                              },
                              message: "property.binding " + JSON.stringify(data35 && data35.type) + " requires errorRef"
                            };
                            if (vErrors === null) {
                              vErrors = [err149];
                            } else {
                              vErrors.push(err149);
                            }
                            errors++;
                          }
                          var emErrs27 = [];
                          var _iterator72 = _createForOfIteratorHelper(vErrors),
                            _step72;
                          try {
                            for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
                              var err150 = _step72.value;
                              if (!err150.emUsed) {
                                emErrs27.push(err150);
                              }
                            }
                          } catch (err) {
                            _iterator72.e(err);
                          } finally {
                            _iterator72.f();
                          }
                          vErrors = emErrs27;
                          errors = emErrs27.length;
                        }
                        _valid14 = _errs135 === errors;
                        valid60 = _valid14;
                      }
                      if (!valid60) {
                        var err151 = {
                          keyword: "if",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                          schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/allOf/4/if",
                          params: {
                            failingKeyword: "then"
                          },
                          message: "should match \"then\" schema"
                        };
                        if (vErrors === null) {
                          vErrors = [err151];
                        } else {
                          vErrors.push(err151);
                        }
                        errors++;
                      }
                      if (data35 && _typeof(data35) == "object" && !Array.isArray(data35)) {
                        if (data35.type === undefined) {
                          var err152 = {
                            keyword: "required",
                            dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                            schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/required",
                            params: {
                              missingProperty: "type"
                            },
                            message: "should have required property '" + "type" + "'"
                          };
                          if (vErrors === null) {
                            vErrors = [err152];
                          } else {
                            vErrors.push(err152);
                          }
                          errors++;
                        }
                        if (data35.type !== undefined) {
                          var data41 = data35.type;
                          if (typeof data41 !== "string") {
                            var err153 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/type",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/type/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err153];
                            } else {
                              vErrors.push(err153);
                            }
                            errors++;
                          }
                          if (!(data41 === "property" || data41 === "camunda:property" || data41 === "camunda:inputParameter" || data41 === "camunda:outputParameter" || data41 === "camunda:in" || data41 === "camunda:out" || data41 === "camunda:in:businessKey" || data41 === "camunda:executionListener" || data41 === "camunda:field" || data41 === "camunda:errorEventDefinition")) {
                            var err154 = {
                              keyword: "enum",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/type",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/type/enum",
                              params: {
                                allowedValues: schema24.items.properties.binding.properties.type["enum"]
                              },
                              message: "should be equal to one of the allowed values"
                            };
                            if (vErrors === null) {
                              vErrors = [err154];
                            } else {
                              vErrors.push(err154);
                            }
                            errors++;
                          }
                          if (errors > 0) {
                            var emErrs28 = [];
                            var _iterator73 = _createForOfIteratorHelper(vErrors),
                              _step73;
                            try {
                              for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
                                var err155 = _step73.value;
                                if (err155.keyword !== "errorMessage" && !err155.emUsed && (err155.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/type" || err155.dataPath.indexOf(dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/type") === 0 && err155.dataPath[dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/type".length] === "/") && err155.schemaPath.indexOf("#/definitions/properties/allOf/1/items/properties/binding/properties/type") === 0 && err155.schemaPath["#/definitions/properties/allOf/1/items/properties/binding/properties/type".length] === "/") {
                                  emErrs28.push(err155);
                                  err155.emUsed = true;
                                }
                              }
                            } catch (err) {
                              _iterator73.e(err);
                            } finally {
                              _iterator73.f();
                            }
                            if (emErrs28.length) {
                              var err156 = {
                                keyword: "errorMessage",
                                dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/type",
                                schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/type/errorMessage",
                                params: {
                                  errors: emErrs28
                                },
                                message: "invalid property.binding type " + JSON.stringify(data41) + "; must be any of { property, camunda:property, camunda:inputParameter, camunda:outputParameter, camunda:in, camunda:out, camunda:in:businessKey, camunda:executionListener, camunda:field, camunda:errorEventDefinition }"
                              };
                              if (vErrors === null) {
                                vErrors = [err156];
                              } else {
                                vErrors.push(err156);
                              }
                              errors++;
                            }
                            var emErrs29 = [];
                            var _iterator74 = _createForOfIteratorHelper(vErrors),
                              _step74;
                            try {
                              for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
                                var err157 = _step74.value;
                                if (!err157.emUsed) {
                                  emErrs29.push(err157);
                                }
                              }
                            } catch (err) {
                              _iterator74.e(err);
                            } finally {
                              _iterator74.f();
                            }
                            vErrors = emErrs29;
                            errors = emErrs29.length;
                          }
                        }
                        if (data35.name !== undefined) {
                          if (typeof data35.name !== "string") {
                            var err158 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/name",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/name/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err158];
                            } else {
                              vErrors.push(err158);
                            }
                            errors++;
                          }
                        }
                        if (data35.event !== undefined) {
                          if (typeof data35.event !== "string") {
                            var err159 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/event",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/event/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err159];
                            } else {
                              vErrors.push(err159);
                            }
                            errors++;
                          }
                        }
                        if (data35.scriptFormat !== undefined) {
                          if (typeof data35.scriptFormat !== "string") {
                            var err160 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/scriptFormat",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/scriptFormat/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err160];
                            } else {
                              vErrors.push(err160);
                            }
                            errors++;
                          }
                        }
                        if (data35.source !== undefined) {
                          if (typeof data35.source !== "string") {
                            var err161 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/source",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/source/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err161];
                            } else {
                              vErrors.push(err161);
                            }
                            errors++;
                          }
                        }
                        if (data35.target !== undefined) {
                          if (typeof data35.target !== "string") {
                            var err162 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/target",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/target/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err162];
                            } else {
                              vErrors.push(err162);
                            }
                            errors++;
                          }
                        }
                        if (data35.expression !== undefined) {
                          if (typeof data35.expression !== "boolean") {
                            var err163 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/expression",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/expression/type",
                              params: {
                                type: "boolean"
                              },
                              message: "should be boolean"
                            };
                            if (vErrors === null) {
                              vErrors = [err163];
                            } else {
                              vErrors.push(err163);
                            }
                            errors++;
                          }
                        }
                        if (data35.variables !== undefined) {
                          var data48 = data35.variables;
                          if (typeof data48 !== "string") {
                            var err164 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/variables",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/variables/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err164];
                            } else {
                              vErrors.push(err164);
                            }
                            errors++;
                          }
                          if (!(data48 === "all" || data48 === "local")) {
                            var err165 = {
                              keyword: "enum",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/variables",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/variables/enum",
                              params: {
                                allowedValues: schema24.items.properties.binding.properties.variables["enum"]
                              },
                              message: "should be equal to one of the allowed values"
                            };
                            if (vErrors === null) {
                              vErrors = [err165];
                            } else {
                              vErrors.push(err165);
                            }
                            errors++;
                          }
                        }
                        if (data35.sourceExpression !== undefined) {
                          if (typeof data35.sourceExpression !== "string") {
                            var err166 = {
                              keyword: "type",
                              dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding/sourceExpression",
                              schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/properties/sourceExpression/type",
                              params: {
                                type: "string"
                              },
                              message: "should be string"
                            };
                            if (vErrors === null) {
                              vErrors = [err166];
                            } else {
                              vErrors.push(err166);
                            }
                            errors++;
                          }
                        }
                      } else {
                        var err167 = {
                          keyword: "type",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3 + "/binding",
                          schemaPath: "#/definitions/properties/allOf/1/items/properties/binding/type",
                          params: {
                            type: "object"
                          },
                          message: "should be object"
                        };
                        if (vErrors === null) {
                          vErrors = [err167];
                        } else {
                          vErrors.push(err167);
                        }
                        errors++;
                      }
                    }
                  } else {
                    var err168 = {
                      keyword: "type",
                      dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                      schemaPath: "#/definitions/properties/allOf/1/items/type",
                      params: {
                        type: "object"
                      },
                      message: "should be object"
                    };
                    if (vErrors === null) {
                      vErrors = [err168];
                    } else {
                      vErrors.push(err168);
                    }
                    errors++;
                  }
                  if (errors > 0) {
                    var emErrors6 = {
                      "required": []
                    };
                    var templates6 = {
                      required: function required() {
                        return "missing binding for property \"" + JSON.stringify(i3) + "\"";
                      }
                    };
                    var _iterator75 = _createForOfIteratorHelper(vErrors),
                      _step75;
                    try {
                      for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
                        var err169 = _step75.value;
                        if (err169.keyword !== "errorMessage" && !err169.emUsed && err169.dataPath === dataPath + "/scopes/" + i2 + "/properties/" + i3 && err169.keyword in emErrors6 && err169.schemaPath.indexOf("#/definitions/properties/allOf/1/items") === 0 && /^\/[^\/]*$/.test(err169.schemaPath.slice(38))) {
                          emErrors6[err169.keyword].push(err169);
                          err169.emUsed = true;
                        }
                      }
                    } catch (err) {
                      _iterator75.e(err);
                    } finally {
                      _iterator75.f();
                    }
                    for (var key6 in emErrors6) {
                      if (emErrors6[key6].length) {
                        var err170 = {
                          keyword: "errorMessage",
                          dataPath: dataPath + "/scopes/" + i2 + "/properties/" + i3,
                          schemaPath: "#/definitions/properties/allOf/1/items/errorMessage",
                          params: {
                            errors: emErrors6[key6]
                          },
                          message: key6 in templates6 ? templates6[key6]() : schema24.items.errorMessage[key6]
                        };
                        if (vErrors === null) {
                          vErrors = [err170];
                        } else {
                          vErrors.push(err170);
                        }
                        errors++;
                      }
                    }
                    var emErrs30 = [];
                    var _iterator76 = _createForOfIteratorHelper(vErrors),
                      _step76;
                    try {
                      for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                        var err171 = _step76.value;
                        if (!err171.emUsed) {
                          emErrs30.push(err171);
                        }
                      }
                    } catch (err) {
                      _iterator76.e(err);
                    } finally {
                      _iterator76.f();
                    }
                    vErrors = emErrs30;
                    errors = emErrs30.length;
                  }
                };
                for (var i3 = 0; i3 < len3; i3++) {
                  _loop4(i3);
                }
              } else {
                var err172 = {
                  keyword: "type",
                  dataPath: dataPath + "/scopes/" + i2 + "/properties",
                  schemaPath: "#/definitions/properties/allOf/1/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err172];
                } else {
                  vErrors.push(err172);
                }
                errors++;
              }
            }
          } else {
            var err173 = {
              keyword: "type",
              dataPath: dataPath + "/scopes/" + i2,
              schemaPath: "#/properties/scopes/items/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err173];
            } else {
              vErrors.push(err173);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors7 = {
              "required": {
                "type": [],
                "properties": []
              }
            };
            var templates7 = {
              required: {
                properties: function properties() {
                  return "invalid scope " + JSON.stringify(data18 && data18.type) + ", missing properties=[]";
                }
              }
            };
            var emPropParams3;
            var emParamsErrors3;
            var _iterator77 = _createForOfIteratorHelper(vErrors),
              _step77;
            try {
              for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
                var err174 = _step77.value;
                if (err174.keyword !== "errorMessage" && !err174.emUsed && err174.dataPath === dataPath + "/scopes/" + i2 && err174.keyword in emErrors7 && err174.schemaPath.indexOf("#/properties/scopes/items") === 0 && /^\/[^\/]*$/.test(err174.schemaPath.slice(25))) {
                  emPropParams3 = obj0$1[err174.keyword];
                  emParamsErrors3 = emErrors7[err174.keyword][err174.params[emPropParams3]];
                  if (emParamsErrors3) {
                    emParamsErrors3.push(err174);
                    err174.emUsed = true;
                  }
                }
              }
            } catch (err) {
              _iterator77.e(err);
            } finally {
              _iterator77.f();
            }
            for (var key7 in emErrors7) {
              for (var keyProp3 in emErrors7[key7]) {
                emParamsErrors3 = emErrors7[key7][keyProp3];
                if (emParamsErrors3.length) {
                  var tmpl3 = templates7[key7] && templates7[key7][keyProp3];
                  var err175 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/scopes/" + i2,
                    schemaPath: "#/properties/scopes/items/errorMessage",
                    params: {
                      errors: emParamsErrors3
                    },
                    message: tmpl3 ? tmpl3() : schema17$1.properties.scopes.items.errorMessage[key7][keyProp3]
                  };
                  if (vErrors === null) {
                    vErrors = [err175];
                  } else {
                    vErrors.push(err175);
                  }
                  errors++;
                }
              }
            }
            var emErrs31 = [];
            var _iterator78 = _createForOfIteratorHelper(vErrors),
              _step78;
            try {
              for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
                var err176 = _step78.value;
                if (!err176.emUsed) {
                  emErrs31.push(err176);
                }
              }
            } catch (err) {
              _iterator78.e(err);
            } finally {
              _iterator78.f();
            }
            vErrors = emErrs31;
            errors = emErrs31.length;
          }
        };
        for (var i2 = 0; i2 < len2; i2++) {
          var _valid0, _valid0, _valid1, _valid1, _valid2, _valid2, _valid3, _valid3, _valid4, _valid4, _valid5, _valid5, _valid6, _valid6, _valid7, _valid8, _valid8, _valid7, _valid9, _valid11, _valid11, valid52, _valid10, _valid12, _valid12, valid54, _valid10, _valid13, _valid13, valid56, _valid10, valid58, _valid10, valid59, _valid10, _valid9, _valid14, _valid15, _valid14;
          _loop3();
        }
      } else {
        var err177 = {
          keyword: "type",
          dataPath: dataPath + "/scopes",
          schemaPath: "#/properties/scopes/type",
          params: {
            type: "array"
          },
          message: "should be array"
        };
        if (vErrors === null) {
          vErrors = [err177];
        } else {
          vErrors.push(err177);
        }
        errors++;
      }
    }
  } else {
    var err178 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/type",
      params: {
        type: "object"
      },
      message: "should be object"
    };
    if (vErrors === null) {
      vErrors = [err178];
    } else {
      vErrors.push(err178);
    }
    errors++;
  }
  validate15$1.errors = vErrors;
  return errors === 0;
}
function validate14$1(data) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref4$dataPath = _ref4.dataPath,
    dataPath = _ref4$dataPath === void 0 ? "" : _ref4$dataPath,
    parentData = _ref4.parentData,
    parentDataProperty = _ref4.parentDataProperty,
    _ref4$rootData = _ref4.rootData,
    rootData = _ref4$rootData === void 0 ? data : _ref4$rootData;
  var vErrors = null;
  var errors = 0;
  var _errs0 = errors;
  var valid0 = false;
  var passing0 = null;
  var _errs1 = errors;
  if (!validate15$1(data, {
    dataPath: dataPath,
    parentData: parentData,
    parentDataProperty: parentDataProperty,
    rootData: rootData
  })) {
    vErrors = vErrors === null ? validate15$1.errors : vErrors.concat(validate15$1.errors);
    errors = vErrors.length;
  }
  var _valid0 = _errs1 === errors;
  if (_valid0) {
    valid0 = true;
    passing0 = 0;
  }
  var _errs2 = errors;
  if (Array.isArray(data)) {
    var len0 = data.length;
    for (var i0 = 0; i0 < len0; i0++) {
      if (!validate15$1(data[i0], {
        dataPath: dataPath + "/" + i0,
        parentData: data,
        parentDataProperty: i0,
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate15$1.errors : vErrors.concat(validate15$1.errors);
        errors = vErrors.length;
      }
    }
  } else {
    var err0 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/oneOf/1/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err0];
    } else {
      vErrors.push(err0);
    }
    errors++;
  }
  var _valid0 = _errs2 === errors;
  if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
  } else {
    if (_valid0) {
      valid0 = true;
      passing0 = 1;
    }
  }
  if (!valid0) {
    var err1 = {
      keyword: "oneOf",
      dataPath: dataPath,
      schemaPath: "#/oneOf",
      params: {
        passingSchemas: passing0
      },
      message: "should match exactly one schema in oneOf"
    };
    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }
    errors++;
  } else {
    errors = _errs0;
    if (vErrors !== null) {
      if (_errs0) {
        vErrors.length = _errs0;
      } else {
        vErrors = null;
      }
    }
  }
  validate14$1.errors = vErrors;
  return errors === 0;
}
var jsonSourceMap = {};
var escapedChars = {
  'b': '\b',
  'f': '\f',
  'n': '\n',
  'r': '\r',
  't': '\t',
  '"': '"',
  '/': '/',
  '\\': '\\'
};
var A_CODE = 'a'.charCodeAt();
jsonSourceMap.parse = function (source, _, options) {
  var pointers = {};
  var line = 0;
  var column = 0;
  var pos = 0;
  var bigint = options && options.bigint && typeof BigInt != 'undefined';
  return {
    data: _parse('', true),
    pointers: pointers
  };
  function _parse(ptr, topLevel) {
    whitespace();
    var data;
    map(ptr, 'value');
    var _char = getChar();
    switch (_char) {
      case 't':
        read('rue');
        data = true;
        break;
      case 'f':
        read('alse');
        data = false;
        break;
      case 'n':
        read('ull');
        data = null;
        break;
      case '"':
        data = parseString();
        break;
      case '[':
        data = parseArray(ptr);
        break;
      case '{':
        data = parseObject(ptr);
        break;
      default:
        backChar();
        if ('-0123456789'.indexOf(_char) >= 0) data = parseNumber();else unexpectedToken();
    }
    map(ptr, 'valueEnd');
    whitespace();
    if (topLevel && pos < source.length) unexpectedToken();
    return data;
  }
  function whitespace() {
    loop: while (pos < source.length) {
      switch (source[pos]) {
        case ' ':
          column++;
          break;
        case '\t':
          column += 4;
          break;
        case '\r':
          column = 0;
          break;
        case '\n':
          column = 0;
          line++;
          break;
        default:
          break loop;
      }
      pos++;
    }
  }
  function parseString() {
    var str = '';
    var _char2;
    while (true) {
      _char2 = getChar();
      if (_char2 == '"') {
        break;
      } else if (_char2 == '\\') {
        _char2 = getChar();
        if (_char2 in escapedChars) str += escapedChars[_char2];else if (_char2 == 'u') str += getCharCode();else wasUnexpectedToken();
      } else {
        str += _char2;
      }
    }
    return str;
  }
  function parseNumber() {
    var numStr = '';
    var integer = true;
    if (source[pos] == '-') numStr += getChar();
    numStr += source[pos] == '0' ? getChar() : getDigits();
    if (source[pos] == '.') {
      numStr += getChar() + getDigits();
      integer = false;
    }
    if (source[pos] == 'e' || source[pos] == 'E') {
      numStr += getChar();
      if (source[pos] == '+' || source[pos] == '-') numStr += getChar();
      numStr += getDigits();
      integer = false;
    }
    var result = +numStr;
    return bigint && integer && (result > Number.MAX_SAFE_INTEGER || result < Number.MIN_SAFE_INTEGER) ? BigInt(numStr) : result;
  }
  function parseArray(ptr) {
    whitespace();
    var arr = [];
    var i = 0;
    if (getChar() == ']') return arr;
    backChar();
    while (true) {
      var itemPtr = ptr + '/' + i;
      arr.push(_parse(itemPtr));
      whitespace();
      var _char3 = getChar();
      if (_char3 == ']') break;
      if (_char3 != ',') wasUnexpectedToken();
      whitespace();
      i++;
    }
    return arr;
  }
  function parseObject(ptr) {
    whitespace();
    var obj = {};
    if (getChar() == '}') return obj;
    backChar();
    while (true) {
      var loc = getLoc();
      if (getChar() != '"') wasUnexpectedToken();
      var key = parseString();
      var propPtr = ptr + '/' + escapeJsonPointer(key);
      mapLoc(propPtr, 'key', loc);
      map(propPtr, 'keyEnd');
      whitespace();
      if (getChar() != ':') wasUnexpectedToken();
      whitespace();
      obj[key] = _parse(propPtr);
      whitespace();
      var _char4 = getChar();
      if (_char4 == '}') break;
      if (_char4 != ',') wasUnexpectedToken();
      whitespace();
    }
    return obj;
  }
  function read(str) {
    for (var i = 0; i < str.length; i++) if (getChar() !== str[i]) wasUnexpectedToken();
  }
  function getChar() {
    checkUnexpectedEnd();
    var _char5 = source[pos];
    pos++;
    column++; // new line?
    return _char5;
  }
  function backChar() {
    pos--;
    column--;
  }
  function getCharCode() {
    var count = 4;
    var code = 0;
    while (count--) {
      code <<= 4;
      var _char6 = getChar().toLowerCase();
      if (_char6 >= 'a' && _char6 <= 'f') code += _char6.charCodeAt() - A_CODE + 10;else if (_char6 >= '0' && _char6 <= '9') code += +_char6;else wasUnexpectedToken();
    }
    return String.fromCharCode(code);
  }
  function getDigits() {
    var digits = '';
    while (source[pos] >= '0' && source[pos] <= '9') digits += getChar();
    if (digits.length) return digits;
    checkUnexpectedEnd();
    unexpectedToken();
  }
  function map(ptr, prop) {
    mapLoc(ptr, prop, getLoc());
  }
  function mapLoc(ptr, prop, loc) {
    pointers[ptr] = pointers[ptr] || {};
    pointers[ptr][prop] = loc;
  }
  function getLoc() {
    return {
      line: line,
      column: column,
      pos: pos
    };
  }
  function unexpectedToken() {
    throw new SyntaxError('Unexpected token ' + source[pos] + ' in JSON at position ' + pos);
  }
  function wasUnexpectedToken() {
    backChar();
    unexpectedToken();
  }
  function checkUnexpectedEnd() {
    if (pos >= source.length) throw new SyntaxError('Unexpected end of JSON input');
  }
};
jsonSourceMap.stringify = function (data, _, options) {
  if (!validType(data)) return;
  var wsLine = 0;
  var wsPos, wsColumn;
  var whitespace = _typeof(options) == 'object' ? options.space : options;
  switch (_typeof(whitespace)) {
    case 'number':
      var len = whitespace > 10 ? 10 : whitespace < 0 ? 0 : Math.floor(whitespace);
      whitespace = len && repeat(len, ' ');
      wsPos = len;
      wsColumn = len;
      break;
    case 'string':
      whitespace = whitespace.slice(0, 10);
      wsPos = 0;
      wsColumn = 0;
      for (var j = 0; j < whitespace.length; j++) {
        var _char7 = whitespace[j];
        switch (_char7) {
          case ' ':
            wsColumn++;
            break;
          case '\t':
            wsColumn += 4;
            break;
          case '\r':
            wsColumn = 0;
            break;
          case '\n':
            wsColumn = 0;
            wsLine++;
            break;
          default:
            throw new Error('whitespace characters not allowed in JSON');
        }
        wsPos++;
      }
      break;
    default:
      whitespace = undefined;
  }
  var json = '';
  var pointers = {};
  var line = 0;
  var column = 0;
  var pos = 0;
  var es6 = options && options.es6 && typeof Map == 'function';
  _stringify(data, 0, '');
  return {
    json: json,
    pointers: pointers
  };
  function _stringify(_data, lvl, ptr) {
    map(ptr, 'value');
    switch (_typeof(_data)) {
      case 'number':
      case 'bigint':
      case 'boolean':
        out('' + _data);
        break;
      case 'string':
        out(quoted(_data));
        break;
      case 'object':
        if (_data === null) {
          out('null');
        } else if (typeof _data.toJSON == 'function') {
          out(quoted(_data.toJSON()));
        } else if (Array.isArray(_data)) {
          stringifyArray();
        } else if (es6) {
          if (_data.constructor.BYTES_PER_ELEMENT) stringifyArray();else if (_data instanceof Map) stringifyMapSet();else if (_data instanceof Set) stringifyMapSet(true);else stringifyObject();
        } else {
          stringifyObject();
        }
    }
    map(ptr, 'valueEnd');
    function stringifyArray() {
      if (_data.length) {
        out('[');
        var itemLvl = lvl + 1;
        for (var i = 0; i < _data.length; i++) {
          if (i) out(',');
          indent(itemLvl);
          var item = validType(_data[i]) ? _data[i] : null;
          var itemPtr = ptr + '/' + i;
          _stringify(item, itemLvl, itemPtr);
        }
        indent(lvl);
        out(']');
      } else {
        out('[]');
      }
    }
    function stringifyObject() {
      var keys = Object.keys(_data);
      if (keys.length) {
        out('{');
        var propLvl = lvl + 1;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = _data[key];
          if (validType(value)) {
            if (i) out(',');
            var propPtr = ptr + '/' + escapeJsonPointer(key);
            indent(propLvl);
            map(propPtr, 'key');
            out(quoted(key));
            map(propPtr, 'keyEnd');
            out(':');
            if (whitespace) out(' ');
            _stringify(value, propLvl, propPtr);
          }
        }
        indent(lvl);
        out('}');
      } else {
        out('{}');
      }
    }
    function stringifyMapSet(isSet) {
      if (_data.size) {
        out('{');
        var propLvl = lvl + 1;
        var first = true;
        var entries = _data.entries();
        var entry = entries.next();
        while (!entry.done) {
          var item = entry.value;
          var key = item[0];
          var value = isSet ? true : item[1];
          if (validType(value)) {
            if (!first) out(',');
            first = false;
            var propPtr = ptr + '/' + escapeJsonPointer(key);
            indent(propLvl);
            map(propPtr, 'key');
            out(quoted(key));
            map(propPtr, 'keyEnd');
            out(':');
            if (whitespace) out(' ');
            _stringify(value, propLvl, propPtr);
          }
          entry = entries.next();
        }
        indent(lvl);
        out('}');
      } else {
        out('{}');
      }
    }
  }
  function out(str) {
    column += str.length;
    pos += str.length;
    json += str;
  }
  function indent(lvl) {
    if (whitespace) {
      json += '\n' + repeat(lvl, whitespace);
      line++;
      column = 0;
      while (lvl--) {
        if (wsLine) {
          line += wsLine;
          column = wsColumn;
        } else {
          column += wsColumn;
        }
        pos += wsPos;
      }
      pos += 1; // \n character
    }
  }

  function map(ptr, prop) {
    pointers[ptr] = pointers[ptr] || {};
    pointers[ptr][prop] = {
      line: line,
      column: column,
      pos: pos
    };
  }
  function repeat(n, str) {
    return Array(n + 1).join(str);
  }
};
var VALID_TYPES = ['number', 'bigint', 'boolean', 'string', 'object'];
function validType(data) {
  return VALID_TYPES.indexOf(_typeof(data)) >= 0;
}
var ESC_QUOTE = /"|\\/g;
var ESC_B = /[\b]/g;
var ESC_F = /\f/g;
var ESC_N = /\n/g;
var ESC_R = /\r/g;
var ESC_T = /\t/g;
function quoted(str) {
  str = str.replace(ESC_QUOTE, '\\$&').replace(ESC_F, '\\f').replace(ESC_B, '\\b').replace(ESC_N, '\\n').replace(ESC_R, '\\r').replace(ESC_T, '\\t');
  return '"' + str + '"';
}
var ESC_0 = /~/g;
var ESC_1 = /\//g;
function escapeJsonPointer(str) {
  return str.replace(ESC_0, '~0').replace(ESC_1, '~1');
}
function _validate(object, validateFn) {
  var dataPointerMap = generateDataPointerMap(object);
  var valid = validateFn(object);
  var errors = validateFn.errors;
  if (errors && errors.length) {
    // @pinussilvestrus: the <ajv-errors> extensions produces a couple of
    // unnecessary errors when using an <errorMessage> attribute.
    // Therefore, we should flatten the produced errors a bit to not
    // confuse the consumer of this library.

    // (1) wrap raw errors in case of custom errorMessage attribute
    (0, _minDash.forEach)(errors, wrapRawErrors);

    // (2) ignore supportive error messages (e.g. "if-then-rules")
    errors = ignoreSupportiveErrors(errors);

    // (3) set data pointer for each error
    (0, _minDash.forEach)(errors, function (error) {
      setDataPointer(error, dataPointerMap);
    });
  }
  return {
    valid: valid,
    object: object,
    errors: errors
  };
}
function _validateAll(objects, validateFn) {
  var results = [];
  var allValid = true;
  (0, _minDash.forEach)(objects, function (object) {
    var result = validateFn(object);
    if (!result.valid) {
      allValid = false;
    }
    results.push(result);
  });
  return {
    valid: allValid,
    results: results
  };
}

// helper //////////////
function wrapRawErrors(error) {
  var params = error.params;
  if (params && params.errors) {
    params.rawErrors = params.errors;
    delete params.errors;
  }
}
function setDataPointer(error, dataPointerMap) {
  var dataPath = error.dataPath;
  var pointer = dataPointerMap[dataPath];
  error.dataPointer = pointer;
}
function ignoreSupportiveErrors(errors) {
  return (0, _minDash.filter)(errors, function (error) {
    return error.keyword !== 'if';
  });
}

/**
 * Generates a key-pointer map for the object.
 *
 * Example:
 *
 * {
 *  foo: 'bar'
 * }
 *
 * =>
 *
 * {
 *  '': {
 *    value: { line: 0, column: 0, pos: 0 },
 *    valueEnd: { line: 2, column: 1, pos: 18 }
 *  },
 *  '/foo': {
 *    key: { line: 1, column: 2, pos: 4 },
 *    keyEnd: { line: 1, column: 7, pos: 9 },
 *    value: { line: 1, column: 9, pos: 11 },
 *    valueEnd: { line: 1, column: 14, pos: 16 }
 *  }
 * }
 *
 * @param {Object} object
 * @return {Object}
 */
function generateDataPointerMap(object) {
  return jsonSourceMap.stringify(object, null, 2).pointers;
}
function getSchemaVersion() {
  return version$1;
}
function getSchemaPackage() {
  return name$1;
}

/**
 * Validate a single object.
 *
 * @param {Object} object
 * @return {Object} single object validation result
 */
function validate(object) {
  return _validate(object, standaloneValidator.exports);
}

/**
 * Validate a list of objects
 *
 * @param  {Object[]} objects
 * @return {Object} list validation result
 */
function validateAll(objects) {
  return _validateAll(objects, validate);
}
var name = "@camunda/zeebe-element-templates-json-schema";
var version = "0.9.0";
var standaloneZeebeValidator = {
  exports: {}
};
standaloneZeebeValidator.exports = validate14;
standaloneZeebeValidator.exports["default"] = validate14;
var schema17 = {
  "type": "object",
  "allOf": [{
    "required": ["name", "id", "appliesTo", "properties"],
    "properties": {
      "name": {
        "$id": "#/name",
        "type": "string",
        "description": "The name of the element template."
      },
      "id": {
        "$id": "#/id",
        "type": "string",
        "description": "The identifier of the element template."
      },
      "description": {
        "$id": "#/description",
        "type": "string",
        "description": "The description of the element template."
      },
      "version": {
        "$id": "#/version",
        "type": "integer",
        "description": "Optional version of the template. If you add a version to a template it will be considered unique based on its ID and version. Two templates can have the same ID if their version is different."
      },
      "isDefault": {
        "$id": "#/isDefault",
        "type": "boolean",
        "description": "Indicates whether the element template is a default template."
      },
      "appliesTo": {
        "$id": "#/appliesTo",
        "type": "array",
        "description": "List of BPMN types the template can be applied to.",
        "default": [],
        "items": {
          "$id": "#/appliesTo/items",
          "type": "string",
          "pattern": "^[\\w\\d]+:[\\w\\d]+$",
          "allOf": [{
            "examples": ["bpmn:Task", "bpmn:ServiceTask", "bpmn:SequenceFlow", "bpmn:Process", "bpmn:StartEvent", "bpmn:Gateway"]
          }],
          "errorMessage": {
            "pattern": "invalid item for \"appliesTo\", should contain namespaced property, example: \"bpmn:Task\""
          }
        }
      },
      "elementType": {
        "$id": "#/elementType",
        "type": "object",
        "description": "The BPMN type the element will be transformed into.",
        "default": {},
        "required": ["value"],
        "properties": {
          "value": {
            "$id": "#/elementType/value",
            "type": "string",
            "pattern": "^[\\w\\d]+:[\\w\\d]+$",
            "allOf": [{
              "examples": ["bpmn:ServiceTask", "bpmn:UserTask", "bpmn:StartEvent", "bpmn:ExclusiveGateway", "bpmn:ParallelGateway"]
            }],
            "errorMessage": {
              "pattern": "invalid item for \"elementType\", should contain namespaced property, example: \"bpmn:Task\""
            }
          }
        },
        "errorMessage": {
          "required": {
            "value": "missing elementType value"
          }
        }
      },
      "metadata": {
        "$id": "#/metadata",
        "type": "object",
        "description": "Some custom properties for further configuration.",
        "default": {}
      },
      "entriesVisible": {
        "$id": "#/entriesVisible",
        "type": "boolean",
        "description": "Select whether non-template entries are visible in the properties panel."
      },
      "groups": {
        "$id": "#/groups",
        "type": "array",
        "description": "Custom fields can be ordered together via groups.",
        "allOf": [{
          "examples": [[{
            "id": "group-1",
            "label": "My Group"
          }]]
        }],
        "items": {
          "$id": "#/groups/group",
          "type": "object",
          "default": {},
          "required": ["id", "label"],
          "properties": {
            "id": {
              "$id": "#/groups/group/id",
              "type": "string",
              "description": "The id of the custom group"
            },
            "label": {
              "$id": "#/groups/group/label",
              "type": "string",
              "description": "The label of the custom group"
            }
          },
          "errorMessage": {
            "required": {
              "id": "missing id for group \"${0#}\"",
              "label": "missing label for group \"${0#}\""
            }
          }
        }
      },
      "documentationRef": {
        "$id": "#/documentationRef",
        "type": "string",
        "pattern": "^(https|http)://.*",
        "errorMessage": {
          "pattern": "Malformed documentation URL, must match \"^(https|http)://.*\""
        }
      }
    },
    "errorMessage": {
      "required": {
        "name": "missing template name",
        "id": "missing template id",
        "appliesTo": "missing appliesTo=[]",
        "properties": "missing properties=[]"
      }
    }
  }, {
    "allOf": [{
      "if": {
        "properties": {
          "properties": {
            "contains": {
              "properties": {
                "binding": {
                  "properties": {
                    "type": {
                      "enum": ["bpmn:Message#property", "bpmn:Message#zeebe:subscription#property"]
                    }
                  },
                  "required": ["type"]
                }
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "elementType": {
            "properties": {
              "eventDefinition": {
                "const": "bpmn:MessageEventDefinition"
              }
            },
            "required": ["eventDefinition"]
          }
        }
      }
    }]
  }],
  "properties": {
    "properties": {
      "$ref": "#/definitions/properties",
      "$id": "#/properties"
    },
    "icon": {
      "$id": "#/icon",
      "type": "object",
      "description": "Custom icon to be shown on the element",
      "default": {},
      "properties": {
        "contents": {
          "$id": "#/icon/contents",
          "type": "string",
          "description": "The URL of an icon.",
          "pattern": "^(https?|data):.*",
          "errorMessage": {
            "pattern": "Malformed icon source, must be a valid HTTP(s) or data URL"
          }
        }
      },
      "required": ["contents"],
      "errorMessage": {
        "required": {
          "contents": "missing icon contents"
        }
      }
    },
    "elementType": {
      "allOf": [{
        "allOf": [{
          "properties": {
            "eventDefinition": {
              "$id": "#/elementType/eventDefinition",
              "enum": ["bpmn:MessageEventDefinition"]
            }
          }
        }, {
          "if": {
            "properties": {
              "eventDefinition": {
                "enum": ["bpmn:MessageEventDefinition"]
              }
            },
            "required": ["eventDefinition"]
          },
          "then": {
            "properties": {
              "value": {
                "enum": ["bpmn:StartEvent", "bpmn:IntermediateCatchEvent", "bpmn:IntermediateThrowEvent", "bpmn:BoundaryEvent", "bpmn:EndEvent"]
              }
            },
            "required": ["value"]
          }
        }]
      }]
    }
  }
};
var pattern0 = new RegExp("^[\\w\\d]+:[\\w\\d]+$", "u");
var pattern2 = new RegExp("^(https|http)://.*", "u");
var pattern3 = new RegExp("^(https?|data):.*", "u");
var obj0 = {
  "required": "missingProperty",
  "dependencies": "property",
  "dependentRequired": "property"
};
var func0 = equal.exports;
var schema18 = {
  "allOf": [{
    "type": "array",
    "description": "List of properties of the element template.",
    "allOf": [{
      "examples": [[{
        "label": "Name",
        "type": "String",
        "binding": {
          "type": "property",
          "name": "name"
        }
      }]]
    }],
    "items": {
      "type": "object",
      "default": {},
      "allOf": [{
        "if": {
          "properties": {
            "type": {
              "const": "Dropdown"
            }
          },
          "required": ["type"]
        },
        "then": {
          "required": ["choices"],
          "errorMessage": "must provide choices=[] with \"Dropdown\" type"
        }
      }],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the property."
        },
        "value": {
          "$id": "#/properties/property/value",
          "type": ["string", "boolean"],
          "description": "The value of a control field."
        },
        "description": {
          "$id": "#/properties/property/description",
          "type": "string",
          "description": "The description of a control field."
        },
        "label": {
          "$id": "#/properties/property/label",
          "type": "string",
          "description": "The label of a control field."
        },
        "type": {
          "$id": "#/properties/property/type",
          "type": "string",
          "description": "The type of a control field."
        },
        "editable": {
          "$id": "#/properties/property/editable",
          "type": "boolean",
          "description": "Indicates whether a control field is editable or not."
        },
        "choices": {
          "$id": "#/properties/property/choices",
          "type": "array",
          "description": "The choices for dropdown fields.",
          "default": [],
          "items": {
            "$id": "#/properties/property/choices/item",
            "type": "object",
            "default": {},
            "properties": {
              "name": {
                "$id": "#/properties/property/choices/item/name",
                "type": "string",
                "description": "The name of a choice."
              },
              "value": {
                "$id": "#/properties/property/choices/item/value",
                "type": "string",
                "description": "The value of a choice."
              }
            },
            "required": ["value", "name"],
            "errorMessage": {
              "required": "{ name, value } must be specified for \"Dropdown\" choices"
            }
          }
        },
        "constraints": {
          "$id": "#/properties/property/constraints",
          "type": "object",
          "description": "The validation constraints of a control field.",
          "allOf": [{
            "examples": [{
              "notEmpty": true
            }]
          }],
          "properties": {
            "notEmpty": {
              "$id": "#/properties/property/constraints/notEmpty",
              "type": "boolean",
              "description": "The control field must not be empty."
            },
            "minLength": {
              "$id": "#/properties/property/constraints/minLength",
              "type": "number",
              "description": "The minimal length of a control field value."
            },
            "maxLength": {
              "$id": "#/properties/property/constraints/maxLength",
              "type": "number",
              "description": "The maximal length for a control field value."
            },
            "pattern": {
              "$id": "#/properties/property/constraints/pattern",
              "description": "A regular expression pattern for a constraint.",
              "oneOf": [{
                "type": "object",
                "default": {},
                "properties": {
                  "value": {
                    "$id": "#/properties/property/constraints/pattern/value",
                    "type": "string",
                    "description": "The regular expression of a pattern."
                  },
                  "message": {
                    "$id": "#/properties/property/constraints/pattern/message",
                    "type": "string",
                    "description": "The validation message of a pattern."
                  }
                }
              }, {
                "type": "string"
              }]
            }
          }
        },
        "group": {
          "$id": "#/properties/property/group",
          "type": "string",
          "description": "The custom group of a control field."
        },
        "condition": {
          "$id": "#/condition",
          "type": "object",
          "description": "Condition(s) to activate the binding.",
          "allOf": [{
            "examples": [{
              "type": "simple",
              "property": "httpMethod",
              "equals": "GET"
            }, {
              "type": "simple",
              "property": "httpMethod",
              "oneOf": ["POST", "PUT", "DELETE"]
            }, {
              "allMatch": [{
                "type": "simple",
                "property": "authType",
                "equals": "Basic"
              }, {
                "type": "simple",
                "property": "httpMethod",
                "oneOf": ["POST", "PUT", "DELETE"]
              }]
            }]
          }],
          "definitions": {
            "condition": {
              "type": "object",
              "required": ["property"],
              "properties": {
                "type": {
                  "$id": "#/condition/type",
                  "const": "simple",
                  "description": "The type of the condition.",
                  "default": "simple"
                },
                "property": {
                  "$id": "#/condition/property",
                  "type": "string",
                  "description": "The id of the property to check."
                }
              },
              "oneOf": [{
                "properties": {
                  "equals": {
                    "type": ["string", "number", "boolean"]
                  }
                },
                "required": ["equals"]
              }, {
                "properties": {
                  "oneOf": {
                    "type": "array",
                    "items": {
                      "type": ["string", "number"]
                    }
                  }
                },
                "required": ["oneOf"]
              }],
              "errorMessage": {
                "required": {
                  "property": "missing property name for condition"
                }
              }
            }
          },
          "oneOf": [{
            "$ref": "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition"
          }, {
            "properties": {
              "allMatch": {
                "$id": "#/allMatch",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition"
                },
                "minItems": 1
              }
            },
            "required": ["allMatch"]
          }]
        }
      }
    }
  }, {
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "array",
    "description": "List of properties of the element template.",
    "items": {
      "type": "object",
      "default": {},
      "required": ["binding"],
      "allOf": [{
        "if": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "const": "property"
                }
              },
              "required": ["type"]
            }
          },
          "required": ["binding"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["String", "Text", "Hidden", "Dropdown", "Boolean"],
              "errorMessage": "invalid property type ${0} for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "enum": ["zeebe:input", "zeebe:output", "zeebe:property", "zeebe:taskHeader", "zeebe:taskDefinition:retries", "zeebe:taskDefinition:type", "bpmn:Message#property", "bpmn:Message#zeebe:subscription#property"]
                }
              },
              "required": ["type"]
            }
          },
          "required": ["binding"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["String", "Text", "Hidden", "Dropdown"],
              "errorMessage": "invalid property type ${0} for binding type ${1/binding/type}; must be any of { String, Text, Hidden, Dropdown }"
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "optional": {
              "const": true
            }
          },
          "required": ["optional"]
        },
        "then": {
          "properties": {
            "binding": {
              "properties": {
                "type": {
                  "enum": ["zeebe:input", "zeebe:output", "zeebe:property", "zeebe:taskHeader"],
                  "errorMessage": "optional is not supported for binding type ${0}; must be any of { zeebe:input, zeebe:output, zeebe:property, zeebe:taskHeader }"
                }
              },
              "required": ["type"]
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "optional": {
              "const": true
            }
          },
          "required": ["optional"]
        },
        "then": {
          "properties": {
            "constraints": {
              "properties": {
                "notEmpty": {
                  "const": false,
                  "errorMessage": "optional is not allowed for truthy \"notEmpty\" constraint"
                }
              },
              "required": ["notEmpty"]
            }
          }
        }
      }, {
        "if": {
          "properties": {
            "feel": {
              "not": {
                "const": null
              }
            }
          },
          "required": ["feel"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["String", "Text"],
              "errorMessage": "feel is only supported for \"String\" and \"Text\" type"
            }
          },
          "required": ["type"]
        }
      }, {
        "if": {
          "properties": {
            "language": {
              "not": {
                "const": null
              }
            }
          },
          "required": ["language"]
        },
        "then": {
          "properties": {
            "type": {
              "enum": ["Text"],
              "errorMessage": "language is only supported for \"Text\" type"
            }
          }
        }
      }, {
        "if": {
          "required": ["value"]
        },
        "then": {
          "not": {
            "required": ["generatedValue"]
          }
        }
      }, {
        "if": {
          "properties": {
            "type": {
              "enum": ["Boolean", "Dropdown"]
            }
          },
          "required": ["type"]
        },
        "then": {
          "not": {
            "required": ["generatedValue"]
          }
        }
      }],
      "properties": {
        "binding": {
          "$id": "#/properties/property/binding",
          "type": "object",
          "description": "Specifying how the property is mapped to BPMN or Zeebe extension elements and attributes.",
          "required": ["type"],
          "allOf": [{
            "if": {
              "properties": {
                "type": {
                  "enum": ["property", "zeebe:property", "zeebe:input", "bpmn:Message#property", "bpmn:Message#zeebe:subscription#property"]
                }
              },
              "required": ["type"]
            },
            "then": {
              "required": ["name"],
              "errorMessage": "property.binding ${0/type} requires name"
            }
          }, {
            "if": {
              "properties": {
                "type": {
                  "const": "zeebe:output"
                }
              },
              "required": ["type"]
            },
            "then": {
              "required": ["source"],
              "errorMessage": "property.binding ${0/type} requires source"
            }
          }, {
            "if": {
              "properties": {
                "type": {
                  "const": "zeebe:taskHeader"
                }
              },
              "required": ["type"]
            },
            "then": {
              "required": ["key"],
              "errorMessage": "property.binding ${0/type} requires key"
            }
          }, {
            "examples": [{
              "type": "property",
              "name": "name"
            }, {
              "type": "zeebe:input",
              "name": "input"
            }, {
              "type": "zeebe:output",
              "source": "output"
            }, {
              "type": "zeebe:property",
              "name": "property"
            }, {
              "type": "zeebe:taskDefinition:retries"
            }, {
              "type": "zeebe:taskDefinition:type"
            }, {
              "type": "zeebe:taskHeader",
              "key": "key"
            }]
          }],
          "properties": {
            "type": {
              "$id": "#/properties/property/binding/type",
              "type": "string",
              "description": "The type of a property binding.",
              "enum": ["property", "zeebe:taskDefinition:type", "zeebe:taskDefinition:retries", "zeebe:input", "zeebe:output", "zeebe:property", "zeebe:taskHeader", "bpmn:Message#property", "bpmn:Message#zeebe:subscription#property"],
              "errorMessage": "invalid property.binding type ${0}; must be any of { property, zeebe:taskDefinition:type, zeebe:input, zeebe:output, zeebe:property, zeebe:taskHeader, bpmn:Message#property, bpmn:Message#zeebe:subscription#property }"
            },
            "name": {
              "$id": "#/properties/property/binding/name",
              "type": "string",
              "description": "The name of a property binding."
            },
            "source": {
              "$id": "#/properties/property/binding/source",
              "type": "string",
              "description": "The source value of a property binding (zeebe:output)."
            },
            "key": {
              "$id": "#/properties/property/binding/key",
              "type": "string",
              "description": "The key value of a property binding (zeebe:taskHeader)."
            }
          }
        },
        "optional": {
          "$id": "#/optional",
          "type": "boolean",
          "description": "Indicates whether a property is optional. Optional bindings do not persist empty values in the underlying BPMN 2.0 XML."
        },
        "feel": {
          "$id": "#/properties/property/feel",
          "type": "string",
          "default": null,
          "description": "Indicates whether the property can be a feel expression",
          "enum": [null, "optional", "required"]
        },
        "language": {
          "$id": "#/properties/property/language",
          "type": "string",
          "description": "Indicates that the field is a custom language editor"
        },
        "generatedValue": {
          "$id": "#/properties/property/generatedValue",
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "const": "uuid"
            }
          },
          "description": "Sets property to a generated value according to given scheme."
        }
      },
      "errorMessage": {
        "required": {
          "binding": "missing binding for property \"${0#}\""
        }
      }
    }
  }]
};
var schema19 = {
  "type": "object",
  "required": ["property"],
  "properties": {
    "type": {
      "$id": "#/condition/type",
      "const": "simple",
      "description": "The type of the condition.",
      "default": "simple"
    },
    "property": {
      "$id": "#/condition/property",
      "type": "string",
      "description": "The id of the property to check."
    }
  },
  "oneOf": [{
    "properties": {
      "equals": {
        "type": ["string", "number", "boolean"]
      }
    },
    "required": ["equals"]
  }, {
    "properties": {
      "oneOf": {
        "type": "array",
        "items": {
          "type": ["string", "number"]
        }
      }
    },
    "required": ["oneOf"]
  }],
  "errorMessage": {
    "required": {
      "property": "missing property name for condition"
    }
  }
};
function validate16(data) {
  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref5$dataPath = _ref5.dataPath,
    dataPath = _ref5$dataPath === void 0 ? "" : _ref5$dataPath,
    parentData = _ref5.parentData,
    parentDataProperty = _ref5.parentDataProperty,
    _ref5$rootData = _ref5.rootData,
    rootData = _ref5$rootData === void 0 ? data : _ref5$rootData;
  var vErrors = null;
  var errors = 0;
  if (Array.isArray(data)) {
    var len0 = data.length;
    for (var i0 = 0; i0 < len0; i0++) {
      var data0 = data[i0];
      var _errs5 = errors;
      var valid5 = true;
      var _errs6 = errors;
      if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
        if (data0.type === undefined && "type") {
          var err0 = {};
          if (vErrors === null) {
            vErrors = [err0];
          } else {
            vErrors.push(err0);
          }
          errors++;
        } else {
          if (data0.type !== undefined) {
            if (!func0(data0.type, "Dropdown")) {
              var err1 = {};
              if (vErrors === null) {
                vErrors = [err1];
              } else {
                vErrors.push(err1);
              }
              errors++;
            }
          }
        }
      }
      var _valid0 = _errs6 === errors;
      errors = _errs5;
      if (vErrors !== null) {
        if (_errs5) {
          vErrors.length = _errs5;
        } else {
          vErrors = null;
        }
      }
      if (_valid0) {
        var _errs8 = errors;
        if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
          if (data0.choices === undefined) {
            var err2 = {
              keyword: "required",
              dataPath: dataPath + "/" + i0,
              schemaPath: "#/allOf/0/items/allOf/0/then/required",
              params: {
                missingProperty: "choices"
              },
              message: "should have required property '" + "choices" + "'"
            };
            if (vErrors === null) {
              vErrors = [err2];
            } else {
              vErrors.push(err2);
            }
            errors++;
          }
        }
        if (errors > 0) {
          var emErrs0 = [];
          var _iterator79 = _createForOfIteratorHelper(vErrors),
            _step79;
          try {
            for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
              var err3 = _step79.value;
              if (err3.keyword !== "errorMessage" && !err3.emUsed && (err3.dataPath === dataPath + "/" + i0 || err3.dataPath.indexOf(dataPath + "/" + i0) === 0 && err3.dataPath[dataPath + "/" + i0.length] === "/") && err3.schemaPath.indexOf("#/allOf/0/items/allOf/0/then") === 0 && err3.schemaPath["#/allOf/0/items/allOf/0/then".length] === "/") {
                emErrs0.push(err3);
                err3.emUsed = true;
              }
            }
          } catch (err) {
            _iterator79.e(err);
          } finally {
            _iterator79.f();
          }
          if (emErrs0.length) {
            var err4 = {
              keyword: "errorMessage",
              dataPath: dataPath + "/" + i0,
              schemaPath: "#/allOf/0/items/allOf/0/then/errorMessage",
              params: {
                errors: emErrs0
              },
              message: "must provide choices=[] with \"Dropdown\" type"
            };
            if (vErrors === null) {
              vErrors = [err4];
            } else {
              vErrors.push(err4);
            }
            errors++;
          }
          var emErrs1 = [];
          var _iterator80 = _createForOfIteratorHelper(vErrors),
            _step80;
          try {
            for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
              var err5 = _step80.value;
              if (!err5.emUsed) {
                emErrs1.push(err5);
              }
            }
          } catch (err) {
            _iterator80.e(err);
          } finally {
            _iterator80.f();
          }
          vErrors = emErrs1;
          errors = emErrs1.length;
        }
        var _valid0 = _errs8 === errors;
        valid5 = _valid0;
      }
      if (!valid5) {
        var err6 = {
          keyword: "if",
          dataPath: dataPath + "/" + i0,
          schemaPath: "#/allOf/0/items/allOf/0/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }
        errors++;
      }
      if (data0 && _typeof(data0) == "object" && !Array.isArray(data0)) {
        if (data0.id !== undefined) {
          if (typeof data0.id !== "string") {
            var err7 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/id",
              schemaPath: "#/allOf/0/items/properties/id/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err7];
            } else {
              vErrors.push(err7);
            }
            errors++;
          }
        }
        if (data0.value !== undefined) {
          var data3 = data0.value;
          if (typeof data3 !== "string" && typeof data3 !== "boolean") {
            var err8 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/value",
              schemaPath: "#/allOf/0/items/properties/value/type",
              params: {
                type: schema18.allOf[0].items.properties.value.type
              },
              message: "should be string,boolean"
            };
            if (vErrors === null) {
              vErrors = [err8];
            } else {
              vErrors.push(err8);
            }
            errors++;
          }
        }
        if (data0.description !== undefined) {
          if (typeof data0.description !== "string") {
            var err9 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/description",
              schemaPath: "#/allOf/0/items/properties/description/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err9];
            } else {
              vErrors.push(err9);
            }
            errors++;
          }
        }
        if (data0.label !== undefined) {
          if (typeof data0.label !== "string") {
            var err10 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/label",
              schemaPath: "#/allOf/0/items/properties/label/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err10];
            } else {
              vErrors.push(err10);
            }
            errors++;
          }
        }
        if (data0.type !== undefined) {
          if (typeof data0.type !== "string") {
            var err11 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/type",
              schemaPath: "#/allOf/0/items/properties/type/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err11];
            } else {
              vErrors.push(err11);
            }
            errors++;
          }
        }
        if (data0.editable !== undefined) {
          if (typeof data0.editable !== "boolean") {
            var err12 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/editable",
              schemaPath: "#/allOf/0/items/properties/editable/type",
              params: {
                type: "boolean"
              },
              message: "should be boolean"
            };
            if (vErrors === null) {
              vErrors = [err12];
            } else {
              vErrors.push(err12);
            }
            errors++;
          }
        }
        if (data0.choices !== undefined) {
          var data8 = data0.choices;
          if (Array.isArray(data8)) {
            var len1 = data8.length;
            for (var i1 = 0; i1 < len1; i1++) {
              var data9 = data8[i1];
              if (data9 && _typeof(data9) == "object" && !Array.isArray(data9)) {
                if (data9.value === undefined) {
                  var err13 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                    schemaPath: "#/allOf/0/items/properties/choices/items/required",
                    params: {
                      missingProperty: "value"
                    },
                    message: "should have required property '" + "value" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err13];
                  } else {
                    vErrors.push(err13);
                  }
                  errors++;
                }
                if (data9.name === undefined) {
                  var err14 = {
                    keyword: "required",
                    dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                    schemaPath: "#/allOf/0/items/properties/choices/items/required",
                    params: {
                      missingProperty: "name"
                    },
                    message: "should have required property '" + "name" + "'"
                  };
                  if (vErrors === null) {
                    vErrors = [err14];
                  } else {
                    vErrors.push(err14);
                  }
                  errors++;
                }
                if (data9.name !== undefined) {
                  if (typeof data9.name !== "string") {
                    var err15 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1 + "/name",
                      schemaPath: "#/allOf/0/items/properties/choices/items/properties/name/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err15];
                    } else {
                      vErrors.push(err15);
                    }
                    errors++;
                  }
                }
                if (data9.value !== undefined) {
                  if (typeof data9.value !== "string") {
                    var err16 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1 + "/value",
                      schemaPath: "#/allOf/0/items/properties/choices/items/properties/value/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err16];
                    } else {
                      vErrors.push(err16);
                    }
                    errors++;
                  }
                }
              } else {
                var err17 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                  schemaPath: "#/allOf/0/items/properties/choices/items/type",
                  params: {
                    type: "object"
                  },
                  message: "should be object"
                };
                if (vErrors === null) {
                  vErrors = [err17];
                } else {
                  vErrors.push(err17);
                }
                errors++;
              }
              if (errors > 0) {
                var emErrors0 = {
                  "required": []
                };
                var templates0 = {};
                var _iterator81 = _createForOfIteratorHelper(vErrors),
                  _step81;
                try {
                  for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
                    var err18 = _step81.value;
                    if (err18.keyword !== "errorMessage" && !err18.emUsed && err18.dataPath === dataPath + "/" + i0 + "/choices/" + i1 && err18.keyword in emErrors0 && err18.schemaPath.indexOf("#/allOf/0/items/properties/choices/items") === 0 && /^\/[^\/]*$/.test(err18.schemaPath.slice(40))) {
                      emErrors0[err18.keyword].push(err18);
                      err18.emUsed = true;
                    }
                  }
                } catch (err) {
                  _iterator81.e(err);
                } finally {
                  _iterator81.f();
                }
                for (var key0 in emErrors0) {
                  if (emErrors0[key0].length) {
                    var err19 = {
                      keyword: "errorMessage",
                      dataPath: dataPath + "/" + i0 + "/choices/" + i1,
                      schemaPath: "#/allOf/0/items/properties/choices/items/errorMessage",
                      params: {
                        errors: emErrors0[key0]
                      },
                      message: key0 in templates0 ? templates0[key0]() : schema18.allOf[0].items.properties.choices.items.errorMessage[key0]
                    };
                    if (vErrors === null) {
                      vErrors = [err19];
                    } else {
                      vErrors.push(err19);
                    }
                    errors++;
                  }
                }
                var emErrs2 = [];
                var _iterator82 = _createForOfIteratorHelper(vErrors),
                  _step82;
                try {
                  for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                    var err20 = _step82.value;
                    if (!err20.emUsed) {
                      emErrs2.push(err20);
                    }
                  }
                } catch (err) {
                  _iterator82.e(err);
                } finally {
                  _iterator82.f();
                }
                vErrors = emErrs2;
                errors = emErrs2.length;
              }
            }
          } else {
            var err21 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/choices",
              schemaPath: "#/allOf/0/items/properties/choices/type",
              params: {
                type: "array"
              },
              message: "should be array"
            };
            if (vErrors === null) {
              vErrors = [err21];
            } else {
              vErrors.push(err21);
            }
            errors++;
          }
        }
        if (data0.constraints !== undefined) {
          var data12 = data0.constraints;
          if (data12 && _typeof(data12) == "object" && !Array.isArray(data12)) {
            if (data12.notEmpty !== undefined) {
              if (typeof data12.notEmpty !== "boolean") {
                var err22 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/notEmpty",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/notEmpty/type",
                  params: {
                    type: "boolean"
                  },
                  message: "should be boolean"
                };
                if (vErrors === null) {
                  vErrors = [err22];
                } else {
                  vErrors.push(err22);
                }
                errors++;
              }
            }
            if (data12.minLength !== undefined) {
              if (!(typeof data12.minLength == "number")) {
                var err23 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/minLength",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/minLength/type",
                  params: {
                    type: "number"
                  },
                  message: "should be number"
                };
                if (vErrors === null) {
                  vErrors = [err23];
                } else {
                  vErrors.push(err23);
                }
                errors++;
              }
            }
            if (data12.maxLength !== undefined) {
              if (!(typeof data12.maxLength == "number")) {
                var err24 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/maxLength",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/maxLength/type",
                  params: {
                    type: "number"
                  },
                  message: "should be number"
                };
                if (vErrors === null) {
                  vErrors = [err24];
                } else {
                  vErrors.push(err24);
                }
                errors++;
              }
            }
            if (data12.pattern !== undefined) {
              var data16 = data12.pattern;
              var _errs38 = errors;
              var valid13 = false;
              var passing0 = null;
              var _errs39 = errors;
              if (data16 && _typeof(data16) == "object" && !Array.isArray(data16)) {
                if (data16.value !== undefined) {
                  if (typeof data16.value !== "string") {
                    var err25 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/constraints/pattern/value",
                      schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/0/properties/value/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err25];
                    } else {
                      vErrors.push(err25);
                    }
                    errors++;
                  }
                }
                if (data16.message !== undefined) {
                  if (typeof data16.message !== "string") {
                    var err26 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/constraints/pattern/message",
                      schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/0/properties/message/type",
                      params: {
                        type: "string"
                      },
                      message: "should be string"
                    };
                    if (vErrors === null) {
                      vErrors = [err26];
                    } else {
                      vErrors.push(err26);
                    }
                    errors++;
                  }
                }
              } else {
                var err27 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/0/type",
                  params: {
                    type: "object"
                  },
                  message: "should be object"
                };
                if (vErrors === null) {
                  vErrors = [err27];
                } else {
                  vErrors.push(err27);
                }
                errors++;
              }
              var _valid1 = _errs39 === errors;
              if (_valid1) {
                valid13 = true;
                passing0 = 0;
              }
              var _errs45 = errors;
              if (typeof data16 !== "string") {
                var err28 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf/1/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err28];
                } else {
                  vErrors.push(err28);
                }
                errors++;
              }
              var _valid1 = _errs45 === errors;
              if (_valid1 && valid13) {
                valid13 = false;
                passing0 = [passing0, 1];
              } else {
                if (_valid1) {
                  valid13 = true;
                  passing0 = 1;
                }
              }
              if (!valid13) {
                var err29 = {
                  keyword: "oneOf",
                  dataPath: dataPath + "/" + i0 + "/constraints/pattern",
                  schemaPath: "#/allOf/0/items/properties/constraints/properties/pattern/oneOf",
                  params: {
                    passingSchemas: passing0
                  },
                  message: "should match exactly one schema in oneOf"
                };
                if (vErrors === null) {
                  vErrors = [err29];
                } else {
                  vErrors.push(err29);
                }
                errors++;
              } else {
                errors = _errs38;
                if (vErrors !== null) {
                  if (_errs38) {
                    vErrors.length = _errs38;
                  } else {
                    vErrors = null;
                  }
                }
              }
            }
          } else {
            var err30 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/constraints",
              schemaPath: "#/allOf/0/items/properties/constraints/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err30];
            } else {
              vErrors.push(err30);
            }
            errors++;
          }
        }
        if (data0.group !== undefined) {
          if (typeof data0.group !== "string") {
            var err31 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/group",
              schemaPath: "#/allOf/0/items/properties/group/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err31];
            } else {
              vErrors.push(err31);
            }
            errors++;
          }
        }
        if (data0.condition !== undefined) {
          var data20 = data0.condition;
          if (!(data20 && _typeof(data20) == "object" && !Array.isArray(data20))) {
            var err32 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/allOf/0/items/properties/condition/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err32];
            } else {
              vErrors.push(err32);
            }
            errors++;
          }
          var _errs51 = errors;
          var valid15 = false;
          var passing1 = null;
          var _errs52 = errors;
          var _errs55 = errors;
          var valid17 = false;
          var passing2 = null;
          var _errs56 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.equals === undefined) {
              var err33 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/required",
                params: {
                  missingProperty: "equals"
                },
                message: "should have required property '" + "equals" + "'"
              };
              if (vErrors === null) {
                vErrors = [err33];
              } else {
                vErrors.push(err33);
              }
              errors++;
            }
            if (data20.equals !== undefined) {
              var data21 = data20.equals;
              if (typeof data21 !== "string" && !(typeof data21 == "number") && typeof data21 !== "boolean") {
                var err34 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/equals",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/properties/equals/type",
                  params: {
                    type: schema19.oneOf[0].properties.equals.type
                  },
                  message: "should be string,number,boolean"
                };
                if (vErrors === null) {
                  vErrors = [err34];
                } else {
                  vErrors.push(err34);
                }
                errors++;
              }
            }
          }
          var _valid3 = _errs56 === errors;
          if (_valid3) {
            valid17 = true;
            passing2 = 0;
          }
          var _errs59 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.oneOf === undefined) {
              var err35 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/required",
                params: {
                  missingProperty: "oneOf"
                },
                message: "should have required property '" + "oneOf" + "'"
              };
              if (vErrors === null) {
                vErrors = [err35];
              } else {
                vErrors.push(err35);
              }
              errors++;
            }
            if (data20.oneOf !== undefined) {
              var data22 = data20.oneOf;
              if (Array.isArray(data22)) {
                var len2 = data22.length;
                for (var i2 = 0; i2 < len2; i2++) {
                  var data23 = data22[i2];
                  if (typeof data23 !== "string" && !(typeof data23 == "number")) {
                    var err36 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/condition/oneOf/" + i2,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/items/type",
                      params: {
                        type: schema19.oneOf[1].properties.oneOf.items.type
                      },
                      message: "should be string,number"
                    };
                    if (vErrors === null) {
                      vErrors = [err36];
                    } else {
                      vErrors.push(err36);
                    }
                    errors++;
                  }
                }
              } else {
                var err37 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/oneOf",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err37];
                } else {
                  vErrors.push(err37);
                }
                errors++;
              }
            }
          }
          var _valid3 = _errs59 === errors;
          if (_valid3 && valid17) {
            valid17 = false;
            passing2 = [passing2, 1];
          } else {
            if (_valid3) {
              valid17 = true;
              passing2 = 1;
            }
          }
          if (!valid17) {
            var err38 = {
              keyword: "oneOf",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf",
              params: {
                passingSchemas: passing2
              },
              message: "should match exactly one schema in oneOf"
            };
            if (vErrors === null) {
              vErrors = [err38];
            } else {
              vErrors.push(err38);
            }
            errors++;
          } else {
            errors = _errs55;
            if (vErrors !== null) {
              if (_errs55) {
                vErrors.length = _errs55;
              } else {
                vErrors = null;
              }
            }
          }
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.property === undefined) {
              var err39 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/required",
                params: {
                  missingProperty: "property"
                },
                message: "should have required property '" + "property" + "'"
              };
              if (vErrors === null) {
                vErrors = [err39];
              } else {
                vErrors.push(err39);
              }
              errors++;
            }
            if (data20.type !== undefined) {
              if (!func0(data20.type, "simple")) {
                var err40 = {
                  keyword: "const",
                  dataPath: dataPath + "/" + i0 + "/condition/type",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/type/const",
                  params: {
                    allowedValue: "simple"
                  },
                  message: "should be equal to constant"
                };
                if (vErrors === null) {
                  vErrors = [err40];
                } else {
                  vErrors.push(err40);
                }
                errors++;
              }
            }
            if (data20.property !== undefined) {
              if (typeof data20.property !== "string") {
                var err41 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/property",
                  schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/property/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err41];
                } else {
                  vErrors.push(err41);
                }
                errors++;
              }
            }
          } else {
            var err42 = {
              keyword: "type",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err42];
            } else {
              vErrors.push(err42);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors1 = {
              "required": {
                "property": []
              }
            };
            var templates1 = {
              required: {}
            };
            var emPropParams0 = void 0;
            var emParamsErrors0 = void 0;
            var _iterator83 = _createForOfIteratorHelper(vErrors),
              _step83;
            try {
              for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
                var err43 = _step83.value;
                if (err43.keyword !== "errorMessage" && !err43.emUsed && err43.dataPath === dataPath + "/" + i0 + "/condition" && err43.keyword in emErrors1 && err43.schemaPath.indexOf("#/definitions/properties/allOf/0/items/properties/condition/definitions/condition") === 0 && /^\/[^\/]*$/.test(err43.schemaPath.slice(81))) {
                  emPropParams0 = obj0[err43.keyword];
                  emParamsErrors0 = emErrors1[err43.keyword][err43.params[emPropParams0]];
                  if (emParamsErrors0) {
                    emParamsErrors0.push(err43);
                    err43.emUsed = true;
                  }
                }
              }
            } catch (err) {
              _iterator83.e(err);
            } finally {
              _iterator83.f();
            }
            for (var key1 in emErrors1) {
              for (var keyProp0 in emErrors1[key1]) {
                emParamsErrors0 = emErrors1[key1][keyProp0];
                if (emParamsErrors0.length) {
                  var tmpl0 = templates1[key1] && templates1[key1][keyProp0];
                  var err44 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/" + i0 + "/condition",
                    schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/errorMessage",
                    params: {
                      errors: emParamsErrors0
                    },
                    message: tmpl0 ? tmpl0() : schema19.errorMessage[key1][keyProp0]
                  };
                  if (vErrors === null) {
                    vErrors = [err44];
                  } else {
                    vErrors.push(err44);
                  }
                  errors++;
                }
              }
            }
            var emErrs3 = [];
            var _iterator84 = _createForOfIteratorHelper(vErrors),
              _step84;
            try {
              for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
                var err45 = _step84.value;
                if (!err45.emUsed) {
                  emErrs3.push(err45);
                }
              }
            } catch (err) {
              _iterator84.e(err);
            } finally {
              _iterator84.f();
            }
            vErrors = emErrs3;
            errors = emErrs3.length;
          }
          var _valid2 = _errs52 === errors;
          if (_valid2) {
            valid15 = true;
            passing1 = 0;
          }
          var _errs67 = errors;
          if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
            if (data20.allMatch === undefined) {
              var err46 = {
                keyword: "required",
                dataPath: dataPath + "/" + i0 + "/condition",
                schemaPath: "#/allOf/0/items/properties/condition/oneOf/1/required",
                params: {
                  missingProperty: "allMatch"
                },
                message: "should have required property '" + "allMatch" + "'"
              };
              if (vErrors === null) {
                vErrors = [err46];
              } else {
                vErrors.push(err46);
              }
              errors++;
            }
            if (data20.allMatch !== undefined) {
              var data26 = data20.allMatch;
              if (Array.isArray(data26)) {
                if (data26.length < 1) {
                  var err47 = {
                    keyword: "minItems",
                    dataPath: dataPath + "/" + i0 + "/condition/allMatch",
                    schemaPath: "#/allOf/0/items/properties/condition/oneOf/1/properties/allMatch/minItems",
                    params: {
                      limit: 1
                    },
                    message: "should NOT have fewer than 1 items"
                  };
                  if (vErrors === null) {
                    vErrors = [err47];
                  } else {
                    vErrors.push(err47);
                  }
                  errors++;
                }
                var len3 = data26.length;
                for (var i3 = 0; i3 < len3; i3++) {
                  var data27 = data26[i3];
                  var _errs73 = errors;
                  var valid27 = false;
                  var passing3 = null;
                  var _errs74 = errors;
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.equals === undefined) {
                      var err48 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/required",
                        params: {
                          missingProperty: "equals"
                        },
                        message: "should have required property '" + "equals" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err48];
                      } else {
                        vErrors.push(err48);
                      }
                      errors++;
                    }
                    if (data27.equals !== undefined) {
                      var data28 = data27.equals;
                      if (typeof data28 !== "string" && !(typeof data28 == "number") && typeof data28 !== "boolean") {
                        var err49 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/equals",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/0/properties/equals/type",
                          params: {
                            type: schema19.oneOf[0].properties.equals.type
                          },
                          message: "should be string,number,boolean"
                        };
                        if (vErrors === null) {
                          vErrors = [err49];
                        } else {
                          vErrors.push(err49);
                        }
                        errors++;
                      }
                    }
                  }
                  var _valid4 = _errs74 === errors;
                  if (_valid4) {
                    valid27 = true;
                    passing3 = 0;
                  }
                  var _errs77 = errors;
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.oneOf === undefined) {
                      var err50 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/required",
                        params: {
                          missingProperty: "oneOf"
                        },
                        message: "should have required property '" + "oneOf" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err50];
                      } else {
                        vErrors.push(err50);
                      }
                      errors++;
                    }
                    if (data27.oneOf !== undefined) {
                      var data29 = data27.oneOf;
                      if (Array.isArray(data29)) {
                        var len4 = data29.length;
                        for (var i4 = 0; i4 < len4; i4++) {
                          var data30 = data29[i4];
                          if (typeof data30 !== "string" && !(typeof data30 == "number")) {
                            var err51 = {
                              keyword: "type",
                              dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/oneOf/" + i4,
                              schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/items/type",
                              params: {
                                type: schema19.oneOf[1].properties.oneOf.items.type
                              },
                              message: "should be string,number"
                            };
                            if (vErrors === null) {
                              vErrors = [err51];
                            } else {
                              vErrors.push(err51);
                            }
                            errors++;
                          }
                        }
                      } else {
                        var err52 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/oneOf",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf/1/properties/oneOf/type",
                          params: {
                            type: "array"
                          },
                          message: "should be array"
                        };
                        if (vErrors === null) {
                          vErrors = [err52];
                        } else {
                          vErrors.push(err52);
                        }
                        errors++;
                      }
                    }
                  }
                  var _valid4 = _errs77 === errors;
                  if (_valid4 && valid27) {
                    valid27 = false;
                    passing3 = [passing3, 1];
                  } else {
                    if (_valid4) {
                      valid27 = true;
                      passing3 = 1;
                    }
                  }
                  if (!valid27) {
                    var err53 = {
                      keyword: "oneOf",
                      dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/oneOf",
                      params: {
                        passingSchemas: passing3
                      },
                      message: "should match exactly one schema in oneOf"
                    };
                    if (vErrors === null) {
                      vErrors = [err53];
                    } else {
                      vErrors.push(err53);
                    }
                    errors++;
                  } else {
                    errors = _errs73;
                    if (vErrors !== null) {
                      if (_errs73) {
                        vErrors.length = _errs73;
                      } else {
                        vErrors = null;
                      }
                    }
                  }
                  if (data27 && _typeof(data27) == "object" && !Array.isArray(data27)) {
                    if (data27.property === undefined) {
                      var err54 = {
                        keyword: "required",
                        dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                        schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/required",
                        params: {
                          missingProperty: "property"
                        },
                        message: "should have required property '" + "property" + "'"
                      };
                      if (vErrors === null) {
                        vErrors = [err54];
                      } else {
                        vErrors.push(err54);
                      }
                      errors++;
                    }
                    if (data27.type !== undefined) {
                      if (!func0(data27.type, "simple")) {
                        var err55 = {
                          keyword: "const",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/type",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/type/const",
                          params: {
                            allowedValue: "simple"
                          },
                          message: "should be equal to constant"
                        };
                        if (vErrors === null) {
                          vErrors = [err55];
                        } else {
                          vErrors.push(err55);
                        }
                        errors++;
                      }
                    }
                    if (data27.property !== undefined) {
                      if (typeof data27.property !== "string") {
                        var err56 = {
                          keyword: "type",
                          dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3 + "/property",
                          schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/properties/property/type",
                          params: {
                            type: "string"
                          },
                          message: "should be string"
                        };
                        if (vErrors === null) {
                          vErrors = [err56];
                        } else {
                          vErrors.push(err56);
                        }
                        errors++;
                      }
                    }
                  } else {
                    var err57 = {
                      keyword: "type",
                      dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                      schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/type",
                      params: {
                        type: "object"
                      },
                      message: "should be object"
                    };
                    if (vErrors === null) {
                      vErrors = [err57];
                    } else {
                      vErrors.push(err57);
                    }
                    errors++;
                  }
                  if (errors > 0) {
                    var emErrors2 = {
                      "required": {
                        "property": []
                      }
                    };
                    var templates2 = {
                      required: {}
                    };
                    var emPropParams1 = void 0;
                    var emParamsErrors1 = void 0;
                    var _iterator85 = _createForOfIteratorHelper(vErrors),
                      _step85;
                    try {
                      for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                        var err58 = _step85.value;
                        if (err58.keyword !== "errorMessage" && !err58.emUsed && err58.dataPath === dataPath + "/" + i0 + "/condition/allMatch/" + i3 && err58.keyword in emErrors2 && err58.schemaPath.indexOf("#/definitions/properties/allOf/0/items/properties/condition/definitions/condition") === 0 && /^\/[^\/]*$/.test(err58.schemaPath.slice(81))) {
                          emPropParams1 = obj0[err58.keyword];
                          emParamsErrors1 = emErrors2[err58.keyword][err58.params[emPropParams1]];
                          if (emParamsErrors1) {
                            emParamsErrors1.push(err58);
                            err58.emUsed = true;
                          }
                        }
                      }
                    } catch (err) {
                      _iterator85.e(err);
                    } finally {
                      _iterator85.f();
                    }
                    for (var key2 in emErrors2) {
                      for (var keyProp1 in emErrors2[key2]) {
                        emParamsErrors1 = emErrors2[key2][keyProp1];
                        if (emParamsErrors1.length) {
                          var tmpl1 = templates2[key2] && templates2[key2][keyProp1];
                          var err59 = {
                            keyword: "errorMessage",
                            dataPath: dataPath + "/" + i0 + "/condition/allMatch/" + i3,
                            schemaPath: "#/definitions/properties/allOf/0/items/properties/condition/definitions/condition/errorMessage",
                            params: {
                              errors: emParamsErrors1
                            },
                            message: tmpl1 ? tmpl1() : schema19.errorMessage[key2][keyProp1]
                          };
                          if (vErrors === null) {
                            vErrors = [err59];
                          } else {
                            vErrors.push(err59);
                          }
                          errors++;
                        }
                      }
                    }
                    var emErrs4 = [];
                    var _iterator86 = _createForOfIteratorHelper(vErrors),
                      _step86;
                    try {
                      for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                        var err60 = _step86.value;
                        if (!err60.emUsed) {
                          emErrs4.push(err60);
                        }
                      }
                    } catch (err) {
                      _iterator86.e(err);
                    } finally {
                      _iterator86.f();
                    }
                    vErrors = emErrs4;
                    errors = emErrs4.length;
                  }
                }
              } else {
                var err61 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i0 + "/condition/allMatch",
                  schemaPath: "#/allOf/0/items/properties/condition/oneOf/1/properties/allMatch/type",
                  params: {
                    type: "array"
                  },
                  message: "should be array"
                };
                if (vErrors === null) {
                  vErrors = [err61];
                } else {
                  vErrors.push(err61);
                }
                errors++;
              }
            }
          }
          var _valid2 = _errs67 === errors;
          if (_valid2 && valid15) {
            valid15 = false;
            passing1 = [passing1, 1];
          } else {
            if (_valid2) {
              valid15 = true;
              passing1 = 1;
            }
          }
          if (!valid15) {
            var err62 = {
              keyword: "oneOf",
              dataPath: dataPath + "/" + i0 + "/condition",
              schemaPath: "#/allOf/0/items/properties/condition/oneOf",
              params: {
                passingSchemas: passing1
              },
              message: "should match exactly one schema in oneOf"
            };
            if (vErrors === null) {
              vErrors = [err62];
            } else {
              vErrors.push(err62);
            }
            errors++;
          } else {
            errors = _errs51;
            if (vErrors !== null) {
              if (_errs51) {
                vErrors.length = _errs51;
              } else {
                vErrors = null;
              }
            }
          }
        }
      } else {
        var err63 = {
          keyword: "type",
          dataPath: dataPath + "/" + i0,
          schemaPath: "#/allOf/0/items/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err63];
        } else {
          vErrors.push(err63);
        }
        errors++;
      }
    }
  } else {
    var err64 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/allOf/0/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err64];
    } else {
      vErrors.push(err64);
    }
    errors++;
  }
  if (Array.isArray(data)) {
    var len5 = data.length;
    var _loop5 = function _loop5(i5) {
      var data33 = data[i5];
      var _errs90 = errors;
      var valid37 = true;
      var _errs91 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined && "binding") {
          var err65 = {};
          if (vErrors === null) {
            vErrors = [err65];
          } else {
            vErrors.push(err65);
          }
          errors++;
        } else {
          if (data33.binding !== undefined) {
            var data34 = data33.binding;
            if (data34 && _typeof(data34) == "object" && !Array.isArray(data34)) {
              if (data34.type === undefined && "type") {
                var err66 = {};
                if (vErrors === null) {
                  vErrors = [err66];
                } else {
                  vErrors.push(err66);
                }
                errors++;
              } else {
                if (data34.type !== undefined) {
                  if (!func0(data34.type, "property")) {
                    var err67 = {};
                    if (vErrors === null) {
                      vErrors = [err67];
                    } else {
                      vErrors.push(err67);
                    }
                    errors++;
                  }
                }
              }
            }
          }
        }
      }
      _valid5 = _errs91 === errors;
      errors = _errs90;
      if (vErrors !== null) {
        if (_errs90) {
          vErrors.length = _errs90;
        } else {
          vErrors = null;
        }
      }
      if (_valid5) {
        var _errs94 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            var data36 = data33.type;
            if (!(data36 === "String" || data36 === "Text" || data36 === "Hidden" || data36 === "Dropdown" || data36 === "Boolean")) {
              var err68 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/0/then/properties/type/enum",
                params: {
                  allowedValues: schema18.allOf[1].items.allOf[0].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err68];
              } else {
                vErrors.push(err68);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs5 = [];
              var _iterator87 = _createForOfIteratorHelper(vErrors),
                _step87;
              try {
                for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
                  var err69 = _step87.value;
                  if (err69.keyword !== "errorMessage" && !err69.emUsed && (err69.dataPath === dataPath + "/" + i5 + "/type" || err69.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err69.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err69.schemaPath.indexOf("#/allOf/1/items/allOf/0/then/properties/type") === 0 && err69.schemaPath["#/allOf/1/items/allOf/0/then/properties/type".length] === "/") {
                    emErrs5.push(err69);
                    err69.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator87.e(err);
              } finally {
                _iterator87.f();
              }
              if (emErrs5.length) {
                var err70 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/0/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs5
                  },
                  message: "invalid property type " + JSON.stringify(data36) + " for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
                };
                if (vErrors === null) {
                  vErrors = [err70];
                } else {
                  vErrors.push(err70);
                }
                errors++;
              }
              var emErrs6 = [];
              var _iterator88 = _createForOfIteratorHelper(vErrors),
                _step88;
              try {
                for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
                  var err71 = _step88.value;
                  if (!err71.emUsed) {
                    emErrs6.push(err71);
                  }
                }
              } catch (err) {
                _iterator88.e(err);
              } finally {
                _iterator88.f();
              }
              vErrors = emErrs6;
              errors = emErrs6.length;
            }
          }
        }
        _valid5 = _errs94 === errors;
        valid37 = _valid5;
      }
      if (!valid37) {
        var err72 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/0/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err72];
        } else {
          vErrors.push(err72);
        }
        errors++;
      }
      var _errs97 = errors;
      var valid41 = true;
      var _errs98 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined && "binding") {
          var err73 = {};
          if (vErrors === null) {
            vErrors = [err73];
          } else {
            vErrors.push(err73);
          }
          errors++;
        } else {
          if (data33.binding !== undefined) {
            var data37 = data33.binding;
            if (data37 && _typeof(data37) == "object" && !Array.isArray(data37)) {
              if (data37.type === undefined && "type") {
                var err74 = {};
                if (vErrors === null) {
                  vErrors = [err74];
                } else {
                  vErrors.push(err74);
                }
                errors++;
              } else {
                if (data37.type !== undefined) {
                  var data38 = data37.type;
                  if (!(data38 === "zeebe:input" || data38 === "zeebe:output" || data38 === "zeebe:property" || data38 === "zeebe:taskHeader" || data38 === "zeebe:taskDefinition:retries" || data38 === "zeebe:taskDefinition:type" || data38 === "bpmn:Message#property" || data38 === "bpmn:Message#zeebe:subscription#property")) {
                    var err75 = {};
                    if (vErrors === null) {
                      vErrors = [err75];
                    } else {
                      vErrors.push(err75);
                    }
                    errors++;
                  }
                }
              }
            }
          }
        }
      }
      _valid6 = _errs98 === errors;
      errors = _errs97;
      if (vErrors !== null) {
        if (_errs97) {
          vErrors.length = _errs97;
        } else {
          vErrors = null;
        }
      }
      if (_valid6) {
        var _errs101 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            var data39 = data33.type;
            if (!(data39 === "String" || data39 === "Text" || data39 === "Hidden" || data39 === "Dropdown")) {
              var err76 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/1/then/properties/type/enum",
                params: {
                  allowedValues: schema18.allOf[1].items.allOf[1].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err76];
              } else {
                vErrors.push(err76);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs7 = [];
              var _iterator89 = _createForOfIteratorHelper(vErrors),
                _step89;
              try {
                for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
                  var err77 = _step89.value;
                  if (err77.keyword !== "errorMessage" && !err77.emUsed && (err77.dataPath === dataPath + "/" + i5 + "/type" || err77.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err77.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err77.schemaPath.indexOf("#/allOf/1/items/allOf/1/then/properties/type") === 0 && err77.schemaPath["#/allOf/1/items/allOf/1/then/properties/type".length] === "/") {
                    emErrs7.push(err77);
                    err77.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator89.e(err);
              } finally {
                _iterator89.f();
              }
              if (emErrs7.length) {
                var err78 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/1/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs7
                  },
                  message: "invalid property type " + JSON.stringify(data39) + " for binding type " + JSON.stringify(data33 && data33.binding && data33.binding.type) + "; must be any of { String, Text, Hidden, Dropdown }"
                };
                if (vErrors === null) {
                  vErrors = [err78];
                } else {
                  vErrors.push(err78);
                }
                errors++;
              }
              var emErrs8 = [];
              var _iterator90 = _createForOfIteratorHelper(vErrors),
                _step90;
              try {
                for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
                  var err79 = _step90.value;
                  if (!err79.emUsed) {
                    emErrs8.push(err79);
                  }
                }
              } catch (err) {
                _iterator90.e(err);
              } finally {
                _iterator90.f();
              }
              vErrors = emErrs8;
              errors = emErrs8.length;
            }
          }
        }
        _valid6 = _errs101 === errors;
        valid41 = _valid6;
      }
      if (!valid41) {
        var err80 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/1/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err80];
        } else {
          vErrors.push(err80);
        }
        errors++;
      }
      var _errs104 = errors;
      var valid45 = true;
      var _errs105 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.optional === undefined && "optional") {
          var err81 = {};
          if (vErrors === null) {
            vErrors = [err81];
          } else {
            vErrors.push(err81);
          }
          errors++;
        } else {
          if (data33.optional !== undefined) {
            if (!func0(data33.optional, true)) {
              var err82 = {};
              if (vErrors === null) {
                vErrors = [err82];
              } else {
                vErrors.push(err82);
              }
              errors++;
            }
          }
        }
      }
      _valid7 = _errs105 === errors;
      errors = _errs104;
      if (vErrors !== null) {
        if (_errs104) {
          vErrors.length = _errs104;
        } else {
          vErrors = null;
        }
      }
      if (_valid7) {
        var _errs107 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.binding !== undefined) {
            var data41 = data33.binding;
            if (data41 && _typeof(data41) == "object" && !Array.isArray(data41)) {
              if (data41.type === undefined) {
                var err83 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/allOf/2/then/properties/binding/required",
                  params: {
                    missingProperty: "type"
                  },
                  message: "should have required property '" + "type" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err83];
                } else {
                  vErrors.push(err83);
                }
                errors++;
              }
              if (data41.type !== undefined) {
                var data42 = data41.type;
                if (!(data42 === "zeebe:input" || data42 === "zeebe:output" || data42 === "zeebe:property" || data42 === "zeebe:taskHeader")) {
                  var err84 = {
                    keyword: "enum",
                    dataPath: dataPath + "/" + i5 + "/binding/type",
                    schemaPath: "#/allOf/1/items/allOf/2/then/properties/binding/properties/type/enum",
                    params: {
                      allowedValues: schema18.allOf[1].items.allOf[2].then.properties.binding.properties.type["enum"]
                    },
                    message: "should be equal to one of the allowed values"
                  };
                  if (vErrors === null) {
                    vErrors = [err84];
                  } else {
                    vErrors.push(err84);
                  }
                  errors++;
                }
                if (errors > 0) {
                  var emErrs9 = [];
                  var _iterator91 = _createForOfIteratorHelper(vErrors),
                    _step91;
                  try {
                    for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
                      var err85 = _step91.value;
                      if (err85.keyword !== "errorMessage" && !err85.emUsed && (err85.dataPath === dataPath + "/" + i5 + "/binding/type" || err85.dataPath.indexOf(dataPath + "/" + i5 + "/binding/type") === 0 && err85.dataPath[dataPath + "/" + i5 + "/binding/type".length] === "/") && err85.schemaPath.indexOf("#/allOf/1/items/allOf/2/then/properties/binding/properties/type") === 0 && err85.schemaPath["#/allOf/1/items/allOf/2/then/properties/binding/properties/type".length] === "/") {
                        emErrs9.push(err85);
                        err85.emUsed = true;
                      }
                    }
                  } catch (err) {
                    _iterator91.e(err);
                  } finally {
                    _iterator91.f();
                  }
                  if (emErrs9.length) {
                    var err86 = {
                      keyword: "errorMessage",
                      dataPath: dataPath + "/" + i5 + "/binding/type",
                      schemaPath: "#/allOf/1/items/allOf/2/then/properties/binding/properties/type/errorMessage",
                      params: {
                        errors: emErrs9
                      },
                      message: "optional is not supported for binding type " + JSON.stringify(data42) + "; must be any of { zeebe:input, zeebe:output, zeebe:property, zeebe:taskHeader }"
                    };
                    if (vErrors === null) {
                      vErrors = [err86];
                    } else {
                      vErrors.push(err86);
                    }
                    errors++;
                  }
                  var emErrs10 = [];
                  var _iterator92 = _createForOfIteratorHelper(vErrors),
                    _step92;
                  try {
                    for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                      var err87 = _step92.value;
                      if (!err87.emUsed) {
                        emErrs10.push(err87);
                      }
                    }
                  } catch (err) {
                    _iterator92.e(err);
                  } finally {
                    _iterator92.f();
                  }
                  vErrors = emErrs10;
                  errors = emErrs10.length;
                }
              }
            }
          }
        }
        _valid7 = _errs107 === errors;
        valid45 = _valid7;
      }
      if (!valid45) {
        var err88 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/2/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err88];
        } else {
          vErrors.push(err88);
        }
        errors++;
      }
      var _errs111 = errors;
      var valid49 = true;
      var _errs112 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.optional === undefined && "optional") {
          var err89 = {};
          if (vErrors === null) {
            vErrors = [err89];
          } else {
            vErrors.push(err89);
          }
          errors++;
        } else {
          if (data33.optional !== undefined) {
            if (!func0(data33.optional, true)) {
              var err90 = {};
              if (vErrors === null) {
                vErrors = [err90];
              } else {
                vErrors.push(err90);
              }
              errors++;
            }
          }
        }
      }
      _valid8 = _errs112 === errors;
      errors = _errs111;
      if (vErrors !== null) {
        if (_errs111) {
          vErrors.length = _errs111;
        } else {
          vErrors = null;
        }
      }
      if (_valid8) {
        var _errs114 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.constraints !== undefined) {
            var data44 = data33.constraints;
            if (data44 && _typeof(data44) == "object" && !Array.isArray(data44)) {
              if (data44.notEmpty === undefined) {
                var err91 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/constraints",
                  schemaPath: "#/allOf/1/items/allOf/3/then/properties/constraints/required",
                  params: {
                    missingProperty: "notEmpty"
                  },
                  message: "should have required property '" + "notEmpty" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err91];
                } else {
                  vErrors.push(err91);
                }
                errors++;
              }
              if (data44.notEmpty !== undefined) {
                if (!func0(data44.notEmpty, false)) {
                  var err92 = {
                    keyword: "const",
                    dataPath: dataPath + "/" + i5 + "/constraints/notEmpty",
                    schemaPath: "#/allOf/1/items/allOf/3/then/properties/constraints/properties/notEmpty/const",
                    params: {
                      allowedValue: false
                    },
                    message: "should be equal to constant"
                  };
                  if (vErrors === null) {
                    vErrors = [err92];
                  } else {
                    vErrors.push(err92);
                  }
                  errors++;
                }
                if (errors > 0) {
                  var emErrs11 = [];
                  var _iterator93 = _createForOfIteratorHelper(vErrors),
                    _step93;
                  try {
                    for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
                      var err93 = _step93.value;
                      if (err93.keyword !== "errorMessage" && !err93.emUsed && (err93.dataPath === dataPath + "/" + i5 + "/constraints/notEmpty" || err93.dataPath.indexOf(dataPath + "/" + i5 + "/constraints/notEmpty") === 0 && err93.dataPath[dataPath + "/" + i5 + "/constraints/notEmpty".length] === "/") && err93.schemaPath.indexOf("#/allOf/1/items/allOf/3/then/properties/constraints/properties/notEmpty") === 0 && err93.schemaPath["#/allOf/1/items/allOf/3/then/properties/constraints/properties/notEmpty".length] === "/") {
                        emErrs11.push(err93);
                        err93.emUsed = true;
                      }
                    }
                  } catch (err) {
                    _iterator93.e(err);
                  } finally {
                    _iterator93.f();
                  }
                  if (emErrs11.length) {
                    var err94 = {
                      keyword: "errorMessage",
                      dataPath: dataPath + "/" + i5 + "/constraints/notEmpty",
                      schemaPath: "#/allOf/1/items/allOf/3/then/properties/constraints/properties/notEmpty/errorMessage",
                      params: {
                        errors: emErrs11
                      },
                      message: "optional is not allowed for truthy \"notEmpty\" constraint"
                    };
                    if (vErrors === null) {
                      vErrors = [err94];
                    } else {
                      vErrors.push(err94);
                    }
                    errors++;
                  }
                  var emErrs12 = [];
                  var _iterator94 = _createForOfIteratorHelper(vErrors),
                    _step94;
                  try {
                    for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
                      var err95 = _step94.value;
                      if (!err95.emUsed) {
                        emErrs12.push(err95);
                      }
                    }
                  } catch (err) {
                    _iterator94.e(err);
                  } finally {
                    _iterator94.f();
                  }
                  vErrors = emErrs12;
                  errors = emErrs12.length;
                }
              }
            }
          }
        }
        _valid8 = _errs114 === errors;
        valid49 = _valid8;
      }
      if (!valid49) {
        var err96 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/3/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err96];
        } else {
          vErrors.push(err96);
        }
        errors++;
      }
      var _errs118 = errors;
      var valid53 = true;
      var _errs119 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.feel === undefined && "feel") {
          var err97 = {};
          if (vErrors === null) {
            vErrors = [err97];
          } else {
            vErrors.push(err97);
          }
          errors++;
        } else {
          if (data33.feel !== undefined) {
            var _errs121 = errors;
            var _errs122 = errors;
            if (!func0(data33.feel, schema18.allOf[1].items.allOf[4]["if"].properties.feel.not["const"])) {
              var err98 = {};
              if (vErrors === null) {
                vErrors = [err98];
              } else {
                vErrors.push(err98);
              }
              errors++;
            }
            valid55 = _errs122 === errors;
            if (!valid55) {
              errors = _errs121;
              if (vErrors !== null) {
                if (_errs121) {
                  vErrors.length = _errs121;
                } else {
                  vErrors = null;
                }
              }
            } else {
              var err99 = {};
              if (vErrors === null) {
                vErrors = [err99];
              } else {
                vErrors.push(err99);
              }
              errors++;
            }
          }
        }
      }
      _valid9 = _errs119 === errors;
      errors = _errs118;
      if (vErrors !== null) {
        if (_errs118) {
          vErrors.length = _errs118;
        } else {
          vErrors = null;
        }
      }
      if (_valid9) {
        var _errs123 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type === undefined) {
            var err100 = {
              keyword: "required",
              dataPath: dataPath + "/" + i5,
              schemaPath: "#/allOf/1/items/allOf/4/then/required",
              params: {
                missingProperty: "type"
              },
              message: "should have required property '" + "type" + "'"
            };
            if (vErrors === null) {
              vErrors = [err100];
            } else {
              vErrors.push(err100);
            }
            errors++;
          }
          if (data33.type !== undefined) {
            var data47 = data33.type;
            if (!(data47 === "String" || data47 === "Text")) {
              var err101 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/4/then/properties/type/enum",
                params: {
                  allowedValues: schema18.allOf[1].items.allOf[4].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err101];
              } else {
                vErrors.push(err101);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs13 = [];
              var _iterator95 = _createForOfIteratorHelper(vErrors),
                _step95;
              try {
                for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
                  var err102 = _step95.value;
                  if (err102.keyword !== "errorMessage" && !err102.emUsed && (err102.dataPath === dataPath + "/" + i5 + "/type" || err102.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err102.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err102.schemaPath.indexOf("#/allOf/1/items/allOf/4/then/properties/type") === 0 && err102.schemaPath["#/allOf/1/items/allOf/4/then/properties/type".length] === "/") {
                    emErrs13.push(err102);
                    err102.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator95.e(err);
              } finally {
                _iterator95.f();
              }
              if (emErrs13.length) {
                var err103 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/4/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs13
                  },
                  message: "feel is only supported for \"String\" and \"Text\" type"
                };
                if (vErrors === null) {
                  vErrors = [err103];
                } else {
                  vErrors.push(err103);
                }
                errors++;
              }
              var emErrs14 = [];
              var _iterator96 = _createForOfIteratorHelper(vErrors),
                _step96;
              try {
                for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
                  var err104 = _step96.value;
                  if (!err104.emUsed) {
                    emErrs14.push(err104);
                  }
                }
              } catch (err) {
                _iterator96.e(err);
              } finally {
                _iterator96.f();
              }
              vErrors = emErrs14;
              errors = emErrs14.length;
            }
          }
        }
        _valid9 = _errs123 === errors;
        valid53 = _valid9;
      }
      if (!valid53) {
        var err105 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/4/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err105];
        } else {
          vErrors.push(err105);
        }
        errors++;
      }
      var _errs126 = errors;
      var valid57 = true;
      var _errs127 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.language === undefined && "language") {
          var err106 = {};
          if (vErrors === null) {
            vErrors = [err106];
          } else {
            vErrors.push(err106);
          }
          errors++;
        } else {
          if (data33.language !== undefined) {
            var _errs129 = errors;
            var _errs130 = errors;
            if (!func0(data33.language, schema18.allOf[1].items.allOf[5]["if"].properties.language.not["const"])) {
              var err107 = {};
              if (vErrors === null) {
                vErrors = [err107];
              } else {
                vErrors.push(err107);
              }
              errors++;
            }
            valid59 = _errs130 === errors;
            if (!valid59) {
              errors = _errs129;
              if (vErrors !== null) {
                if (_errs129) {
                  vErrors.length = _errs129;
                } else {
                  vErrors = null;
                }
              }
            } else {
              var err108 = {};
              if (vErrors === null) {
                vErrors = [err108];
              } else {
                vErrors.push(err108);
              }
              errors++;
            }
          }
        }
      }
      _valid10 = _errs127 === errors;
      errors = _errs126;
      if (vErrors !== null) {
        if (_errs126) {
          vErrors.length = _errs126;
        } else {
          vErrors = null;
        }
      }
      if (_valid10) {
        var _errs131 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.type !== undefined) {
            if (!(data33.type === "Text")) {
              var err109 = {
                keyword: "enum",
                dataPath: dataPath + "/" + i5 + "/type",
                schemaPath: "#/allOf/1/items/allOf/5/then/properties/type/enum",
                params: {
                  allowedValues: schema18.allOf[1].items.allOf[5].then.properties.type["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err109];
              } else {
                vErrors.push(err109);
              }
              errors++;
            }
            if (errors > 0) {
              var emErrs15 = [];
              var _iterator97 = _createForOfIteratorHelper(vErrors),
                _step97;
              try {
                for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
                  var err110 = _step97.value;
                  if (err110.keyword !== "errorMessage" && !err110.emUsed && (err110.dataPath === dataPath + "/" + i5 + "/type" || err110.dataPath.indexOf(dataPath + "/" + i5 + "/type") === 0 && err110.dataPath[dataPath + "/" + i5 + "/type".length] === "/") && err110.schemaPath.indexOf("#/allOf/1/items/allOf/5/then/properties/type") === 0 && err110.schemaPath["#/allOf/1/items/allOf/5/then/properties/type".length] === "/") {
                    emErrs15.push(err110);
                    err110.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator97.e(err);
              } finally {
                _iterator97.f();
              }
              if (emErrs15.length) {
                var err111 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/type",
                  schemaPath: "#/allOf/1/items/allOf/5/then/properties/type/errorMessage",
                  params: {
                    errors: emErrs15
                  },
                  message: "language is only supported for \"Text\" type"
                };
                if (vErrors === null) {
                  vErrors = [err111];
                } else {
                  vErrors.push(err111);
                }
                errors++;
              }
              var emErrs16 = [];
              var _iterator98 = _createForOfIteratorHelper(vErrors),
                _step98;
              try {
                for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
                  var err112 = _step98.value;
                  if (!err112.emUsed) {
                    emErrs16.push(err112);
                  }
                }
              } catch (err) {
                _iterator98.e(err);
              } finally {
                _iterator98.f();
              }
              vErrors = emErrs16;
              errors = emErrs16.length;
            }
          }
        }
        _valid10 = _errs131 === errors;
        valid57 = _valid10;
      }
      if (!valid57) {
        var err113 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/5/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err113];
        } else {
          vErrors.push(err113);
        }
        errors++;
      }
      var _errs134 = errors;
      var valid61 = true;
      var _errs135 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.value === undefined && "value") {
          var err114 = {};
          if (vErrors === null) {
            vErrors = [err114];
          } else {
            vErrors.push(err114);
          }
          errors++;
        }
      }
      _valid11 = _errs135 === errors;
      errors = _errs134;
      if (vErrors !== null) {
        if (_errs134) {
          vErrors.length = _errs134;
        } else {
          vErrors = null;
        }
      }
      if (_valid11) {
        var _errs136 = errors;
        var _errs137 = errors;
        var _errs138 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.generatedValue === undefined && "generatedValue") {
            var err115 = {};
            if (vErrors === null) {
              vErrors = [err115];
            } else {
              vErrors.push(err115);
            }
            errors++;
          }
        }
        valid62 = _errs138 === errors;
        if (!valid62) {
          errors = _errs137;
          if (vErrors !== null) {
            if (_errs137) {
              vErrors.length = _errs137;
            } else {
              vErrors = null;
            }
          }
        } else {
          var err116 = {
            keyword: "not",
            dataPath: dataPath + "/" + i5,
            schemaPath: "#/allOf/1/items/allOf/6/then/not",
            params: {},
            message: "should NOT be valid"
          };
          if (vErrors === null) {
            vErrors = [err116];
          } else {
            vErrors.push(err116);
          }
          errors++;
        }
        _valid11 = _errs136 === errors;
        valid61 = _valid11;
      }
      if (!valid61) {
        var err117 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/6/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err117];
        } else {
          vErrors.push(err117);
        }
        errors++;
      }
      var _errs140 = errors;
      var valid63 = true;
      var _errs141 = errors;
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.type === undefined && "type") {
          var err118 = {};
          if (vErrors === null) {
            vErrors = [err118];
          } else {
            vErrors.push(err118);
          }
          errors++;
        } else {
          if (data33.type !== undefined) {
            var data50 = data33.type;
            if (!(data50 === "Boolean" || data50 === "Dropdown")) {
              var err119 = {};
              if (vErrors === null) {
                vErrors = [err119];
              } else {
                vErrors.push(err119);
              }
              errors++;
            }
          }
        }
      }
      _valid12 = _errs141 === errors;
      errors = _errs140;
      if (vErrors !== null) {
        if (_errs140) {
          vErrors.length = _errs140;
        } else {
          vErrors = null;
        }
      }
      if (_valid12) {
        var _errs143 = errors;
        var _errs144 = errors;
        var _errs145 = errors;
        if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
          if (data33.generatedValue === undefined && "generatedValue") {
            var err120 = {};
            if (vErrors === null) {
              vErrors = [err120];
            } else {
              vErrors.push(err120);
            }
            errors++;
          }
        }
        valid65 = _errs145 === errors;
        if (!valid65) {
          errors = _errs144;
          if (vErrors !== null) {
            if (_errs144) {
              vErrors.length = _errs144;
            } else {
              vErrors = null;
            }
          }
        } else {
          var err121 = {
            keyword: "not",
            dataPath: dataPath + "/" + i5,
            schemaPath: "#/allOf/1/items/allOf/7/then/not",
            params: {},
            message: "should NOT be valid"
          };
          if (vErrors === null) {
            vErrors = [err121];
          } else {
            vErrors.push(err121);
          }
          errors++;
        }
        _valid12 = _errs143 === errors;
        valid63 = _valid12;
      }
      if (!valid63) {
        var err122 = {
          keyword: "if",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/allOf/7/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err122];
        } else {
          vErrors.push(err122);
        }
        errors++;
      }
      if (data33 && _typeof(data33) == "object" && !Array.isArray(data33)) {
        if (data33.binding === undefined) {
          var err123 = {
            keyword: "required",
            dataPath: dataPath + "/" + i5,
            schemaPath: "#/allOf/1/items/required",
            params: {
              missingProperty: "binding"
            },
            message: "should have required property '" + "binding" + "'"
          };
          if (vErrors === null) {
            vErrors = [err123];
          } else {
            vErrors.push(err123);
          }
          errors++;
        }
        if (data33.binding !== undefined) {
          var data51 = data33.binding;
          var _errs149 = errors;
          var valid68 = true;
          var _errs150 = errors;
          if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
            if (data51.type === undefined && "type") {
              var err124 = {};
              if (vErrors === null) {
                vErrors = [err124];
              } else {
                vErrors.push(err124);
              }
              errors++;
            } else {
              if (data51.type !== undefined) {
                var data52 = data51.type;
                if (!(data52 === "property" || data52 === "zeebe:property" || data52 === "zeebe:input" || data52 === "bpmn:Message#property" || data52 === "bpmn:Message#zeebe:subscription#property")) {
                  var err125 = {};
                  if (vErrors === null) {
                    vErrors = [err125];
                  } else {
                    vErrors.push(err125);
                  }
                  errors++;
                }
              }
            }
          }
          _valid13 = _errs150 === errors;
          errors = _errs149;
          if (vErrors !== null) {
            if (_errs149) {
              vErrors.length = _errs149;
            } else {
              vErrors = null;
            }
          }
          if (_valid13) {
            var _errs152 = errors;
            if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
              if (data51.name === undefined) {
                var err126 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/0/then/required",
                  params: {
                    missingProperty: "name"
                  },
                  message: "should have required property '" + "name" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err126];
                } else {
                  vErrors.push(err126);
                }
                errors++;
              }
            }
            if (errors > 0) {
              var emErrs17 = [];
              var _iterator99 = _createForOfIteratorHelper(vErrors),
                _step99;
              try {
                for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
                  var err127 = _step99.value;
                  if (err127.keyword !== "errorMessage" && !err127.emUsed && (err127.dataPath === dataPath + "/" + i5 + "/binding" || err127.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err127.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err127.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/0/then") === 0 && err127.schemaPath["#/allOf/1/items/properties/binding/allOf/0/then".length] === "/") {
                    emErrs17.push(err127);
                    err127.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator99.e(err);
              } finally {
                _iterator99.f();
              }
              if (emErrs17.length) {
                var err128 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/0/then/errorMessage",
                  params: {
                    errors: emErrs17
                  },
                  message: "property.binding " + JSON.stringify(data51 && data51.type) + " requires name"
                };
                if (vErrors === null) {
                  vErrors = [err128];
                } else {
                  vErrors.push(err128);
                }
                errors++;
              }
              var emErrs18 = [];
              var _iterator100 = _createForOfIteratorHelper(vErrors),
                _step100;
              try {
                for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
                  var err129 = _step100.value;
                  if (!err129.emUsed) {
                    emErrs18.push(err129);
                  }
                }
              } catch (err) {
                _iterator100.e(err);
              } finally {
                _iterator100.f();
              }
              vErrors = emErrs18;
              errors = emErrs18.length;
            }
            _valid13 = _errs152 === errors;
            valid68 = _valid13;
          }
          if (!valid68) {
            var err130 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/0/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err130];
            } else {
              vErrors.push(err130);
            }
            errors++;
          }
          var _errs154 = errors;
          var valid70 = true;
          var _errs155 = errors;
          if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
            if (data51.type === undefined && "type") {
              var err131 = {};
              if (vErrors === null) {
                vErrors = [err131];
              } else {
                vErrors.push(err131);
              }
              errors++;
            } else {
              if (data51.type !== undefined) {
                if (!func0(data51.type, "zeebe:output")) {
                  var err132 = {};
                  if (vErrors === null) {
                    vErrors = [err132];
                  } else {
                    vErrors.push(err132);
                  }
                  errors++;
                }
              }
            }
          }
          _valid14 = _errs155 === errors;
          errors = _errs154;
          if (vErrors !== null) {
            if (_errs154) {
              vErrors.length = _errs154;
            } else {
              vErrors = null;
            }
          }
          if (_valid14) {
            var _errs157 = errors;
            if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
              if (data51.source === undefined) {
                var err133 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/1/then/required",
                  params: {
                    missingProperty: "source"
                  },
                  message: "should have required property '" + "source" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err133];
                } else {
                  vErrors.push(err133);
                }
                errors++;
              }
            }
            if (errors > 0) {
              var emErrs19 = [];
              var _iterator101 = _createForOfIteratorHelper(vErrors),
                _step101;
              try {
                for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
                  var err134 = _step101.value;
                  if (err134.keyword !== "errorMessage" && !err134.emUsed && (err134.dataPath === dataPath + "/" + i5 + "/binding" || err134.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err134.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err134.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/1/then") === 0 && err134.schemaPath["#/allOf/1/items/properties/binding/allOf/1/then".length] === "/") {
                    emErrs19.push(err134);
                    err134.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator101.e(err);
              } finally {
                _iterator101.f();
              }
              if (emErrs19.length) {
                var err135 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/1/then/errorMessage",
                  params: {
                    errors: emErrs19
                  },
                  message: "property.binding " + JSON.stringify(data51 && data51.type) + " requires source"
                };
                if (vErrors === null) {
                  vErrors = [err135];
                } else {
                  vErrors.push(err135);
                }
                errors++;
              }
              var emErrs20 = [];
              var _iterator102 = _createForOfIteratorHelper(vErrors),
                _step102;
              try {
                for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
                  var err136 = _step102.value;
                  if (!err136.emUsed) {
                    emErrs20.push(err136);
                  }
                }
              } catch (err) {
                _iterator102.e(err);
              } finally {
                _iterator102.f();
              }
              vErrors = emErrs20;
              errors = emErrs20.length;
            }
            _valid14 = _errs157 === errors;
            valid70 = _valid14;
          }
          if (!valid70) {
            var err137 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/1/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err137];
            } else {
              vErrors.push(err137);
            }
            errors++;
          }
          var _errs159 = errors;
          var valid72 = true;
          var _errs160 = errors;
          if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
            if (data51.type === undefined && "type") {
              var err138 = {};
              if (vErrors === null) {
                vErrors = [err138];
              } else {
                vErrors.push(err138);
              }
              errors++;
            } else {
              if (data51.type !== undefined) {
                if (!func0(data51.type, "zeebe:taskHeader")) {
                  var err139 = {};
                  if (vErrors === null) {
                    vErrors = [err139];
                  } else {
                    vErrors.push(err139);
                  }
                  errors++;
                }
              }
            }
          }
          _valid15 = _errs160 === errors;
          errors = _errs159;
          if (vErrors !== null) {
            if (_errs159) {
              vErrors.length = _errs159;
            } else {
              vErrors = null;
            }
          }
          if (_valid15) {
            var _errs162 = errors;
            if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
              if (data51.key === undefined) {
                var err140 = {
                  keyword: "required",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/2/then/required",
                  params: {
                    missingProperty: "key"
                  },
                  message: "should have required property '" + "key" + "'"
                };
                if (vErrors === null) {
                  vErrors = [err140];
                } else {
                  vErrors.push(err140);
                }
                errors++;
              }
            }
            if (errors > 0) {
              var emErrs21 = [];
              var _iterator103 = _createForOfIteratorHelper(vErrors),
                _step103;
              try {
                for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
                  var err141 = _step103.value;
                  if (err141.keyword !== "errorMessage" && !err141.emUsed && (err141.dataPath === dataPath + "/" + i5 + "/binding" || err141.dataPath.indexOf(dataPath + "/" + i5 + "/binding") === 0 && err141.dataPath[dataPath + "/" + i5 + "/binding".length] === "/") && err141.schemaPath.indexOf("#/allOf/1/items/properties/binding/allOf/2/then") === 0 && err141.schemaPath["#/allOf/1/items/properties/binding/allOf/2/then".length] === "/") {
                    emErrs21.push(err141);
                    err141.emUsed = true;
                  }
                }
              } catch (err) {
                _iterator103.e(err);
              } finally {
                _iterator103.f();
              }
              if (emErrs21.length) {
                var err142 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/" + i5 + "/binding",
                  schemaPath: "#/allOf/1/items/properties/binding/allOf/2/then/errorMessage",
                  params: {
                    errors: emErrs21
                  },
                  message: "property.binding " + JSON.stringify(data51 && data51.type) + " requires key"
                };
                if (vErrors === null) {
                  vErrors = [err142];
                } else {
                  vErrors.push(err142);
                }
                errors++;
              }
              var emErrs22 = [];
              var _iterator104 = _createForOfIteratorHelper(vErrors),
                _step104;
              try {
                for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
                  var err143 = _step104.value;
                  if (!err143.emUsed) {
                    emErrs22.push(err143);
                  }
                }
              } catch (err) {
                _iterator104.e(err);
              } finally {
                _iterator104.f();
              }
              vErrors = emErrs22;
              errors = emErrs22.length;
            }
            _valid15 = _errs162 === errors;
            valid72 = _valid15;
          }
          if (!valid72) {
            var err144 = {
              keyword: "if",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/allOf/2/if",
              params: {
                failingKeyword: "then"
              },
              message: "should match \"then\" schema"
            };
            if (vErrors === null) {
              vErrors = [err144];
            } else {
              vErrors.push(err144);
            }
            errors++;
          }
          if (data51 && _typeof(data51) == "object" && !Array.isArray(data51)) {
            if (data51.type === undefined) {
              var err145 = {
                keyword: "required",
                dataPath: dataPath + "/" + i5 + "/binding",
                schemaPath: "#/allOf/1/items/properties/binding/required",
                params: {
                  missingProperty: "type"
                },
                message: "should have required property '" + "type" + "'"
              };
              if (vErrors === null) {
                vErrors = [err145];
              } else {
                vErrors.push(err145);
              }
              errors++;
            }
            if (data51.type !== undefined) {
              var data55 = data51.type;
              if (typeof data55 !== "string") {
                var err146 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/type",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/type/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err146];
                } else {
                  vErrors.push(err146);
                }
                errors++;
              }
              if (!(data55 === "property" || data55 === "zeebe:taskDefinition:type" || data55 === "zeebe:taskDefinition:retries" || data55 === "zeebe:input" || data55 === "zeebe:output" || data55 === "zeebe:property" || data55 === "zeebe:taskHeader" || data55 === "bpmn:Message#property" || data55 === "bpmn:Message#zeebe:subscription#property")) {
                var err147 = {
                  keyword: "enum",
                  dataPath: dataPath + "/" + i5 + "/binding/type",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/type/enum",
                  params: {
                    allowedValues: schema18.allOf[1].items.properties.binding.properties.type["enum"]
                  },
                  message: "should be equal to one of the allowed values"
                };
                if (vErrors === null) {
                  vErrors = [err147];
                } else {
                  vErrors.push(err147);
                }
                errors++;
              }
              if (errors > 0) {
                var emErrs23 = [];
                var _iterator105 = _createForOfIteratorHelper(vErrors),
                  _step105;
                try {
                  for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
                    var err148 = _step105.value;
                    if (err148.keyword !== "errorMessage" && !err148.emUsed && (err148.dataPath === dataPath + "/" + i5 + "/binding/type" || err148.dataPath.indexOf(dataPath + "/" + i5 + "/binding/type") === 0 && err148.dataPath[dataPath + "/" + i5 + "/binding/type".length] === "/") && err148.schemaPath.indexOf("#/allOf/1/items/properties/binding/properties/type") === 0 && err148.schemaPath["#/allOf/1/items/properties/binding/properties/type".length] === "/") {
                      emErrs23.push(err148);
                      err148.emUsed = true;
                    }
                  }
                } catch (err) {
                  _iterator105.e(err);
                } finally {
                  _iterator105.f();
                }
                if (emErrs23.length) {
                  var err149 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/" + i5 + "/binding/type",
                    schemaPath: "#/allOf/1/items/properties/binding/properties/type/errorMessage",
                    params: {
                      errors: emErrs23
                    },
                    message: "invalid property.binding type " + JSON.stringify(data55) + "; must be any of { property, zeebe:taskDefinition:type, zeebe:input, zeebe:output, zeebe:property, zeebe:taskHeader, bpmn:Message#property, bpmn:Message#zeebe:subscription#property }"
                  };
                  if (vErrors === null) {
                    vErrors = [err149];
                  } else {
                    vErrors.push(err149);
                  }
                  errors++;
                }
                var emErrs24 = [];
                var _iterator106 = _createForOfIteratorHelper(vErrors),
                  _step106;
                try {
                  for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
                    var err150 = _step106.value;
                    if (!err150.emUsed) {
                      emErrs24.push(err150);
                    }
                  }
                } catch (err) {
                  _iterator106.e(err);
                } finally {
                  _iterator106.f();
                }
                vErrors = emErrs24;
                errors = emErrs24.length;
              }
            }
            if (data51.name !== undefined) {
              if (typeof data51.name !== "string") {
                var err151 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/name",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/name/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err151];
                } else {
                  vErrors.push(err151);
                }
                errors++;
              }
            }
            if (data51.source !== undefined) {
              if (typeof data51.source !== "string") {
                var err152 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/source",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/source/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err152];
                } else {
                  vErrors.push(err152);
                }
                errors++;
              }
            }
            if (data51.key !== undefined) {
              if (typeof data51.key !== "string") {
                var err153 = {
                  keyword: "type",
                  dataPath: dataPath + "/" + i5 + "/binding/key",
                  schemaPath: "#/allOf/1/items/properties/binding/properties/key/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err153];
                } else {
                  vErrors.push(err153);
                }
                errors++;
              }
            }
          } else {
            var err154 = {
              keyword: "type",
              dataPath: dataPath + "/" + i5 + "/binding",
              schemaPath: "#/allOf/1/items/properties/binding/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err154];
            } else {
              vErrors.push(err154);
            }
            errors++;
          }
        }
        if (data33.optional !== undefined) {
          if (typeof data33.optional !== "boolean") {
            var err155 = {
              keyword: "type",
              dataPath: dataPath + "/" + i5 + "/optional",
              schemaPath: "#/allOf/1/items/properties/optional/type",
              params: {
                type: "boolean"
              },
              message: "should be boolean"
            };
            if (vErrors === null) {
              vErrors = [err155];
            } else {
              vErrors.push(err155);
            }
            errors++;
          }
        }
        if (data33.feel !== undefined) {
          var data60 = data33.feel;
          if (typeof data60 !== "string") {
            var err156 = {
              keyword: "type",
              dataPath: dataPath + "/" + i5 + "/feel",
              schemaPath: "#/allOf/1/items/properties/feel/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err156];
            } else {
              vErrors.push(err156);
            }
            errors++;
          }
          if (!(data60 === null || data60 === "optional" || data60 === "required")) {
            var err157 = {
              keyword: "enum",
              dataPath: dataPath + "/" + i5 + "/feel",
              schemaPath: "#/allOf/1/items/properties/feel/enum",
              params: {
                allowedValues: schema18.allOf[1].items.properties.feel["enum"]
              },
              message: "should be equal to one of the allowed values"
            };
            if (vErrors === null) {
              vErrors = [err157];
            } else {
              vErrors.push(err157);
            }
            errors++;
          }
        }
        if (data33.language !== undefined) {
          if (typeof data33.language !== "string") {
            var err158 = {
              keyword: "type",
              dataPath: dataPath + "/" + i5 + "/language",
              schemaPath: "#/allOf/1/items/properties/language/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err158];
            } else {
              vErrors.push(err158);
            }
            errors++;
          }
        }
        if (data33.generatedValue !== undefined) {
          var data62 = data33.generatedValue;
          if (data62 && _typeof(data62) == "object" && !Array.isArray(data62)) {
            if (data62.type === undefined) {
              var err159 = {
                keyword: "required",
                dataPath: dataPath + "/" + i5 + "/generatedValue",
                schemaPath: "#/allOf/1/items/properties/generatedValue/required",
                params: {
                  missingProperty: "type"
                },
                message: "should have required property '" + "type" + "'"
              };
              if (vErrors === null) {
                vErrors = [err159];
              } else {
                vErrors.push(err159);
              }
              errors++;
            }
            if (data62.type !== undefined) {
              if (!func0(data62.type, "uuid")) {
                var err160 = {
                  keyword: "const",
                  dataPath: dataPath + "/" + i5 + "/generatedValue/type",
                  schemaPath: "#/allOf/1/items/properties/generatedValue/properties/type/const",
                  params: {
                    allowedValue: "uuid"
                  },
                  message: "should be equal to constant"
                };
                if (vErrors === null) {
                  vErrors = [err160];
                } else {
                  vErrors.push(err160);
                }
                errors++;
              }
            }
          } else {
            var err161 = {
              keyword: "type",
              dataPath: dataPath + "/" + i5 + "/generatedValue",
              schemaPath: "#/allOf/1/items/properties/generatedValue/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err161];
            } else {
              vErrors.push(err161);
            }
            errors++;
          }
        }
      } else {
        var err162 = {
          keyword: "type",
          dataPath: dataPath + "/" + i5,
          schemaPath: "#/allOf/1/items/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err162];
        } else {
          vErrors.push(err162);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors3 = {
          "required": {
            "binding": []
          }
        };
        var templates3 = {
          required: {
            binding: function binding() {
              return "missing binding for property \"" + JSON.stringify(i5) + "\"";
            }
          }
        };
        var emPropParams2;
        var emParamsErrors2;
        var _iterator107 = _createForOfIteratorHelper(vErrors),
          _step107;
        try {
          for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
            var err163 = _step107.value;
            if (err163.keyword !== "errorMessage" && !err163.emUsed && err163.dataPath === dataPath + "/" + i5 && err163.keyword in emErrors3 && err163.schemaPath.indexOf("#/allOf/1/items") === 0 && /^\/[^\/]*$/.test(err163.schemaPath.slice(15))) {
              emPropParams2 = obj0[err163.keyword];
              emParamsErrors2 = emErrors3[err163.keyword][err163.params[emPropParams2]];
              if (emParamsErrors2) {
                emParamsErrors2.push(err163);
                err163.emUsed = true;
              }
            }
          }
        } catch (err) {
          _iterator107.e(err);
        } finally {
          _iterator107.f();
        }
        for (var key3 in emErrors3) {
          for (var keyProp2 in emErrors3[key3]) {
            emParamsErrors2 = emErrors3[key3][keyProp2];
            if (emParamsErrors2.length) {
              var tmpl2 = templates3[key3] && templates3[key3][keyProp2];
              var err164 = {
                keyword: "errorMessage",
                dataPath: dataPath + "/" + i5,
                schemaPath: "#/allOf/1/items/errorMessage",
                params: {
                  errors: emParamsErrors2
                },
                message: tmpl2 ? tmpl2() : schema18.allOf[1].items.errorMessage[key3][keyProp2]
              };
              if (vErrors === null) {
                vErrors = [err164];
              } else {
                vErrors.push(err164);
              }
              errors++;
            }
          }
        }
        var emErrs25 = [];
        var _iterator108 = _createForOfIteratorHelper(vErrors),
          _step108;
        try {
          for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
            var err165 = _step108.value;
            if (!err165.emUsed) {
              emErrs25.push(err165);
            }
          }
        } catch (err) {
          _iterator108.e(err);
        } finally {
          _iterator108.f();
        }
        vErrors = emErrs25;
        errors = emErrs25.length;
      }
    };
    for (var i5 = 0; i5 < len5; i5++) {
      var _valid5, _valid5, _valid6, _valid6, _valid7, _valid7, _valid8, _valid8, valid55, _valid9, _valid9, valid59, _valid10, _valid10, _valid11, valid62, _valid11, _valid12, valid65, _valid12, _valid13, _valid13, _valid14, _valid14, _valid15, _valid15;
      _loop5(i5);
    }
  } else {
    var err166 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/allOf/1/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err166];
    } else {
      vErrors.push(err166);
    }
    errors++;
  }
  validate16.errors = vErrors;
  return errors === 0;
}
function validate15(data) {
  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref6$dataPath = _ref6.dataPath,
    dataPath = _ref6$dataPath === void 0 ? "" : _ref6$dataPath,
    parentData = _ref6.parentData,
    parentDataProperty = _ref6.parentDataProperty,
    _ref6$rootData = _ref6.rootData,
    rootData = _ref6$rootData === void 0 ? data : _ref6$rootData;
  var vErrors = null;
  var errors = 0;
  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    if (data.name === undefined) {
      var err0 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "name"
        },
        message: "should have required property '" + "name" + "'"
      };
      if (vErrors === null) {
        vErrors = [err0];
      } else {
        vErrors.push(err0);
      }
      errors++;
    }
    if (data.id === undefined) {
      var err1 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "id"
        },
        message: "should have required property '" + "id" + "'"
      };
      if (vErrors === null) {
        vErrors = [err1];
      } else {
        vErrors.push(err1);
      }
      errors++;
    }
    if (data.appliesTo === undefined) {
      var err2 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "appliesTo"
        },
        message: "should have required property '" + "appliesTo" + "'"
      };
      if (vErrors === null) {
        vErrors = [err2];
      } else {
        vErrors.push(err2);
      }
      errors++;
    }
    if (data.properties === undefined) {
      var err3 = {
        keyword: "required",
        dataPath: dataPath,
        schemaPath: "#/allOf/0/required",
        params: {
          missingProperty: "properties"
        },
        message: "should have required property '" + "properties" + "'"
      };
      if (vErrors === null) {
        vErrors = [err3];
      } else {
        vErrors.push(err3);
      }
      errors++;
    }
    if (data.name !== undefined) {
      if (typeof data.name !== "string") {
        var err4 = {
          keyword: "type",
          dataPath: dataPath + "/name",
          schemaPath: "#/allOf/0/properties/name/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err4];
        } else {
          vErrors.push(err4);
        }
        errors++;
      }
    }
    if (data.id !== undefined) {
      if (typeof data.id !== "string") {
        var err5 = {
          keyword: "type",
          dataPath: dataPath + "/id",
          schemaPath: "#/allOf/0/properties/id/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err5];
        } else {
          vErrors.push(err5);
        }
        errors++;
      }
    }
    if (data.description !== undefined) {
      if (typeof data.description !== "string") {
        var err6 = {
          keyword: "type",
          dataPath: dataPath + "/description",
          schemaPath: "#/allOf/0/properties/description/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }
        errors++;
      }
    }
    if (data.version !== undefined) {
      var data3 = data.version;
      if (!(typeof data3 == "number" && !(data3 % 1) && !isNaN(data3))) {
        var err7 = {
          keyword: "type",
          dataPath: dataPath + "/version",
          schemaPath: "#/allOf/0/properties/version/type",
          params: {
            type: "integer"
          },
          message: "should be integer"
        };
        if (vErrors === null) {
          vErrors = [err7];
        } else {
          vErrors.push(err7);
        }
        errors++;
      }
    }
    if (data.isDefault !== undefined) {
      if (typeof data.isDefault !== "boolean") {
        var err8 = {
          keyword: "type",
          dataPath: dataPath + "/isDefault",
          schemaPath: "#/allOf/0/properties/isDefault/type",
          params: {
            type: "boolean"
          },
          message: "should be boolean"
        };
        if (vErrors === null) {
          vErrors = [err8];
        } else {
          vErrors.push(err8);
        }
        errors++;
      }
    }
    if (data.appliesTo !== undefined) {
      var data5 = data.appliesTo;
      if (Array.isArray(data5)) {
        var len0 = data5.length;
        for (var i0 = 0; i0 < len0; i0++) {
          var data6 = data5[i0];
          if (typeof data6 === "string") {
            if (!pattern0.test(data6)) {
              var err9 = {
                keyword: "pattern",
                dataPath: dataPath + "/appliesTo/" + i0,
                schemaPath: "#/allOf/0/properties/appliesTo/items/pattern",
                params: {
                  pattern: "^[\\w\\d]+:[\\w\\d]+$"
                },
                message: "should match pattern \"" + "^[\\w\\d]+:[\\w\\d]+$" + "\""
              };
              if (vErrors === null) {
                vErrors = [err9];
              } else {
                vErrors.push(err9);
              }
              errors++;
            }
          } else {
            var err10 = {
              keyword: "type",
              dataPath: dataPath + "/appliesTo/" + i0,
              schemaPath: "#/allOf/0/properties/appliesTo/items/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err10];
            } else {
              vErrors.push(err10);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors0 = {
              "pattern": []
            };
            var templates0 = {};
            var _iterator109 = _createForOfIteratorHelper(vErrors),
              _step109;
            try {
              for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
                var err11 = _step109.value;
                if (err11.keyword !== "errorMessage" && !err11.emUsed && err11.dataPath === dataPath + "/appliesTo/" + i0 && err11.keyword in emErrors0 && err11.schemaPath.indexOf("#/allOf/0/properties/appliesTo/items") === 0 && /^\/[^\/]*$/.test(err11.schemaPath.slice(36))) {
                  emErrors0[err11.keyword].push(err11);
                  err11.emUsed = true;
                }
              }
            } catch (err) {
              _iterator109.e(err);
            } finally {
              _iterator109.f();
            }
            for (var key0 in emErrors0) {
              if (emErrors0[key0].length) {
                var err12 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/appliesTo/" + i0,
                  schemaPath: "#/allOf/0/properties/appliesTo/items/errorMessage",
                  params: {
                    errors: emErrors0[key0]
                  },
                  message: key0 in templates0 ? templates0[key0]() : schema17.allOf[0].properties.appliesTo.items.errorMessage[key0]
                };
                if (vErrors === null) {
                  vErrors = [err12];
                } else {
                  vErrors.push(err12);
                }
                errors++;
              }
            }
            var emErrs0 = [];
            var _iterator110 = _createForOfIteratorHelper(vErrors),
              _step110;
            try {
              for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
                var err13 = _step110.value;
                if (!err13.emUsed) {
                  emErrs0.push(err13);
                }
              }
            } catch (err) {
              _iterator110.e(err);
            } finally {
              _iterator110.f();
            }
            vErrors = emErrs0;
            errors = emErrs0.length;
          }
        }
      } else {
        var err14 = {
          keyword: "type",
          dataPath: dataPath + "/appliesTo",
          schemaPath: "#/allOf/0/properties/appliesTo/type",
          params: {
            type: "array"
          },
          message: "should be array"
        };
        if (vErrors === null) {
          vErrors = [err14];
        } else {
          vErrors.push(err14);
        }
        errors++;
      }
    }
    if (data.elementType !== undefined) {
      var data7 = data.elementType;
      if (data7 && _typeof(data7) == "object" && !Array.isArray(data7)) {
        if (data7.value === undefined) {
          var err15 = {
            keyword: "required",
            dataPath: dataPath + "/elementType",
            schemaPath: "#/allOf/0/properties/elementType/required",
            params: {
              missingProperty: "value"
            },
            message: "should have required property '" + "value" + "'"
          };
          if (vErrors === null) {
            vErrors = [err15];
          } else {
            vErrors.push(err15);
          }
          errors++;
        }
        if (data7.value !== undefined) {
          var data8 = data7.value;
          if (typeof data8 === "string") {
            if (!pattern0.test(data8)) {
              var err16 = {
                keyword: "pattern",
                dataPath: dataPath + "/elementType/value",
                schemaPath: "#/allOf/0/properties/elementType/properties/value/pattern",
                params: {
                  pattern: "^[\\w\\d]+:[\\w\\d]+$"
                },
                message: "should match pattern \"" + "^[\\w\\d]+:[\\w\\d]+$" + "\""
              };
              if (vErrors === null) {
                vErrors = [err16];
              } else {
                vErrors.push(err16);
              }
              errors++;
            }
          } else {
            var err17 = {
              keyword: "type",
              dataPath: dataPath + "/elementType/value",
              schemaPath: "#/allOf/0/properties/elementType/properties/value/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err17];
            } else {
              vErrors.push(err17);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors1 = {
              "pattern": []
            };
            var templates1 = {};
            var _iterator111 = _createForOfIteratorHelper(vErrors),
              _step111;
            try {
              for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
                var err18 = _step111.value;
                if (err18.keyword !== "errorMessage" && !err18.emUsed && err18.dataPath === dataPath + "/elementType/value" && err18.keyword in emErrors1 && err18.schemaPath.indexOf("#/allOf/0/properties/elementType/properties/value") === 0 && /^\/[^\/]*$/.test(err18.schemaPath.slice(49))) {
                  emErrors1[err18.keyword].push(err18);
                  err18.emUsed = true;
                }
              }
            } catch (err) {
              _iterator111.e(err);
            } finally {
              _iterator111.f();
            }
            for (var key1 in emErrors1) {
              if (emErrors1[key1].length) {
                var err19 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/elementType/value",
                  schemaPath: "#/allOf/0/properties/elementType/properties/value/errorMessage",
                  params: {
                    errors: emErrors1[key1]
                  },
                  message: key1 in templates1 ? templates1[key1]() : schema17.allOf[0].properties.elementType.properties.value.errorMessage[key1]
                };
                if (vErrors === null) {
                  vErrors = [err19];
                } else {
                  vErrors.push(err19);
                }
                errors++;
              }
            }
            var emErrs1 = [];
            var _iterator112 = _createForOfIteratorHelper(vErrors),
              _step112;
            try {
              for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
                var err20 = _step112.value;
                if (!err20.emUsed) {
                  emErrs1.push(err20);
                }
              }
            } catch (err) {
              _iterator112.e(err);
            } finally {
              _iterator112.f();
            }
            vErrors = emErrs1;
            errors = emErrs1.length;
          }
        }
      } else {
        var err21 = {
          keyword: "type",
          dataPath: dataPath + "/elementType",
          schemaPath: "#/allOf/0/properties/elementType/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err21];
        } else {
          vErrors.push(err21);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors2 = {
          "required": {
            "value": []
          }
        };
        var templates2 = {
          required: {}
        };
        var emPropParams0;
        var emParamsErrors0;
        var _iterator113 = _createForOfIteratorHelper(vErrors),
          _step113;
        try {
          for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
            var err22 = _step113.value;
            if (err22.keyword !== "errorMessage" && !err22.emUsed && err22.dataPath === dataPath + "/elementType" && err22.keyword in emErrors2 && err22.schemaPath.indexOf("#/allOf/0/properties/elementType") === 0 && /^\/[^\/]*$/.test(err22.schemaPath.slice(32))) {
              emPropParams0 = obj0[err22.keyword];
              emParamsErrors0 = emErrors2[err22.keyword][err22.params[emPropParams0]];
              if (emParamsErrors0) {
                emParamsErrors0.push(err22);
                err22.emUsed = true;
              }
            }
          }
        } catch (err) {
          _iterator113.e(err);
        } finally {
          _iterator113.f();
        }
        for (var key2 in emErrors2) {
          for (var keyProp0 in emErrors2[key2]) {
            emParamsErrors0 = emErrors2[key2][keyProp0];
            if (emParamsErrors0.length) {
              var tmpl0 = templates2[key2] && templates2[key2][keyProp0];
              var err23 = {
                keyword: "errorMessage",
                dataPath: dataPath + "/elementType",
                schemaPath: "#/allOf/0/properties/elementType/errorMessage",
                params: {
                  errors: emParamsErrors0
                },
                message: tmpl0 ? tmpl0() : schema17.allOf[0].properties.elementType.errorMessage[key2][keyProp0]
              };
              if (vErrors === null) {
                vErrors = [err23];
              } else {
                vErrors.push(err23);
              }
              errors++;
            }
          }
        }
        var emErrs2 = [];
        var _iterator114 = _createForOfIteratorHelper(vErrors),
          _step114;
        try {
          for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
            var err24 = _step114.value;
            if (!err24.emUsed) {
              emErrs2.push(err24);
            }
          }
        } catch (err) {
          _iterator114.e(err);
        } finally {
          _iterator114.f();
        }
        vErrors = emErrs2;
        errors = emErrs2.length;
      }
    }
    if (data.metadata !== undefined) {
      var data9 = data.metadata;
      if (!(data9 && _typeof(data9) == "object" && !Array.isArray(data9))) {
        var err25 = {
          keyword: "type",
          dataPath: dataPath + "/metadata",
          schemaPath: "#/allOf/0/properties/metadata/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err25];
        } else {
          vErrors.push(err25);
        }
        errors++;
      }
    }
    if (data.entriesVisible !== undefined) {
      if (typeof data.entriesVisible !== "boolean") {
        var err26 = {
          keyword: "type",
          dataPath: dataPath + "/entriesVisible",
          schemaPath: "#/allOf/0/properties/entriesVisible/type",
          params: {
            type: "boolean"
          },
          message: "should be boolean"
        };
        if (vErrors === null) {
          vErrors = [err26];
        } else {
          vErrors.push(err26);
        }
        errors++;
      }
    }
    if (data.groups !== undefined) {
      var data11 = data.groups;
      if (Array.isArray(data11)) {
        var len1 = data11.length;
        var _loop6 = function _loop6(i1) {
          var data12 = data11[i1];
          if (data12 && _typeof(data12) == "object" && !Array.isArray(data12)) {
            if (data12.id === undefined) {
              var err27 = {
                keyword: "required",
                dataPath: dataPath + "/groups/" + i1,
                schemaPath: "#/allOf/0/properties/groups/items/required",
                params: {
                  missingProperty: "id"
                },
                message: "should have required property '" + "id" + "'"
              };
              if (vErrors === null) {
                vErrors = [err27];
              } else {
                vErrors.push(err27);
              }
              errors++;
            }
            if (data12.label === undefined) {
              var err28 = {
                keyword: "required",
                dataPath: dataPath + "/groups/" + i1,
                schemaPath: "#/allOf/0/properties/groups/items/required",
                params: {
                  missingProperty: "label"
                },
                message: "should have required property '" + "label" + "'"
              };
              if (vErrors === null) {
                vErrors = [err28];
              } else {
                vErrors.push(err28);
              }
              errors++;
            }
            if (data12.id !== undefined) {
              if (typeof data12.id !== "string") {
                var err29 = {
                  keyword: "type",
                  dataPath: dataPath + "/groups/" + i1 + "/id",
                  schemaPath: "#/allOf/0/properties/groups/items/properties/id/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err29];
                } else {
                  vErrors.push(err29);
                }
                errors++;
              }
            }
            if (data12.label !== undefined) {
              if (typeof data12.label !== "string") {
                var err30 = {
                  keyword: "type",
                  dataPath: dataPath + "/groups/" + i1 + "/label",
                  schemaPath: "#/allOf/0/properties/groups/items/properties/label/type",
                  params: {
                    type: "string"
                  },
                  message: "should be string"
                };
                if (vErrors === null) {
                  vErrors = [err30];
                } else {
                  vErrors.push(err30);
                }
                errors++;
              }
            }
          } else {
            var err31 = {
              keyword: "type",
              dataPath: dataPath + "/groups/" + i1,
              schemaPath: "#/allOf/0/properties/groups/items/type",
              params: {
                type: "object"
              },
              message: "should be object"
            };
            if (vErrors === null) {
              vErrors = [err31];
            } else {
              vErrors.push(err31);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors3 = {
              "required": {
                "id": [],
                "label": []
              }
            };
            var templates3 = {
              required: {
                id: function id() {
                  return "missing id for group \"" + JSON.stringify(i1) + "\"";
                },
                label: function label() {
                  return "missing label for group \"" + JSON.stringify(i1) + "\"";
                }
              }
            };
            var emPropParams1;
            var emParamsErrors1;
            var _iterator115 = _createForOfIteratorHelper(vErrors),
              _step115;
            try {
              for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
                var err32 = _step115.value;
                if (err32.keyword !== "errorMessage" && !err32.emUsed && err32.dataPath === dataPath + "/groups/" + i1 && err32.keyword in emErrors3 && err32.schemaPath.indexOf("#/allOf/0/properties/groups/items") === 0 && /^\/[^\/]*$/.test(err32.schemaPath.slice(33))) {
                  emPropParams1 = obj0[err32.keyword];
                  emParamsErrors1 = emErrors3[err32.keyword][err32.params[emPropParams1]];
                  if (emParamsErrors1) {
                    emParamsErrors1.push(err32);
                    err32.emUsed = true;
                  }
                }
              }
            } catch (err) {
              _iterator115.e(err);
            } finally {
              _iterator115.f();
            }
            for (var key3 in emErrors3) {
              for (var keyProp1 in emErrors3[key3]) {
                emParamsErrors1 = emErrors3[key3][keyProp1];
                if (emParamsErrors1.length) {
                  var tmpl1 = templates3[key3] && templates3[key3][keyProp1];
                  var err33 = {
                    keyword: "errorMessage",
                    dataPath: dataPath + "/groups/" + i1,
                    schemaPath: "#/allOf/0/properties/groups/items/errorMessage",
                    params: {
                      errors: emParamsErrors1
                    },
                    message: tmpl1 ? tmpl1() : schema17.allOf[0].properties.groups.items.errorMessage[key3][keyProp1]
                  };
                  if (vErrors === null) {
                    vErrors = [err33];
                  } else {
                    vErrors.push(err33);
                  }
                  errors++;
                }
              }
            }
            var emErrs3 = [];
            var _iterator116 = _createForOfIteratorHelper(vErrors),
              _step116;
            try {
              for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
                var err34 = _step116.value;
                if (!err34.emUsed) {
                  emErrs3.push(err34);
                }
              }
            } catch (err) {
              _iterator116.e(err);
            } finally {
              _iterator116.f();
            }
            vErrors = emErrs3;
            errors = emErrs3.length;
          }
        };
        for (var i1 = 0; i1 < len1; i1++) {
          _loop6(i1);
        }
      } else {
        var err35 = {
          keyword: "type",
          dataPath: dataPath + "/groups",
          schemaPath: "#/allOf/0/properties/groups/type",
          params: {
            type: "array"
          },
          message: "should be array"
        };
        if (vErrors === null) {
          vErrors = [err35];
        } else {
          vErrors.push(err35);
        }
        errors++;
      }
    }
    if (data.documentationRef !== undefined) {
      var data15 = data.documentationRef;
      if (typeof data15 === "string") {
        if (!pattern2.test(data15)) {
          var err36 = {
            keyword: "pattern",
            dataPath: dataPath + "/documentationRef",
            schemaPath: "#/allOf/0/properties/documentationRef/pattern",
            params: {
              pattern: "^(https|http)://.*"
            },
            message: "should match pattern \"" + "^(https|http)://.*" + "\""
          };
          if (vErrors === null) {
            vErrors = [err36];
          } else {
            vErrors.push(err36);
          }
          errors++;
        }
      } else {
        var err37 = {
          keyword: "type",
          dataPath: dataPath + "/documentationRef",
          schemaPath: "#/allOf/0/properties/documentationRef/type",
          params: {
            type: "string"
          },
          message: "should be string"
        };
        if (vErrors === null) {
          vErrors = [err37];
        } else {
          vErrors.push(err37);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors4 = {
          "pattern": []
        };
        var templates4 = {};
        var _iterator117 = _createForOfIteratorHelper(vErrors),
          _step117;
        try {
          for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {
            var err38 = _step117.value;
            if (err38.keyword !== "errorMessage" && !err38.emUsed && err38.dataPath === dataPath + "/documentationRef" && err38.keyword in emErrors4 && err38.schemaPath.indexOf("#/allOf/0/properties/documentationRef") === 0 && /^\/[^\/]*$/.test(err38.schemaPath.slice(37))) {
              emErrors4[err38.keyword].push(err38);
              err38.emUsed = true;
            }
          }
        } catch (err) {
          _iterator117.e(err);
        } finally {
          _iterator117.f();
        }
        for (var key4 in emErrors4) {
          if (emErrors4[key4].length) {
            var err39 = {
              keyword: "errorMessage",
              dataPath: dataPath + "/documentationRef",
              schemaPath: "#/allOf/0/properties/documentationRef/errorMessage",
              params: {
                errors: emErrors4[key4]
              },
              message: key4 in templates4 ? templates4[key4]() : schema17.allOf[0].properties.documentationRef.errorMessage[key4]
            };
            if (vErrors === null) {
              vErrors = [err39];
            } else {
              vErrors.push(err39);
            }
            errors++;
          }
        }
        var emErrs4 = [];
        var _iterator118 = _createForOfIteratorHelper(vErrors),
          _step118;
        try {
          for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {
            var err40 = _step118.value;
            if (!err40.emUsed) {
              emErrs4.push(err40);
            }
          }
        } catch (err) {
          _iterator118.e(err);
        } finally {
          _iterator118.f();
        }
        vErrors = emErrs4;
        errors = emErrs4.length;
      }
    }
  }
  if (errors > 0) {
    var emErrors5 = {
      "required": {
        "name": [],
        "id": [],
        "appliesTo": [],
        "properties": []
      }
    };
    var templates5 = {
      required: {}
    };
    var emPropParams2;
    var emParamsErrors2;
    var _iterator119 = _createForOfIteratorHelper(vErrors),
      _step119;
    try {
      for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {
        var err41 = _step119.value;
        if (err41.keyword !== "errorMessage" && !err41.emUsed && err41.dataPath === dataPath && err41.keyword in emErrors5 && err41.schemaPath.indexOf("#/allOf/0") === 0 && /^\/[^\/]*$/.test(err41.schemaPath.slice(9))) {
          emPropParams2 = obj0[err41.keyword];
          emParamsErrors2 = emErrors5[err41.keyword][err41.params[emPropParams2]];
          if (emParamsErrors2) {
            emParamsErrors2.push(err41);
            err41.emUsed = true;
          }
        }
      }
    } catch (err) {
      _iterator119.e(err);
    } finally {
      _iterator119.f();
    }
    for (var key5 in emErrors5) {
      for (var keyProp2 in emErrors5[key5]) {
        emParamsErrors2 = emErrors5[key5][keyProp2];
        if (emParamsErrors2.length) {
          var tmpl2 = templates5[key5] && templates5[key5][keyProp2];
          var err42 = {
            keyword: "errorMessage",
            dataPath: dataPath,
            schemaPath: "#/allOf/0/errorMessage",
            params: {
              errors: emParamsErrors2
            },
            message: tmpl2 ? tmpl2() : schema17.allOf[0].errorMessage[key5][keyProp2]
          };
          if (vErrors === null) {
            vErrors = [err42];
          } else {
            vErrors.push(err42);
          }
          errors++;
        }
      }
    }
    var emErrs5 = [];
    var _iterator120 = _createForOfIteratorHelper(vErrors),
      _step120;
    try {
      for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {
        var err43 = _step120.value;
        if (!err43.emUsed) {
          emErrs5.push(err43);
        }
      }
    } catch (err) {
      _iterator120.e(err);
    } finally {
      _iterator120.f();
    }
    vErrors = emErrs5;
    errors = emErrs5.length;
  }
  var _errs36 = errors;
  var valid12 = true;
  var _errs37 = errors;
  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    if (data.properties !== undefined) {
      var data16 = data.properties;
      if (Array.isArray(data16)) {
        var _errs39 = errors;
        var len2 = data16.length;
        for (var i2 = 0; i2 < len2; i2++) {
          var data17 = data16[i2];
          var _errs40 = errors;
          if (data17 && _typeof(data17) == "object" && !Array.isArray(data17)) {
            if (data17.binding !== undefined) {
              var data18 = data17.binding;
              if (data18 && _typeof(data18) == "object" && !Array.isArray(data18)) {
                if (data18.type === undefined && "type") {
                  var err44 = {};
                  if (vErrors === null) {
                    vErrors = [err44];
                  } else {
                    vErrors.push(err44);
                  }
                  errors++;
                } else {
                  if (data18.type !== undefined) {
                    var data19 = data18.type;
                    if (!(data19 === "bpmn:Message#property" || data19 === "bpmn:Message#zeebe:subscription#property")) {
                      var err45 = {};
                      if (vErrors === null) {
                        vErrors = [err45];
                      } else {
                        vErrors.push(err45);
                      }
                      errors++;
                    }
                  }
                }
              }
            }
          }
          var valid14 = _errs40 === errors;
          if (valid14) {
            break;
          }
        }
        if (!valid14) {
          var err46 = {};
          if (vErrors === null) {
            vErrors = [err46];
          } else {
            vErrors.push(err46);
          }
          errors++;
        } else {
          errors = _errs39;
          if (vErrors !== null) {
            if (_errs39) {
              vErrors.length = _errs39;
            } else {
              vErrors = null;
            }
          }
        }
      }
    }
  }
  var _valid0 = _errs37 === errors;
  errors = _errs36;
  if (vErrors !== null) {
    if (_errs36) {
      vErrors.length = _errs36;
    } else {
      vErrors = null;
    }
  }
  if (_valid0) {
    var _errs43 = errors;
    if (data && _typeof(data) == "object" && !Array.isArray(data)) {
      if (data.elementType !== undefined) {
        var data20 = data.elementType;
        if (data20 && _typeof(data20) == "object" && !Array.isArray(data20)) {
          if (data20.eventDefinition === undefined) {
            var err47 = {
              keyword: "required",
              dataPath: dataPath + "/elementType",
              schemaPath: "#/allOf/1/allOf/0/then/properties/elementType/required",
              params: {
                missingProperty: "eventDefinition"
              },
              message: "should have required property '" + "eventDefinition" + "'"
            };
            if (vErrors === null) {
              vErrors = [err47];
            } else {
              vErrors.push(err47);
            }
            errors++;
          }
          if (data20.eventDefinition !== undefined) {
            if (!func0(data20.eventDefinition, "bpmn:MessageEventDefinition")) {
              var err48 = {
                keyword: "const",
                dataPath: dataPath + "/elementType/eventDefinition",
                schemaPath: "#/allOf/1/allOf/0/then/properties/elementType/properties/eventDefinition/const",
                params: {
                  allowedValue: "bpmn:MessageEventDefinition"
                },
                message: "should be equal to constant"
              };
              if (vErrors === null) {
                vErrors = [err48];
              } else {
                vErrors.push(err48);
              }
              errors++;
            }
          }
        }
      }
    }
    var _valid0 = _errs43 === errors;
    valid12 = _valid0;
  }
  if (!valid12) {
    var err49 = {
      keyword: "if",
      dataPath: dataPath,
      schemaPath: "#/allOf/1/allOf/0/if",
      params: {
        failingKeyword: "then"
      },
      message: "should match \"then\" schema"
    };
    if (vErrors === null) {
      vErrors = [err49];
    } else {
      vErrors.push(err49);
    }
    errors++;
  }
  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    if (data.properties !== undefined) {
      if (!validate16(data.properties, {
        dataPath: dataPath + "/properties",
        parentData: data,
        parentDataProperty: "properties",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate16.errors : vErrors.concat(validate16.errors);
        errors = vErrors.length;
      }
    }
    if (data.icon !== undefined) {
      var data23 = data.icon;
      if (data23 && _typeof(data23) == "object" && !Array.isArray(data23)) {
        if (data23.contents === undefined) {
          var err50 = {
            keyword: "required",
            dataPath: dataPath + "/icon",
            schemaPath: "#/properties/icon/required",
            params: {
              missingProperty: "contents"
            },
            message: "should have required property '" + "contents" + "'"
          };
          if (vErrors === null) {
            vErrors = [err50];
          } else {
            vErrors.push(err50);
          }
          errors++;
        }
        if (data23.contents !== undefined) {
          var data24 = data23.contents;
          if (typeof data24 === "string") {
            if (!pattern3.test(data24)) {
              var err51 = {
                keyword: "pattern",
                dataPath: dataPath + "/icon/contents",
                schemaPath: "#/properties/icon/properties/contents/pattern",
                params: {
                  pattern: "^(https?|data):.*"
                },
                message: "should match pattern \"" + "^(https?|data):.*" + "\""
              };
              if (vErrors === null) {
                vErrors = [err51];
              } else {
                vErrors.push(err51);
              }
              errors++;
            }
          } else {
            var err52 = {
              keyword: "type",
              dataPath: dataPath + "/icon/contents",
              schemaPath: "#/properties/icon/properties/contents/type",
              params: {
                type: "string"
              },
              message: "should be string"
            };
            if (vErrors === null) {
              vErrors = [err52];
            } else {
              vErrors.push(err52);
            }
            errors++;
          }
          if (errors > 0) {
            var emErrors6 = {
              "pattern": []
            };
            var templates6 = {};
            var _iterator121 = _createForOfIteratorHelper(vErrors),
              _step121;
            try {
              for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {
                var err53 = _step121.value;
                if (err53.keyword !== "errorMessage" && !err53.emUsed && err53.dataPath === dataPath + "/icon/contents" && err53.keyword in emErrors6 && err53.schemaPath.indexOf("#/properties/icon/properties/contents") === 0 && /^\/[^\/]*$/.test(err53.schemaPath.slice(37))) {
                  emErrors6[err53.keyword].push(err53);
                  err53.emUsed = true;
                }
              }
            } catch (err) {
              _iterator121.e(err);
            } finally {
              _iterator121.f();
            }
            for (var key6 in emErrors6) {
              if (emErrors6[key6].length) {
                var err54 = {
                  keyword: "errorMessage",
                  dataPath: dataPath + "/icon/contents",
                  schemaPath: "#/properties/icon/properties/contents/errorMessage",
                  params: {
                    errors: emErrors6[key6]
                  },
                  message: key6 in templates6 ? templates6[key6]() : schema17.properties.icon.properties.contents.errorMessage[key6]
                };
                if (vErrors === null) {
                  vErrors = [err54];
                } else {
                  vErrors.push(err54);
                }
                errors++;
              }
            }
            var emErrs6 = [];
            var _iterator122 = _createForOfIteratorHelper(vErrors),
              _step122;
            try {
              for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {
                var err55 = _step122.value;
                if (!err55.emUsed) {
                  emErrs6.push(err55);
                }
              }
            } catch (err) {
              _iterator122.e(err);
            } finally {
              _iterator122.f();
            }
            vErrors = emErrs6;
            errors = emErrs6.length;
          }
        }
      } else {
        var err56 = {
          keyword: "type",
          dataPath: dataPath + "/icon",
          schemaPath: "#/properties/icon/type",
          params: {
            type: "object"
          },
          message: "should be object"
        };
        if (vErrors === null) {
          vErrors = [err56];
        } else {
          vErrors.push(err56);
        }
        errors++;
      }
      if (errors > 0) {
        var emErrors7 = {
          "required": {
            "contents": []
          }
        };
        var templates7 = {
          required: {}
        };
        var emPropParams3;
        var emParamsErrors3;
        var _iterator123 = _createForOfIteratorHelper(vErrors),
          _step123;
        try {
          for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {
            var err57 = _step123.value;
            if (err57.keyword !== "errorMessage" && !err57.emUsed && err57.dataPath === dataPath + "/icon" && err57.keyword in emErrors7 && err57.schemaPath.indexOf("#/properties/icon") === 0 && /^\/[^\/]*$/.test(err57.schemaPath.slice(17))) {
              emPropParams3 = obj0[err57.keyword];
              emParamsErrors3 = emErrors7[err57.keyword][err57.params[emPropParams3]];
              if (emParamsErrors3) {
                emParamsErrors3.push(err57);
                err57.emUsed = true;
              }
            }
          }
        } catch (err) {
          _iterator123.e(err);
        } finally {
          _iterator123.f();
        }
        for (var key7 in emErrors7) {
          for (var keyProp3 in emErrors7[key7]) {
            emParamsErrors3 = emErrors7[key7][keyProp3];
            if (emParamsErrors3.length) {
              var tmpl3 = templates7[key7] && templates7[key7][keyProp3];
              var err58 = {
                keyword: "errorMessage",
                dataPath: dataPath + "/icon",
                schemaPath: "#/properties/icon/errorMessage",
                params: {
                  errors: emParamsErrors3
                },
                message: tmpl3 ? tmpl3() : schema17.properties.icon.errorMessage[key7][keyProp3]
              };
              if (vErrors === null) {
                vErrors = [err58];
              } else {
                vErrors.push(err58);
              }
              errors++;
            }
          }
        }
        var emErrs7 = [];
        var _iterator124 = _createForOfIteratorHelper(vErrors),
          _step124;
        try {
          for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {
            var err59 = _step124.value;
            if (!err59.emUsed) {
              emErrs7.push(err59);
            }
          }
        } catch (err) {
          _iterator124.e(err);
        } finally {
          _iterator124.f();
        }
        vErrors = emErrs7;
        errors = emErrs7.length;
      }
    }
    if (data.elementType !== undefined) {
      var data25 = data.elementType;
      if (data25 && _typeof(data25) == "object" && !Array.isArray(data25)) {
        if (data25.eventDefinition !== undefined) {
          if (!(data25.eventDefinition === "bpmn:MessageEventDefinition")) {
            var err60 = {
              keyword: "enum",
              dataPath: dataPath + "/elementType/eventDefinition",
              schemaPath: "#/properties/elementType/allOf/0/allOf/0/properties/eventDefinition/enum",
              params: {
                allowedValues: schema17.properties.elementType.allOf[0].allOf[0].properties.eventDefinition["enum"]
              },
              message: "should be equal to one of the allowed values"
            };
            if (vErrors === null) {
              vErrors = [err60];
            } else {
              vErrors.push(err60);
            }
            errors++;
          }
        }
      }
      var _errs56 = errors;
      var valid24 = true;
      var _errs57 = errors;
      if (data25 && _typeof(data25) == "object" && !Array.isArray(data25)) {
        if (data25.eventDefinition === undefined && "eventDefinition") {
          var err61 = {};
          if (vErrors === null) {
            vErrors = [err61];
          } else {
            vErrors.push(err61);
          }
          errors++;
        } else {
          if (data25.eventDefinition !== undefined) {
            if (!(data25.eventDefinition === "bpmn:MessageEventDefinition")) {
              var err62 = {};
              if (vErrors === null) {
                vErrors = [err62];
              } else {
                vErrors.push(err62);
              }
              errors++;
            }
          }
        }
      }
      var _valid1 = _errs57 === errors;
      errors = _errs56;
      if (vErrors !== null) {
        if (_errs56) {
          vErrors.length = _errs56;
        } else {
          vErrors = null;
        }
      }
      if (_valid1) {
        var _errs59 = errors;
        if (data25 && _typeof(data25) == "object" && !Array.isArray(data25)) {
          if (data25.value === undefined) {
            var err63 = {
              keyword: "required",
              dataPath: dataPath + "/elementType",
              schemaPath: "#/properties/elementType/allOf/0/allOf/1/then/required",
              params: {
                missingProperty: "value"
              },
              message: "should have required property '" + "value" + "'"
            };
            if (vErrors === null) {
              vErrors = [err63];
            } else {
              vErrors.push(err63);
            }
            errors++;
          }
          if (data25.value !== undefined) {
            var data28 = data25.value;
            if (!(data28 === "bpmn:StartEvent" || data28 === "bpmn:IntermediateCatchEvent" || data28 === "bpmn:IntermediateThrowEvent" || data28 === "bpmn:BoundaryEvent" || data28 === "bpmn:EndEvent")) {
              var err64 = {
                keyword: "enum",
                dataPath: dataPath + "/elementType/value",
                schemaPath: "#/properties/elementType/allOf/0/allOf/1/then/properties/value/enum",
                params: {
                  allowedValues: schema17.properties.elementType.allOf[0].allOf[1].then.properties.value["enum"]
                },
                message: "should be equal to one of the allowed values"
              };
              if (vErrors === null) {
                vErrors = [err64];
              } else {
                vErrors.push(err64);
              }
              errors++;
            }
          }
        }
        var _valid1 = _errs59 === errors;
        valid24 = _valid1;
      }
      if (!valid24) {
        var err65 = {
          keyword: "if",
          dataPath: dataPath + "/elementType",
          schemaPath: "#/properties/elementType/allOf/0/allOf/1/if",
          params: {
            failingKeyword: "then"
          },
          message: "should match \"then\" schema"
        };
        if (vErrors === null) {
          vErrors = [err65];
        } else {
          vErrors.push(err65);
        }
        errors++;
      }
    }
  } else {
    var err66 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/type",
      params: {
        type: "object"
      },
      message: "should be object"
    };
    if (vErrors === null) {
      vErrors = [err66];
    } else {
      vErrors.push(err66);
    }
    errors++;
  }
  validate15.errors = vErrors;
  return errors === 0;
}
function validate14(data) {
  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref7$dataPath = _ref7.dataPath,
    dataPath = _ref7$dataPath === void 0 ? "" : _ref7$dataPath,
    parentData = _ref7.parentData,
    parentDataProperty = _ref7.parentDataProperty,
    _ref7$rootData = _ref7.rootData,
    rootData = _ref7$rootData === void 0 ? data : _ref7$rootData;
  var vErrors = null;
  var errors = 0;
  var _errs0 = errors;
  var valid0 = false;
  var passing0 = null;
  var _errs1 = errors;
  if (!validate15(data, {
    dataPath: dataPath,
    parentData: parentData,
    parentDataProperty: parentDataProperty,
    rootData: rootData
  })) {
    vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
    errors = vErrors.length;
  }
  var _valid0 = _errs1 === errors;
  if (_valid0) {
    valid0 = true;
    passing0 = 0;
  }
  var _errs2 = errors;
  if (Array.isArray(data)) {
    var len0 = data.length;
    for (var i0 = 0; i0 < len0; i0++) {
      if (!validate15(data[i0], {
        dataPath: dataPath + "/" + i0,
        parentData: data,
        parentDataProperty: i0,
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
        errors = vErrors.length;
      }
    }
  } else {
    var err0 = {
      keyword: "type",
      dataPath: dataPath,
      schemaPath: "#/oneOf/1/type",
      params: {
        type: "array"
      },
      message: "should be array"
    };
    if (vErrors === null) {
      vErrors = [err0];
    } else {
      vErrors.push(err0);
    }
    errors++;
  }
  var _valid0 = _errs2 === errors;
  if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
  } else {
    if (_valid0) {
      valid0 = true;
      passing0 = 1;
    }
  }
  if (!valid0) {
    var err1 = {
      keyword: "oneOf",
      dataPath: dataPath,
      schemaPath: "#/oneOf",
      params: {
        passingSchemas: passing0
      },
      message: "should match exactly one schema in oneOf"
    };
    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }
    errors++;
  } else {
    errors = _errs0;
    if (vErrors !== null) {
      if (_errs0) {
        vErrors.length = _errs0;
      } else {
        vErrors = null;
      }
    }
  }
  validate14.errors = vErrors;
  return errors === 0;
}
function getZeebeSchemaPackage() {
  return name;
}
function getZeebeSchemaVersion() {
  return version;
}

/**
 * Validate a single object.
 *
 * @param {Object} object
 * @return {Object} single object validation result
 */
function validateZeebe(object) {
  return _validate(object, standaloneZeebeValidator.exports);
}

/**
 * Validate a list of objects
 *
 * @param  {Object[]} objects
 * @return {Object} list validation result
 */
function validateAllZeebe(objects) {
  return _validateAll(objects, validateZeebe);
}

},{"min-dash":49}],7:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProcessVariables = getProcessVariables;
exports.getVariablesForScope = getVariablesForScope;
var _minDash = require("min-dash");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Get a inputOutput from the business object
 *
 * @param {ModdleElement} element
 *
 * @return {ModdleElement} the inputOutput object
 */
function getInputOutput(element) {
  return (getElements(element, 'camunda:InputOutput') || [])[0];
}

/**
 * Return all input parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {ModdleElement} element
 *
 * @return {Array<ModdleElement>} a list of input parameter objects
 */
function getInputParameters(element) {
  return getParameters(element, 'inputParameters');
}

/**
 * Return all output parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {ModdleElement} element
 * @param  {boolean} insideConnector
 *
 * @return {Array<ModdleElement>} a list of output parameter objects
 */
function getOutputParameters(element) {
  return getParameters(element, 'outputParameters');
}

/**
 * Return all form fields existing in the business object, and
 * an empty array if none exist.
 *
 * @param {ModdleElement} element
 *
 * @return {Array<ModdleElement>} a list of form fields
 */
function getFormFields(element) {
  var formData = getFormData(element);
  return formData && formData.get('fields') || [];
}

/**
 * Return form data existing in the business object
 *
 * @param {ModdleElement} element
 *
 * @return {ModdleElement}
 */
function getFormData(element) {
  return getElements(element, 'camunda:FormData')[0];
}

/**
 * Return out mappings existing in the business object
 *
 * @param {ModdleElement} element
 *
 * @return {Array<ModdleElement>}
 */
function getOutMappings(element) {
  return getElements(element, 'camunda:Out');
}

// helpers //////////

function getElements(element, type, property) {
  var elements = getExtensionElements(element, type);
  return !property ? elements : (elements[0] || {})[property] || [];
}
function getParameters(element, property) {
  var inputOutput = getInputOutput(element);
  return inputOutput && inputOutput.get(property) || [];
}
function getExtensionElements(element, type) {
  var elements = [];
  var extensionElements = element.get('extensionElements');
  if (typeof extensionElements !== 'undefined') {
    var extensionValues = extensionElements.get('values');
    if (typeof extensionValues !== 'undefined') {
      elements = (0, _minDash.filter)(extensionValues, function (value) {
        return is$2(value, type);
      });
    }
  }
  return elements;
}
function is$2(element, type) {
  return element && typeof element.$instanceOf === 'function' && element.$instanceOf(type);
}

/**
 * Get all parent elements for a given element.
 *
 * @param {ModdleElement|string} element
 *
 * @returns {Array<ModdleElement>}
 */
function getParents(element) {
  var parents = [];
  var current = element;
  while (current.$parent) {
    parents.push(current.$parent);
    current = current.$parent;
  }
  return parents;
}

/**
 * Iterate over each element in a collection, calling the iterator function `fn`
 * with (element, index, recursionDepth).
 *
 * Recurse into all elements that are returned by `fn`.
 *
 * @param  {Object|Array<Object>} elements
 * @param  {Function} fn iterator function called with (element, index, recursionDepth)
 * @param  {number} [depth] maximum recursion depth
 */
function eachElement(elements, fn, depth) {
  depth = depth || 0;
  if (!(0, _minDash.isArray)(elements)) {
    elements = [elements];
  }
  (0, _minDash.forEach)(elements, function (s, i) {
    var filter = fn(s, i, depth);
    if ((0, _minDash.isArray)(filter) && filter.length) {
      eachElement(filter, fn, depth + 1);
    }
  });
}

/**
 * Adds an element to a collection and returns true if the
 * element was added.
 *
 * @param {Array<Object>} elements
 * @param {Object} e
 * @param {boolean} unique
 */
function add(elements, e, unique) {
  var canAdd = !unique || elements.indexOf(e) === -1;
  if (canAdd) {
    elements.push(e);
  }
  return canAdd;
}

/**
 * Collects self + flow elements up to a given depth from a list of elements.
 *
 * @param  {ModdleElement|Array<ModdleElement>} elements the elements to select the flowElements from
 * @param  {boolean} unique whether to return a unique result set (no duplicates)
 * @param  {number} maxDepth the depth to search through or -1 for infinite
 *
 * @return {Array<ModdleElement>} found elements
 */
function selfAndFlowElements(elements, unique, maxDepth) {
  var result = [],
    processedFlowElements = [];
  eachElement(elements, function (element, i, depth) {
    add(result, element, unique);
    var flowElements = element.flowElements;

    // max traversal depth not reached yet
    if (maxDepth === -1 || depth < maxDepth) {
      // flowElements exist && flowElements not yet processed
      if (flowElements && add(processedFlowElements, flowElements, unique)) {
        return flowElements;
      }
    }
  });
  return result;
}

/**
 * Return self + ALL flowElements for a number of elements
 *
 * @param  {Array<ModdleElement>} elements to query
 * @param  {boolean} allowDuplicates to allow duplicates in the result set
 *
 * @return {Array<ModdleElement>} the collected elements
 */
function selfAndAllFlowElements(elements, allowDuplicates) {
  return selfAndFlowElements(elements, !allowDuplicates, -1);
}

/**
 * Return full moddle element for given element id
 *
 * @param {string} elementId
 * @param {ModdleElement} rootElement
 *
 * @returns {ModdleElement}
 */
function getElement(elementId, rootElement) {
  var allElements = selfAndAllFlowElements(rootElement);
  return (0, _minDash.find)(allElements, function (element) {
    return element.id === elementId;
  });
}
function addVariableToList(variablesList, newVariable) {
  var foundIdx = (0, _minDash.findIndex)(variablesList, function (variable) {
    return variable.name === newVariable.name && variable.scope === newVariable.scope;
  });
  if (foundIdx >= 0) {
    variablesList[foundIdx].origin = combineArrays$1(variablesList[foundIdx].origin, newVariable.origin);
  } else {
    variablesList.push(newVariable);
  }
}

/**
 * Creates new process variable definition object
 * Identifies correct (highest) scope, in which variable is available
 *
 * @param {ModdleElement} flowElement
 * @param {String} name
 * @param {ModdleElement} defaultScope
 *
 * @returns {ProcessVariable}
 */
function createProcessVariable(flowElement, name, defaultScope) {
  var scope = getScope(flowElement, defaultScope, name);
  return {
    name: name,
    origin: [flowElement],
    scope: scope
  };
}

// helpers ////////////////////

/**
 * Set parent container if it defines it's own scope for the variable, so
 * when it defines an input mapping for it. Otherwise returns the default global scope
 */
function getScope(element, globalScope, variableName) {
  var parents = getParents(element);
  var scopedParent = (0, _minDash.find)(parents, function (parent) {
    return is$1(parent, 'bpmn:SubProcess') && hasInputParameter(parent, variableName);
  });
  return scopedParent ? scopedParent : globalScope;
}
function is$1(element, type) {
  return element && typeof element.$instanceOf === 'function' && element.$instanceOf(type);
}
function hasInputParameter(element, name) {
  return (0, _minDash.find)(getInputParameters(element), function (input) {
    return input.name === name;
  });
}
function combineArrays$1(a, b) {
  return a.concat(b);
}

/**
 * Retrieves process variables defined in output parameters, e.g.
 *
 * <camunda:inputOutput>
 *   <camunda:outputParameter name="variable1">200</camunda:outputParameter>
 *   <camunda:outputParameter name="variable2">${myLocalVar + 20}</camunda:outputParameter>
 * </camunda:inputOutput>
 *
 * => Adds two variables "variable1" & "variable2" to the list.
 *
 */
function extractOutputParameters(options) {
  var elements = options.elements,
    containerElement = options.containerElement,
    processVariables = options.processVariables;
  if (!(0, _minDash.isArray)(elements)) {
    elements = [elements];
  }
  (0, _minDash.forEach)(elements, function (element) {
    // variables are created by output parameters
    var outputParameters = getOutputParameters(element);

    // extract all variables with correct scope
    (0, _minDash.forEach)(outputParameters, function (parameter) {
      var newVariable = createProcessVariable(element, parameter.name, containerElement);
      addVariableToList(processVariables, newVariable);
    });
  });
  return processVariables;
}

/**
 * Retrieves process variables defined in result variables, e.g.
 *
 * <bpmn:sendTask
 *   id="SendTask_1"
 *   camunda:expression="${myBean.ready}"
 *   camunda:resultVariable="variable1"
 * />
 *
 * => Adds one variable "variable1"to the list.
 *
 */
function extractResultVariables(options) {
  var elements = options.elements,
    containerElement = options.containerElement,
    processVariables = options.processVariables;
  if (!(0, _minDash.isArray)(elements)) {
    elements = [elements];
  }
  (0, _minDash.forEach)(elements, function (element) {
    var resultVariable = getResultVariable(element);
    if (resultVariable) {
      var newVariable = createProcessVariable(element, resultVariable, containerElement);
      addVariableToList(processVariables, newVariable);
    }
  });
  return processVariables;
}

// helpers ///////////////////////

function getResultVariable(element) {
  return element.get('camunda:resultVariable');
}

/**
 * Retrieves process variables defined in form fields, e.g.
 *
 * <camunda:formData>
 *   <camunda:formField id="variable1" />
 *   <camunda:formField id="variable2" />
 * </camunda:formData>
 *
 * => Adds two variables "variable1" & "variable2" to the list.
 *
 */
function extractFormFields(options) {
  var elements = options.elements,
    containerElement = options.containerElement,
    processVariables = options.processVariables;
  if (!(0, _minDash.isArray)(elements)) {
    elements = [elements];
  }
  (0, _minDash.forEach)(elements, function (element) {
    var formFields = getFormFields(element);

    // extract all variables with correct scope
    (0, _minDash.forEach)(formFields, function (field) {
      var newVariable = createProcessVariable(element, field.id, containerElement);
      addVariableToList(processVariables, newVariable);
    });
  });
  return processVariables;
}

/**
 * Retrieves process variables defined in output mappings and
 * ignores local variables, e.g.
 *
 * <bpmn:extensionElements>
 *   <camunda:out sourceExpression="${myBean.ready}" target="variable1" />
 *   <camunda:out source="foo" target="variableLocal" local="true" />
 * </bpmn:extensionElements>
 *
 * => Adds one variable "variable1" to the list.
 *
 */
function extractOutMappings(options) {
  var elements = options.elements,
    containerElement = options.containerElement,
    processVariables = options.processVariables;
  if (!(0, _minDash.isArray)(elements)) {
    elements = [elements];
  }
  (0, _minDash.forEach)(elements, function (element) {
    var outMappings = getOutMappings(element);

    // extract all variables with correct scope
    (0, _minDash.forEach)(outMappings, function (mapping) {
      // do not use variables marked as <local>
      if (mapping.local) {
        return;
      }
      var newVariable = createProcessVariable(element, mapping.target, containerElement);
      addVariableToList(processVariables, newVariable);
    });
  });
  return processVariables;
}

/**
 *
 * @param {ModdleElement} element
 * @param {string} [type] - optional
 *
 * @return {Array<ModdleElement>|undefined} collection of event definitions or none
 */
function getEventDefinitions(element, type) {
  var eventDefinitions = element.eventDefinitions;
  if (!eventDefinitions || !type) {
    return eventDefinitions;
  }
  return (0, _minDash.filter)(eventDefinitions, function (definition) {
    return is(definition, type);
  });
}

/**
 * Returns error event definitions for a given element.
 *
 * @param {ModdleElement} element
 *
 * @return {Array<ModdleElement>} collection of error event definitions
 */
function getErrorEventDefinitions(element) {
  return getEventDefinitions(element, 'bpmn:ErrorEventDefinition');
}

/**
 * Returns escalation event definitions for a given element.
 *
 * @param {ModdleElement} element
 *
 * @return {Array<ModdleElement>} collection of escalation event definitions
 */
function getEscalationEventDefinitions(element) {
  return getEventDefinitions(element, 'bpmn:EscalationEventDefinition');
}

// helper ////////////////

function is(element, type) {
  return element && typeof element.$instanceOf === 'function' && element.$instanceOf(type);
}

/**
 * Retrieves process variables defined in event definitions, e.g.
 *
 * <bpmn:escalationEventDefinition
 *   id="EscalationEventDefinition_1"
 *   escalationRef="Escalation_1"
 *   camunda:escalationCodeVariable="variable1"
 * />
 *
 * => Adds one variable "variable1" to the list.
 *
 * <bpmn:errorEventDefinition
 *   id="ErrorEventDefinition_1"
 *   errorRef="Error_1"
 *   camunda:errorCodeVariable="variable2"
 *   camunda:errorMessageVariable="variable3"
 * />
 *
 * => Adds two variables "variable2" & "variable3" to the list.
 *
 */
function extractEventDefinitionVariables(options) {
  var elements = options.elements,
    containerElement = options.containerElement,
    processVariables = options.processVariables;
  var addVariable = function addVariable(element, name) {
    var newVariable = createProcessVariable(element, name, containerElement);
    addVariableToList(processVariables, newVariable);
  };
  if (!(0, _minDash.isArray)(elements)) {
    elements = [elements];
  }
  (0, _minDash.forEach)(elements, function (element) {
    // (1) error event code + message variable
    var errorEventDefinitions = getErrorEventDefinitions(element);
    (0, _minDash.forEach)(errorEventDefinitions, function (definition) {
      var errorCodeVariable = definition.get('errorCodeVariable'),
        errorMessageVariable = definition.get('errorMessageVariable');
      if (errorCodeVariable) {
        addVariable(element, errorCodeVariable);
      }
      if (errorMessageVariable) {
        addVariable(element, errorMessageVariable);
      }
    });

    // (2) escalation code variable
    var escalationEventDefinitions = getEscalationEventDefinitions(element);
    (0, _minDash.forEach)(escalationEventDefinitions, function (definition) {
      var escalationCodeVariable = definition.get('escalationCodeVariable');
      if (escalationCodeVariable) {
        addVariable(element, escalationCodeVariable);
      }
    });
  });
  return processVariables;
}
var extractors = [extractOutputParameters, extractResultVariables, extractFormFields, extractOutMappings, extractEventDefinitionVariables];

/**
 * @typedef {Object} ProcessVariable
 * @property {string} name
 * @property {Array<ModdleElement>} origin
 * @property {ModdleElement} scope
 */

/**
 * Extractors add ProcessVariables to the `options.processVariables` parameter.
 * @callback extractor
 * @param {Object} options
 * @param {Array<ModdleElement>} options.elements
 * @param {ModdleElement} options.containerElement
 * @param {Array<ProcessVariable>} options.processVariables
 */

// api /////////////////////////

/**
 * Retrieves all process variables for a given container element.
 * @param {ModdleElement} containerElement
 * @param {Array<extractor>} additionalExtractors
 *
 * @returns {Promise<Array<ProcessVariable>>}
 */
function getProcessVariables(containerElement) {
  var additionalExtractors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var allPromises = [];
  var processVariables = [];

  // (1) extract all flow elements inside the container
  var elements = selfAndAllFlowElements([containerElement], false);

  // (2) extract all variables from the extractors
  (0, _minDash.forEach)([].concat(extractors, _toConsumableArray(additionalExtractors)), function (extractor) {
    allPromises.push(extractor({
      elements: elements,
      containerElement: containerElement,
      processVariables: processVariables
    }));
  });
  return Promise.all(allPromises).then(function () {
    return processVariables;
  });
}

/**
 * Retrieves all variables which are available in the given scope
 *
 * * Exclude variables which are only available in other scopes
 * * Exclude variables which are produced by the given element
 * * Include variables which are available in parent scopes
 *
 * @param {string} scope
 * @param {ModdleElement} rootElement element from where to extract all variables
 * @param {Array<extractor>} additionalExtractors
 *
 * @returns {Promise<Array<ProcessVariable>>}
 */
function getVariablesForScope(_x, _x2) {
  return _getVariablesForScope.apply(this, arguments);
} // helpers ////////////////////
function _getVariablesForScope() {
  _getVariablesForScope = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scope, rootElement) {
    var additionalExtractors,
      allVariables,
      scopeElement,
      scopeVariables,
      parents,
      parentsScopeVariables,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          additionalExtractors = _args.length > 2 && _args[2] !== undefined ? _args[2] : [];
          _context.next = 3;
          return getProcessVariables(rootElement, additionalExtractors);
        case 3:
          allVariables = _context.sent;
          scopeElement = getElement(scope, rootElement); // (1) get variables for given scope
          scopeVariables = (0, _minDash.filter)(allVariables, function (variable) {
            return variable.scope.id === scopeElement.id;
          }); // (2) get variables for parent scopes
          parents = getParents(scopeElement);
          parentsScopeVariables = (0, _minDash.filter)(allVariables, function (variable) {
            return (0, _minDash.find)(parents, function (parent) {
              return parent.id === variable.scope.id;
            });
          });
          return _context.abrupt("return", combineArrays(scopeVariables, parentsScopeVariables));
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getVariablesForScope.apply(this, arguments);
}
function combineArrays(a, b) {
  return a.concat(b);
}

},{"min-dash":49}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var minDash = require('min-dash');

/**
 * Get a inputOutput from the business object
 *
 * @param {ModdleElement} element
 *
 * @return {ModdleElement} the inputOutput object
 */
function getInputOutput(element) {
  return (getElements(element, 'zeebe:IoMapping') || [])[0];
}

/**
 * Return all input parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {ModdleElement} element
 *
 * @return {Array<ModdleElement>} a list of input parameter objects
 */
function getInputParameters(element) {
  return getParameters(element, 'inputParameters');
}

/**
 * Return out mappings existing in the business object
 *
 * @param {ModdleElement} element
 *
 * @return {Array<ModdleElement>}
 */
function getOutMappings(element) {
  return (getInputOutput(element) || {}).outputParameters;
}

/**
 * Return out mappings existing in the business object
 *
 * @param {ModdleElement} element
 *
 * @return {Array<ModdleElement>}
 */
function getInMappings(element) {
  return (getInputOutput(element) || {}).inputParameters;
}

/**
 * Get the inputElement name from a loopCharacteristics
 *
 * @param {MoodleElement} loopCharacteristics
 * @returns {String} outputCollection
 */
function getInputElement(loopCharacteristics) {
  const extensionElement = getElements(loopCharacteristics, 'zeebe:LoopCharacteristics')[0];
  return extensionElement && extensionElement.inputElement;
}

/**
 * Get the outputCollection name from a loopCharacteristics
 *
 * @param {MoodleElement} loopCharacteristics
 * @returns {String} outputCollection
 */
function getOutputCollection(loopCharacteristics) {
  const extensionElement = getElements(loopCharacteristics, 'zeebe:LoopCharacteristics')[0];
  return extensionElement && extensionElement.outputCollection;

}

/**
 * Get a calledDecision from the business object
 *
 * @param {MoodleElement} element
 * @returns {MoodleElement} the calledDecision object
 */
function getCalledDecision(element) {
  return (getElements(element, 'zeebe:CalledDecision') || [])[0];
}


/**
 * Get a script from the business object
 *
 * @param {MoodleElement} element
 * @returns {MoodleElement} the script object
 */
function getScript(element) {
  return (getElements(element, 'zeebe:Script') || [])[0];
}

// helpers //////////

function getElements(element, type, property) {
  var elements = getExtensionElements(element, type);

  return !property ? elements : (elements[0] || {})[property] || [];
}

function getParameters(element, property) {
  var inputOutput = getInputOutput(element);

  return (inputOutput && inputOutput.get(property)) || [];
}

function getExtensionElements(element, type) {
  var elements = [];
  var extensionElements = element.get('extensionElements');

  if (typeof extensionElements !== 'undefined') {
    var extensionValues = extensionElements.get('values');

    if (typeof extensionValues !== 'undefined') {
      elements = minDash.filter(extensionValues, function(value) {
        return is$2(value, type);
      });
    }
  }

  return elements;
}

function is$2(element, type) {
  return (
    element &&
    typeof element.$instanceOf === 'function' &&
    element.$instanceOf(type)
  );
}

/**
 * Get all parent elements for a given element.
 *
 * @param {ModdleElement|string} element
 *
 * @returns {Array<ModdleElement>}
 */
function getParents(element) {
  var parents = [];
  var current = element;

  while (current.$parent) {
    parents.push(current.$parent);
    current = current.$parent;
  }

  return parents;
}

/**
 * Iterate over each element in a collection, calling the iterator function `fn`
 * with (element, index, recursionDepth).
 *
 * Recurse into all elements that are returned by `fn`.
 *
 * @param  {Object|Array<Object>} elements
 * @param  {Function} fn iterator function called with (element, index, recursionDepth)
 * @param  {number} [depth] maximum recursion depth
 */
function eachElement(elements, fn, depth) {
  depth = depth || 0;

  if (!minDash.isArray(elements)) {
    elements = [ elements ];
  }

  minDash.forEach(elements, function(s, i) {
    var filter = fn(s, i, depth);

    if (minDash.isArray(filter) && filter.length) {
      eachElement(filter, fn, depth + 1);
    }
  });
}

/**
 * Adds an element to a collection and returns true if the
 * element was added.
 *
 * @param {Array<Object>} elements
 * @param {Object} e
 * @param {boolean} unique
 */
function add(elements, e, unique) {
  var canAdd = !unique || elements.indexOf(e) === -1;

  if (canAdd) {
    elements.push(e);
  }

  return canAdd;
}

/**
 * Collects self + flow elements up to a given depth from a list of elements.
 *
 * @param  {ModdleElement|Array<ModdleElement>} elements the elements to select the flowElements from
 * @param  {boolean} unique whether to return a unique result set (no duplicates)
 * @param  {number} maxDepth the depth to search through or -1 for infinite
 *
 * @return {Array<ModdleElement>} found elements
 */
function selfAndFlowElements(elements, unique, maxDepth) {
  var result = [],
      processedFlowElements = [];

  eachElement(elements, function(element, i, depth) {
    add(result, element, unique);

    var flowElements = element.flowElements;

    // max traversal depth not reached yet
    if (maxDepth === -1 || depth < maxDepth) {

      // flowElements exist && flowElements not yet processed
      if (flowElements && add(processedFlowElements, flowElements, unique)) {
        return flowElements;
      }
    }
  });

  return result;
}

/**
 * Return self + ALL flowElements for a number of elements
 *
 * @param  {Array<ModdleElement>} elements to query
 * @param  {boolean} allowDuplicates to allow duplicates in the result set
 *
 * @return {Array<ModdleElement>} the collected elements
 */
function selfAndAllFlowElements(elements, allowDuplicates) {
  return selfAndFlowElements(elements, !allowDuplicates, -1);
}

/**
 * Return full moddle element for given element id
 *
 * @param {string} elementId
 * @param {ModdleElement} rootElement
 *
 * @returns {ModdleElement}
 */
function getElement(elementId, rootElement) {
  var allElements = selfAndAllFlowElements(rootElement);

  return minDash.find(allElements, function(element) {
    return element.id === elementId;
  });
}

function addVariableToList(variablesList, newVariable) {
  var foundIdx = minDash.findIndex(variablesList, function(variable) {
    return (
      variable.name === newVariable.name && variable.scope === newVariable.scope
    );
  });

  if (foundIdx >= 0) {
    variablesList[foundIdx].origin = combineArrays$1(
      variablesList[foundIdx].origin,
      newVariable.origin
    );
  } else {
    variablesList.push(newVariable);
  }
}

/**
 * Creates new process variable definition object
 * Identifies correct (highest) scope, in which variable is available
 *
 * @param {ModdleElement} flowElement
 * @param {String} name
 * @param {ModdleElement} defaultScope
 *
 * @returns {ProcessVariable}
 */
function createProcessVariable(flowElement, name, defaultScope) {
  var scope = getScope$1(flowElement, defaultScope, name);

  return {
    name: name,
    origin: [ flowElement ],
    scope: scope
  };
}


// helpers ////////////////////

/**
 * Set parent container if it defines it's own scope for the variable, so
 * when it defines an input mapping for it. Otherwise returns the default global scope
 */
function getScope$1(element, globalScope, variableName) {
  var parents = getParents(element);

  var scopedParent = minDash.find(parents, function(parent) {
    return (
      is$1(parent, 'bpmn:SubProcess') && hasInputParameter(parent, variableName)
    );
  });

  return scopedParent ? scopedParent : globalScope;
}

function is$1(element, type) {
  return (
    element &&
      typeof element.$instanceOf === 'function' &&
      element.$instanceOf(type)
  );
}

function hasInputParameter(element, name) {
  return minDash.find(getInputParameters(element), function(input) {
    return input.target === name;
  });
}

function combineArrays$1(a, b) {
  return a.concat(b);
}

/**
 * Retrieves process variables defined in output mappings, e.g.
 *
 * <bpmn:serviceTask id="ServiceTask">
 *   <bpmn:extensionElements>
 *     <zeebe:ioMapping>
 *       <zeebe:input source="= source" target="variable1" />
 *     </zeebe:ioMapping>
 *   </bpmn:extensionElements>
 * </bpmn:serviceTask>
 *
 * => Adds one variable "variable1" to the list.
 *
 */
function extractInMappings(options) {
  var elements = options.elements,
      processVariables = options.processVariables;

  if (!minDash.isArray(elements)) {
    elements = [ elements ];
  }

  minDash.forEach(elements, function(element) {

    var inMappings = getInMappings(element);

    // extract all variables with correct scope
    minDash.forEach(inMappings, function(mapping) {

      var newVariable = createProcessVariable(
        element,
        mapping.target,
        element
      );

      addVariableToList(processVariables, newVariable);
    });
  });

  return processVariables;
}

/**
 * Retrieves process variables defined in result variables, e.g.
 *
 * <bpmn:serviceTask id="ServiceTask">
 *   <bpmn:multiInstanceLoopCharacteristics>
 *     <bpmn:extensionElements>
 *       <zeebe:loopCharacteristics inputElement="inputElement" outputCollection="outputCollection" />
 *     </bpmn:extensionElements>
 *   </bpmn:multiInstanceLoopCharacteristics>
 * </bpmn:serviceTask>
 *
 * => Adds one variable "inputElement"to the list.
 *
 */
function extractInputElement(options) {
  var elements = options.elements,
      processVariables = options.processVariables;

  if (!minDash.isArray(elements)) {
    elements = [ elements ];
  }

  minDash.forEach(elements, function(element) {

    var loopCharacteristics = element.loopCharacteristics;

    var inputElement = loopCharacteristics && getInputElement(loopCharacteristics);

    if (inputElement) {
      var newVariable = createProcessVariable(
        element,
        inputElement,
        element
      );

      addVariableToList(processVariables, newVariable);
    }
  });

  return processVariables;
}

/**
 * Retrieves process variables defined in output mappings, e.g.
 *
 * <bpmn:serviceTask id="ServiceTask">
 *   <bpmn:extensionElements>
 *     <zeebe:ioMapping>
 *       <zeebe:output source="= source" target="variable1" />
 *     </zeebe:ioMapping>
 *   </bpmn:extensionElements>
 * </bpmn:serviceTask>
 *
 * => Adds one variable "variable1" to the list.
 *
 */
function extractOutMappings(options) {
  var elements = options.elements,
      containerElement = options.containerElement,
      processVariables = options.processVariables;

  if (!minDash.isArray(elements)) {
    elements = [ elements ];
  }

  minDash.forEach(elements, function(element) {

    var outMappings = getOutMappings(element);

    // extract all variables with correct scope
    minDash.forEach(outMappings, function(mapping) {
      var newVariable = createProcessVariable(
        element,
        mapping.target,
        containerElement
      );

      addVariableToList(processVariables, newVariable);
    });
  });

  return processVariables;
}

/**
 * Retrieves process variables defined in output collection, e.g.
 *
 * <bpmn:serviceTask id="ServiceTask">
 *   <bpmn:multiInstanceLoopCharacteristics>
 *     <bpmn:extensionElements>
 *       <zeebe:loopCharacteristics inputElement="inputElement" outputCollection="outputCollection" />
 *     </bpmn:extensionElements>
 *   </bpmn:multiInstanceLoopCharacteristics>
 * </bpmn:serviceTask>
 *
 * => Adds one variable "outputCollection"to the list.
 *
 */
function extractOutputCollections(options) {
  var elements = options.elements,
      containerElement = options.containerElement,
      processVariables = options.processVariables;

  if (!minDash.isArray(elements)) {
    elements = [ elements ];
  }

  minDash.forEach(elements, function(element) {

    var loopCharacteristics = element.loopCharacteristics;

    var outputCollection = loopCharacteristics && getOutputCollection(loopCharacteristics);

    if (outputCollection) {
      var newVariable = createProcessVariable(
        element,
        outputCollection,
        containerElement
      );

      addVariableToList(processVariables, newVariable);
    }
  });

  return processVariables;
}

/**
 * Retrieves process variables defined in result variables, e.g.
 *
 *   <bpmn:businessRuleTask id="Activity_1">
 *     <bpmn:extensionElements>
 *       <zeebe:calledDecision resultVariable="variable1" />
 *     </bpmn:extensionElements>
 *   </bpmn:businessRuleTask>
 *
 *
 * => Adds one variable "variable1"to the list.
 *
 */
function extractResultVariables(options) {
  var elements = options.elements,
      containerElement = options.containerElement,
      processVariables = options.processVariables;

  if (!minDash.isArray(elements)) {
    elements = [ elements ];
  }

  minDash.forEach(elements, function(element) {

    var baseElement = getCalledDecision(element) ||
                      getScript(element);

    if (!baseElement) {
      return;
    }

    var resultVariable = baseElement.resultVariable;

    if (resultVariable) {
      var newVariable = createProcessVariable(
        element,
        resultVariable,
        containerElement
      );

      addVariableToList(processVariables, newVariable);
    }
  });

  return processVariables;
}

var extractors = [
  extractInMappings,
  extractInputElement,
  extractOutMappings,
  extractOutputCollections,
  extractResultVariables
];

/**
 * @typedef {Object} ProcessVariable
 * @property {string} name
 * @property {Array<ModdleElement>} origin
 * @property {ModdleElement} scope
 */

// api /////////////////////////

/**
 * Extractors add ProcessVariables to the `options.processVariables` parameter.
 * @callback extractor
 * @param {Object} options
 * @param {Array<ModdleElement>} options.elements
 * @param {ModdleElement} options.containerElement
 * @param {Array<ProcessVariable>} options.processVariables
 */

/**
 * Retrieves all process variables for a given container element.
 * @param {ModdleElement} containerElement
 * @param {Array<extractor>} [additionalExtractors]
 *
 * @returns {Promise<Array<ProcessVariable>>}
 */
function getProcessVariables(containerElement, additionalExtractors = []) {
  var processVariables = [];

  // (1) extract all flow elements inside the container
  var elements = selfAndAllFlowElements([ containerElement ], false);

  const allPromises = [];

  // (2) extract all variables from the extractors
  minDash.forEach([ ...extractors, ...additionalExtractors ], function(extractor) {
    allPromises.push(extractor({
      elements: elements,
      containerElement: containerElement,
      processVariables: processVariables
    }));
  });

  return Promise.all(allPromises)
    .then(() => processVariables);
}

/**
 * Retrieves all variables which are available in the given scope
 *
 * * Exclude variables which are only available in other scopes
 * * Exclude variables which are produced by the given element
 * * Include variables which are available in parent scopes
 *
 * @param {string} scope
 * @param {ModdleElement} rootElement element from where to extract all variables
 * @param {Array<extractor>} [additionalExtractors]
 *
 * @returns {Promise<Array<ProcessVariable>>}
 */
async function getVariablesForScope(scope, rootElement, additionalExtractors = []) {

  var allVariables = await getProcessVariables(rootElement, additionalExtractors);

  var scopeElement = getElement(scope, rootElement);

  // (1) get variables for given scope
  var scopeVariables = minDash.filter(allVariables, function(variable) {
    return variable.scope.id === scopeElement.id;
  });

  // (2) get variables for parent scopes
  var parents = getParents(scopeElement);

  var parentsScopeVariables = minDash.filter(allVariables, function(variable) {
    return minDash.find(parents, function(parent) {
      return parent.id === variable.scope.id;
    });
  });

  return combineArrays(scopeVariables, parentsScopeVariables);
}


function getVariablesForElement(element, additionalExtractors = []) {
  return getVariablesForScope(getScope(element), getRootElement(element), additionalExtractors);
}

function getScope(element) {
  const bo = getBusinessObject(element);

  if (is(element, 'bpmn:Participant')) {
    return bo.processRef.id;
  }

  return bo.id;
}

function getRootElement(element) {
  const businessObject = getBusinessObject(element);

  if (is(businessObject, 'bpmn:Participant')) {
    return businessObject.processRef;
  }

  if (is(businessObject, 'bpmn:Process')) {
    return businessObject;
  }

  let parent = businessObject;

  while (parent.$parent && !is(parent, 'bpmn:Process')) {
    parent = parent.$parent;
  }

  return parent;
}


// helpers ////////////////////

function combineArrays(a, b) {
  return a.concat(b);
}


function getBusinessObject(element) {
  return (element && element.businessObject) || element;
}


function is(element, type) {
  var bo = getBusinessObject(element);

  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);
}

exports.getProcessVariables = getProcessVariables;
exports.getVariablesForElement = getVariablesForElement;
exports.getVariablesForScope = getVariablesForScope;

},{"min-dash":49}],9:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = FeelEditor;
var _autocomplete = require("@codemirror/autocomplete");
var _commands = require("@codemirror/commands");
var _language = require("@codemirror/language");
var _lint = require("@codemirror/lint");
var _state = require("@codemirror/state");
var _view = require("@codemirror/view");
var _langFeel = require("lang-feel");
var _minDom = require("min-dom");
var _feelLint = require("@bpmn-io/feel-lint");
var _highlight = require("@lezer/highlight");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// helpers ///////////////////////////////

function isNodeEmpty(node) {
  return node.from === node.to;
}
function isPathExpression(node) {
  if (!node) {
    return false;
  }
  if (node.name === 'PathExpression') {
    return true;
  }
  return isPathExpression(node.parent);
}
var tags = [{
  name: "not()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>negand</code>: boolean</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">not(true)\n// false\n</code></pre>\n"
}, {
  name: "is defined()",
  description: "<p>Checks if a given value is defined. A value is defined if it exists, and it is an instance of one of the FEEL data types including <code>null</code>.</p>\n<p>The function can be used to check if a variable or a context entry (e.g. a property of a variable) exists. It allows differentiating between a <code>null</code> variable and a value that doesn&#39;t exist.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">is defined(1)\n// true\n\nis defined(null)\n// true\n\nis defined(x)\n// false - if no variable &quot;x&quot; exists\n\nis defined(x.y)\n// false - if no variable &quot;x&quot; exists or it doesn&#39;t have a property &quot;y&quot;\n</code></pre>\n"
}, {
  name: "get value()",
  description: "<p>Returns the value of the context entry with the given key.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n</ul>\n</li>\n<li>result: any</li>\n</ul>\n<pre><code class=\"language-feel\">get value({foo: 123}, &quot;foo&quot;)\n// 123\n</code></pre>\n"
}, {
  name: "get entries()",
  description: "<p>Returns the entries of the context as a list of key-value-pairs.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n</ul>\n</li>\n<li>result: list of context which contains two entries for &quot;key&quot; and &quot;value&quot;</li>\n</ul>\n<pre><code class=\"language-feel\">get entries({foo: 123})\n// [{key: &quot;foo&quot;, value: 123}]\n</code></pre>\n"
}, {
  name: "put()",
  description: "<p>Add the given key and value to a context. Returns a new context that includes the entry. It might override an existing entry of the context.</p>\n<p>Returns <code>null</code> if the value is not defined.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put({x:1}, &quot;y&quot;, 2)\n// {x:1, y:2}\n</code></pre>\n"
}, {
  name: "put all()",
  description: "<p>Union the given contexts (two or more). Returns a new context that includes all entries of the given contexts. It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts are passed in the method.</p>\n<p>Returns <code>null</code> if one of the values is not a context.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>contexts</code>: contexts as varargs</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put all({x:1}, {y:2})\n// {x:1, y:2}\n</code></pre>\n"
}, {
  name: "date()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>year</code>, <code>month</code>, <code>day</code>: number</li>\n</ul>\n</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">date(birthday)\n// date(&quot;2018-04-29&quot;)\n\ndate(date and time(&quot;2012-12-25T11:00:00&quot;))\n// date(&quot;2012-12-25&quot;)\n\ndate(2012, 12, 25)\n// date(&quot;2012-12-25&quot;)\n</code></pre>\n"
}, {
  name: "time()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>hour</code>, <code>minute</code>, <code>second</code>: number<ul>\n<li>(optional) <code>offset</code>: day-time-duration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>result: time</li>\n</ul>\n<pre><code class=\"language-feel\">time(lunchTime)\n// time(&quot;12:00:00&quot;)\n\ntime(date and time(&quot;2012-12-25T11:00:00&quot;))\n// time(&quot;11:00:00&quot;)\n\ntime(23, 59, 0)\n// time(&quot;23:59:00&quot;)\n\ntime(14, 30, 0, duration(&quot;PT1H&quot;))\n// time(&quot;15:30:00&quot;)\n</code></pre>\n"
}, {
  name: "date and time()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date / date-time</li>\n<li><code>time</code>: time</li>\n<li>or <code>from</code>: string</li>\n</ul>\n</li>\n<li>result: date-time</li>\n</ul>\n<pre><code class=\"language-feel\">date and time(date(&quot;2012-12-24&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-24T23:59:00&quot;)\n\ndate and time(date and time(&quot;2012-12-25T11:00:00&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-25T23:59:00&quot;)\n\ndate and time(birthday)\n// date and time(&quot;2018-04-29T009:30:00&quot;)\n</code></pre>\n"
}, {
  name: "duration()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: day-time-duration or year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">duration(weekDays)\n// duration(&quot;P5D&quot;)\n\nduration(age)\n// duration(&quot;P32Y&quot;)\n</code></pre>\n"
}, {
  name: "years and months duration()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: date</li>\n<li><code>to</code>: date</li>\n</ul>\n</li>\n<li>result: year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">years and months duration(date(&quot;2011-12-22&quot;), date(&quot;2013-08-24&quot;))\n// duration(&quot;P1Y8M&quot;)\n</code></pre>\n"
}, {
  name: "number()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">number(&quot;1500.5&quot;)\n// 1500.5\n</code></pre>\n"
}, {
  name: "string()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: any</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">string(1.1)\n// &quot;1.1&quot;\n\nstring(date(&quot;2012-12-25&quot;))\n// &quot;2012-12-25&quot;\n</code></pre>\n"
}, {
  name: "context()",
  description: "<p>Constructs a context of the given list of key-value pairs. It is the reverse function to <a href=\"feel-built-in-functions-context.md#get-entries\">get entries()</a>.</p>\n<p>Each key-value pair must be a context with two entries: <code>key</code> and <code>value</code>. The entry with name <code>key</code> must have a value of the type <code>string</code>.</p>\n<p>It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts in the given list.</p>\n<p>Returns <code>null</code> if one of the entries is not a context or if a context doesn&#39;t contain the required entries.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>entries</code>: list of contexts</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">context([{&quot;key&quot;:&quot;a&quot;, &quot;value&quot;:1}, {&quot;key&quot;:&quot;b&quot;, &quot;value&quot;:2}])\n// {a:1, b:2}\n</code></pre>\n"
}, {
  name: "list contains()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>element</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">list contains([1,2,3], 2)\n// true\n</code></pre>\n"
}, {
  name: "count()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">count([1,2,3])\n// 3\n</code></pre>\n"
}, {
  name: "min()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">min([1,2,3])\n// 1\n\nmin(1,2,3)\n// 1\n</code></pre>\n"
}, {
  name: "max()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">max([1,2,3])\n// 3\n\nmax(1,2,3)\n// 3\n</code></pre>\n"
}, {
  name: "sum()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sum([1,2,3])\n// 6\n\nsum(1,2,3)\n// 6\n</code></pre>\n"
}, {
  name: "product()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">product([2, 3, 4])\n// 24\n\nproduct(2, 3, 4)\n// 24\n</code></pre>\n"
}, {
  name: "mean()",
  description: "<p>Returns the arithmetic mean (i.e. average).</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">mean([1,2,3])\n// 2\n\nmean(1,2,3)\n// 2\n</code></pre>\n"
}, {
  name: "median()",
  description: "<p>Returns the median element of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">median(8, 2, 5, 3, 4)\n// 4\n\nmedian([6, 1, 2, 3])\n// 2.5\n</code></pre>\n"
}, {
  name: "stddev()",
  description: "<p>Returns the standard deviation.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">stddev(2, 4, 7, 5)\n// 2.0816659994661326\n\nstddev([2, 4, 7, 5])\n// 2.0816659994661326\n</code></pre>\n"
}, {
  name: "mode()",
  description: "<p>Returns the mode of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">mode(6, 3, 9, 6, 6)\n// [6]\n\nmode([6, 1, 9, 6, 1])\n// [1, 6]\n</code></pre>\n"
}, {
  name: "and()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
}, {
  name: "all()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
}, {
  name: "or()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
}, {
  name: "any()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
}, {
  name: "sublist()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sublist([1,2,3], 2)\n// [2,3]\n\nsublist([1,2,3], 1, 2)\n// [1,2]\n</code></pre>\n"
}, {
  name: "append()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>items</code>: elements as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">append([1], 2, 3)\n// [1,2,3]\n</code></pre>\n"
}, {
  name: "concatenate()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">concatenate([1,2],[3])\n// [1,2,3]\n\nconcatenate([1],[2],[3])\n// [1,2,3]\n</code></pre>\n"
}, {
  name: "insert before()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n<li><code>newItem</code>: any</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">insert before([1,3],1,2)\n// [1,2,3]\n</code></pre>\n"
}, {
  name: "remove()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">remove([1,2,3], 2)\n// [1,3]\n</code></pre>\n"
}, {
  name: "reverse()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">reverse([1,2,3])\n// [3,2,1]\n</code></pre>\n"
}, {
  name: "index of()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>match</code>: any</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">index of([1,2,3,2],2)\n// [2,4]\n</code></pre>\n"
}, {
  name: "union()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">union([1,2],[2,3])\n// [1,2,3]\n</code></pre>\n"
}, {
  name: "distinct values()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">distinct values([1,2,3,2,1])\n// [1,2,3]\n</code></pre>\n"
}, {
  name: "flatten()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">flatten([[1,2],[[3]], 4])\n// [1,2,3,4]\n</code></pre>\n"
}, {
  name: "sort()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>precedes</code>: function with two arguments and boolean result</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sort(list: [3,1,4,5,2], precedes: function(x,y) x &lt; y)\n// [1,2,3,4,5]\n</code></pre>\n"
}, {
  name: "string join()",
  description: "<p>This joins a list of strings into a single string. This is similar to\nJava&#39;s <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)\">joining</a>\nfunction.</p>\n<p>If an item of the list is <code>null</code>, the item is ignored for the result string. If an item is\nneither a string nor <code>null</code>, the function returns <code>null</code> instead of a string.</p>\n<ul>\n<li>Parameters:<ul>\n<li><code>list</code>: The list of strings to join</li>\n<li><code>delimiter</code>: (Optional) The string used between each element (default: empty string)</li>\n<li><code>prefix</code>: (Optional) The string used at the beginning of the joined result (default:\nempty string)</li>\n<li><code>suffix</code>: (Optional) The string used at the end of the joined result (default: empty\nstring)</li>\n</ul>\n</li>\n<li>Result: The joined list as a string</li>\n</ul>\n<pre><code class=\"language-feel\">string join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])\n// &quot;abc&quot;\nstring join([&quot;a&quot;], &quot;X&quot;)\n// &quot;a&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;)\n// &quot;a, b, c&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;, &quot;[&quot;, &quot;]&quot;)\n// &quot;[a, b, c]&quot;\nstring join([&quot;a&quot;,null,&quot;c&quot;])\n// &quot;ac&quot;\nstring join([])\n// &quot;&quot;\n</code></pre>\n"
}, {
  name: "decimal()",
  description: "<p>Round the given number at the given scale using the given rounding mode. If no rounding mode is passed in, it uses <code>HALF_EVEN</code> as default.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n<li><code>scale</code>: number</li>\n<li>(optional) <code>mode</code>: string - one of <code>UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY</code> (default: <code>HALF_EVEN</code>)</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">decimal(1/3, 2)\n// .33\n\ndecimal(1.5, 0)\n// 2\n\ndecimal(2.5, 0, &quot;half_up&quot;)\n// 3\n</code></pre>\n"
}, {
  name: "floor()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">floor(1.5)\n// 1\n\nfloor(-1.5)\n// -2\n</code></pre>\n"
}, {
  name: "ceiling()",
  description: "<p>Round the given number at the given scale using the ceiling rounding mode.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">ceiling(1.5)\n// 2\n\nceiling(-1.5)\n// -1\n</code></pre>\n"
}, {
  name: "abs()",
  description: "<p>Returns the absolute value of the given numeric value.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">abs(10)\n// 10\n\nabs(-10)\n// 10\n</code></pre>\n"
}, {
  name: "modulo()",
  description: "<p>Returns the remainder of the division of dividend by divisor.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>dividend</code>: number</li>\n<li><code>divisor</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">modulo(12, 5)\n// 2\n</code></pre>\n"
}, {
  name: "sqrt()",
  description: "<p>Returns the square root.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sqrt(16)\n// 4\n</code></pre>\n"
}, {
  name: "log()",
  description: "<p>Returns the natural logarithm (base e) of the number.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">log(10)\n// 2.302585092994046\n</code></pre>\n"
}, {
  name: "exp()",
  description: "<p>Returns the Euler’s number e raised to the power of number .</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">exp(5)\n// 148.4131591025766\n</code></pre>\n"
}, {
  name: "odd()",
  description: "<p>Returns <code>true</code> if the given numeric value is odd. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">odd(5)\n// true\n\nodd(2)\n// false\n</code></pre>\n"
}, {
  name: "even()",
  description: "<p>Returns <code>true</code> if the given numeric value is even. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">even(5)\n// false\n\neven(2)\n// true\n</code></pre>\n"
}, {
  name: "before()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">before(1, 10)\n// true\n\nbefore(10, 1)\n// false\n\nbefore(1, [2..5])\n// true\n\nbefore([1..5], 10)\n// true\n\nbefore([1..5], [6..10])\n// true\n\nbefore([1..5),[5..10])\n// true\n</code></pre>\n"
}, {
  name: "after()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">after(10, 1)\n// true\n\nafter(1, 10)\n// false\n\nafter(12, [2..5])\n// true\n\n([1..5], 10)\n// false\n\nbefore([6..10], [1..5])\n// true\n\nbefore([5..10], [1..5))\n// true\n</code></pre>\n"
}, {
  name: "meets()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">meets([1..5], [5..10])\n// true\n\nmeets([1..3], [4..6])\n// false\n\nmeets([1..3], [3..5])\n// true\n\nmeets([1..5], (5..8])\n// false\n</code></pre>\n"
}, {
  name: "met by()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">met by([5..10], [1..5])\n// true\n\nmet by([3..4], [1..2])\n// false\n\nmet by([3..5], [1..3])\n// true\n\nmet by((5..8], [1..5))\n// false\n\nmet by([5..10], [1..5))\n// false\n</code></pre>\n"
}, {
  name: "overlaps()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps([5..10], [1..6])\n// true\n\noverlaps((3..7], [1..4])\n// true\n\noverlaps([1..3], (3..6])\n// false\n\noverlaps((5..8], [1..5))\n// false\n\noverlaps([4..10], [1..5))\n// treu\n</code></pre>\n"
}, {
  name: "overlaps before()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps before([1..5], [4..10])\n// true\n\noverlaps before([3..4], [1..2])\n// false\n\noverlaps before([1..3], (3..5])\n// false\n\noverlaps before([1..5), (3..8])\n// true\n\noverlaps before([1..5), [5..10])\n// false\n</code></pre>\n"
}, {
  name: "overlaps after()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps after([4..10], [1..5])\n// true\n\noverlaps after([3..4], [1..2])\n// false\n\noverlaps after([3..5], [1..3))\n// false\n\noverlaps after((5..8], [1..5))\n// false\n\noverlaps after([4..10], [1..5))\n// true\n</code></pre>\n"
}, {
  name: "finishes()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes(5, [1..5])\n// true\n\nfinishes(10, [1..7])\n// false\n\nfinishes([3..5], [1..5])\n// true\n\nfinishes((1..5], [1..5))\n// false\n\nfinishes([5..10], [1..10))\n// false\n</code></pre>\n"
}, {
  name: "finished by()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes by([5..10], 10)\n// true\n\nfinishes by([3..4], 2)\n// false\n\nfinishes by([3..5], [1..5])\n// true\n\nfinishes by((5..8], [1..5))\n// false\n\nfinishes by([5..10], (1..10))\n// true\n</code></pre>\n"
}, {
  name: "includes()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">includes([5..10], 6)\n// true\n\nincludes([3..4], 5)\n// false\n\nincludes([1..10], [4..6])\n// true\n\nincludes((5..8], [1..5))\n// false\n\nincludes([1..10], [1..5))\n// true\n</code></pre>\n"
}, {
  name: "during()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">during(5, [1..10])\n// true\n\nduring(12, [1..10])\n// false\n\nduring(1, (1..10])\n// false\n\nduring([4..6], [1..10))\n// true\n\nduring((1..5], (1..10])\n// true\n</code></pre>\n"
}, {
  name: "starts()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts(1, [1..5])\n// true\n\nstarts(1, (1..8])\n// false\n\nstarts((1..5], [1..5])\n// false\n\nstarts([1..10], [1..10])\n// true\n\nstarts((1..10), (1..10))\n// true\n</code></pre>\n"
}, {
  name: "started by()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">started by([1..10], 1)\n// true\n\nstarted by((1..10], 1)\n// false\n\nstarted by([1..10], [1..5])\n// true\n\nstarted by((1..10], [1..5))\n// false\n\nstarted by([1..10], [1..10))\n// true\n</code></pre>\n"
}, {
  name: "coincides()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">coincides(5, 5)\n// true\n\ncoincides(3, 4)\n// false\n\ncoincides([1..5], [1..5])\n// true\n\ncoincides((1..5], [1..5))\n// false\n\ncoincides([1..5], [2..6])\n// false\n</code></pre>\n"
}, {
  name: "substring()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring(&quot;foobar&quot;,3)\n// &quot;obar&quot;\n\nsubstring(&quot;foobar&quot;,3,3)\n// &quot;oba&quot;\n</code></pre>\n"
}, {
  name: "string length()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">string length(&quot;foo&quot;)\n// 3\n</code></pre>\n"
}, {
  name: "upper case()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">upper case(&quot;aBc4&quot;)\n// &quot;ABC4&quot;\n</code></pre>\n"
}, {
  name: "lower case()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">lower case(&quot;aBc4&quot;)\n// &quot;abc4&quot;\n</code></pre>\n"
}, {
  name: "substring before()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring before(&quot;foobar&quot;, &quot;bar&quot;)\n// &quot;foo&quot;\n</code></pre>\n"
}, {
  name: "substring after()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring after(&quot;foobar&quot;, &quot;ob&quot;)\n// &quot;ar&quot;\n</code></pre>\n"
}, {
  name: "contains()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">contains(&quot;foobar&quot;, &quot;of&quot;)\n// false\n</code></pre>\n"
}, {
  name: "starts with()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts with(&quot;foobar&quot;, &quot;fo&quot;)\n// true\n</code></pre>\n"
}, {
  name: "ends with()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">ends with(&quot;foobar&quot;, &quot;r&quot;)\n// true\n</code></pre>\n"
}, {
  name: "matches()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">matches(&quot;foobar&quot;, &quot;^fo*bar&quot;)\n// true\n</code></pre>\n"
}, {
  name: "replace()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n<li><code>replacement</code>: string (e.g. <code>$1</code> returns the first match group)</li>\n<li>(optional) <code>flags</code>: string (&quot;s&quot;, &quot;m&quot;, &quot;i&quot;, &quot;x&quot;)</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">replace(&quot;abcd&quot;, &quot;(ab)|(a)&quot;, &quot;[1=$1][2=$2]&quot;)\n// &quot;[1=ab][2=]cd&quot;\n\nreplace(&quot;0123456789&quot;, &quot;(\\d{3})(\\d{3})(\\d{4})&quot;, &quot;($1) $2-$3&quot;)\n// &quot;(012) 345-6789&quot;\n</code></pre>\n"
}, {
  name: "split()",
  description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>delimiter</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">split(&quot;John Doe&quot;, &quot;\\s&quot; )\n// [&quot;John&quot;, &quot;Doe&quot;]\n\nsplit(&quot;a;b;c;;&quot;, &quot;;&quot;)\n// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;&quot;]\n</code></pre>\n"
}, {
  name: "extract()",
  description: "<p>Returns all matches of the pattern in the given string. Returns an empty list if the pattern doesn&#39;t\nmatch.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">extract(&quot;references are 1234, 1256, 1378&quot;, &quot;12[0-9]*&quot;)\n// [&quot;1234&quot;,&quot;1256&quot;]\n</code></pre>\n"
}, {
  name: "now()",
  description: "<p>Returns the current date and time including the timezone.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date-time with timezone</li>\n</ul>\n<pre><code class=\"language-feel\">now()\n// date and time(&quot;2020-07-31T14:27:30@Europe/Berlin&quot;)\n</code></pre>\n"
}, {
  name: "today()",
  description: "<p>Returns the current date.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">today()\n// date(&quot;2020-07-31&quot;)\n</code></pre>\n"
}, {
  name: "day of week()",
  description: "<p>Returns the day of the week according to the Gregorian calendar. Note that it always returns the English name of the day.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">day of week(date(&quot;2019-09-17&quot;))\n// &quot;Tuesday&quot;\n</code></pre>\n"
}, {
  name: "day of year()",
  description: "<p>Returns the Gregorian number of the day within the year.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">day of year(date(&quot;2019-09-17&quot;))\n// 260\n</code></pre>\n"
}, {
  name: "week of year()",
  description: "<p>Returns the Gregorian number of the week within the year, according to ISO 8601.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">week of year(date(&quot;2019-09-17&quot;))\n// 38\n</code></pre>\n"
}, {
  name: "month of year()",
  description: "<p>Returns the month of the week according to the Gregorian calendar. Note that it always returns the English name of the month.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">month of year(date(&quot;2019-09-17&quot;))\n// &quot;September&quot;\n</code></pre>\n"
}, {
  name: "abs()",
  description: "<p>Returns the absolute value of a given duration.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: days-time-duration/years-months-duration</li>\n</ul>\n</li>\n<li>result: duration</li>\n</ul>\n<pre><code class=\"language-feel\">abs(duration(&quot;-PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;-P2M&quot;))\n// duration(&quot;P2M&quot;)\n</code></pre>\n"
}];
var options = tags.map(function (tag) {
  return (0, _autocomplete.snippetCompletion)(tag.name.replace('()', '(#{1})'), {
    label: tag.name,
    type: 'function',
    info: function info() {
      var html = (0, _minDom.domify)("<div class=\"description\">".concat(tag.description, "<div>"));
      return html;
    },
    boost: -1
  });
});
var builtins = function builtins(context) {
  var nodeBefore = (0, _language.syntaxTree)(context.state).resolve(context.pos, -1);

  // For the special case of empty nodes, we need to check the current node
  // as well. The previous node could be part of another token, e.g.
  // when typing functions "abs(".
  var nextNode = nodeBefore.nextSibling;
  var isInEmptyNode = isNodeEmpty(nodeBefore) || nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);
  if (isInEmptyNode) {
    return context.explicit ? {
      from: context.pos,
      options: options
    } : null;
  }

  // Don't auto-complete on path expressions/context keys/...
  if (nodeBefore.parent && nodeBefore.parent.name !== 'VariableName' || isPathExpression(nodeBefore)) {
    return null;
  }
  return {
    from: nodeBefore.from,
    options: options
  };
};

/**
 * @type {Facet<import('..').Variable[]>} Variable
 */
var variablesFacet = _state.Facet.define();
var pathExpression = function pathExpression(context) {
  var variables = context.state.facet(variablesFacet)[0];
  var nodeBefore = (0, _language.syntaxTree)(context.state).resolve(context.pos, -1);
  if (!isPathExpression(nodeBefore)) {
    return;
  }
  var expression = findPathExpression(nodeBefore);

  // if the cursor is directly after the `.`, variable starts at the cursor position
  var from = nodeBefore === expression ? context.pos : nodeBefore.from;
  var path = getPath(expression, context);
  var options = variables;
  for (var i = 0; i < path.length - 1; i++) {
    var childVar = options.find(function (val) {
      return val.name === path[i].name;
    });
    if (!childVar) {
      return null;
    }

    // only suggest if variable type matches
    if (childVar.isList !== 'optional' && !!childVar.isList !== path[i].isList) {
      return;
    }
    options = childVar.entries;
  }
  if (!options) return;
  options = options.map(function (v) {
    return {
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    };
  });
  var result = {
    from: from,
    options: options
  };
  return result;
};
function findPathExpression(node) {
  while (node) {
    if (node.name === 'PathExpression') {
      return node;
    }
    node = node.parent;
  }
}

// parses the path expression into a list of variable names with type information
// e.g. foo[0].bar => [ { name: 'foo', isList: true }, { name: 'bar', isList: false } ]
function getPath(node, context) {
  var path = [];
  for (var child = node.firstChild; child; child = child.nextSibling) {
    if (child.name === 'PathExpression') {
      path.push.apply(path, _toConsumableArray(getPath(child, context)));
    } else if (child.name === 'FilterExpression') {
      path.push.apply(path, _toConsumableArray(getFilter(child, context)));
    } else {
      path.push({
        name: getNodeContent(child, context),
        isList: false
      });
    }
  }
  return path;
}
function getFilter(node, context) {
  var list = node.firstChild;
  if (list.name === 'PathExpression') {
    var path = getPath(list, context);
    var last = path[path.length - 1];
    last.isList = true;
    return path;
  }
  return [{
    name: getNodeContent(list, context),
    isList: true
  }];
}
function getNodeContent(node, context) {
  return context.state.sliceDoc(node.from, node.to);
}

/**
 * @type {import('@codemirror/autocomplete').CompletionSource}
 */
var variables = function variables(context) {
  var variables = context.state.facet(variablesFacet)[0];
  var options = variables.map(function (v) {
    return {
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    };
  });

  // In most cases, use what is typed before the cursor
  var nodeBefore = (0, _language.syntaxTree)(context.state).resolve(context.pos, -1);

  // For the special case of empty nodes, we need to check the current node
  // as well. The previous node could be part of another token, e.g.
  // when typing functions "abs(".
  var nextNode = nodeBefore.nextSibling;
  var isInEmptyNode = isNodeEmpty(nodeBefore) || nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);
  if (isInEmptyNode) {
    return context.explicit ? {
      from: context.pos,
      options: options
    } : null;
  }
  var result = {
    from: nodeBefore.from,
    options: options
  };

  // Only auto-complete variables
  if (nodeBefore.parent && nodeBefore.parent.name !== 'VariableName' || isPathExpression(nodeBefore)) {
    return null;
  }
  return result;
};
function autocompletion() {
  return [(0, _autocomplete.autocompletion)({
    override: [variables, builtins, (0, _autocomplete.completeFromList)(_langFeel.snippets.map(function (s) {
      return _objectSpread(_objectSpread({}, s), {}, {
        boost: -1
      });
    })), pathExpression]
  })];
}
function language() {
  return new _language.LanguageSupport(_langFeel.feelLanguage, []);
}
var linter = [(0, _lint.linter)((0, _feelLint.cmFeelLinter)())];
var baseTheme = _view.EditorView.theme({
  '& .cm-content': {
    padding: '0px'
  },
  '& .cm-line': {
    padding: '0px'
  },
  '&.cm-editor.cm-focused': {
    outline: 'none'
  },
  '& .cm-completionInfo ul': {
    margin: 0,
    paddingLeft: '15px'
  },
  '& .cm-completionInfo pre': {
    marginBottom: 0,
    whiteSpace: 'pre-wrap'
  },
  '& .cm-completionInfo p': {
    marginTop: 0
  },
  '& .cm-completionInfo p:not(:last-of-type)': {
    marginBottom: 0
  }
});
var highlightTheme = _view.EditorView.baseTheme({
  '& .variableName': {
    color: '#10f'
  },
  '& .number': {
    color: '#164'
  },
  '& .string': {
    color: '#a11'
  },
  '& .bool': {
    color: '#219'
  },
  '& .function': {
    color: '#aa3731',
    fontWeight: 'bold'
  },
  '& .control': {
    color: '#708'
  }
});
var syntaxClasses = (0, _language.syntaxHighlighting)(_language.HighlightStyle.define([{
  tag: _highlight.tags.variableName,
  "class": 'variableName'
}, {
  tag: _highlight.tags.name,
  "class": 'variableName'
}, {
  tag: _highlight.tags.number,
  "class": 'number'
}, {
  tag: _highlight.tags.string,
  "class": 'string'
}, {
  tag: _highlight.tags.bool,
  "class": 'bool'
}, {
  tag: _highlight.tags["function"](_highlight.tags.variableName),
  "class": 'function'
}, {
  tag: _highlight.tags["function"](_highlight.tags.special(_highlight.tags.variableName)),
  "class": 'function'
}, {
  tag: _highlight.tags.controlKeyword,
  "class": 'control'
}, {
  tag: _highlight.tags.operatorKeyword,
  "class": 'control'
}]));
var theme = [baseTheme, highlightTheme, syntaxClasses];

/**
 * @typedef {object} Variable
 * @property {string} name name or key of the variable
 * @property {string} [info] short information about the variable, e.g. type
 * @property {string} [detail] longer description of the variable content
 * @property {boolean} [isList] whether the variable is a list
 * @property {array<Variable>} [schema] array of child variables if the variable is a context or list
 */

var autocompletionConf = new _state.Compartment();

/**
 * Creates a FEEL editor in the supplied container
 *
 * @param {Object} config
 * @param {DOMNode} config.container
 * @param {DOMNode|String} [config.tooltipContainer]
 * @param {Function} [config.onChange]
 * @param {Function} [config.onKeyDown]
 * @param {Function} [config.onLint]
 * @param {Boolean} [config.readOnly]
 * @param {String} [config.value]
 * @param {Variable[]} [config.variables]
 *
 * @returns {Object} editor
 */
function FeelEditor(_ref) {
  var container = _ref.container,
    tooltipContainer = _ref.tooltipContainer,
    _ref$onChange = _ref.onChange,
    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
    _ref$onKeyDown = _ref.onKeyDown,
    onKeyDown = _ref$onKeyDown === void 0 ? function () {} : _ref$onKeyDown,
    _ref$onLint = _ref.onLint,
    onLint = _ref$onLint === void 0 ? function () {} : _ref$onLint,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value,
    _ref$variables = _ref.variables,
    variables = _ref$variables === void 0 ? [] : _ref$variables;
  var changeHandler = _view.EditorView.updateListener.of(function (update) {
    if (update.docChanged) {
      onChange(update.state.doc.toString());
    }
  });
  var lintHandler = _view.EditorView.updateListener.of(function (update) {
    var diagnosticEffects = update.transactions.flatMap(function (t) {
      return t.effects;
    }).filter(function (effect) {
      return effect.is(_lint.setDiagnosticsEffect);
    });
    if (!diagnosticEffects.length) {
      return;
    }
    var messages = diagnosticEffects.flatMap(function (effect) {
      return effect.value;
    });
    onLint(messages);
  });
  var keyHandler = _view.EditorView.domEventHandlers({
    keydown: onKeyDown
  });
  if (typeof tooltipContainer === 'string') {
    tooltipContainer = document.querySelector(tooltipContainer);
  }
  var tooltipLayout = tooltipContainer ? (0, _view.tooltips)({
    tooltipSpace: function tooltipSpace() {
      return tooltipContainer.getBoundingClientRect();
    }
  }) : [];
  var extensions = [autocompletionConf.of(variablesFacet.of(variables)), autocompletion(), (0, _language.bracketMatching)(), changeHandler, (0, _autocomplete.closeBrackets)(), (0, _language.indentOnInput)(), keyHandler, _view.keymap.of(_toConsumableArray(_commands.defaultKeymap)), language(), linter, lintHandler, tooltipLayout, theme];
  if (readOnly) {
    extensions.push(_view.EditorView.editable.of(false));
  }
  this._cmEditor = new _view.EditorView({
    state: _state.EditorState.create({
      doc: value,
      extensions: extensions
    }),
    parent: container
  });
  return this;
}

/**
 * Replaces the content of the Editor
 *
 * @param {String} value
 */
FeelEditor.prototype.setValue = function (value) {
  this._cmEditor.dispatch({
    changes: {
      from: 0,
      to: this._cmEditor.state.doc.length,
      insert: value
    }
  });
};

/**
 * Sets the focus in the editor.
 */
FeelEditor.prototype.focus = function (position) {
  var cmEditor = this._cmEditor;

  // the Codemirror `focus` method always calls `focus` with `preventScroll`,
  // so we have to focus + scroll manually
  cmEditor.contentDOM.focus();
  cmEditor.focus();
  if (typeof position === 'number') {
    var end = cmEditor.state.doc.length;
    cmEditor.dispatch({
      selection: {
        anchor: position <= end ? position : end
      }
    });
  }
};

/**
 * Returns the current selection ranges. If no text is selected, a single
 * range with the start and end index at the cursor position will be returned.
 *
 * @returns {Object} selection
 * @returns {Array} selection.ranges
 */
FeelEditor.prototype.getSelection = function () {
  return this._cmEditor.state.selection;
};

/**
 * Set variables to be used for autocompletion.
 * @param {Variable[]} variables
 * @returns {void}
 */
FeelEditor.prototype.setVariables = function (variables) {
  this._cmEditor.dispatch({
    effects: autocompletionConf.reconfigure(variablesFacet.of(variables))
  });
};

},{"@bpmn-io/feel-lint":10,"@codemirror/autocomplete":16,"@codemirror/commands":17,"@codemirror/language":18,"@codemirror/lint":19,"@codemirror/state":20,"@codemirror/view":21,"@lezer/highlight":23,"lang-feel":46,"min-dom":50}],10:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cmFeelLinter = void 0;
exports.lintExpression = lintExpression;
var _lezerFeel = require("lezer-feel");
var _language = require("@codemirror/language");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Create an array of syntax errors in the given tree.
 *
 * @param {Tree} syntaxTree
 * @returns {LintMessage[]} array of syntax errors
 */
function lintSyntax(syntaxTree) {
  var lintMessages = [];
  syntaxTree.iterate({
    enter: function enter(node) {
      if (node.type.isError) {
        var error = node.toString();

        /* The error has the pattern [⚠ || ⚠(NodeType)]. The regex extracts the node type from inside the brackets */
        var match = /\((.*?)\)/.exec(error);
        var nodeType = match && match[1];
        var message;
        if (nodeType) {
          message = 'unexpected ' + nodeType;
        } else {
          message = 'expression expected';
        }
        lintMessages.push({
          from: node.from,
          to: node.to,
          severity: 'error',
          message: message,
          type: 'syntaxError'
        });
      }
    }
  });
  return lintMessages;
}

/**
 * Generates lint messages for the given syntax tree.
 *
 * @param {Tree} syntaxTree
 * @returns {LintMessage[]} array of all lint messages
 */
function lintAll(syntaxTree) {
  var lintMessages = _toConsumableArray(lintSyntax(syntaxTree));
  return lintMessages;
}

/**
 * Create an array of syntax errors for the given expression.
 *
 * @param {String} expression
 * @returns {LintMessage[]} array of syntax errors
 */
function lintExpression(expression) {
  var syntaxTree = _lezerFeel.parser.parse(expression);
  var lintMessages = lintAll(syntaxTree);
  return lintMessages;
}

/**
 * CodeMirror extension that provides linting for FEEL expressions.
 *
 * @param {EditorView} editorView
 * @returns {Source} CodeMirror linting source
 */
var cmFeelLinter = function cmFeelLinter() {
  return function (editorView) {
    // don't lint if the Editor is empty
    if (editorView.state.doc.length === 0) {
      return [];
    }
    var tree = (0, _language.syntaxTree)(editorView.state);
    var messages = lintAll(tree);
    return messages.map(function (message) {
      return _objectSpread(_objectSpread({}, message), {}, {
        source: 'syntaxError'
      });
    });
  };
};
exports.cmFeelLinter = cmFeelLinter;

},{"@codemirror/language":18,"lezer-feel":47}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrowIcon = void 0;
exports.CheckboxEntry = CheckboxEntry;
exports.CollapsibleEntry = CollapsibleEntry;
exports.DescriptionContext = exports.DeleteIcon = exports.DebounceInputModule = exports.CreateIcon = void 0;
exports.DescriptionEntry = Description;
exports.DropdownButton = DropdownButton;
exports.ExternalLinkIcon = exports.EventContext = exports.ErrorsContext = void 0;
exports.FeelEntry = FeelEntry;
exports.FeelRequiredIcon = exports.FeelOptionalIcon = void 0;
exports.FeelTemplatingEntry = FeelTemplatingEntry;
exports.FeelTextAreaEntry = FeelTextAreaEntry;
exports.Group = Group;
exports.Header = Header;
exports.HeaderButton = HeaderButton;
exports.LayoutContext = void 0;
exports.ListEntry = List;
exports.ListGroup = ListGroup;
exports.ListItem = ListItem;
exports.NumberFieldEntry = NumberFieldEntry;
exports.Placeholder = Placeholder;
exports.PropertiesPanel = PropertiesPanel;
exports.PropertiesPanelContext = void 0;
exports.SelectEntry = SelectEntry;
exports.SimpleEntry = Simple;
exports.TemplatingEntry = TemplatingEntry;
exports.TextAreaEntry = TextAreaEntry;
exports.TextFieldEntry = TextfieldEntry;
exports.ToggleSwitchEntry = ToggleSwitchEntry;
exports.isCheckboxEntryEdited = isEdited$8;
exports.isFeelEntryEdited = isEdited$7;
exports.isNumberFieldEntryEdited = isEdited$5;
exports.isSelectEntryEdited = isEdited$4;
exports.isSimpleEntryEdited = isEdited$3;
exports.isTemplatingEntryEdited = isEdited$6;
exports.isTextAreaEntryEdited = isEdited$2;
exports.isTextFieldEntryEdited = isEdited$1;
exports.isToggleSwitchEntryEdited = isEdited;
exports.useDescriptionContext = useDescriptionContext;
exports.useError = useError;
exports.useEvent = useEvent;
exports.useKeyFactory = useKeyFactory;
exports.useLayoutState = useLayoutState;
exports.usePrevious = usePrevious;
exports.useShowEntryEvent = useShowEntryEvent;
exports.useStaticCallback = useStaticCallback;
exports.useStickyIntersectionObserver = useStickyIntersectionObserver;
var _hooks = require("../preact/hooks");
var _minDash = require("min-dash");
var _classnames = _interopRequireDefault(require("classnames"));
var _compat = require("../preact/compat");
var _jsxRuntime = require("../preact/jsx-runtime");
var _minDom = require("min-dom");
var _preact = require("../preact");
var _feelers = require("feelers");
var _feelEditor = _interopRequireDefault(require("@bpmn-io/feel-editor"));
var _excluded = ["children", "class", "onClick"],
  _excluded2 = ["id", "element", "items", "component", "label", "open", "onAdd", "onRemove", "autoFocusEntry", "compareFn"],
  _excluded3 = ["autoFocusEntry", "component", "element", "id", "items", "newItems", "onRemove", "open"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ArrowIcon = function ArrowIcon(props) {
  return (0, _jsxRuntime.jsx)("svg", _objectSpread(_objectSpread({}, props), {}, {
    children: (0, _jsxRuntime.jsx)("path", {
      fillRule: "evenodd",
      d: "m11.657 8-4.95 4.95a1 1 0 0 1-1.414-1.414L8.828 8 5.293 4.464A1 1 0 1 1 6.707 3.05L11.657 8Z"
    })
  }));
};
exports.ArrowIcon = ArrowIcon;
ArrowIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16"
};
var CreateIcon = function CreateIcon(props) {
  return (0, _jsxRuntime.jsx)("svg", _objectSpread(_objectSpread({}, props), {}, {
    children: (0, _jsxRuntime.jsx)("path", {
      fillRule: "evenodd",
      d: "M9 13V9h4a1 1 0 0 0 0-2H9V3a1 1 0 1 0-2 0v4H3a1 1 0 1 0 0 2h4v4a1 1 0 0 0 2 0Z"
    })
  }));
};
exports.CreateIcon = CreateIcon;
CreateIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16"
};
var DeleteIcon = function DeleteIcon(props) {
  return (0, _jsxRuntime.jsx)("svg", _objectSpread(_objectSpread({}, props), {}, {
    children: (0, _jsxRuntime.jsx)("path", {
      fillRule: "evenodd",
      d: "M12 6v7c0 1.1-.4 1.55-1.5 1.55h-5C4.4 14.55 4 14.1 4 13V6h8Zm-1.5 1.5h-5v4.3c0 .66.5 1.2 1.111 1.2H9.39c.611 0 1.111-.54 1.111-1.2V7.5ZM13 3h-2l-1-1H6L5 3H3v1.5h10V3Z"
    })
  }));
};
exports.DeleteIcon = DeleteIcon;
DeleteIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16"
};
var ExternalLinkIcon = function ExternalLinkIcon(props) {
  return (0, _jsxRuntime.jsx)("svg", _objectSpread(_objectSpread({}, props), {}, {
    children: (0, _jsxRuntime.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12.637 12.637v-4.72h1.362v4.721c0 .36-.137.676-.411.95-.275.275-.591.412-.95.412H3.362c-.38 0-.703-.132-.967-.396A1.315 1.315 0 0 1 2 12.638V3.362c0-.38.132-.703.396-.967S2.982 2 3.363 2h4.553v1.363H3.363v9.274h9.274ZM14 2H9.28l-.001 1.362h2.408L5.065 9.984l.95.95 6.622-6.622v2.409H14V2Z",
      fill: "#818798"
    })
  }));
};
exports.ExternalLinkIcon = ExternalLinkIcon;
ExternalLinkIcon.defaultProps = {
  width: "16",
  height: "16",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
};
var FeelRequiredIcon = function FeelRequiredIcon(props) {
  return (0, _jsxRuntime.jsxs)("svg", _objectSpread(_objectSpread({}, props), {}, {
    children: [(0, _jsxRuntime.jsx)("path", {
      d: "M5.8 7.06V5.95h4.307v1.11H5.8Zm0 3.071v-1.11h4.307v1.11H5.8Z",
      fill: "currentColor"
    }), (0, _jsxRuntime.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M8 3.268A4.732 4.732 0 1 0 12.732 8H14a6 6 0 1 1-6-6v1.268Z",
      fill: "currentColor"
    }), (0, _jsxRuntime.jsx)("path", {
      d: "m11.28 6.072-.832-.56 1.016-1.224L10 3.848l.312-.912 1.392.584L11.632 2h1.032l-.072 1.52 1.392-.584.312.912-1.464.44 1.008 1.224-.832.552-.864-1.296-.864 1.304Z",
      fill: "currentColor"
    })]
  }));
};
exports.FeelRequiredIcon = FeelRequiredIcon;
FeelRequiredIcon.defaultProps = {
  viewBox: "0 0 16 16",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
};
var FeelOptionalIcon = function FeelOptionalIcon(props) {
  return (0, _jsxRuntime.jsxs)("svg", _objectSpread(_objectSpread({}, props), {}, {
    children: [(0, _jsxRuntime.jsx)("path", {
      d: "M5.845 7.04V5.93h4.307v1.11H5.845Zm0 3.07V9h4.307v1.11H5.845Z",
      fill: "currentColor"
    }), (0, _jsxRuntime.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.286 8a4.714 4.714 0 1 0 9.428 0 4.714 4.714 0 0 0-9.428 0ZM8 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z",
      fill: "currentColor"
    })]
  }));
};
exports.FeelOptionalIcon = FeelOptionalIcon;
FeelOptionalIcon.defaultProps = {
  viewBox: "0 0 16 16",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
};
function Header(props) {
  var element = props.element,
    headerProvider = props.headerProvider;
  var getElementIcon = headerProvider.getElementIcon,
    getDocumentationRef = headerProvider.getDocumentationRef,
    getElementLabel = headerProvider.getElementLabel,
    getTypeLabel = headerProvider.getTypeLabel;
  var label = getElementLabel(element);
  var type = getTypeLabel(element);
  var documentationRef = getDocumentationRef && getDocumentationRef(element);
  var ElementIcon = getElementIcon(element);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-header",
    children: [(0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-header-icon",
      children: ElementIcon && (0, _jsxRuntime.jsx)(ElementIcon, {
        width: "32",
        height: "32",
        viewBox: "0 0 32 32"
      })
    }), (0, _jsxRuntime.jsxs)("div", {
      "class": "bio-properties-panel-header-labels",
      children: [(0, _jsxRuntime.jsx)("div", {
        title: type,
        "class": "bio-properties-panel-header-type",
        children: type
      }), label ? (0, _jsxRuntime.jsx)("div", {
        title: label,
        "class": "bio-properties-panel-header-label",
        children: label
      }) : null]
    }), (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-header-actions",
      children: documentationRef ? (0, _jsxRuntime.jsx)("a", {
        rel: "noopener",
        "class": "bio-properties-panel-header-link",
        href: documentationRef,
        title: "Open documentation",
        target: "_blank",
        children: (0, _jsxRuntime.jsx)(ExternalLinkIcon, {})
      }) : null
    })]
  });
}
var DescriptionContext = (0, _preact.createContext)({
  description: {},
  getDescriptionForId: function getDescriptionForId() {}
});
exports.DescriptionContext = DescriptionContext;
var ErrorsContext = (0, _preact.createContext)({
  errors: {}
});

/**
 * @typedef {Function} <propertiesPanel.showEntry> callback
 *
 * @example
 *
 * useEvent('propertiesPanel.showEntry', ({ focus = false, ...rest }) => {
 *   // ...
 * });
 *
 * @param {Object} context
 * @param {boolean} [context.focus]
 *
 * @returns void
 */
exports.ErrorsContext = ErrorsContext;
var EventContext = (0, _preact.createContext)({
  eventBus: null
});
exports.EventContext = EventContext;
var LayoutContext = (0, _preact.createContext)({
  layout: {},
  setLayout: function setLayout() {},
  getLayoutForKey: function getLayoutForKey() {},
  setLayoutForKey: function setLayoutForKey() {}
});

/**
 * Accesses the global DescriptionContext and returns a description for a given id and element.
 *
 * @example
 * ```jsx
 * function TextField(props) {
 *   const description = useDescriptionContext('input1', element);
 * }
 * ```
 *
 * @param {string} id
 * @param {object} element
 *
 * @returns {string}
 */
exports.PropertiesPanelContext = exports.LayoutContext = LayoutContext;
function useDescriptionContext(id, element) {
  var _useContext = (0, _hooks.useContext)(DescriptionContext),
    getDescriptionForId = _useContext.getDescriptionForId;
  return getDescriptionForId(id, element);
}
function useError(id) {
  var _useContext2 = (0, _hooks.useContext)(ErrorsContext),
    errors = _useContext2.errors;
  return errors[id];
}

/**
 * Subscribe to an event immediately. Update subscription after inputs changed.
 *
 * @param {string} event
 * @param {Function} callback
 */
function useEvent(event, callback, eventBus) {
  var eventContext = (0, _hooks.useContext)(EventContext);
  if (!eventBus) {
    eventBus = eventContext.eventBus;
  }
  var didMount = (0, _hooks.useRef)(false);

  // (1) subscribe immediately
  if (eventBus && !didMount.current) {
    eventBus.on(event, callback);
  }

  // (2) update subscription after inputs changed
  (0, _hooks.useEffect)(function () {
    if (eventBus && didMount.current) {
      eventBus.on(event, callback);
    }
    didMount.current = true;
    return function () {
      if (eventBus) {
        eventBus.off(event, callback);
      }
    };
  }, [callback, event, eventBus]);
}
var KEY_LENGTH = 6;

/**
 * Create a persistent key factory for plain objects without id.
 *
 * @example
 * ```jsx
 * function List({ objects }) {
 *   const getKey = useKeyFactory();
 *   return (<ol>{
 *     objects.map(obj => {
 *       const key = getKey(obj);
 *       return <li key={key}>obj.name</li>
 *     })
 *   }</ol>);
 * }
 * ```
 *
 * @param {any[]} dependencies
 * @returns {(element: object) => string}
 */
function useKeyFactory() {
  var dependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var map = (0, _hooks.useMemo)(function () {
    return new Map();
  }, dependencies);
  var getKey = function getKey(el) {
    var key = map.get(el);
    if (!key) {
      key = Math.random().toString().slice(-KEY_LENGTH);
      map.set(el, key);
    }
    return key;
  };
  return getKey;
}

/**
 * Creates a state that persists in the global LayoutContext.
 *
 * @example
 * ```jsx
 * function Group(props) {
 *   const [ open, setOpen ] = useLayoutState([ 'groups', 'foo', 'open' ], false);
 * }
 * ```
 *
 * @param {(string|number)[]} path
 * @param {any} [defaultValue]
 *
 * @returns {[ any, Function ]}
 */
function useLayoutState(path, defaultValue) {
  var _useContext3 = (0, _hooks.useContext)(LayoutContext),
    getLayoutForKey = _useContext3.getLayoutForKey,
    setLayoutForKey = _useContext3.setLayoutForKey;
  var layoutForKey = getLayoutForKey(path, defaultValue);
  var setState = (0, _hooks.useCallback)(function (newValue) {
    setLayoutForKey(path, newValue);
  }, [setLayoutForKey]);
  return [layoutForKey, setState];
}

/**
 * @pinussilvestrus: we need to introduce our own hook to persist the previous
 * state on updates.
 *
 * cf. https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state
 */

function usePrevious(value) {
  var ref = (0, _hooks.useRef)();
  (0, _hooks.useEffect)(function () {
    ref.current = value;
  });
  return ref.current;
}

/**
 * Subscribe to `propertiesPanel.showEntry`.
 *
 * @param {string} id
 *
 * @returns {import('preact').Ref}
 */
function useShowEntryEvent(id) {
  var _useContext4 = (0, _hooks.useContext)(LayoutContext),
    onShow = _useContext4.onShow;
  var ref = (0, _hooks.useRef)();
  var focus = (0, _hooks.useRef)(false);
  var onShowEntry = (0, _hooks.useCallback)(function (event) {
    if (event.id === id) {
      onShow();
      if (!focus.current) {
        focus.current = true;
      }
    }
  }, [id]);
  (0, _hooks.useEffect)(function () {
    if (focus.current && ref.current) {
      if ((0, _minDash.isFunction)(ref.current.focus)) {
        ref.current.focus();
      }
      if ((0, _minDash.isFunction)(ref.current.select)) {
        ref.current.select();
      }
      focus.current = false;
    }
  });
  useEvent('propertiesPanel.showEntry', onShowEntry);
  return ref;
}

/**
 * @callback setSticky
 * @param {boolean} value
 */

/**
 * Use IntersectionObserver to identify when DOM element is in sticky mode.
 * If sticky is observered setSticky(true) will be called.
 * If sticky mode is left, setSticky(false) will be called.
 *
 *
 * @param {Object} ref
 * @param {string} scrollContainerSelector
 * @param {setSticky} setSticky
 */
function useStickyIntersectionObserver(ref, scrollContainerSelector, setSticky) {
  (0, _hooks.useEffect)(function () {
    var Observer = IntersectionObserver;

    // return early if IntersectionObserver is not available
    if (!Observer) {
      return;
    }
    var observer;
    if (ref.current) {
      var scrollContainer = (0, _minDom.query)(scrollContainerSelector);
      observer = new Observer(function (entries) {
        // The ScrollContainer is unmounted, do not update sticky state
        if (scrollContainer.scrollHeight === 0) {
          return;
        }
        entries.forEach(function (entry) {
          if (entry.intersectionRatio < 1) {
            setSticky(true);
          } else if (entry.intersectionRatio === 1) {
            setSticky(false);
          }
        });
      }, {
        root: scrollContainer,
        rootMargin: '0px 0px 999999% 0px',
        // Use bottom margin to avoid stickyness when scrolling out to bottom
        threshold: [1]
      });
      observer.observe(ref.current);
    }

    // Unobserve if unmounted
    return function () {
      if (ref.current && observer) {
        observer.unobserve(ref.current);
      }
    };
  }, [ref, scrollContainerSelector, setSticky]);
}

/**
 * Creates a static function reference with changing body.
 * This is necessary when external libraries require a callback function
 * that has references to state variables.
 *
 * Usage:
 * const callback = useStaticCallback((val) => {val === currentState});
 *
 * The `callback` reference is static and can be safely used in external
 * libraries or as a prop that does not cause rerendering of children.
 *
 * @param {Function} callback function with changing reference
 * @returns {Function} static function reference
 */
function useStaticCallback(callback) {
  var callbackRef = (0, _hooks.useRef)(callback);
  callbackRef.current = callback;
  return (0, _hooks.useCallback)(function () {
    return callbackRef.current.apply(callbackRef, arguments);
  }, []);
}
function Group(props) {
  var element = props.element,
    _props$entries = props.entries,
    entries = _props$entries === void 0 ? [] : _props$entries,
    id = props.id,
    label = props.label,
    _props$shouldOpen = props.shouldOpen,
    shouldOpen = _props$shouldOpen === void 0 ? false : _props$shouldOpen;
  var groupRef = (0, _hooks.useRef)(null);
  var _useLayoutState = useLayoutState(['groups', id, 'open'], shouldOpen),
    _useLayoutState2 = _slicedToArray(_useLayoutState, 2),
    open = _useLayoutState2[0],
    setOpen = _useLayoutState2[1];
  var onShow = (0, _hooks.useCallback)(function () {
    return setOpen(true);
  }, [setOpen]);
  var toggleOpen = function toggleOpen() {
    return setOpen(!open);
  };
  var _useState = (0, _hooks.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    edited = _useState2[0],
    setEdited = _useState2[1];
  var _useState3 = (0, _hooks.useState)(false),
    _useState4 = _slicedToArray(_useState3, 2),
    sticky = _useState4[0],
    setSticky = _useState4[1];

  // set edited state depending on all entries
  (0, _hooks.useEffect)(function () {
    var hasOneEditedEntry = entries.find(function (entry) {
      var id = entry.id,
        isEdited = entry.isEdited;
      var entryNode = (0, _minDom.query)("[data-entry-id=\"".concat(id, "\"]"));
      if (!(0, _minDash.isFunction)(isEdited) || !entryNode) {
        return false;
      }
      var inputNode = (0, _minDom.query)('.bio-properties-panel-input', entryNode);
      return isEdited(inputNode);
    });
    setEdited(hasOneEditedEntry);
  }, [entries]);

  // set css class when group is sticky to top
  useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
  var propertiesPanelContext = _objectSpread(_objectSpread({}, (0, _hooks.useContext)(LayoutContext)), {}, {
    onShow: onShow
  });
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-group",
    "data-group-id": 'group-' + id,
    ref: groupRef,
    children: [(0, _jsxRuntime.jsxs)("div", {
      "class": (0, _classnames["default"])('bio-properties-panel-group-header', edited ? '' : 'empty', open ? 'open' : '', sticky && open ? 'sticky' : ''),
      onClick: toggleOpen,
      children: [(0, _jsxRuntime.jsx)("div", {
        title: label,
        "class": "bio-properties-panel-group-header-title",
        children: label
      }), (0, _jsxRuntime.jsxs)("div", {
        "class": "bio-properties-panel-group-header-buttons",
        children: [edited && (0, _jsxRuntime.jsx)(DataMarker, {}), (0, _jsxRuntime.jsx)("button", {
          title: "Toggle section",
          "class": "bio-properties-panel-group-header-button bio-properties-panel-arrow",
          children: (0, _jsxRuntime.jsx)(ArrowIcon, {
            "class": open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
          })
        })]
      })]
    }), (0, _jsxRuntime.jsx)("div", {
      "class": (0, _classnames["default"])('bio-properties-panel-group-entries', open ? 'open' : ''),
      children: (0, _jsxRuntime.jsx)(LayoutContext.Provider, {
        value: propertiesPanelContext,
        children: entries.map(function (entry) {
          var Component = entry.component,
            id = entry.id;
          return (0, _preact.createElement)(Component, _objectSpread(_objectSpread({}, entry), {}, {
            element: element,
            key: id
          }));
        })
      })
    })]
  });
}
function DataMarker() {
  return (0, _jsxRuntime.jsx)("div", {
    title: "Section contains data",
    "class": "bio-properties-panel-dot"
  });
}

/**
 * @typedef { {
 *  text: (element: object) => string,
 *  icon?: (element: Object) => import('preact').Component
 * } } PlaceholderDefinition
 *
 * @param { PlaceholderDefinition } props
 */
function Placeholder(props) {
  var text = props.text,
    Icon = props.icon;
  return (0, _jsxRuntime.jsx)("div", {
    "class": "bio-properties-panel open",
    children: (0, _jsxRuntime.jsxs)("section", {
      "class": "bio-properties-panel-placeholder",
      children: [Icon && (0, _jsxRuntime.jsx)(Icon, {
        "class": "bio-properties-panel-placeholder-icon"
      }), (0, _jsxRuntime.jsx)("p", {
        "class": "bio-properties-panel-placeholder-text",
        children: text
      })]
    })
  });
}
var DEFAULT_LAYOUT = {
  open: true
};
var DEFAULT_DESCRIPTION = {};

/**
 * @typedef { {
 *    component: import('preact').Component,
 *    id: String,
 *    isEdited?: Function
 * } } EntryDefinition
 *
 * @typedef { {
 *    autoFocusEntry: String,
 *    autoOpen?: Boolean,
 *    entries: Array<EntryDefinition>,
 *    id: String,
 *    label: String,
 *    remove: (event: MouseEvent) => void
 * } } ListItemDefinition
 *
 * @typedef { {
 *    add: (event: MouseEvent) => void,
 *    component: import('preact').Component,
 *    element: Object,
 *    id: String,
 *    items: Array<ListItemDefinition>,
 *    label: String,
 *    shouldSort?: Boolean,
 *    shouldOpen?: Boolean
 * } } ListGroupDefinition
 *
 * @typedef { {
 *    component?: import('preact').Component,
 *    entries: Array<EntryDefinition>,
 *    id: String,
 *    label: String,
 *    shouldOpen?: Boolean
 * } } GroupDefinition
 *
 *  @typedef { {
 *    [id: String]: GetDescriptionFunction
 * } } DescriptionConfig
 *
 * @callback { {
 * @param {string} id
 * @param {Object} element
 * @returns {string}
 * } } GetDescriptionFunction
 *
 * @typedef { {
 *  getEmpty: (element: object) => import('./components/Placeholder').PlaceholderDefinition,
 *  getMultiple: (element: Object) => import('./components/Placeholder').PlaceholderDefinition
 * } } PlaceholderProvider
 *
 */

/**
 * A basic properties panel component. Describes *how* content will be rendered, accepts
 * data from implementor to describe *what* will be rendered.
 *
 * @param {Object} props
 * @param {Object|Array} props.element
 * @param {import('./components/Header').HeaderProvider} props.headerProvider
 * @param {PlaceholderProvider} [props.placeholderProvider]
 * @param {Array<GroupDefinition|ListGroupDefinition>} props.groups
 * @param {Object} [props.layoutConfig]
 * @param {Function} [props.layoutChanged]
 * @param {DescriptionConfig} [props.descriptionConfig]
 * @param {Function} [props.descriptionLoaded]
 * @param {Object} [props.eventBus]
 */
function PropertiesPanel(props) {
  var element = props.element,
    headerProvider = props.headerProvider,
    placeholderProvider = props.placeholderProvider,
    groups = props.groups,
    layoutConfig = props.layoutConfig,
    layoutChanged = props.layoutChanged,
    descriptionConfig = props.descriptionConfig,
    descriptionLoaded = props.descriptionLoaded,
    eventBus = props.eventBus;

  // set-up layout context
  var _useState5 = (0, _hooks.useState)(createLayout(layoutConfig)),
    _useState6 = _slicedToArray(_useState5, 2),
    layout = _useState6[0],
    setLayout = _useState6[1];

  // react to external changes in the layout config
  useUpdateLayoutEffect(function () {
    var newLayout = createLayout(layoutConfig);
    setLayout(newLayout);
  }, [layoutConfig]);
  (0, _hooks.useEffect)(function () {
    if (typeof layoutChanged === 'function') {
      layoutChanged(layout);
    }
  }, [layout, layoutChanged]);
  var getLayoutForKey = function getLayoutForKey(key, defaultValue) {
    return (0, _minDash.get)(layout, key, defaultValue);
  };
  var setLayoutForKey = function setLayoutForKey(key, config) {
    var newLayout = (0, _minDash.assign)({}, layout);
    (0, _minDash.set)(newLayout, key, config);
    setLayout(newLayout);
  };
  var layoutContext = {
    layout: layout,
    setLayout: setLayout,
    getLayoutForKey: getLayoutForKey,
    setLayoutForKey: setLayoutForKey
  };

  // set-up description context
  var description = (0, _hooks.useMemo)(function () {
    return createDescriptionContext(descriptionConfig);
  }, [descriptionConfig]);
  (0, _hooks.useEffect)(function () {
    if (typeof descriptionLoaded === 'function') {
      descriptionLoaded(description);
    }
  }, [description, descriptionLoaded]);
  var getDescriptionForId = function getDescriptionForId(id, element) {
    return description[id] && description[id](element);
  };
  var descriptionContext = {
    description: description,
    getDescriptionForId: getDescriptionForId
  };
  var _useState7 = (0, _hooks.useState)({}),
    _useState8 = _slicedToArray(_useState7, 2),
    errors = _useState8[0],
    setErrors = _useState8[1];
  var onSetErrors = function onSetErrors(_ref) {
    var errors = _ref.errors;
    return setErrors(errors);
  };
  useEvent('propertiesPanel.setErrors', onSetErrors, eventBus);
  var errorsContext = {
    errors: errors
  };
  var eventContext = {
    eventBus: eventBus
  };
  var propertiesPanelContext = {
    element: element
  };

  // empty state
  if (placeholderProvider && !element) {
    return (0, _jsxRuntime.jsx)(Placeholder, _objectSpread({}, placeholderProvider.getEmpty()));
  }

  // multiple state
  if (placeholderProvider && (0, _minDash.isArray)(element)) {
    return (0, _jsxRuntime.jsx)(Placeholder, _objectSpread({}, placeholderProvider.getMultiple()));
  }
  return (0, _jsxRuntime.jsx)(LayoutContext.Provider, {
    value: propertiesPanelContext,
    children: (0, _jsxRuntime.jsx)(ErrorsContext.Provider, {
      value: errorsContext,
      children: (0, _jsxRuntime.jsx)(DescriptionContext.Provider, {
        value: descriptionContext,
        children: (0, _jsxRuntime.jsx)(LayoutContext.Provider, {
          value: layoutContext,
          children: (0, _jsxRuntime.jsx)(EventContext.Provider, {
            value: eventContext,
            children: (0, _jsxRuntime.jsxs)("div", {
              "class": (0, _classnames["default"])('bio-properties-panel', layout.open ? 'open' : ''),
              children: [(0, _jsxRuntime.jsx)(Header, {
                element: element,
                headerProvider: headerProvider
              }), (0, _jsxRuntime.jsx)("div", {
                "class": "bio-properties-panel-scroll-container",
                children: groups.map(function (group) {
                  var _group$component = group.component,
                    Component = _group$component === void 0 ? Group : _group$component,
                    id = group.id;
                  return (0, _preact.createElement)(Component, _objectSpread(_objectSpread({}, group), {}, {
                    key: id,
                    element: element
                  }));
                })
              })]
            })
          })
        })
      })
    })
  });
}

// helpers //////////////////

function createLayout() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LAYOUT;
  return _objectSpread(_objectSpread({}, defaults), overrides);
}
function createDescriptionContext() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, DEFAULT_DESCRIPTION), overrides);
}

// hooks //////////////////

/**
 * This hook behaves like useLayoutEffect, but does not trigger on the first render.
 *
 * @param {Function} effect
 * @param {Array} deps
 */
function useUpdateLayoutEffect(effect, deps) {
  var isMounted = (0, _hooks.useRef)(false);
  (0, _hooks.useLayoutEffect)(function () {
    if (isMounted.current) {
      return effect();
    } else {
      isMounted.current = true;
    }
  }, deps);
}
function DropdownButton(props) {
  var className = props["class"],
    children = props.children,
    _props$menuItems = props.menuItems,
    menuItems = _props$menuItems === void 0 ? [] : _props$menuItems;
  var dropdownRef = (0, _hooks.useRef)(null);
  var menuRef = (0, _hooks.useRef)(null);
  var _useState9 = (0, _hooks.useState)(false),
    _useState10 = _slicedToArray(_useState9, 2),
    open = _useState10[0],
    setOpen = _useState10[1];
  var close = function close() {
    return setOpen(false);
  };
  function onDropdownToggle(event) {
    if (menuRef.current && menuRef.current.contains(event.target)) {
      return;
    }
    event.stopPropagation();
    setOpen(function (open) {
      return !open;
    });
  }
  function onActionClick(event, action) {
    event.stopPropagation();
    close();
    action();
  }
  useGlobalClick([dropdownRef.current], function () {
    return close();
  });
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-dropdown-button', {
      open: open
    }, className),
    onClick: onDropdownToggle,
    ref: dropdownRef,
    children: [children, (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-dropdown-button__menu",
      ref: menuRef,
      children: menuItems.map(function (item, index) {
        return (0, _jsxRuntime.jsx)(MenuItem, {
          onClick: onActionClick,
          item: item
        }, index);
      })
    })]
  });
}
function MenuItem(_ref2) {
  var item = _ref2.item,
    _onClick = _ref2.onClick;
  if (item.separator) {
    return (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-dropdown-button__menu-item bio-properties-panel-dropdown-button__menu-item--separator"
    });
  }
  if (item.action) {
    return (0, _jsxRuntime.jsx)("button", {
      "class": "bio-properties-panel-dropdown-button__menu-item bio-properties-panel-dropdown-button__menu-item--actionable",
      onClick: function onClick(event) {
        return _onClick(event, item.action);
      },
      children: item.entry
    });
  }
  return (0, _jsxRuntime.jsx)("div", {
    "class": "bio-properties-panel-dropdown-button__menu-item",
    children: item.entry
  });
}

/**
 *
 * @param {Array<null | Element>} ignoredElements
 * @param {Function} callback
 */
function useGlobalClick(ignoredElements, callback) {
  (0, _hooks.useEffect)(function () {
    /**
     * @param {MouseEvent} event
     */
    function listener(event) {
      if (ignoredElements.some(function (element) {
        return element && element.contains(event.target);
      })) {
        return;
      }
      callback();
    }
    document.addEventListener('click', listener, {
      capture: true
    });
    return function () {
      return document.removeEventListener('click', listener, {
        capture: true
      });
    };
  }, [].concat(_toConsumableArray(ignoredElements), [callback]));
}
function HeaderButton(props) {
  var _props$children = props.children,
    children = _props$children === void 0 ? null : _props$children,
    classname = props["class"],
    _props$onClick = props.onClick,
    onClick = _props$onClick === void 0 ? function () {} : _props$onClick,
    otherProps = _objectWithoutProperties(props, _excluded);
  return (0, _jsxRuntime.jsx)("button", _objectSpread(_objectSpread({}, otherProps), {}, {
    onClick: onClick,
    "class": (0, _classnames["default"])('bio-properties-panel-group-header-button', classname),
    children: children
  }));
}
function CollapsibleEntry(props) {
  var element = props.element,
    _props$entries2 = props.entries,
    entries = _props$entries2 === void 0 ? [] : _props$entries2,
    id = props.id,
    label = props.label,
    shouldOpen = props.open,
    remove = props.remove;
  var _useState11 = (0, _hooks.useState)(shouldOpen),
    _useState12 = _slicedToArray(_useState11, 2),
    open = _useState12[0],
    setOpen = _useState12[1];
  var toggleOpen = function toggleOpen() {
    return setOpen(!open);
  };
  var _useContext5 = (0, _hooks.useContext)(LayoutContext),
    onShow = _useContext5.onShow;
  var propertiesPanelContext = _objectSpread(_objectSpread({}, (0, _hooks.useContext)(LayoutContext)), {}, {
    onShow: (0, _hooks.useCallback)(function () {
      setOpen(true);
      if ((0, _minDash.isFunction)(onShow)) {
        onShow();
      }
    }, [onShow, setOpen])
  });

  // todo(pinussilvestrus): translate once we have a translate mechanism for the core
  var placeholderLabel = '<empty>';
  return (0, _jsxRuntime.jsxs)("div", {
    "data-entry-id": id,
    "class": (0, _classnames["default"])('bio-properties-panel-collapsible-entry', open ? 'open' : ''),
    children: [(0, _jsxRuntime.jsxs)("div", {
      "class": "bio-properties-panel-collapsible-entry-header",
      onClick: toggleOpen,
      children: [(0, _jsxRuntime.jsx)("div", {
        title: label || placeholderLabel,
        "class": (0, _classnames["default"])('bio-properties-panel-collapsible-entry-header-title', !label && 'empty'),
        children: label || placeholderLabel
      }), (0, _jsxRuntime.jsx)("button", {
        title: "Toggle list item",
        "class": "bio-properties-panel-arrow  bio-properties-panel-collapsible-entry-arrow",
        children: (0, _jsxRuntime.jsx)(ArrowIcon, {
          "class": open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
        })
      }), remove ? (0, _jsxRuntime.jsx)("button", {
        title: "Delete item",
        "class": "bio-properties-panel-remove-entry",
        onClick: remove,
        children: (0, _jsxRuntime.jsx)(DeleteIcon, {})
      }) : null]
    }), (0, _jsxRuntime.jsx)("div", {
      "class": (0, _classnames["default"])('bio-properties-panel-collapsible-entry-entries', open ? 'open' : ''),
      children: (0, _jsxRuntime.jsx)(LayoutContext.Provider, {
        value: propertiesPanelContext,
        children: entries.map(function (entry) {
          var Component = entry.component,
            id = entry.id;
          return (0, _preact.createElement)(Component, _objectSpread(_objectSpread({}, entry), {}, {
            element: element,
            key: id
          }));
        })
      })
    })]
  });
}
function ListItem(props) {
  var autoFocusEntry = props.autoFocusEntry,
    autoOpen = props.autoOpen;

  // focus specified entry on auto open
  (0, _hooks.useEffect)(function () {
    if (autoOpen && autoFocusEntry) {
      var entry = (0, _minDom.query)("[data-entry-id=\"".concat(autoFocusEntry, "\"]"));
      var focusableInput = (0, _minDom.query)('.bio-properties-panel-input', entry);
      if (focusableInput) {
        if ((0, _minDash.isFunction)(focusableInput.select)) {
          focusableInput.select();
        } else if ((0, _minDash.isFunction)(focusableInput.focus)) {
          focusableInput.focus();
        }
      }
    }
  }, [autoOpen, autoFocusEntry]);
  return (0, _jsxRuntime.jsx)("div", {
    "class": "bio-properties-panel-list-item",
    children: (0, _jsxRuntime.jsx)(CollapsibleEntry, _objectSpread(_objectSpread({}, props), {}, {
      open: autoOpen
    }))
  });
}
var noop$3 = function noop$3() {};

/**
 * @param {import('../PropertiesPanel').ListGroupDefinition} props
 */
function ListGroup(props) {
  var add = props.add,
    element = props.element,
    id = props.id,
    items = props.items,
    label = props.label,
    _props$shouldOpen2 = props.shouldOpen,
    shouldOpen = _props$shouldOpen2 === void 0 ? true : _props$shouldOpen2,
    _props$shouldSort = props.shouldSort,
    shouldSort = _props$shouldSort === void 0 ? true : _props$shouldSort;
  var groupRef = (0, _hooks.useRef)(null);
  var _useLayoutState3 = useLayoutState(['groups', id, 'open'], false),
    _useLayoutState4 = _slicedToArray(_useLayoutState3, 2),
    open = _useLayoutState4[0],
    setOpen = _useLayoutState4[1];
  var _useState13 = (0, _hooks.useState)(false),
    _useState14 = _slicedToArray(_useState13, 2),
    sticky = _useState14[0],
    setSticky = _useState14[1];
  var onShow = (0, _hooks.useCallback)(function () {
    return setOpen(true);
  }, [setOpen]);
  var _useState15 = (0, _hooks.useState)([]),
    _useState16 = _slicedToArray(_useState15, 2),
    ordering = _useState16[0],
    setOrdering = _useState16[1];
  var _useState17 = (0, _hooks.useState)(false),
    _useState18 = _slicedToArray(_useState17, 2),
    newItemAdded = _useState18[0],
    setNewItemAdded = _useState18[1];

  // Flag to mark that add button was clicked in the last render cycle
  var _useState19 = (0, _hooks.useState)(false),
    _useState20 = _slicedToArray(_useState19, 2),
    addTriggered = _useState20[0],
    setAddTriggered = _useState20[1];
  var prevItems = usePrevious(items);
  var prevElement = usePrevious(element);
  var elementChanged = element !== prevElement;
  var shouldHandleEffects = !elementChanged && (shouldSort || shouldOpen);

  // reset initial ordering when element changes (before first render)
  if (elementChanged) {
    setOrdering(createOrdering(shouldSort ? sortItems(items) : items));
  }

  // keep ordering in sync to items - and open changes

  // (0) set initial ordering from given items
  (0, _hooks.useEffect)(function () {
    if (!prevItems || !shouldSort) {
      setOrdering(createOrdering(items));
    }
  }, [items, element]);

  // (1) items were added
  (0, _hooks.useEffect)(function () {
    // reset addTriggered flag
    setAddTriggered(false);
    if (shouldHandleEffects && prevItems && items.length > prevItems.length) {
      var _add = [];
      items.forEach(function (item) {
        if (!ordering.includes(item.id)) {
          _add.push(item.id);
        }
      });
      var newOrdering = ordering;

      // open if not open, configured and triggered by add button
      //
      // TODO(marstamm): remove once we refactor layout handling for listGroups.
      // Ideally, opening should be handled as part of the `add` callback and
      // not be a concern for the ListGroup component.
      if (addTriggered && !open && shouldOpen) {
        toggleOpen();
      }

      // filter when not open and configured
      if (!open && shouldSort) {
        newOrdering = createOrdering(sortItems(items));
      }

      // add new items on top or bottom depending on sorting behavior
      newOrdering = newOrdering.filter(function (item) {
        return !_add.includes(item);
      });
      if (shouldSort) {
        var _newOrdering;
        (_newOrdering = newOrdering).unshift.apply(_newOrdering, _add);
      } else {
        var _newOrdering2;
        (_newOrdering2 = newOrdering).push.apply(_newOrdering2, _add);
      }
      setOrdering(newOrdering);
      setNewItemAdded(addTriggered);
    } else {
      setNewItemAdded(false);
    }
  }, [items, open, shouldHandleEffects, addTriggered]);

  // (2) sort items on open if shouldSort is set
  (0, _hooks.useEffect)(function () {
    if (shouldSort && open && !newItemAdded) {
      setOrdering(createOrdering(sortItems(items)));
    }
  }, [open, shouldSort]);

  // (3) items were deleted
  (0, _hooks.useEffect)(function () {
    if (shouldHandleEffects && prevItems && items.length < prevItems.length) {
      var keep = [];
      ordering.forEach(function (o) {
        if (getItem(items, o)) {
          keep.push(o);
        }
      });
      setOrdering(keep);
    }
  }, [items, shouldHandleEffects]);

  // set css class when group is sticky to top
  useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
  var toggleOpen = function toggleOpen() {
    return setOpen(!open);
  };
  var hasItems = !!items.length;
  var propertiesPanelContext = _objectSpread(_objectSpread({}, (0, _hooks.useContext)(LayoutContext)), {}, {
    onShow: onShow
  });
  var handleAddClick = function handleAddClick(e) {
    setAddTriggered(true);
    add(e);
  };
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-group",
    "data-group-id": 'group-' + id,
    ref: groupRef,
    children: [(0, _jsxRuntime.jsxs)("div", {
      "class": (0, _classnames["default"])('bio-properties-panel-group-header', hasItems ? '' : 'empty', hasItems && open ? 'open' : '', sticky && open ? 'sticky' : ''),
      onClick: hasItems ? toggleOpen : noop$3,
      children: [(0, _jsxRuntime.jsx)("div", {
        title: label,
        "class": "bio-properties-panel-group-header-title",
        children: label
      }), (0, _jsxRuntime.jsxs)("div", {
        "class": "bio-properties-panel-group-header-buttons",
        children: [add ? (0, _jsxRuntime.jsxs)("button", {
          title: "Create new list item",
          "class": "bio-properties-panel-group-header-button bio-properties-panel-add-entry",
          onClick: handleAddClick,
          children: [(0, _jsxRuntime.jsx)(CreateIcon, {}), !hasItems ? (0, _jsxRuntime.jsx)("span", {
            "class": "bio-properties-panel-add-entry-label",
            children: "Create"
          }) : null]
        }) : null, hasItems ? (0, _jsxRuntime.jsx)("div", {
          title: "List contains ".concat(items.length, " item").concat(items.length != 1 ? 's' : ''),
          "class": "bio-properties-panel-list-badge",
          children: items.length
        }) : null, hasItems ? (0, _jsxRuntime.jsx)("button", {
          title: "Toggle section",
          "class": "bio-properties-panel-group-header-button bio-properties-panel-arrow",
          children: (0, _jsxRuntime.jsx)(ArrowIcon, {
            "class": open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
          })
        }) : null]
      })]
    }), (0, _jsxRuntime.jsx)("div", {
      "class": (0, _classnames["default"])('bio-properties-panel-list', open && hasItems ? 'open' : ''),
      children: (0, _jsxRuntime.jsx)(LayoutContext.Provider, {
        value: propertiesPanelContext,
        children: ordering.map(function (o, index) {
          var item = getItem(items, o);
          if (!item) {
            return;
          }
          var id = item.id;

          // if item was added, open it
          // Existing items will not be affected as autoOpen is only applied on first render
          var autoOpen = newItemAdded;
          return (0, _preact.createElement)(ListItem, _objectSpread(_objectSpread({}, item), {}, {
            autoOpen: autoOpen,
            element: element,
            index: index,
            key: id
          }));
        })
      })
    })]
  });
}

// helpers ////////////////////

/**
 * Sorts given items alphanumeric by label
 */
function sortItems(items) {
  return (0, _minDash.sortBy)(items, function (i) {
    return i.label.toLowerCase();
  });
}
function getItem(items, id) {
  return (0, _minDash.find)(items, function (i) {
    return i.id === id;
  });
}
function createOrdering(items) {
  return items.map(function (i) {
    return i.id;
  });
}
function Description(props) {
  var element = props.element,
    forId = props.forId,
    value = props.value;
  var contextDescription = useDescriptionContext(forId, element);
  var description = value || contextDescription;
  if (description) {
    return (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-description",
      children: description
    });
  }
}
function Checkbox(props) {
  var id = props.id,
    label = props.label,
    onChange = props.onChange,
    disabled = props.disabled,
    _props$value = props.value,
    value = _props$value === void 0 ? false : _props$value,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var _useState21 = (0, _hooks.useState)(value),
    _useState22 = _slicedToArray(_useState21, 2),
    localValue = _useState22[0],
    setLocalValue = _useState22[1];
  var handleChangeCallback = function handleChangeCallback(_ref3) {
    var target = _ref3.target;
    onChange(target.checked);
  };
  var handleChange = function handleChange(e) {
    handleChangeCallback(e);
    setLocalValue(e.target.value);
  };
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  var ref = useShowEntryEvent(id);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-checkbox",
    children: [(0, _jsxRuntime.jsx)("input", {
      ref: ref,
      id: prefixId$7(id),
      name: id,
      onFocus: onFocus,
      onBlur: onBlur,
      type: "checkbox",
      "class": "bio-properties-panel-input",
      onChange: handleChange,
      checked: localValue,
      disabled: disabled
    }), (0, _jsxRuntime.jsx)("label", {
      "for": prefixId$7(id),
      "class": "bio-properties-panel-label",
      children: label
    })]
  });
}

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {String} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 * @param {boolean} [props.disabled]
 */
function CheckboxEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    label = props.label,
    getValue = props.getValue,
    setValue = props.setValue,
    disabled = props.disabled,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var value = getValue(element);
  var error = useError(id);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-entry bio-properties-panel-checkbox-entry",
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(Checkbox, {
      disabled: disabled,
      id: id,
      label: label,
      onChange: setValue,
      onFocus: onFocus,
      onBlur: onBlur,
      value: value
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function isEdited$8(node) {
  return node && !!node.checked;
}

// helpers /////////////////

function prefixId$7(id) {
  return "bio-properties-panel-".concat(id);
}
var useBufferedFocus$1 = function useBufferedFocus$1(editor, ref) {
  var _useState23 = (0, _hooks.useState)(undefined),
    _useState24 = _slicedToArray(_useState23, 2),
    buffer = _useState24[0],
    setBuffer = _useState24[1];
  ref.current = (0, _hooks.useMemo)(function () {
    return {
      focus: function focus(offset) {
        if (editor) {
          editor.focus(offset);
        } else {
          if (typeof offset === 'undefined') {
            offset = Infinity;
          }
          setBuffer(offset);
        }
      }
    };
  }, [editor]);
  (0, _hooks.useEffect)(function () {
    if (typeof buffer !== 'undefined' && editor) {
      editor.focus(buffer);
      setBuffer(false);
    }
  }, [editor, buffer]);
};
var CodeEditor$1 = (0, _compat.forwardRef)(function (props, ref) {
  var onInput = props.onInput,
    disabled = props.disabled,
    tooltipContainer = props.tooltipContainer,
    enableGutters = props.enableGutters,
    value = props.value,
    _props$onLint = props.onLint,
    onLint = _props$onLint === void 0 ? function () {} : _props$onLint,
    _props$contentAttribu = props.contentAttributes,
    contentAttributes = _props$contentAttribu === void 0 ? {} : _props$contentAttribu,
    _props$hostLanguage = props.hostLanguage,
    hostLanguage = _props$hostLanguage === void 0 ? null : _props$hostLanguage,
    _props$singleLine = props.singleLine,
    singleLine = _props$singleLine === void 0 ? false : _props$singleLine;
  var inputRef = (0, _hooks.useRef)();
  var _useState25 = (0, _hooks.useState)(),
    _useState26 = _slicedToArray(_useState25, 2),
    editor = _useState26[0],
    setEditor = _useState26[1];
  var _useState27 = (0, _hooks.useState)(value || ''),
    _useState28 = _slicedToArray(_useState27, 2),
    localValue = _useState28[0],
    setLocalValue = _useState28[1];
  useBufferedFocus$1(editor, ref);
  var handleInput = useStaticCallback(function (newValue) {
    onInput(newValue);
    setLocalValue(newValue);
  });
  (0, _hooks.useEffect)(function () {
    var editor;
    editor = new _feelers.FeelersEditor({
      container: inputRef.current,
      onChange: handleInput,
      value: localValue,
      onLint: onLint,
      contentAttributes: contentAttributes,
      tooltipContainer: tooltipContainer,
      enableGutters: enableGutters,
      hostLanguage: hostLanguage,
      singleLine: singleLine
    });
    setEditor(editor);
    return function () {
      onLint([]);
      inputRef.current.innerHTML = '';
      setEditor(null);
    };
  }, []);
  (0, _hooks.useEffect)(function () {
    if (!editor) {
      return;
    }
    if (value === localValue) {
      return;
    }
    editor.setValue(value);
    setLocalValue(value);
  }, [value]);
  var handleClick = function handleClick() {
    ref.current.focus();
  };
  return (0, _jsxRuntime.jsx)("div", {
    name: props.name,
    "class": (0, _classnames["default"])('bio-properties-panel-feelers-editor bio-properties-panel-input', localValue ? 'edited' : null, disabled ? 'disabled' : null),
    ref: inputRef,
    onClick: handleClick
  });
});
var useBufferedFocus = function useBufferedFocus(editor, ref) {
  var _useState29 = (0, _hooks.useState)(undefined),
    _useState30 = _slicedToArray(_useState29, 2),
    buffer = _useState30[0],
    setBuffer = _useState30[1];
  ref.current = (0, _hooks.useMemo)(function () {
    return {
      focus: function focus(offset) {
        if (editor) {
          editor.focus(offset);
        } else {
          if (typeof offset === 'undefined') {
            offset = Infinity;
          }
          setBuffer(offset);
        }
      }
    };
  }, [editor]);
  (0, _hooks.useEffect)(function () {
    if (typeof buffer !== 'undefined' && editor) {
      editor.focus(buffer);
      setBuffer(false);
    }
  }, [editor, buffer]);
};
var CodeEditor = (0, _compat.forwardRef)(function (props, ref) {
  var value = props.value,
    onInput = props.onInput,
    onFeelToggle = props.onFeelToggle,
    _props$onLint2 = props.onLint,
    onLint = _props$onLint2 === void 0 ? function () {} : _props$onLint2,
    disabled = props.disabled,
    tooltipContainer = props.tooltipContainer,
    variables = props.variables;
  var inputRef = (0, _hooks.useRef)();
  var _useState31 = (0, _hooks.useState)(),
    _useState32 = _slicedToArray(_useState31, 2),
    editor = _useState32[0],
    setEditor = _useState32[1];
  var _useState33 = (0, _hooks.useState)(value || ''),
    _useState34 = _slicedToArray(_useState33, 2),
    localValue = _useState34[0],
    setLocalValue = _useState34[1];
  useBufferedFocus(editor, ref);
  var handleInput = useStaticCallback(function (newValue) {
    onInput(newValue);
    setLocalValue(newValue);
  });
  (0, _hooks.useEffect)(function () {
    var editor;

    /* Trigger FEEL toggle when
     *
     * - `backspace` is pressed
     * - AND the cursor is at the beginning of the input
     */
    var onKeyDown = function onKeyDown(e) {
      if (e.key !== 'Backspace' || !editor) {
        return;
      }
      var selection = editor.getSelection();
      var range = selection.ranges[selection.mainIndex];
      if (range.from === 0 && range.to === 0) {
        onFeelToggle();
      }
    };
    editor = new _feelEditor["default"]({
      container: inputRef.current,
      onChange: handleInput,
      onKeyDown: onKeyDown,
      onLint: onLint,
      tooltipContainer: tooltipContainer,
      value: localValue,
      variables: variables
    });
    setEditor(editor);
    return function () {
      onLint([]);
      inputRef.current.innerHTML = '';
      setEditor(null);
    };
  }, []);
  (0, _hooks.useEffect)(function () {
    if (!editor) {
      return;
    }
    if (value === localValue) {
      return;
    }
    editor.setValue(value);
    setLocalValue(value);
  }, [value]);
  (0, _hooks.useEffect)(function () {
    if (!editor) {
      return;
    }
    editor.setVariables(variables);
  }, [variables]);
  var handleClick = function handleClick() {
    ref.current.focus();
  };
  return (0, _jsxRuntime.jsx)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-feel-editor-container', disabled ? 'disabled' : null),
    children: (0, _jsxRuntime.jsx)("div", {
      name: props.name,
      "class": (0, _classnames["default"])('bio-properties-panel-input', localValue ? 'edited' : null),
      ref: inputRef,
      onClick: handleClick
    })
  });
});
function FeelIndicator(props) {
  var active = props.active;
  if (!active) {
    return null;
  }
  return (0, _jsxRuntime.jsx)("span", {
    "class": "bio-properties-panel-feel-indicator",
    children: "="
  });
}
var noop$2 = function noop$2() {};

/**
 * @param {Object} props
 * @param {Object} props.label
 * @param {String} props.feel
 */
function FeelIcon(props) {
  var label = props.label,
    _props$feel = props.feel,
    feel = _props$feel === void 0 ? false : _props$feel,
    active = props.active,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    _props$onClick2 = props.onClick,
    onClick = _props$onClick2 === void 0 ? noop$2 : _props$onClick2;
  var feelRequiredLabel = ' must be a FEEL expression';
  var feelOptionalLabel = ' can optionally be a FEEL expression';
  var handleClick = function handleClick(e) {
    onClick(e);

    // when pointer event was created from keyboard, keep focus on button
    if (!e.pointerType) {
      e.stopPropagation();
    }
  };
  return (0, _jsxRuntime.jsx)("button", {
    "class": (0, _classnames["default"])('bio-properties-panel-feel-icon', active ? 'active' : null, feel === 'required' ? 'required' : 'optional'),
    onClick: handleClick,
    disabled: feel === 'required' || disabled,
    title: label + (feel === 'required' ? feelRequiredLabel : feelOptionalLabel),
    children: feel === 'required' ? (0, _jsxRuntime.jsx)(FeelRequiredIcon, {}) : (0, _jsxRuntime.jsx)(FeelOptionalIcon, {})
  });
}
var noop$1 = function noop$1() {};
function FeelTextfield(props) {
  var debounce = props.debounce,
    id = props.id,
    label = props.label,
    onInput = props.onInput,
    onError = props.onError,
    feel = props.feel,
    _props$value2 = props.value,
    value = _props$value2 === void 0 ? '' : _props$value2,
    _props$disabled2 = props.disabled,
    disabled = _props$disabled2 === void 0 ? false : _props$disabled2,
    variables = props.variables,
    tooltipContainer = props.tooltipContainer,
    _props$OptionalCompon = props.OptionalComponent,
    OptionalComponent = _props$OptionalCompon === void 0 ? OptionalFeelInput : _props$OptionalCompon;
  var _useState35 = (0, _hooks.useState)(value),
    _useState36 = _slicedToArray(_useState35, 2),
    localValue = _useState36[0],
    _setLocalValue = _useState36[1];
  var editorRef = useShowEntryEvent(id);
  var containerRef = (0, _hooks.useRef)();
  var feelActive = localValue.startsWith('=') || feel === 'required';
  var feelOnlyValue = localValue.startsWith('=') ? localValue.substring(1) : localValue;
  var _useState37 = (0, _hooks.useState)(undefined),
    _useState38 = _slicedToArray(_useState37, 2),
    focus = _useState38[0],
    _setFocus = _useState38[1];
  var setFocus = function setFocus() {
    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var hasFocus = containerRef.current.contains(document.activeElement);

    // Keep caret position if it is already focused, otherwise focus at the end
    var position = hasFocus ? document.activeElement.selectionStart : Infinity;
    _setFocus(position + offset);
  };
  var handleInputCallback = (0, _hooks.useMemo)(function () {
    return debounce(function (newValue) {
      onInput(newValue);
    });
  }, [onInput, debounce]);
  var setLocalValue = function setLocalValue(newValue) {
    _setLocalValue(newValue);
    if (!newValue || newValue === '=') {
      handleInputCallback(undefined);
    } else {
      handleInputCallback(newValue);
    }
  };
  var handleFeelToggle = useStaticCallback(function () {
    if (feel === 'required') {
      return;
    }
    if (!feelActive) {
      setLocalValue('=' + localValue);
    } else {
      setLocalValue(feelOnlyValue);
    }
  });
  var handleLocalInput = function handleLocalInput(newValue) {
    if (feelActive) {
      newValue = '=' + newValue;
    }
    if (newValue === localValue) {
      return;
    }
    setLocalValue(newValue);
    if (!feelActive && newValue.startsWith('=')) {
      // focus is behind `=` sign that will be removed
      setFocus(-1);
    }
  };
  var handleLint = useStaticCallback(function (lint) {
    if (!(lint && lint.length)) {
      onError(undefined);
      return;
    }
    var error = lint[0];
    var message = "".concat(error.source, ": ").concat(error.message);
    onError(message);
  });
  (0, _hooks.useEffect)(function () {
    if (typeof focus !== 'undefined') {
      editorRef.current.focus(focus);
      _setFocus(undefined);
    }
  }, [focus]);
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }

    // External value change removed content => keep FEEL configuration
    if (!value) {
      setLocalValue(feelActive ? '=' : '');
      return;
    }
    setLocalValue(value);
  }, [value]);

  // copy-paste integration
  (0, _hooks.useEffect)(function () {
    var copyHandler = function copyHandler(event) {
      if (!feelActive) {
        return;
      }
      event.clipboardData.setData('application/FEEL', event.clipboardData.getData('text'));
    };
    var pasteHandler = function pasteHandler(event) {
      if (feelActive) {
        return;
      }
      var data = event.clipboardData.getData('application/FEEL');
      if (data) {
        setTimeout(function () {
          handleFeelToggle();
          setFocus();
        });
      }
    };
    containerRef.current.addEventListener('copy', copyHandler);
    containerRef.current.addEventListener('cut', copyHandler);
    containerRef.current.addEventListener('paste', pasteHandler);
    return function () {
      containerRef.current.removeEventListener('copy', copyHandler);
      containerRef.current.removeEventListener('cut', copyHandler);
      containerRef.current.removeEventListener('paste', pasteHandler);
    };
  }, [containerRef, feelActive, handleFeelToggle, setFocus]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-feel-entry",
    children: [(0, _jsxRuntime.jsxs)("label", {
      "for": prefixId$6(id),
      "class": "bio-properties-panel-label",
      onClick: function onClick() {
        return setFocus();
      },
      children: [label, (0, _jsxRuntime.jsx)(FeelIcon, {
        label: label,
        feel: feel,
        onClick: handleFeelToggle,
        active: feelActive
      })]
    }), (0, _jsxRuntime.jsxs)("div", {
      "class": "bio-properties-panel-feel-container",
      ref: containerRef,
      children: [(0, _jsxRuntime.jsx)(FeelIndicator, {
        active: feelActive,
        disabled: feel !== 'optional' || disabled,
        onClick: handleFeelToggle
      }), feelActive ? (0, _jsxRuntime.jsx)(CodeEditor, {
        id: prefixId$6(id),
        name: id,
        onInput: handleLocalInput,
        disabled: disabled,
        onFeelToggle: function onFeelToggle() {
          handleFeelToggle();
          setFocus(true);
        },
        onLint: handleLint,
        value: feelOnlyValue,
        variables: variables,
        ref: editorRef,
        tooltipContainer: tooltipContainer
      }) : (0, _jsxRuntime.jsx)(OptionalComponent, _objectSpread(_objectSpread({}, props), {}, {
        onInput: handleLocalInput,
        contentAttributes: {
          'id': prefixId$6(id)
        },
        value: localValue,
        ref: editorRef
      }))]
    })]
  });
}
var OptionalFeelInput = (0, _compat.forwardRef)(function (props, ref) {
  var id = props.id,
    disabled = props.disabled,
    _onInput = props.onInput,
    value = props.value,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var inputRef = (0, _hooks.useRef)();

  // To be consistent with the FEEL editor, set focus at start of input
  // this ensures clean editing experience when switching with the keyboard
  ref.current = {
    focus: function focus(position) {
      var input = inputRef.current;
      if (!input) {
        return;
      }
      input.focus();
      if (typeof position === 'number') {
        if (position > value.length) {
          position = value.length;
        }
        input.setSelectionRange(position, position);
      }
    }
  };
  return (0, _jsxRuntime.jsx)("input", {
    id: prefixId$6(id),
    type: "text",
    ref: inputRef,
    name: id,
    spellCheck: "false",
    autoComplete: "off",
    disabled: disabled,
    "class": "bio-properties-panel-input",
    onInput: function onInput(e) {
      return _onInput(e.target.value);
    },
    onFocus: onFocus,
    onBlur: onBlur,
    value: value || ''
  });
});
var OptionalFeelTextArea = (0, _compat.forwardRef)(function (props, ref) {
  var id = props.id,
    disabled = props.disabled,
    _onInput2 = props.onInput,
    value = props.value,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var inputRef = (0, _hooks.useRef)();

  // To be consistent with the FEEL editor, set focus at start of input
  // this ensures clean editing experience when switching with the keyboard
  ref.current = {
    focus: function focus() {
      var input = inputRef.current;
      if (!input) {
        return;
      }
      input.focus();
      input.setSelectionRange(0, 0);
    }
  };
  return (0, _jsxRuntime.jsx)("textarea", {
    id: prefixId$6(id),
    type: "text",
    ref: inputRef,
    name: id,
    spellCheck: "false",
    autoComplete: "off",
    disabled: disabled,
    "class": "bio-properties-panel-input",
    onInput: function onInput(e) {
      return _onInput2(e.target.value);
    },
    onFocus: onFocus,
    onBlur: onBlur,
    value: value || '',
    "data-gramm": "false"
  });
});

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {Boolean} props.debounce
 * @param {Boolean} props.disabled
 * @param {Boolean} props.feel
 * @param {String} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.tooltipContainer
 * @param {Function} props.validate
 * @param {Function} props.show
 * @param {Function} props.example
 * @param {Function} props.variables
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 */
function FeelEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    debounce = props.debounce,
    disabled = props.disabled,
    feel = props.feel,
    label = props.label,
    getValue = props.getValue,
    setValue = props.setValue,
    tooltipContainer = props.tooltipContainer,
    hostLanguage = props.hostLanguage,
    singleLine = props.singleLine,
    validate = props.validate,
    _props$show = props.show,
    show = _props$show === void 0 ? noop$1 : _props$show,
    example = props.example,
    variables = props.variables,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var _useState39 = (0, _hooks.useState)(null),
    _useState40 = _slicedToArray(_useState39, 2),
    cachedInvalidValue = _useState40[0],
    setCachedInvalidValue = _useState40[1];
  var _useState41 = (0, _hooks.useState)(null),
    _useState42 = _slicedToArray(_useState41, 2),
    validationError = _useState42[0],
    setValidationError = _useState42[1];
  var _useState43 = (0, _hooks.useState)(null),
    _useState44 = _slicedToArray(_useState43, 2),
    localError = _useState44[0],
    setLocalError = _useState44[1];
  var value = getValue(element);
  var previousValue = usePrevious(value);
  (0, _hooks.useEffect)(function () {
    if ((0, _minDash.isFunction)(validate)) {
      var newValidationError = validate(value) || null;
      setValidationError(newValidationError);
    }
  }, [value]);
  var onInput = useStaticCallback(function (newValue) {
    var newValidationError = null;
    if ((0, _minDash.isFunction)(validate)) {
      newValidationError = validate(newValue) || null;
    }
    if (newValidationError) {
      setCachedInvalidValue(newValue);
    } else {
      // don't create multiple commandStack entries for the same value
      if (newValue !== value) {
        setValue(newValue);
      }
    }
    setValidationError(newValidationError);
  });
  var onError = (0, _hooks.useCallback)(function (err) {
    setLocalError(err);
  }, []);
  if (previousValue === value && validationError) {
    value = cachedInvalidValue;
  }
  var temporaryError = useError(id);
  var error = localError || temporaryError || validationError;
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])(props["class"], 'bio-properties-panel-entry', error ? 'has-error' : ''),
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(FeelTextfield, {
      debounce: debounce,
      disabled: disabled,
      feel: feel,
      id: id,
      label: label,
      onInput: onInput,
      onError: onError,
      onFocus: onFocus,
      onBlur: onBlur,
      example: example,
      hostLanguage: hostLanguage,
      singleLine: singleLine,
      show: show,
      value: value,
      variables: variables,
      tooltipContainer: tooltipContainer,
      OptionalComponent: props.OptionalComponent
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {Boolean} props.debounce
 * @param {Boolean} props.disabled
 * @param {Boolean} props.feel
 * @param {String} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.tooltipContainer
 * @param {Function} props.validate
 * @param {Function} props.show
 * @param {Function} props.example
 * @param {Function} props.variables
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 */
function FeelTextAreaEntry(props) {
  return (0, _jsxRuntime.jsx)(FeelEntry, _objectSpread({
    "class": "bio-properties-panel-feel-textarea",
    OptionalComponent: OptionalFeelTextArea
  }, props));
}

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {String} props.hostLanguage
 * @param {Boolean} props.singleLine
 * @param {Boolean} props.debounce
 * @param {Boolean} props.disabled
 * @param {Boolean} props.feel
 * @param {String} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.tooltipContainer
 * @param {Function} props.validate
 * @param {Function} props.show
 * @param {Function} props.example
 * @param {Function} props.variables
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 */
function FeelTemplatingEntry(props) {
  return (0, _jsxRuntime.jsx)(FeelEntry, _objectSpread({
    "class": "bio-properties-panel-feel-templating",
    OptionalComponent: CodeEditor$1
  }, props));
}
function isEdited$7(node) {
  return node && (!!node.value || node.classList.contains('edited'));
}

// helpers /////////////////

function prefixId$6(id) {
  return "bio-properties-panel-".concat(id);
}
var noop = function noop() {};

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {Boolean} props.debounce
 * @param {Boolean} props.disabled
 * @param {String} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.tooltipContainer
 * @param {Function} props.validate
 * @param {Function} props.show
 */
function TemplatingEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    debounce = props.debounce,
    disabled = props.disabled,
    label = props.label,
    getValue = props.getValue,
    setValue = props.setValue,
    tooltipContainer = props.tooltipContainer,
    validate = props.validate,
    _props$show2 = props.show,
    show = _props$show2 === void 0 ? noop : _props$show2;
  var _useState45 = (0, _hooks.useState)(null),
    _useState46 = _slicedToArray(_useState45, 2),
    cachedInvalidValue = _useState46[0],
    setCachedInvalidValue = _useState46[1];
  var _useState47 = (0, _hooks.useState)(null),
    _useState48 = _slicedToArray(_useState47, 2),
    validationError = _useState48[0],
    setValidationError = _useState48[1];
  var _useState49 = (0, _hooks.useState)(null),
    _useState50 = _slicedToArray(_useState49, 2),
    localError = _useState50[0],
    setLocalError = _useState50[1];
  var value = getValue(element);
  var previousValue = usePrevious(value);
  (0, _hooks.useEffect)(function () {
    if ((0, _minDash.isFunction)(validate)) {
      var newValidationError = validate(value) || null;
      setValidationError(newValidationError);
    }
  }, [value]);
  var onInput = useStaticCallback(function (newValue) {
    var newValidationError = null;
    if ((0, _minDash.isFunction)(validate)) {
      newValidationError = validate(newValue) || null;
    }
    if (newValidationError) {
      setCachedInvalidValue(newValue);
    } else {
      // don't create multiple commandStack entries for the same value
      if (newValue !== value) {
        setValue(newValue);
      }
    }
    setValidationError(newValidationError);
  });
  var onError = (0, _hooks.useCallback)(function (err) {
    setLocalError(err);
  }, []);
  if (previousValue === value && validationError) {
    value = cachedInvalidValue;
  }
  var temporaryError = useError(id);
  var error = localError || temporaryError || validationError;
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-entry', error ? 'has-error' : ''),
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(Templating, {
      debounce: debounce,
      disabled: disabled,
      id: id,
      label: label,
      onInput: onInput,
      onError: onError,
      show: show,
      value: value,
      tooltipContainer: tooltipContainer
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function Templating(props) {
  var debounce = props.debounce,
    id = props.id,
    label = props.label,
    onInput = props.onInput,
    onError = props.onError,
    _props$value3 = props.value,
    value = _props$value3 === void 0 ? '' : _props$value3,
    _props$disabled3 = props.disabled,
    disabled = _props$disabled3 === void 0 ? false : _props$disabled3,
    tooltipContainer = props.tooltipContainer;
  var _useState51 = (0, _hooks.useState)(value),
    _useState52 = _slicedToArray(_useState51, 2),
    localValue = _useState52[0],
    setLocalValue = _useState52[1];
  var editorRef = useShowEntryEvent(id);
  var containerRef = (0, _hooks.useRef)();
  var _useState53 = (0, _hooks.useState)(undefined),
    _useState54 = _slicedToArray(_useState53, 2),
    focus = _useState54[0],
    _setFocus = _useState54[1];
  var setFocus = function setFocus() {
    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var hasFocus = containerRef.current.contains(document.activeElement);

    // Keep caret position if it is already focused, otherwise focus at the end
    var position = hasFocus ? document.activeElement.selectionStart : Infinity;
    _setFocus(position + offset);
  };
  var handleInputCallback = (0, _hooks.useMemo)(function () {
    return debounce(function (newValue) {
      return onInput(newValue.length ? newValue : undefined);
    });
  }, [onInput, debounce]);
  var handleInput = function handleInput(newValue) {
    handleInputCallback(newValue);
    setLocalValue(newValue);
  };
  var handleLint = useStaticCallback(function (lint) {
    var errors = lint && lint.length && lint.filter(function (e) {
      return e.severity === 'error';
    }) || [];
    if (!errors.length) {
      onError(undefined);
      return;
    }
    var error = lint[0];
    var message = "".concat(error.source, ": ").concat(error.message);
    onError(message);
  });
  (0, _hooks.useEffect)(function () {
    if (typeof focus !== 'undefined') {
      editorRef.current.focus(focus);
      _setFocus(undefined);
    }
  }, [focus]);
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value ? value : '');
  }, [value]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-feelers",
    children: [(0, _jsxRuntime.jsx)("label", {
      id: prefixIdLabel(id),
      "class": "bio-properties-panel-label",
      onClick: function onClick() {
        return setFocus();
      },
      children: label
    }), (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-feelers-input",
      ref: containerRef,
      children: (0, _jsxRuntime.jsx)(CodeEditor$1, {
        name: id,
        onInput: handleInput,
        contentAttributes: {
          'aria-labelledby': prefixIdLabel(id)
        },
        disabled: disabled,
        onLint: handleLint,
        value: localValue,
        ref: editorRef,
        tooltipContainer: tooltipContainer
      })
    })]
  });
}
function isEdited$6(node) {
  return node && (!!node.value || node.classList.contains('edited'));
}

// helpers /////////////////

function prefixIdLabel(id) {
  return "bio-properties-panel-feelers-".concat(id, "-label");
}
function List(props) {
  var id = props.id,
    element = props.element,
    _props$items = props.items,
    items = _props$items === void 0 ? [] : _props$items,
    component = props.component,
    _props$label = props.label,
    label = _props$label === void 0 ? '<empty>' : _props$label,
    shouldOpen = props.open,
    onAdd = props.onAdd,
    onRemove = props.onRemove,
    autoFocusEntry = props.autoFocusEntry,
    compareFn = props.compareFn,
    restProps = _objectWithoutProperties(props, _excluded2);
  var _useState55 = (0, _hooks.useState)(!!shouldOpen),
    _useState56 = _slicedToArray(_useState55, 2),
    open = _useState56[0],
    setOpen = _useState56[1];
  var hasItems = !!items.length;
  var toggleOpen = function toggleOpen() {
    return hasItems && setOpen(!open);
  };
  var opening = !usePrevious(open) && open;
  var elementChanged = usePrevious(element) !== element;
  var shouldReset = opening || elementChanged;
  var sortedItems = useSortedItems(items, compareFn, shouldReset);
  var newItems = useNewItems(items, elementChanged);
  (0, _hooks.useEffect)(function () {
    if (open && !hasItems) {
      setOpen(false);
    }
  }, [open, hasItems]);

  /**
   * @param {MouseEvent} event
   */
  function addItem(event) {
    event.stopPropagation();
    onAdd();
    if (!open) {
      setOpen(true);
    }
  }
  return (0, _jsxRuntime.jsxs)("div", {
    "data-entry-id": id,
    "class": (0, _classnames["default"])('bio-properties-panel-entry', 'bio-properties-panel-list-entry', hasItems ? '' : 'empty', open ? 'open' : ''),
    children: [(0, _jsxRuntime.jsxs)("div", {
      "class": "bio-properties-panel-list-entry-header",
      onClick: toggleOpen,
      children: [(0, _jsxRuntime.jsx)("div", {
        title: label,
        "class": (0, _classnames["default"])('bio-properties-panel-list-entry-header-title', open && 'open'),
        children: label
      }), (0, _jsxRuntime.jsxs)("div", {
        "class": "bio-properties-panel-list-entry-header-buttons",
        children: [(0, _jsxRuntime.jsxs)("button", {
          title: "Create new list item",
          onClick: addItem,
          "class": "bio-properties-panel-add-entry",
          children: [(0, _jsxRuntime.jsx)(CreateIcon, {}), !hasItems ? (0, _jsxRuntime.jsx)("span", {
            "class": "bio-properties-panel-add-entry-label",
            children: "Create"
          }) : null]
        }), hasItems && (0, _jsxRuntime.jsx)("div", {
          title: "List contains ".concat(items.length, " item").concat(items.length != 1 ? 's' : ''),
          "class": "bio-properties-panel-list-badge",
          children: items.length
        }), hasItems && (0, _jsxRuntime.jsx)("button", {
          title: "Toggle list item",
          "class": "bio-properties-panel-arrow",
          children: (0, _jsxRuntime.jsx)(ArrowIcon, {
            "class": open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
          })
        })]
      })]
    }), hasItems && (0, _jsxRuntime.jsx)(ItemsList, _objectSpread(_objectSpread({}, restProps), {}, {
      autoFocusEntry: autoFocusEntry,
      component: component,
      element: element,
      id: id,
      items: sortedItems,
      newItems: newItems,
      onRemove: onRemove,
      open: open
    }))]
  });
}
function ItemsList(props) {
  var autoFocusEntry = props.autoFocusEntry,
    Component = props.component,
    element = props.element,
    id = props.id,
    items = props.items,
    newItems = props.newItems,
    onRemove = props.onRemove,
    open = props.open,
    restProps = _objectWithoutProperties(props, _excluded3);
  var getKey = useKeyFactory();
  var newItem = newItems[0];
  (0, _hooks.useEffect)(function () {
    if (newItem && autoFocusEntry) {
      // (0) select the parent entry (containing all list items)
      var entry = (0, _minDom.query)("[data-entry-id=\"".concat(id, "\"]"));

      // (1) select the first input or a custom element to be focussed
      var selector = typeof autoFocusEntry === 'boolean' ? '.bio-properties-panel-input' : autoFocusEntry;
      var focusableInput = (0, _minDom.query)(selector, entry);

      // (2) set focus
      if (focusableInput) {
        if ((0, _minDash.isFunction)(focusableInput.select)) {
          focusableInput.select();
        } else if ((0, _minDash.isFunction)(focusableInput.focus)) {
          focusableInput.focus();
        }
      }
    }
  }, [newItem, autoFocusEntry, id]);
  return (0, _jsxRuntime.jsx)("ol", {
    "class": (0, _classnames["default"])('bio-properties-panel-list-entry-items', open ? 'open' : ''),
    children: items.map(function (item, index) {
      var key = getKey(item);
      return (0, _jsxRuntime.jsxs)("li", {
        "class": "bio-properties-panel-list-entry-item",
        children: [(0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread({}, restProps), {}, {
          element: element,
          id: id,
          index: index,
          item: item,
          open: item === newItem
        })), onRemove && (0, _jsxRuntime.jsx)("button", {
          type: "button",
          title: "Delete item",
          "class": "bio-properties-panel-remove-entry bio-properties-panel-remove-list-entry",
          onClick: function onClick() {
            return onRemove && onRemove(item);
          },
          children: (0, _jsxRuntime.jsx)(DeleteIcon, {})
        })]
      }, key);
    })
  });
}

/**
 * Place new items in the beginning of the list and sort the rest with provided function.
 *
 * @template Item
 * @param {Item[]} currentItems
 * @param {(a: Item, b: Item) => 0 | 1 | -1} [compareFn] function used to sort items
 * @param {boolean} [shouldReset=false] set to `true` to reset state of the hook
 * @returns {Item[]}
 */
function useSortedItems(currentItems, compareFn) {
  var shouldReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var itemsRef = (0, _hooks.useRef)(currentItems.slice());

  // (1) Reset and optionally sort.
  if (shouldReset) {
    itemsRef.current = currentItems.slice();
    if (compareFn) {
      itemsRef.current.sort(compareFn);
    }
  } else {
    var items = itemsRef.current;

    // (2) Add new item to the list.
    var _iterator = _createForOfIteratorHelper(currentItems),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;
        if (!items.includes(item)) {
          // Unshift or push depending on whether we have a compareFn
          compareFn ? items.unshift(item) : items.push(item);
        }
      }

      // (3) Filter out removed items.
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    itemsRef.current = items.filter(function (item) {
      return currentItems.includes(item);
    });
  }
  return itemsRef.current;
}
function useNewItems() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var shouldReset = arguments.length > 1 ? arguments[1] : undefined;
  var previousItems = usePrevious(items.slice()) || [];
  if (shouldReset) {
    return [];
  }
  return previousItems ? items.filter(function (item) {
    return !previousItems.includes(item);
  }) : [];
}
function NumberField(props) {
  var debounce = props.debounce,
    disabled = props.disabled,
    id = props.id,
    label = props.label,
    max = props.max,
    min = props.min,
    onInput = props.onInput,
    step = props.step,
    _props$value4 = props.value,
    value = _props$value4 === void 0 ? '' : _props$value4,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var _useState57 = (0, _hooks.useState)(value),
    _useState58 = _slicedToArray(_useState57, 2),
    localValue = _useState58[0],
    setLocalValue = _useState58[1];
  var handleInputCallback = (0, _hooks.useMemo)(function () {
    return debounce(function (event) {
      var _event$target = event.target,
        validity = _event$target.validity,
        value = _event$target.value;
      if (validity.valid) {
        onInput(value ? parseFloat(value) : undefined);
      }
    });
  }, [onInput, debounce]);
  var handleInput = function handleInput(e) {
    handleInputCallback(e);
    setLocalValue(e.target.value);
  };
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-numberfield",
    children: [(0, _jsxRuntime.jsx)("label", {
      "for": prefixId$5(id),
      "class": "bio-properties-panel-label",
      children: label
    }), (0, _jsxRuntime.jsx)("input", {
      id: prefixId$5(id),
      type: "number",
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      "class": "bio-properties-panel-input",
      max: max,
      min: min,
      onInput: handleInput,
      onFocus: onFocus,
      onBlur: onBlur,
      step: step,
      value: localValue
    })]
  });
}

/**
 * @param {Object} props
 * @param {Boolean} props.debounce
 * @param {String} props.description
 * @param {Boolean} props.disabled
 * @param {Object} props.element
 * @param {Function} props.getValue
 * @param {String} props.id
 * @param {String} props.label
 * @param {String} props.max
 * @param {String} props.min
 * @param {Function} props.setValue
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 * @param {String} props.step
 * @param {Function} props.validate
 */
function NumberFieldEntry(props) {
  var debounce = props.debounce,
    description = props.description,
    disabled = props.disabled,
    element = props.element,
    getValue = props.getValue,
    id = props.id,
    label = props.label,
    max = props.max,
    min = props.min,
    setValue = props.setValue,
    step = props.step,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    validate = props.validate;
  var _useState59 = (0, _hooks.useState)(null),
    _useState60 = _slicedToArray(_useState59, 2),
    cachedInvalidValue = _useState60[0],
    setCachedInvalidValue = _useState60[1];
  var globalError = useError(id);
  var _useState61 = (0, _hooks.useState)(null),
    _useState62 = _slicedToArray(_useState61, 2),
    localError = _useState62[0],
    setLocalError = _useState62[1];
  var value = getValue(element);
  var previousValue = usePrevious(value);
  (0, _hooks.useEffect)(function () {
    if ((0, _minDash.isFunction)(validate)) {
      var newValidationError = validate(value) || null;
      setLocalError(newValidationError);
    }
  }, [value]);
  var onInput = function onInput(newValue) {
    var newValidationError = null;
    if ((0, _minDash.isFunction)(validate)) {
      newValidationError = validate(newValue) || null;
    }
    if (newValidationError) {
      setCachedInvalidValue(newValue);
    } else {
      setValue(newValue);
    }
    setLocalError(newValidationError);
  };
  if (previousValue === value && localError) {
    value = cachedInvalidValue;
  }
  var error = globalError || localError;
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-entry', error ? 'has-error' : ''),
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(NumberField, {
      debounce: debounce,
      disabled: disabled,
      id: id,
      label: label,
      onFocus: onFocus,
      onBlur: onBlur,
      onInput: onInput,
      max: max,
      min: min,
      step: step,
      value: value
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function isEdited$5(node) {
  return node && !!node.value;
}

// helpers /////////////////

function prefixId$5(id) {
  return "bio-properties-panel-".concat(id);
}
function Select(props) {
  var id = props.id,
    label = props.label,
    onChange = props.onChange,
    _props$options = props.options,
    options = _props$options === void 0 ? [] : _props$options,
    _props$value5 = props.value,
    value = _props$value5 === void 0 ? '' : _props$value5,
    disabled = props.disabled,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var ref = useShowEntryEvent(id);
  var _useState63 = (0, _hooks.useState)(value),
    _useState64 = _slicedToArray(_useState63, 2),
    localValue = _useState64[0],
    setLocalValue = _useState64[1];
  var handleChangeCallback = function handleChangeCallback(_ref4) {
    var target = _ref4.target;
    onChange(target.value);
  };
  var handleChange = function handleChange(e) {
    handleChangeCallback(e);
    setLocalValue(e.target.value);
  };
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-select",
    children: [(0, _jsxRuntime.jsx)("label", {
      "for": prefixId$4(id),
      "class": "bio-properties-panel-label",
      children: label
    }), (0, _jsxRuntime.jsx)("select", {
      ref: ref,
      id: prefixId$4(id),
      name: id,
      "class": "bio-properties-panel-input",
      onInput: handleChange,
      onFocus: onFocus,
      onBlur: onBlur,
      value: localValue,
      disabled: disabled,
      children: options.map(function (option, idx) {
        if (option.children) {
          return (0, _jsxRuntime.jsx)("optgroup", {
            label: option.label,
            children: option.children.map(function (child, idx) {
              return (0, _jsxRuntime.jsx)("option", {
                value: child.value,
                disabled: child.disabled,
                children: child.label
              }, idx);
            })
          }, idx);
        }
        return (0, _jsxRuntime.jsx)("option", {
          value: option.value,
          disabled: option.disabled,
          children: option.label
        }, idx);
      })
    })]
  });
}

/**
 * @param {object} props
 * @param {object} props.element
 * @param {string} props.id
 * @param {string} [props.description]
 * @param {string} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 * @param {Function} props.getOptions
 * @param {boolean} [props.disabled]
 * @param {Function} [props.validate]
 */
function SelectEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    label = props.label,
    getValue = props.getValue,
    setValue = props.setValue,
    getOptions = props.getOptions,
    disabled = props.disabled,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    validate = props.validate;
  var options = getOptions(element);
  var _useState65 = (0, _hooks.useState)(null),
    _useState66 = _slicedToArray(_useState65, 2),
    cachedInvalidValue = _useState66[0],
    setCachedInvalidValue = _useState66[1];
  var globalError = useError(id);
  var _useState67 = (0, _hooks.useState)(null),
    _useState68 = _slicedToArray(_useState67, 2),
    localError = _useState68[0],
    setLocalError = _useState68[1];
  var value = getValue(element);
  var previousValue = usePrevious(value);
  (0, _hooks.useEffect)(function () {
    if ((0, _minDash.isFunction)(validate)) {
      var newValidationError = validate(value) || null;
      setLocalError(newValidationError);
    }
  }, [value]);
  var onChange = function onChange(newValue) {
    var newValidationError = null;
    if ((0, _minDash.isFunction)(validate)) {
      newValidationError = validate(newValue) || null;
    }
    if (newValidationError) {
      setCachedInvalidValue(newValue);
    } else {
      setValue(newValue);
    }
    setLocalError(newValidationError);
  };
  if (previousValue === value && localError) {
    value = cachedInvalidValue;
  }
  var error = globalError || localError;
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-entry', error ? 'has-error' : ''),
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(Select, {
      id: id,
      label: label,
      value: value,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      options: options,
      disabled: disabled
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function isEdited$4(node) {
  return node && !!node.value;
}

// helpers /////////////////

function prefixId$4(id) {
  return "bio-properties-panel-".concat(id);
}
function Simple(props) {
  var debounce = props.debounce,
    disabled = props.disabled,
    element = props.element,
    getValue = props.getValue,
    id = props.id,
    onBlur = props.onBlur,
    onFocus = props.onFocus,
    setValue = props.setValue;
  var value = getValue(element);
  var _useState69 = (0, _hooks.useState)(value),
    _useState70 = _slicedToArray(_useState69, 2),
    localValue = _useState70[0],
    setLocalValue = _useState70[1];
  var handleInputCallback = (0, _hooks.useMemo)(function () {
    return debounce(function (_ref5) {
      var target = _ref5.target;
      return setValue(target.value.length ? target.value : undefined);
    });
  }, [setValue, debounce]);
  var handleInput = function handleInput(e) {
    handleInputCallback(e);
    setLocalValue(e.target.value);
  };
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  return (0, _jsxRuntime.jsx)("div", {
    "class": "bio-properties-panel-simple",
    children: (0, _jsxRuntime.jsx)("input", {
      id: prefixId$3(id),
      type: "text",
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      "class": "bio-properties-panel-input",
      onInput: handleInput,
      "aria-label": localValue || '<empty>',
      onFocus: onFocus,
      onBlur: onBlur,
      value: localValue
    }, element)
  });
}
function isEdited$3(node) {
  return node && !!node.value;
}

// helpers /////////////////

function prefixId$3(id) {
  return "bio-properties-panel-".concat(id);
}
function resizeToContents(element) {
  element.style.height = 'auto';

  // a 2px pixel offset is required to prevent scrollbar from
  // appearing on OS with a full length scroll bar (Windows/Linux)
  element.style.height = "".concat(element.scrollHeight + 2, "px");
}
function TextArea(props) {
  var id = props.id,
    label = props.label,
    debounce = props.debounce,
    onInput = props.onInput,
    _props$value6 = props.value,
    value = _props$value6 === void 0 ? '' : _props$value6,
    disabled = props.disabled,
    monospace = props.monospace,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    autoResize = props.autoResize,
    _props$rows = props.rows,
    rows = _props$rows === void 0 ? autoResize ? 1 : 2 : _props$rows;
  var _useState71 = (0, _hooks.useState)(value),
    _useState72 = _slicedToArray(_useState71, 2),
    localValue = _useState72[0],
    setLocalValue = _useState72[1];
  var ref = useShowEntryEvent(id);
  var handleInputCallback = (0, _hooks.useMemo)(function () {
    return debounce(function (_ref6) {
      var target = _ref6.target;
      return onInput(target.value.length ? target.value : undefined);
    });
  }, [onInput, debounce]);
  var handleInput = function handleInput(e) {
    handleInputCallback(e);
    autoResize && resizeToContents(e.target);
    setLocalValue(e.target.value);
  };
  (0, _hooks.useLayoutEffect)(function () {
    autoResize && resizeToContents(ref.current);
  }, []);
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-textarea",
    children: [(0, _jsxRuntime.jsx)("label", {
      "for": prefixId$2(id),
      "class": "bio-properties-panel-label",
      children: label
    }), (0, _jsxRuntime.jsx)("textarea", {
      ref: ref,
      id: prefixId$2(id),
      name: id,
      spellCheck: "false",
      "class": (0, _classnames["default"])('bio-properties-panel-input', monospace ? 'bio-properties-panel-input-monospace' : '', autoResize ? 'auto-resize' : ''),
      onInput: handleInput,
      onFocus: onFocus,
      onBlur: onBlur,
      rows: rows,
      value: localValue,
      disabled: disabled,
      "data-gramm": "false"
    })]
  });
}

/**
 * @param {object} props
 * @param {object} props.element
 * @param {string} props.id
 * @param {string} props.description
 * @param {boolean} props.debounce
 * @param {string} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 * @param {number} props.rows
 * @param {boolean} props.monospace
 * @param {Function} [props.validate]
 * @param {boolean} [props.disabled]
 */
function TextAreaEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    debounce = props.debounce,
    label = props.label,
    getValue = props.getValue,
    setValue = props.setValue,
    rows = props.rows,
    monospace = props.monospace,
    disabled = props.disabled,
    validate = props.validate,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    autoResize = props.autoResize;
  var _useState73 = (0, _hooks.useState)(null),
    _useState74 = _slicedToArray(_useState73, 2),
    cachedInvalidValue = _useState74[0],
    setCachedInvalidValue = _useState74[1];
  var globalError = useError(id);
  var _useState75 = (0, _hooks.useState)(null),
    _useState76 = _slicedToArray(_useState75, 2),
    localError = _useState76[0],
    setLocalError = _useState76[1];
  var value = getValue(element);
  var previousValue = usePrevious(value);
  (0, _hooks.useEffect)(function () {
    if ((0, _minDash.isFunction)(validate)) {
      var newValidationError = validate(value) || null;
      setLocalError(newValidationError);
    }
  }, [value]);
  var onInput = function onInput(newValue) {
    var newValidationError = null;
    if ((0, _minDash.isFunction)(validate)) {
      newValidationError = validate(newValue) || null;
    }
    if (newValidationError) {
      setCachedInvalidValue(newValue);
    } else {
      setValue(newValue);
    }
    setLocalError(newValidationError);
  };
  if (previousValue === value && localError) {
    value = cachedInvalidValue;
  }
  var error = globalError || localError;
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-entry', error ? 'has-error' : ''),
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(TextArea, {
      id: id,
      label: label,
      value: value,
      onInput: onInput,
      onFocus: onFocus,
      onBlur: onBlur,
      rows: rows,
      debounce: debounce,
      monospace: monospace,
      disabled: disabled,
      autoResize: autoResize
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function isEdited$2(node) {
  return node && !!node.value;
}

// helpers /////////////////

function prefixId$2(id) {
  return "bio-properties-panel-".concat(id);
}
function Textfield(props) {
  var debounce = props.debounce,
    _props$disabled4 = props.disabled,
    disabled = _props$disabled4 === void 0 ? false : _props$disabled4,
    id = props.id,
    label = props.label,
    onInput = props.onInput,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    _props$value7 = props.value,
    value = _props$value7 === void 0 ? '' : _props$value7;
  var _useState77 = (0, _hooks.useState)(value || ''),
    _useState78 = _slicedToArray(_useState77, 2),
    localValue = _useState78[0],
    setLocalValue = _useState78[1];
  var ref = useShowEntryEvent(id);
  var handleInputCallback = (0, _hooks.useMemo)(function () {
    return debounce(function (_ref7) {
      var target = _ref7.target;
      return onInput(target.value.length ? target.value : undefined);
    });
  }, [onInput, debounce]);
  var handleInput = function handleInput(e) {
    handleInputCallback(e);
    setLocalValue(e.target.value);
  };
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-textfield",
    children: [(0, _jsxRuntime.jsx)("label", {
      "for": prefixId$1(id),
      "class": "bio-properties-panel-label",
      children: label
    }), (0, _jsxRuntime.jsx)("input", {
      ref: ref,
      id: prefixId$1(id),
      type: "text",
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      "class": "bio-properties-panel-input",
      onInput: handleInput,
      onFocus: onFocus,
      onBlur: onBlur,
      value: localValue
    })]
  });
}

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {Boolean} props.debounce
 * @param {Boolean} props.disabled
 * @param {String} props.label
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 * @param {Function} props.validate
 */
function TextfieldEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    debounce = props.debounce,
    disabled = props.disabled,
    label = props.label,
    getValue = props.getValue,
    setValue = props.setValue,
    validate = props.validate,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var _useState79 = (0, _hooks.useState)(null),
    _useState80 = _slicedToArray(_useState79, 2),
    cachedInvalidValue = _useState80[0],
    setCachedInvalidValue = _useState80[1];
  var globalError = useError(id);
  var _useState81 = (0, _hooks.useState)(null),
    _useState82 = _slicedToArray(_useState81, 2),
    localError = _useState82[0],
    setLocalError = _useState82[1];
  var value = getValue(element);
  var previousValue = usePrevious(value);
  (0, _hooks.useEffect)(function () {
    if ((0, _minDash.isFunction)(validate)) {
      var newValidationError = validate(value) || null;
      setLocalError(newValidationError);
    }
  }, [value]);
  var onInput = function onInput(newValue) {
    var newValidationError = null;
    if ((0, _minDash.isFunction)(validate)) {
      newValidationError = validate(newValue) || null;
    }
    if (newValidationError) {
      setCachedInvalidValue(newValue);
    } else {
      setValue(newValue);
    }
    setLocalError(newValidationError);
  };
  if (previousValue === value && localError) {
    value = cachedInvalidValue;
  }
  var error = globalError || localError;
  return (0, _jsxRuntime.jsxs)("div", {
    "class": (0, _classnames["default"])('bio-properties-panel-entry', error ? 'has-error' : ''),
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(Textfield, {
      debounce: debounce,
      disabled: disabled,
      id: id,
      label: label,
      onInput: onInput,
      onFocus: onFocus,
      onBlur: onBlur,
      value: value
    }, element), error && (0, _jsxRuntime.jsx)("div", {
      "class": "bio-properties-panel-error",
      children: error
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function isEdited$1(node) {
  return node && !!node.value;
}

// helpers /////////////////

function prefixId$1(id) {
  return "bio-properties-panel-".concat(id);
}
function ToggleSwitch(props) {
  var id = props.id,
    label = props.label,
    onInput = props.onInput,
    value = props.value,
    switcherLabel = props.switcherLabel,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var _useState83 = (0, _hooks.useState)(value),
    _useState84 = _slicedToArray(_useState83, 2),
    localValue = _useState84[0],
    setLocalValue = _useState84[1];
  var handleInputCallback = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            onInput(!value);
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handleInputCallback() {
      return _ref8.apply(this, arguments);
    };
  }();
  var handleInput = function handleInput(e) {
    handleInputCallback();
    setLocalValue(e.target.value);
  };
  (0, _hooks.useEffect)(function () {
    if (value === localValue) {
      return;
    }
    setLocalValue(value);
  }, [value]);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-toggle-switch",
    children: [(0, _jsxRuntime.jsx)("label", {
      "class": "bio-properties-panel-label",
      "for": prefixId(id),
      children: label
    }), (0, _jsxRuntime.jsxs)("div", {
      "class": "bio-properties-panel-field-wrapper",
      children: [(0, _jsxRuntime.jsxs)("label", {
        "class": "bio-properties-panel-toggle-switch__switcher",
        children: [(0, _jsxRuntime.jsx)("input", {
          id: prefixId(id),
          "class": "bio-properties-panel-input",
          type: "checkbox",
          onFocus: onFocus,
          onBlur: onBlur,
          name: id,
          onInput: handleInput,
          checked: !!localValue
        }), (0, _jsxRuntime.jsx)("span", {
          "class": "bio-properties-panel-toggle-switch__slider"
        })]
      }), (0, _jsxRuntime.jsx)("p", {
        "class": "bio-properties-panel-toggle-switch__label",
        children: switcherLabel
      })]
    })]
  });
}

/**
 * @param {Object} props
 * @param {Object} props.element
 * @param {String} props.id
 * @param {String} props.description
 * @param {String} props.label
 * @param {String} props.switcherLabel
 * @param {Function} props.getValue
 * @param {Function} props.setValue
 * @param {Function} props.onFocus
 * @param {Function} props.onBlur
 */
function ToggleSwitchEntry(props) {
  var element = props.element,
    id = props.id,
    description = props.description,
    label = props.label,
    switcherLabel = props.switcherLabel,
    getValue = props.getValue,
    setValue = props.setValue,
    onFocus = props.onFocus,
    onBlur = props.onBlur;
  var value = getValue(element);
  return (0, _jsxRuntime.jsxs)("div", {
    "class": "bio-properties-panel-entry bio-properties-panel-toggle-switch-entry",
    "data-entry-id": id,
    children: [(0, _jsxRuntime.jsx)(ToggleSwitch, {
      id: id,
      label: label,
      value: value,
      onInput: setValue,
      onFocus: onFocus,
      onBlur: onBlur,
      switcherLabel: switcherLabel
    }), (0, _jsxRuntime.jsx)(Description, {
      forId: id,
      element: element,
      value: description
    })]
  });
}
function isEdited(node) {
  return node && !!node.checked;
}

// helpers /////////////////

function prefixId(id) {
  return "bio-properties-panel-".concat(id);
}
var DEFAULT_DEBOUNCE_TIME = 300;
function debounceInput(debounceDelay) {
  return function _debounceInput(fn) {
    if (debounceDelay !== false) {
      var debounceTime = (0, _minDash.isNumber)(debounceDelay) ? debounceDelay : DEFAULT_DEBOUNCE_TIME;
      return (0, _minDash.debounce)(fn, debounceTime);
    } else {
      return fn;
    }
  };
}
debounceInput.$inject = ['config.debounceInput'];
var index = {
  debounceInput: ['factory', debounceInput]
};
exports.DebounceInputModule = index;

},{"../preact":13,"../preact/compat":12,"../preact/hooks":14,"../preact/jsx-runtime":15,"@bpmn-io/feel-editor":9,"classnames":33,"feelers":41,"min-dash":49,"min-dom":50}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true,
  Children: true,
  render: true,
  hydrate: true,
  unmountComponentAtNode: true,
  createPortal: true,
  createFactory: true,
  cloneElement: true,
  isValidElement: true,
  findDOMNode: true,
  PureComponent: true,
  memo: true,
  forwardRef: true,
  unstable_batchedUpdates: true,
  StrictMode: true,
  Suspense: true,
  SuspenseList: true,
  lazy: true,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: true,
  unstable_ImmediatePriority: true,
  unstable_UserBlockingPriority: true,
  unstable_NormalPriority: true,
  unstable_LowPriority: true,
  unstable_IdlePriority: true,
  unstable_runWithPriority: true,
  unstable_now: true,
  createElement: true,
  createContext: true,
  createRef: true,
  Fragment: true,
  Component: true
};
exports.Children = void 0;
Object.defineProperty(exports, "Component", {
  enumerable: true,
  get: function get() {
    return _2.Component;
  }
});
Object.defineProperty(exports, "Fragment", {
  enumerable: true,
  get: function get() {
    return _2.Fragment;
  }
});
exports.PureComponent = E;
exports.StrictMode = void 0;
exports.Suspense = L;
exports.SuspenseList = F;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = void 0;
exports.cloneElement = an;
Object.defineProperty(exports, "createContext", {
  enumerable: true,
  get: function get() {
    return _2.createContext;
  }
});
Object.defineProperty(exports, "createElement", {
  enumerable: true,
  get: function get() {
    return _2.createElement;
  }
});
exports.createFactory = fn;
exports.createPortal = I;
Object.defineProperty(exports, "createRef", {
  enumerable: true,
  get: function get() {
    return _2.createRef;
  }
});
exports["default"] = void 0;
exports.findDOMNode = hn;
exports.forwardRef = x;
exports.hydrate = B;
exports.isValidElement = cn;
exports.lazy = D;
exports.memo = g;
exports.render = z;
exports.unmountComponentAtNode = sn;
exports.unstable_now = exports.unstable_batchedUpdates = exports.unstable_UserBlockingPriority = exports.unstable_NormalPriority = exports.unstable_LowPriority = exports.unstable_ImmediatePriority = exports.unstable_IdlePriority = void 0;
exports.unstable_runWithPriority = un;
exports.version = void 0;
var _hooks = require("../../hooks");
Object.keys(_hooks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _hooks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _hooks[key];
    }
  });
});
var _2 = require("../..");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function C(n, t) {
  for (var e in t) n[e] = t[e];
  return n;
}
function S(n, t) {
  for (var e in n) if ("__source" !== e && !(e in t)) return !0;
  for (var r in t) if ("__source" !== r && n[r] !== t[r]) return !0;
  return !1;
}
function E(n) {
  this.props = n;
}
function g(n, t) {
  function e(n) {
    var e = this.props.ref,
      r = e == n.ref;
    return !r && e && (e.call ? e(null) : e.current = null), t ? !t(this.props, n) || !r : S(this.props, n);
  }
  function r(t) {
    return this.shouldComponentUpdate = e, (0, _2.createElement)(n, t);
  }
  return r.displayName = "Memo(" + (n.displayName || n.name) + ")", r.prototype.isReactComponent = !0, r.__f = !0, r;
}
(E.prototype = new _2.Component()).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function (n, t) {
  return S(this.props, n) || S(this.state, t);
};
var w = _2.options.__b;
_2.options.__b = function (n) {
  n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), w && w(n);
};
var R = "undefined" != typeof Symbol && Symbol["for"] && Symbol["for"]("react.forward_ref") || 3911;
function x(n) {
  function t(t, e) {
    var r = C({}, t);
    return delete r.ref, n(r, (e = t.ref || e) && ("object" != _typeof(e) || "current" in e) ? e : null);
  }
  return t.$$typeof = R, t.render = t, t.prototype.isReactComponent = t.__f = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
}
var N = function N(n, t) {
    return null == n ? null : (0, _2.toChildArray)((0, _2.toChildArray)(n).map(t));
  },
  k = {
    map: N,
    forEach: N,
    count: function count(n) {
      return n ? (0, _2.toChildArray)(n).length : 0;
    },
    only: function only(n) {
      var t = (0, _2.toChildArray)(n);
      if (1 !== t.length) throw "Children.only";
      return t[0];
    },
    toArray: _2.toChildArray
  },
  A = _2.options.__e;
exports.Children = k;
_2.options.__e = function (n, t, e) {
  if (n.then) for (var r, u = t; u = u.__;) if ((r = u.__c) && r.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), r.__c(n, t);
  A(n, t, e);
};
var O = _2.options.unmount;
function L() {
  this.__u = 0, this.t = null, this.__b = null;
}
function U(n) {
  var t = n.__.__c;
  return t && t.__e && t.__e(n);
}
function D(n) {
  var t, e, r;
  function u(u) {
    if (t || (t = n()).then(function (n) {
      e = n["default"] || n;
    }, function (n) {
      r = n;
    }), r) throw r;
    if (!e) throw t;
    return (0, _2.createElement)(e, u);
  }
  return u.displayName = "Lazy", u.__f = !0, u;
}
function F() {
  this.u = null, this.o = null;
}
_2.options.unmount = function (n) {
  var t = n.__c;
  t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), O && O(n);
}, (L.prototype = new _2.Component()).__c = function (n, t) {
  var e = t.__c,
    r = this;
  null == r.t && (r.t = []), r.t.push(e);
  var u = U(r.__v),
    o = !1,
    i = function i() {
      o || (o = !0, e.__R = null, u ? u(l) : l());
    };
  e.__R = i;
  var l = function l() {
      if (! --r.__u) {
        if (r.state.__e) {
          var n = r.state.__e;
          r.__v.__k[0] = function n(t, e, r) {
            return t && (t.__v = null, t.__k = t.__k && t.__k.map(function (t) {
              return n(t, e, r);
            }), t.__c && t.__c.__P === e && (t.__e && r.insertBefore(t.__e, t.__d), t.__c.__e = !0, t.__c.__P = r)), t;
          }(n, n.__c.__P, n.__c.__O);
        }
        var t;
        for (r.setState({
          __e: r.__b = null
        }); t = r.t.pop();) t.forceUpdate();
      }
    },
    f = !0 === t.__h;
  r.__u++ || f || r.setState({
    __e: r.__b = r.__v.__k[0]
  }), n.then(i, i);
}, L.prototype.componentWillUnmount = function () {
  this.t = [];
}, L.prototype.render = function (n, t) {
  if (this.__b) {
    if (this.__v.__k) {
      var e = document.createElement("div"),
        r = this.__v.__k[0].__c;
      this.__v.__k[0] = function n(t, e, r) {
        return t && (t.__c && t.__c.__H && (t.__c.__H.__.forEach(function (n) {
          "function" == typeof n.__c && n.__c();
        }), t.__c.__H = null), null != (t = C({}, t)).__c && (t.__c.__P === r && (t.__c.__P = e), t.__c = null), t.__k = t.__k && t.__k.map(function (t) {
          return n(t, e, r);
        })), t;
      }(this.__b, e, r.__O = r.__P);
    }
    this.__b = null;
  }
  var u = t.__e && (0, _2.createElement)(_2.Fragment, null, n.fallback);
  return u && (u.__h = null), [(0, _2.createElement)(_2.Fragment, null, t.__e ? null : n.children), u];
};
var M = function M(n, t, e) {
  if (++e[1] === e[0] && n.o["delete"](t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for (e = n.u; e;) {
    for (; e.length > 3;) e.pop()();
    if (e[1] < e[0]) break;
    n.u = e = e[2];
  }
};
function T(n) {
  return this.getChildContext = function () {
    return n.context;
  }, n.children;
}
function j(n) {
  var t = this,
    e = n.i;
  t.componentWillUnmount = function () {
    (0, _2.render)(null, t.l), t.l = null, t.i = null;
  }, t.i && t.i !== e && t.componentWillUnmount(), n.__v ? (t.l || (t.i = e, t.l = {
    nodeType: 1,
    parentNode: e,
    childNodes: [],
    appendChild: function appendChild(n) {
      this.childNodes.push(n), t.i.appendChild(n);
    },
    insertBefore: function insertBefore(n, e) {
      this.childNodes.push(n), t.i.appendChild(n);
    },
    removeChild: function removeChild(n) {
      this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), t.i.removeChild(n);
    }
  }), (0, _2.render)((0, _2.createElement)(T, {
    context: t.context
  }, n.__v), t.l)) : t.l && t.componentWillUnmount();
}
function I(n, t) {
  return (0, _2.createElement)(j, {
    __v: n,
    i: t
  });
}
(F.prototype = new _2.Component()).__e = function (n) {
  var t = this,
    e = U(t.__v),
    r = t.o.get(n);
  return r[0]++, function (u) {
    var o = function o() {
      t.props.revealOrder ? (r.push(u), M(t, n, r)) : u();
    };
    e ? e(o) : o();
  };
}, F.prototype.render = function (n) {
  this.u = null, this.o = new Map();
  var t = (0, _2.toChildArray)(n.children);
  n.revealOrder && "b" === n.revealOrder[0] && t.reverse();
  for (var e = t.length; e--;) this.o.set(t[e], this.u = [1, 0, this.u]);
  return n.children;
}, F.prototype.componentDidUpdate = F.prototype.componentDidMount = function () {
  var n = this;
  this.o.forEach(function (t, e) {
    M(n, e, t);
  });
};
var W = "undefined" != typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103,
  P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,
  V = function V(n) {
    return ("undefined" != typeof Symbol && "symbol" == _typeof(Symbol()) ? /fil|che|rad/i : /fil|che|ra/i).test(n);
  };
function z(n, t, e) {
  return null == t.__k && (t.textContent = ""), (0, _2.render)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
function B(n, t, e) {
  return (0, _2.hydrate)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
_2.Component.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function (n) {
  Object.defineProperty(_2.Component.prototype, n, {
    configurable: !0,
    get: function get() {
      return this["UNSAFE_" + n];
    },
    set: function set(t) {
      Object.defineProperty(this, n, {
        configurable: !0,
        writable: !0,
        value: t
      });
    }
  });
});
var H = _2.options.event;
function Z() {}
function Y() {
  return this.cancelBubble;
}
function $() {
  return this.defaultPrevented;
}
_2.options.event = function (n) {
  return H && (n = H(n)), n.persist = Z, n.isPropagationStopped = Y, n.isDefaultPrevented = $, n.nativeEvent = n;
};
var q,
  G = {
    configurable: !0,
    get: function get() {
      return this["class"];
    }
  },
  J = _2.options.vnode;
_2.options.vnode = function (n) {
  var t = n.type,
    e = n.props,
    r = e;
  if ("string" == typeof t) {
    for (var u in r = {}, e) {
      var o = e[u];
      "value" === u && "defaultValue" in e && null == o || ("defaultValue" === u && "value" in e && null == e.value ? u = "value" : "download" === u && !0 === o ? o = "" : /ondoubleclick/i.test(u) ? u = "ondblclick" : /^onchange(textarea|input)/i.test(u + t) && !V(e.type) ? u = "oninput" : /^on(Ani|Tra|Tou|BeforeInp)/.test(u) ? u = u.toLowerCase() : P.test(u) ? u = u.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === o && (o = void 0), r[u] = o);
    }
    "select" == t && r.multiple && Array.isArray(r.value) && (r.value = (0, _2.toChildArray)(e.children).forEach(function (n) {
      n.props.selected = -1 != r.value.indexOf(n.props.value);
    })), "select" == t && null != r.defaultValue && (r.value = (0, _2.toChildArray)(e.children).forEach(function (n) {
      n.props.selected = r.multiple ? -1 != r.defaultValue.indexOf(n.props.value) : r.defaultValue == n.props.value;
    })), n.props = r;
  }
  t && e["class"] != e.className && (G.enumerable = "className" in e, null != e.className && (r["class"] = e.className), Object.defineProperty(r, "className", G)), n.$$typeof = W, J && J(n);
};
var K = _2.options.__r;
_2.options.__r = function (n) {
  K && K(n), q = n.__c;
};
var Q = {
    ReactCurrentDispatcher: {
      current: {
        readContext: function readContext(n) {
          return q.__n[n.__c].props.value;
        }
      }
    }
  },
  X = 1,
  nn = 2,
  tn = 3,
  en = 4,
  rn = 5;
exports.unstable_IdlePriority = rn;
exports.unstable_LowPriority = en;
exports.unstable_NormalPriority = tn;
exports.unstable_UserBlockingPriority = nn;
exports.unstable_ImmediatePriority = X;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Q;
function un(n, t) {
  return t();
}
var on = "object" == (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" == typeof performance.now ? performance.now.bind(performance) : function () {
    return Date.now();
  },
  ln = "16.8.0";
exports.version = ln;
exports.unstable_now = on;
function fn(n) {
  return _2.createElement.bind(null, n);
}
function cn(n) {
  return !!n && n.$$typeof === W;
}
function an(n) {
  return cn(n) ? _2.cloneElement.apply(null, arguments) : n;
}
function sn(n) {
  return !!n.__k && ((0, _2.render)(null, n), !0);
}
function hn(n) {
  return n && (n.base || 1 === n.nodeType && n) || null;
}
var pn = function pn(n, t) {
    return n(t);
  },
  vn = _2.Fragment;
exports.StrictMode = vn;
exports.unstable_batchedUpdates = pn;
var _default = {
  useState: _hooks.useState,
  useReducer: _hooks.useReducer,
  useEffect: _hooks.useEffect,
  useLayoutEffect: _hooks.useLayoutEffect,
  useRef: _hooks.useRef,
  useImperativeHandle: _hooks.useImperativeHandle,
  useMemo: _hooks.useMemo,
  useCallback: _hooks.useCallback,
  useContext: _hooks.useContext,
  useDebugValue: _hooks.useDebugValue,
  version: "16.8.0",
  Children: k,
  render: z,
  hydrate: B,
  unmountComponentAtNode: sn,
  createPortal: I,
  createElement: _2.createElement,
  createContext: _2.createContext,
  createFactory: fn,
  cloneElement: an,
  createRef: _2.createRef,
  Fragment: _2.Fragment,
  isValidElement: cn,
  findDOMNode: hn,
  Component: _2.Component,
  PureComponent: E,
  memo: g,
  forwardRef: x,
  unstable_batchedUpdates: pn,
  StrictMode: _2.Fragment,
  Suspense: L,
  SuspenseList: F,
  lazy: D,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: Q
};
exports["default"] = _default;

},{"../..":13,"../../hooks":14}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = p;
exports.Fragment = y;
exports.cloneElement = S;
exports.createContext = q;
exports.h = exports.createElement = a;
exports.createRef = h;
exports.hydrate = O;
exports.options = exports.isValidElement = void 0;
exports.render = N;
exports.toChildArray = w;
var n,
  l,
  u,
  i,
  t,
  o,
  r = {},
  f = [],
  e = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
exports.isValidElement = l;
exports.options = n;
function c(n, l) {
  for (var u in l) n[u] = l[u];
  return n;
}
function s(n) {
  var l = n.parentNode;
  l && l.removeChild(n);
}
function a(n, l, u) {
  var i,
    t,
    o,
    r = arguments,
    f = {};
  for (o in l) "key" == o ? i = l[o] : "ref" == o ? t = l[o] : f[o] = l[o];
  if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);
  if (null != u && (f.children = u), "function" == typeof n && null != n.defaultProps) for (o in n.defaultProps) void 0 === f[o] && (f[o] = n.defaultProps[o]);
  return v(n, f, i, t, null);
}
function v(l, u, i, t, o) {
  var r = {
    type: l,
    props: u,
    key: i,
    ref: t,
    __k: null,
    __: null,
    __b: 0,
    __e: null,
    __d: void 0,
    __c: null,
    __h: null,
    constructor: void 0,
    __v: null == o ? ++n.__v : o
  };
  return null != n.vnode && n.vnode(r), r;
}
function h() {
  return {
    current: null
  };
}
function y(n) {
  return n.children;
}
function p(n, l) {
  this.props = n, this.context = l;
}
function d(n, l) {
  if (null == l) return n.__ ? d(n.__, n.__.__k.indexOf(n) + 1) : null;
  for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
  return "function" == typeof n.type ? d(n) : null;
}
function _(n) {
  var l, u;
  if (null != (n = n.__) && null != n.__c) {
    for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
      n.__e = n.__c.base = u.__e;
      break;
    }
    return _(n);
  }
}
function k(l) {
  (!l.__d && (l.__d = !0) && u.push(l) && !b.__r++ || t !== n.debounceRendering) && ((t = n.debounceRendering) || i)(b);
}
function b() {
  for (var n; b.__r = u.length;) n = u.sort(function (n, l) {
    return n.__v.__b - l.__v.__b;
  }), u = [], n.some(function (n) {
    var l, u, i, t, o, r;
    n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = c({}, t)).__v = t.__v + 1, I(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? d(t) : o, t.__h), T(u, t), t.__e != o && _(t)));
  });
}
function m(n, l, u, i, t, o, e, c, s, a) {
  var h,
    p,
    _,
    k,
    b,
    m,
    w,
    A = i && i.__k || f,
    P = A.length;
  for (u.__k = [], h = 0; h < l.length; h++) if (null != (k = u.__k[h] = null == (k = l[h]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k || "bigint" == typeof k ? v(null, k, null, null, k) : Array.isArray(k) ? v(y, {
    children: k
  }, null, null, null) : k.__b > 0 ? v(k.type, k.props, k.key, null, k.__v) : k)) {
    if (k.__ = u, k.__b = u.__b + 1, null === (_ = A[h]) || _ && k.key == _.key && k.type === _.type) A[h] = void 0;else for (p = 0; p < P; p++) {
      if ((_ = A[p]) && k.key == _.key && k.type === _.type) {
        A[p] = void 0;
        break;
      }
      _ = null;
    }
    I(n, k, _ = _ || r, t, o, e, c, s, a), b = k.__e, (p = k.ref) && _.ref != p && (w || (w = []), _.ref && w.push(_.ref, null, k), w.push(p, k.__c || b, k)), null != b ? (null == m && (m = b), "function" == typeof k.type && null != k.__k && k.__k === _.__k ? k.__d = s = g(k, s, n) : s = x(n, k, _, A, b, s), a || "option" !== u.type ? "function" == typeof u.type && (u.__d = s) : n.value = "") : s && _.__e == s && s.parentNode != n && (s = d(_));
  }
  for (u.__e = m, h = P; h--;) null != A[h] && ("function" == typeof u.type && null != A[h].__e && A[h].__e == u.__d && (u.__d = d(i, h + 1)), L(A[h], A[h]));
  if (w) for (h = 0; h < w.length; h++) z(w[h], w[++h], w[++h]);
}
function g(n, l, u) {
  var i, t;
  for (i = 0; i < n.__k.length; i++) (t = n.__k[i]) && (t.__ = n, l = "function" == typeof t.type ? g(t, l, u) : x(u, t, t, n.__k, t.__e, l));
  return l;
}
function w(n, l) {
  return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
    w(n, l);
  }) : l.push(n)), l;
}
function x(n, l, u, i, t, o) {
  var r, f, e;
  if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {
    for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 2) if (f == t) break n;
    n.insertBefore(t, o), r = o;
  }
  return void 0 !== r ? r : t.nextSibling;
}
function A(n, l, u, i, t) {
  var o;
  for (o in u) "children" === o || "key" === o || o in l || C(n, o, null, u[o], i);
  for (o in l) t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || C(n, o, l[o], u[o], i);
}
function P(n, l, u) {
  "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || e.test(l) ? u : u + "px";
}
function C(n, l, u, i, t) {
  var o;
  n: if ("style" === l) {
    if ("string" == typeof u) n.style.cssText = u;else {
      if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) u && l in u || P(n.style, l, "");
      if (u) for (l in u) i && u[l] === i[l] || P(n.style, l, u[l]);
    }
  } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? H : $, o) : n.removeEventListener(l, o ? H : $, o);else if ("dangerouslySetInnerHTML" !== l) {
    if (t) l = l.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
      n[l] = null == u ? "" : u;
      break n;
    } catch (n) {}
    "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
  }
}
function $(l) {
  this.l[l.type + !1](n.event ? n.event(l) : l);
}
function H(l) {
  this.l[l.type + !0](n.event ? n.event(l) : l);
}
function I(l, u, i, t, o, r, f, e, s) {
  var a,
    v,
    h,
    d,
    _,
    k,
    b,
    g,
    w,
    x,
    A,
    P = u.type;
  if (void 0 !== u.constructor) return null;
  null != i.__h && (s = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (a = n.__b) && a(u);
  try {
    n: if ("function" == typeof P) {
      if (g = u.props, w = (a = P.contextType) && t[a.__c], x = a ? w ? w.props.value : a.__ : t, i.__c ? b = (v = u.__c = i.__c).__ = v.__E : ("prototype" in P && P.prototype.render ? u.__c = v = new P(g, x) : (u.__c = v = new p(g, x), v.constructor = P, v.render = M), w && w.sub(v), v.props = g, v.state || (v.state = {}), v.context = x, v.__n = t, h = v.__d = !0, v.__h = []), null == v.__s && (v.__s = v.state), null != P.getDerivedStateFromProps && (v.__s == v.state && (v.__s = c({}, v.__s)), c(v.__s, P.getDerivedStateFromProps(g, v.__s))), d = v.props, _ = v.state, h) null == P.getDerivedStateFromProps && null != v.componentWillMount && v.componentWillMount(), null != v.componentDidMount && v.__h.push(v.componentDidMount);else {
        if (null == P.getDerivedStateFromProps && g !== d && null != v.componentWillReceiveProps && v.componentWillReceiveProps(g, x), !v.__e && null != v.shouldComponentUpdate && !1 === v.shouldComponentUpdate(g, v.__s, x) || u.__v === i.__v) {
          v.props = g, v.state = v.__s, u.__v !== i.__v && (v.__d = !1), v.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {
            n && (n.__ = u);
          }), v.__h.length && f.push(v);
          break n;
        }
        null != v.componentWillUpdate && v.componentWillUpdate(g, v.__s, x), null != v.componentDidUpdate && v.__h.push(function () {
          v.componentDidUpdate(d, _, k);
        });
      }
      v.context = x, v.props = g, v.state = v.__s, (a = n.__r) && a(u), v.__d = !1, v.__v = u, v.__P = l, a = v.render(v.props, v.state, v.context), v.state = v.__s, null != v.getChildContext && (t = c(c({}, t), v.getChildContext())), h || null == v.getSnapshotBeforeUpdate || (k = v.getSnapshotBeforeUpdate(d, _)), A = null != a && a.type === y && null == a.key ? a.props.children : a, m(l, Array.isArray(A) ? A : [A], u, i, t, o, r, f, e, s), v.base = u.__e, u.__h = null, v.__h.length && f.push(v), b && (v.__E = v.__ = null), v.__e = !1;
    } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = j(i.__e, u, i, t, o, r, f, s);
    (a = n.diffed) && a(u);
  } catch (l) {
    u.__v = null, (s || null != r) && (u.__e = e, u.__h = !!s, r[r.indexOf(e)] = null), n.__e(l, u, i);
  }
}
function T(l, u) {
  n.__c && n.__c(u, l), l.some(function (u) {
    try {
      l = u.__h, u.__h = [], l.some(function (n) {
        n.call(u);
      });
    } catch (l) {
      n.__e(l, u.__v);
    }
  });
}
function j(n, l, u, i, t, o, e, c) {
  var a,
    v,
    h,
    y,
    p = u.props,
    d = l.props,
    _ = l.type,
    k = 0;
  if ("svg" === _ && (t = !0), null != o) for (; k < o.length; k++) if ((a = o[k]) && (a === n || (_ ? a.localName == _ : 3 == a.nodeType))) {
    n = a, o[k] = null;
    break;
  }
  if (null == n) {
    if (null === _) return document.createTextNode(d);
    n = t ? document.createElementNS("http://www.w3.org/2000/svg", _) : document.createElement(_, d.is && d), o = null, c = !1;
  }
  if (null === _) p === d || c && n.data === d || (n.data = d);else {
    if (o = o && f.slice.call(n.childNodes), v = (p = u.props || r).dangerouslySetInnerHTML, h = d.dangerouslySetInnerHTML, !c) {
      if (null != o) for (p = {}, y = 0; y < n.attributes.length; y++) p[n.attributes[y].name] = n.attributes[y].value;
      (h || v) && (h && (v && h.__html == v.__html || h.__html === n.innerHTML) || (n.innerHTML = h && h.__html || ""));
    }
    if (A(n, d, p, t, c), h) l.__k = [];else if (k = l.props.children, m(n, Array.isArray(k) ? k : [k], l, u, i, t && "foreignObject" !== _, o, e, n.firstChild, c), null != o) for (k = o.length; k--;) null != o[k] && s(o[k]);
    c || ("value" in d && void 0 !== (k = d.value) && (k !== n.value || "progress" === _ && !k) && C(n, "value", k, p.value, !1), "checked" in d && void 0 !== (k = d.checked) && k !== n.checked && C(n, "checked", k, p.checked, !1));
  }
  return n;
}
function z(l, u, i) {
  try {
    "function" == typeof l ? l(u) : l.current = u;
  } catch (l) {
    n.__e(l, i);
  }
}
function L(l, u, i) {
  var t, o, r;
  if (n.unmount && n.unmount(l), (t = l.ref) && (t.current && t.current !== l.__e || z(t, null, u)), i || "function" == typeof l.type || (i = null != (o = l.__e)), l.__e = l.__d = void 0, null != (t = l.__c)) {
    if (t.componentWillUnmount) try {
      t.componentWillUnmount();
    } catch (l) {
      n.__e(l, u);
    }
    t.base = t.__P = null;
  }
  if (t = l.__k) for (r = 0; r < t.length; r++) t[r] && L(t[r], u, i);
  null != o && s(o);
}
function M(n, l, u) {
  return this.constructor(n, u);
}
function N(l, u, i) {
  var t, o, e;
  n.__ && n.__(l, u), o = (t = "function" == typeof i) ? null : i && i.__k || u.__k, e = [], I(u, l = (!t && i || u).__k = a(y, null, [l]), o || r, r, void 0 !== u.ownerSVGElement, !t && i ? [i] : o ? null : u.firstChild ? f.slice.call(u.childNodes) : null, e, !t && i ? i : o ? o.__e : u.firstChild, t), T(e, l);
}
function O(n, l) {
  N(n, l, O);
}
function S(n, l, u) {
  var i,
    t,
    o,
    r = arguments,
    f = c({}, n.props);
  for (o in l) "key" == o ? i = l[o] : "ref" == o ? t = l[o] : f[o] = l[o];
  if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);
  return null != u && (f.children = u), v(n.type, f, i || n.key, t || n.ref, null);
}
function q(n, l) {
  var u = {
    __c: l = "__cC" + o++,
    __: n,
    Consumer: function Consumer(n, l) {
      return n.children(l);
    },
    Provider: function Provider(n) {
      var u, i;
      return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {
        return i;
      }, this.shouldComponentUpdate = function (n) {
        this.props.value !== n.value && u.some(k);
      }, this.sub = function (n) {
        u.push(n);
        var l = n.componentWillUnmount;
        n.componentWillUnmount = function () {
          u.splice(u.indexOf(n), 1), l && l.call(n);
        };
      }), n.children;
    }
  };
  return u.Provider.__ = u.Consumer.contextType = u;
}
exports.options = n = {
  __e: function __e(n, l) {
    for (var u, i, t; l = l.__;) if ((u = l.__c) && !u.__) try {
      if ((i = u.constructor) && null != i.getDerivedStateFromError && (u.setState(i.getDerivedStateFromError(n)), t = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), t = u.__d), t) return u.__E = u;
    } catch (l) {
      n = l;
    }
    throw n;
  },
  __v: 0
}, exports.isValidElement = l = function l(n) {
  return null != n && void 0 === n.constructor;
}, p.prototype.setState = function (n, l) {
  var u;
  u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = c({}, this.state), "function" == typeof n && (n = n(c({}, u), this.props)), n && c(u, n), null != n && this.__v && (l && this.__h.push(l), k(this));
}, p.prototype.forceUpdate = function (n) {
  this.__v && (this.__e = !0, n && this.__h.push(n), k(this));
}, p.prototype.render = y, u = [], i = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, b.__r = 0, o = 0;

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCallback = A;
exports.useContext = F;
exports.useDebugValue = T;
exports.useEffect = y;
exports.useErrorBoundary = q;
exports.useImperativeHandle = _;
exports.useLayoutEffect = h;
exports.useMemo = d;
exports.useReducer = p;
exports.useRef = s;
exports.useState = l;
var _2 = require("../..");
var t,
  u,
  r,
  o = 0,
  i = [],
  c = _2.options.__b,
  f = _2.options.__r,
  e = _2.options.diffed,
  a = _2.options.__c,
  v = _2.options.unmount;
function m(t, r) {
  _2.options.__h && _2.options.__h(u, t, o || r), o = 0;
  var i = u.__H || (u.__H = {
    __: [],
    __h: []
  });
  return t >= i.__.length && i.__.push({}), i.__[t];
}
function l(n) {
  return o = 1, p(w, n);
}
function p(n, r, o) {
  var i = m(t++, 2);
  return i.t = n, i.__c || (i.__ = [o ? o(r) : w(void 0, r), function (n) {
    var t = i.t(i.__[0], n);
    i.__[0] !== t && (i.__ = [t, i.__[1]], i.__c.setState({}));
  }], i.__c = u), i.__;
}
function y(r, o) {
  var i = m(t++, 3);
  !_2.options.__s && k(i.__H, o) && (i.__ = r, i.__H = o, u.__H.__h.push(i));
}
function h(r, o) {
  var i = m(t++, 4);
  !_2.options.__s && k(i.__H, o) && (i.__ = r, i.__H = o, u.__h.push(i));
}
function s(n) {
  return o = 5, d(function () {
    return {
      current: n
    };
  }, []);
}
function _(n, t, u) {
  o = 6, h(function () {
    "function" == typeof n ? n(t()) : n && (n.current = t());
  }, null == u ? u : u.concat(n));
}
function d(n, u) {
  var r = m(t++, 7);
  return k(r.__H, u) && (r.__ = n(), r.__H = u, r.__h = n), r.__;
}
function A(n, t) {
  return o = 8, d(function () {
    return n;
  }, t);
}
function F(n) {
  var r = u.context[n.__c],
    o = m(t++, 9);
  return o.__c = n, r ? (null == o.__ && (o.__ = !0, r.sub(u)), r.props.value) : n.__;
}
function T(t, u) {
  _2.options.useDebugValue && _2.options.useDebugValue(u ? u(t) : t);
}
function q(n) {
  var r = m(t++, 10),
    o = l();
  return r.__ = n, u.componentDidCatch || (u.componentDidCatch = function (n) {
    r.__ && r.__(n), o[1](n);
  }), [o[0], function () {
    o[1](void 0);
  }];
}
function x() {
  i.forEach(function (t) {
    if (t.__P) try {
      t.__H.__h.forEach(g), t.__H.__h.forEach(j), t.__H.__h = [];
    } catch (u) {
      t.__H.__h = [], _2.options.__e(u, t.__v);
    }
  }), i = [];
}
_2.options.__b = function (n) {
  u = null, c && c(n);
}, _2.options.__r = function (n) {
  f && f(n), t = 0;
  var r = (u = n.__c).__H;
  r && (r.__h.forEach(g), r.__h.forEach(j), r.__h = []);
}, _2.options.diffed = function (t) {
  e && e(t);
  var o = t.__c;
  o && o.__H && o.__H.__h.length && (1 !== i.push(o) && r === _2.options.requestAnimationFrame || ((r = _2.options.requestAnimationFrame) || function (n) {
    var t,
      u = function u() {
        clearTimeout(r), b && cancelAnimationFrame(t), setTimeout(n);
      },
      r = setTimeout(u, 100);
    b && (t = requestAnimationFrame(u));
  })(x)), u = void 0;
}, _2.options.__c = function (t, u) {
  u.some(function (t) {
    try {
      t.__h.forEach(g), t.__h = t.__h.filter(function (n) {
        return !n.__ || j(n);
      });
    } catch (r) {
      u.some(function (n) {
        n.__h && (n.__h = []);
      }), u = [], _2.options.__e(r, t.__v);
    }
  }), a && a(t, u);
}, _2.options.unmount = function (t) {
  v && v(t);
  var u = t.__c;
  if (u && u.__H) try {
    u.__H.__.forEach(g);
  } catch (t) {
    _2.options.__e(t, u.__v);
  }
};
var b = "function" == typeof requestAnimationFrame;
function g(n) {
  var t = u;
  "function" == typeof n.__c && n.__c(), u = t;
}
function j(n) {
  var t = u;
  n.__c = n.__(), u = t;
}
function k(n, t) {
  return !n || n.length !== t.length || t.some(function (t, u) {
    return t !== n[u];
  });
}
function w(n, t) {
  return "function" == typeof t ? t(n) : t;
}

},{"../..":13}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Fragment", {
  enumerable: true,
  get: function get() {
    return _2.Fragment;
  }
});
exports.jsxDEV = exports.jsxs = exports.jsx = o;
var _2 = require("../..");
function o(_, o, e, n, t) {
  var f = {};
  for (var l in o) "ref" != l && (f[l] = o[l]);
  var s,
    u,
    a = {
      type: _,
      props: f,
      key: e,
      ref: o && o.ref,
      __k: null,
      __: null,
      __b: 0,
      __e: null,
      __d: void 0,
      __c: null,
      __h: null,
      constructor: void 0,
      __v: ++_2.options.__v,
      __source: n,
      __self: t
    };
  if ("function" == typeof _ && (s = _.defaultProps)) for (u in s) void 0 === f[u] && (f[u] = s[u]);
  return _2.options.vnode && _2.options.vnode(a), a;
}

},{"../..":13}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acceptCompletion = exports.CompletionContext = void 0;
exports.autocompletion = autocompletion;
exports.clearSnippet = void 0;
exports.closeBrackets = closeBrackets;
exports.completeAnyWord = exports.closeCompletion = exports.closeBracketsKeymap = void 0;
exports.completeFromList = completeFromList;
exports.completionKeymap = void 0;
exports.completionStatus = completionStatus;
exports.currentCompletions = currentCompletions;
exports.deleteBracketPair = void 0;
exports.ifIn = ifIn;
exports.ifNotIn = ifNotIn;
exports.insertBracket = insertBracket;
exports.insertCompletionText = insertCompletionText;
exports.moveCompletionSelection = moveCompletionSelection;
exports.prevSnippetField = exports.pickedCompletion = exports.nextSnippetField = void 0;
exports.selectedCompletion = selectedCompletion;
exports.selectedCompletionIndex = selectedCompletionIndex;
exports.setSelectedCompletion = setSelectedCompletion;
exports.snippet = snippet;
exports.snippetCompletion = snippetCompletion;
exports.startCompletion = exports.snippetKeymap = void 0;
var _state = require("@codemirror/state");
var _view = require("@codemirror/view");
var _language = require("@codemirror/language");
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
An instance of this is passed to completion source functions.
*/
var CompletionContext = /*#__PURE__*/function () {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  function CompletionContext(
  /**
  The editor state that the completion happens in.
  */
  state,
  /**
  The position at which the completion is happening.
  */
  pos,
  /**
  Indicates whether completion was activated explicitly, or
  implicitly by typing. The usual way to respond to this is to
  only return completions when either there is part of a
  completable entity before the cursor, or `explicit` is true.
  */
  explicit) {
    _classCallCheck(this, CompletionContext);
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    /**
    @internal
    */
    this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  _createClass(CompletionContext, [{
    key: "tokenBefore",
    value: function tokenBefore(types) {
      var token = (0, _language.syntaxTree)(this.state).resolveInner(this.pos, -1);
      while (token && types.indexOf(token.name) < 0) token = token.parent;
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
  }, {
    key: "matchBefore",
    value: function matchBefore(expr) {
      var line = this.state.doc.lineAt(this.pos);
      var start = Math.max(line.from, this.pos - 250);
      var str = line.text.slice(start - line.from, this.pos - line.from);
      var found = str.search(ensureAnchor(expr, false));
      return found < 0 ? null : {
        from: start + found,
        to: this.pos,
        text: str.slice(found)
      };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
  }, {
    key: "aborted",
    get: function get() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    */
  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      if (type == "abort" && this.abortListeners) this.abortListeners.push(listener);
    }
  }]);
  return CompletionContext;
}();
exports.CompletionContext = CompletionContext;
function toSet(chars) {
  var flat = Object.keys(chars).join("");
  var words = /\w/.test(flat);
  if (words) flat = flat.replace(/\w/g, "");
  return "[".concat(words ? "\\w" : "").concat(flat.replace(/[^\w\s]/g, "\\$&"), "]");
}
function prefixMatch(options) {
  var first = Object.create(null),
    rest = Object.create(null);
  var _iterator = _createForOfIteratorHelper(options),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var label = _step.value.label;
      first[label[0]] = true;
      for (var i = 1; i < label.length; i++) rest[label[i]] = true;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
/**
Given a a fixed array of options, return an autocompleter that
completes them.
*/
function completeFromList(list) {
  var options = list.map(function (o) {
    return typeof o == "string" ? {
      label: o
    } : o;
  });
  var _ref = options.every(function (o) {
      return /^\w+$/.test(o.label);
    }) ? [/\w*$/, /\w+$/] : prefixMatch(options),
    _ref2 = _slicedToArray(_ref, 2),
    validFor = _ref2[0],
    match = _ref2[1];
  return function (context) {
    var token = context.matchBefore(match);
    return token || context.explicit ? {
      from: token ? token.from : context.pos,
      options: options,
      validFor: validFor
    } : null;
  };
}
/**
Wrap the given completion source so that it will only fire when the
cursor is in a syntax node with one of the given names.
*/
function ifIn(nodes, source) {
  return function (context) {
    for (var pos = (0, _language.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1) return source(context);
      if (pos.type.isTop) break;
    }
    return null;
  };
}
/**
Wrap the given completion source so that it will not fire when the
cursor is in a syntax node with one of the given names.
*/
function ifNotIn(nodes, source) {
  return function (context) {
    for (var pos = (0, _language.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1) return null;
      if (pos.type.isTop) break;
    }
    return source(context);
  };
}
var Option = /*#__PURE__*/_createClass(function Option(completion, source, match, score) {
  _classCallCheck(this, Option);
  this.completion = completion;
  this.source = source;
  this.match = match;
  this.score = score;
});
function cur(state) {
  return state.selection.main.from;
}
// Make sure the given regexp has a $ at its end and, if `start` is
// true, a ^ at its start.
function ensureAnchor(expr, start) {
  var _a;
  var source = expr.source;
  var addStart = start && source[0] != "^",
    addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd) return expr;
  return new RegExp("".concat(addStart ? "^" : "", "(?:").concat(source, ")").concat(addEnd ? "$" : ""), (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
}
/**
This annotation is added to transactions that are produced by
picking a completion.
*/
var pickedCompletion = /*@__PURE__*/_state.Annotation.define();
/**
Helper function that returns a transaction spec which inserts a
completion's text in the main selection range, and any other
selection range that has the same text in front of it.
*/
exports.pickedCompletion = pickedCompletion;
function insertCompletionText(state, text, from, to) {
  var main = state.selection.main,
    len = to - from;
  return Object.assign(Object.assign({}, state.changeByRange(function (range) {
    if (range != main && len && state.sliceDoc(range.from - len, range.from + to - main.from) != state.sliceDoc(from, to)) return {
      range: range
    };
    return {
      changes: {
        from: range.from - len,
        to: to == main.from ? range.to : range.from + to - main.from,
        insert: text
      },
      range: _state.EditorSelection.cursor(range.from - len + text.length)
    };
  })), {
    userEvent: "input.complete"
  });
}
function applyCompletion(view, option) {
  var apply = option.completion.apply || option.completion.label;
  var result = option.source;
  if (typeof apply == "string") view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), {
    annotations: pickedCompletion.of(option.completion)
  }));else apply(view, option.completion, result.from, result.to);
}
var SourceCache = /*@__PURE__*/new WeakMap();
function asSource(source) {
  if (!Array.isArray(source)) return source;
  var known = SourceCache.get(source);
  if (!known) SourceCache.set(source, known = completeFromList(source));
  return known;
}
var startCompletionEffect = /*@__PURE__*/_state.StateEffect.define();
var closeCompletionEffect = /*@__PURE__*/_state.StateEffect.define();

// A pattern matcher for fuzzy completion matching. Create an instance
// once for a pattern, and then use that to match any number of
// completions.
var FuzzyMatcher = /*#__PURE__*/function () {
  function FuzzyMatcher(pattern) {
    _classCallCheck(this, FuzzyMatcher);
    this.pattern = pattern;
    this.chars = [];
    this.folded = [];
    // Buffers reused by calls to `match` to track matched character
    // positions.
    this.any = [];
    this.precise = [];
    this.byWord = [];
    for (var p = 0; p < pattern.length;) {
      var _char = (0, _state.codePointAt)(pattern, p),
        size = (0, _state.codePointSize)(_char);
      this.chars.push(_char);
      var part = pattern.slice(p, p + size),
        upper = part.toUpperCase();
      this.folded.push((0, _state.codePointAt)(upper == part ? part.toLowerCase() : upper, 0));
      p += size;
    }
    this.astral = pattern.length != this.chars.length;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return null for no match, and otherwise an array that starts
  // with the match score, followed by any number of `from, to` pairs
  // indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  _createClass(FuzzyMatcher, [{
    key: "match",
    value: function match(word) {
      if (this.pattern.length == 0) return [0];
      if (word.length < this.pattern.length) return null;
      var chars = this.chars,
        folded = this.folded,
        any = this.any,
        precise = this.precise,
        byWord = this.byWord;
      // For single-character queries, only match when they occur right
      // at the start
      if (chars.length == 1) {
        var first = (0, _state.codePointAt)(word, 0),
          firstSize = (0, _state.codePointSize)(first);
        var _score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
        if (first == chars[0]) ;else if (first == folded[0]) _score += -200 /* Penalty.CaseFold */;else return null;
        return [_score, 0, firstSize];
      }
      var direct = word.indexOf(this.pattern);
      if (direct == 0) return [word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, 0, this.pattern.length];
      var len = chars.length,
        anyTo = 0;
      if (direct < 0) {
        for (var i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
          var next = (0, _state.codePointAt)(word, i);
          if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
          i += (0, _state.codePointSize)(next);
        }
        // No match, exit immediately
        if (anyTo < len) return null;
      }
      // This tracks the extent of the precise (non-folded, not
      // necessarily adjacent) match
      var preciseTo = 0;
      // Tracks whether there is a match that hits only characters that
      // appear to be starting words. `byWordFolded` is set to true when
      // a case folded character is encountered in such a match
      var byWordTo = 0,
        byWordFolded = false;
      // If we've found a partial adjacent match, these track its state
      var adjacentTo = 0,
        adjacentStart = -1,
        adjacentEnd = -1;
      var hasLower = /[a-z]/.test(word),
        wordAdjacent = true;
      // Go over the option's text, scanning for the various kinds of matches
      for (var _i2 = 0, _e2 = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; _i2 < _e2 && byWordTo < len;) {
        var _next = (0, _state.codePointAt)(word, _i2);
        if (direct < 0) {
          if (preciseTo < len && _next == chars[preciseTo]) precise[preciseTo++] = _i2;
          if (adjacentTo < len) {
            if (_next == chars[adjacentTo] || _next == folded[adjacentTo]) {
              if (adjacentTo == 0) adjacentStart = _i2;
              adjacentEnd = _i2 + 1;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        var ch = void 0,
          type = _next < 0xff ? _next >= 48 && _next <= 57 || _next >= 97 && _next <= 122 ? 2 /* Tp.Lower */ : _next >= 65 && _next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */ : (ch = (0, _state.fromCodePoint)(_next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */;
        if (!_i2 || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
          if (chars[byWordTo] == _next || folded[byWordTo] == _next && (byWordFolded = true)) byWord[byWordTo++] = _i2;else if (byWord.length) wordAdjacent = false;
        }
        prevType = type;
        _i2 += (0, _state.codePointSize)(_next);
      }
      if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0) return [-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), 0, adjacentEnd];
      if (direct > -1) return [-700 /* Penalty.NotStart */ - word.length, direct, direct + this.pattern.length];
      if (adjacentTo == len) return [-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, adjacentStart, adjacentEnd];
      if (byWordTo == len) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ + (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
      return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
    }
  }, {
    key: "result",
    value: function result(score, positions, word) {
      var result = [score - word.length],
        i = 1;
      var _iterator2 = _createForOfIteratorHelper(positions),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var pos = _step2.value;
          var to = pos + (this.astral ? (0, _state.codePointSize)((0, _state.codePointAt)(word, pos)) : 1);
          if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {
            result[i++] = pos;
            result[i++] = to;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return result;
    }
  }]);
  return FuzzyMatcher;
}();
var completionConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(configs) {
    return (0, _state.combineConfig)(configs, {
      activateOnTyping: true,
      selectOnOpen: true,
      override: null,
      closeOnBlur: true,
      maxRenderedOptions: 100,
      defaultKeymap: true,
      tooltipClass: function tooltipClass() {
        return "";
      },
      optionClass: function optionClass() {
        return "";
      },
      aboveCursor: false,
      icons: true,
      addToOptions: [],
      positionInfo: defaultPositionInfo,
      compareCompletions: function compareCompletions(a, b) {
        return a.label.localeCompare(b.label);
      },
      interactionDelay: 75
    }, {
      defaultKeymap: function defaultKeymap(a, b) {
        return a && b;
      },
      closeOnBlur: function closeOnBlur(a, b) {
        return a && b;
      },
      icons: function icons(a, b) {
        return a && b;
      },
      tooltipClass: function tooltipClass(a, b) {
        return function (c) {
          return joinClass(a(c), b(c));
        };
      },
      optionClass: function optionClass(a, b) {
        return function (c) {
          return joinClass(a(c), b(c));
        };
      },
      addToOptions: function addToOptions(a, b) {
        return a.concat(b);
      }
    });
  }
});
function joinClass(a, b) {
  return a ? b ? a + " " + b : a : b;
}
function defaultPositionInfo(view, list, option, info, space) {
  var rtl = view.textDirection == _view.Direction.RTL,
    left = rtl,
    narrow = false;
  var side = "top",
    offset,
    maxWidth;
  var spaceLeft = list.left - space.left,
    spaceRight = space.right - list.right;
  var infoWidth = info.right - info.left,
    infoHeight = info.bottom - info.top;
  if (left && spaceLeft < Math.min(infoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoWidth, spaceLeft)) left = true;
  if (infoWidth <= (left ? spaceLeft : spaceRight)) {
    offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
    maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
  } else {
    narrow = true;
    maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
    var spaceBelow = space.bottom - list.bottom;
    if (spaceBelow >= infoHeight || spaceBelow > list.top) {
      // Below the completion
      offset = option.bottom - list.top;
    } else {
      // Above it
      side = "bottom";
      offset = list.bottom - option.top;
    }
  }
  return {
    style: "".concat(side, ": ").concat(offset, "px; max-width: ").concat(maxWidth, "px"),
    "class": "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
  };
}
function optionContent(config) {
  var content = config.addToOptions.slice();
  if (config.icons) content.push({
    render: function render(completion) {
      var _icon$classList;
      var icon = document.createElement("div");
      icon.classList.add("cm-completionIcon");
      if (completion.type) (_icon$classList = icon.classList).add.apply(_icon$classList, _toConsumableArray(completion.type.split(/\s+/g).map(function (cls) {
        return "cm-completionIcon-" + cls;
      })));
      icon.setAttribute("aria-hidden", "true");
      return icon;
    },
    position: 20
  });
  content.push({
    render: function render(completion, _s, match) {
      var labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      var label = completion.label,
        off = 0;
      for (var j = 1; j < match.length;) {
        var from = match[j++],
          to = match[j++];
        if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
        var span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from, to)));
        span.className = "cm-completionMatchedText";
        off = to;
      }
      if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
      return labelElt;
    },
    position: 50
  }, {
    render: function render(completion) {
      if (!completion.detail) return null;
      var detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },
    position: 80
  });
  return content.sort(function (a, b) {
    return a.position - b.position;
  }).map(function (a) {
    return a.render;
  });
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max) return {
    from: 0,
    to: total
  };
  if (selected < 0) selected = 0;
  if (selected <= total >> 1) {
    var _off = Math.floor(selected / max);
    return {
      from: _off * max,
      to: (_off + 1) * max
    };
  }
  var off = Math.floor((total - selected) / max);
  return {
    from: total - (off + 1) * max,
    to: total - off * max
  };
}
var CompletionTooltip = /*#__PURE__*/function () {
  function CompletionTooltip(view, stateField) {
    var _this = this;
    _classCallCheck(this, CompletionTooltip);
    this.view = view;
    this.stateField = stateField;
    this.info = null;
    this.placeInfoReq = {
      read: function read() {
        return _this.measureInfo();
      },
      write: function write(pos) {
        return _this.placeInfo(pos);
      },
      key: this
    };
    this.space = null;
    this.currentClass = "";
    var cState = view.state.field(stateField);
    var _cState$open = cState.open,
      options = _cState$open.options,
      selected = _cState$open.selected;
    var config = view.state.facet(completionConfig);
    this.optionContent = optionContent(config);
    this.optionClass = config.optionClass;
    this.tooltipClass = config.tooltipClass;
    this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.updateTooltipClass(view.state);
    this.dom.addEventListener("mousedown", function (e) {
      for (var dom = e.target, match; dom && dom != _this.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
          applyCompletion(view, options[+match[1]]);
          e.preventDefault();
          return;
        }
      }
    });
    this.dom.addEventListener("focusout", function (e) {
      var state = view.state.field(_this.stateField, false);
      if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM) view.dispatch({
        effects: closeCompletionEffect.of(null)
      });
    });
    this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
    this.list.addEventListener("scroll", function () {
      if (_this.info) _this.view.requestMeasure(_this.placeInfoReq);
    });
  }
  _createClass(CompletionTooltip, [{
    key: "mount",
    value: function mount() {
      this.updateSel();
    }
  }, {
    key: "update",
    value: function update(_update) {
      var _a, _b, _c;
      var cState = _update.state.field(this.stateField);
      var prevState = _update.startState.field(this.stateField);
      this.updateTooltipClass(_update.state);
      if (cState != prevState) {
        this.updateSel();
        if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled)) this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));
      }
    }
  }, {
    key: "updateTooltipClass",
    value: function updateTooltipClass(state) {
      var cls = this.tooltipClass(state);
      if (cls != this.currentClass) {
        var _iterator3 = _createForOfIteratorHelper(this.currentClass.split(" ")),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var c = _step3.value;
            if (c) this.dom.classList.remove(c);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        var _iterator4 = _createForOfIteratorHelper(cls.split(" ")),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _c2 = _step4.value;
            if (_c2) this.dom.classList.add(_c2);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        this.currentClass = cls;
      }
    }
  }, {
    key: "positioned",
    value: function positioned(space) {
      this.space = space;
      if (this.info) this.view.requestMeasure(this.placeInfoReq);
    }
  }, {
    key: "updateSel",
    value: function updateSel() {
      var _this2 = this;
      var cState = this.view.state.field(this.stateField),
        open = cState.open;
      if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
        this.list.addEventListener("scroll", function () {
          if (_this2.info) _this2.view.requestMeasure(_this2.placeInfoReq);
        });
      }
      if (this.updateSelectedOption(open.selected)) {
        if (this.info) {
          this.info.remove();
          this.info = null;
        }
        var completion = open.options[open.selected].completion;
        var info = completion.info;
        if (!info) return;
        var infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
        if (!infoResult) return;
        if ('then' in infoResult) {
          infoResult.then(function (node) {
            if (node && _this2.view.state.field(_this2.stateField, false) == cState) _this2.addInfoPane(node);
          })["catch"](function (e) {
            return (0, _view.logException)(_this2.view.state, e, "completion info");
          });
        } else {
          this.addInfoPane(infoResult);
        }
      }
    }
  }, {
    key: "addInfoPane",
    value: function addInfoPane(content) {
      var dom = this.info = document.createElement("div");
      dom.className = "cm-tooltip cm-completionInfo";
      dom.appendChild(content);
      this.dom.appendChild(dom);
      this.view.requestMeasure(this.placeInfoReq);
    }
  }, {
    key: "updateSelectedOption",
    value: function updateSelectedOption(selected) {
      var set = null;
      for (var opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
        if (opt.nodeName != "LI" || !opt.id) {
          i--; // A section header
        } else if (i == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
        }
      }
      if (set) scrollIntoView(this.list, set);
      return set;
    }
  }, {
    key: "measureInfo",
    value: function measureInfo() {
      var sel = this.dom.querySelector("[aria-selected]");
      if (!sel || !this.info) return null;
      var listRect = this.dom.getBoundingClientRect();
      var infoRect = this.info.getBoundingClientRect();
      var selRect = sel.getBoundingClientRect();
      var space = this.space;
      if (!space) {
        var win = this.dom.ownerDocument.defaultView || window;
        space = {
          left: 0,
          top: 0,
          right: win.innerWidth,
          bottom: win.innerHeight
        };
      }
      if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;
      return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space);
    }
  }, {
    key: "placeInfo",
    value: function placeInfo(pos) {
      if (this.info) {
        if (pos) {
          if (pos.style) this.info.style.cssText = pos.style;
          this.info.className = "cm-tooltip cm-completionInfo " + (pos["class"] || "");
        } else {
          this.info.style.cssText = "top: -1e6px";
        }
      }
    }
  }, {
    key: "createListBox",
    value: function createListBox(options, id, range) {
      var ul = document.createElement("ul");
      ul.id = id;
      ul.setAttribute("role", "listbox");
      ul.setAttribute("aria-expanded", "true");
      ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
      var curSection = null;
      for (var i = range.from; i < range.to; i++) {
        var _options$i = options[i],
          completion = _options$i.completion,
          match = _options$i.match,
          section = completion.section;
        if (section) {
          var name = typeof section == "string" ? section : section.name;
          if (name != curSection && (i > range.from || range.from == 0)) {
            curSection = name;
            if (typeof section != "string" && section.header) {
              ul.appendChild(section.header(section));
            } else {
              var header = ul.appendChild(document.createElement("completion-section"));
              header.textContent = name;
            }
          }
        }
        var li = ul.appendChild(document.createElement("li"));
        li.id = id + "-" + i;
        li.setAttribute("role", "option");
        var cls = this.optionClass(completion);
        if (cls) li.className = cls;
        var _iterator5 = _createForOfIteratorHelper(this.optionContent),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var source = _step5.value;
            var node = source(completion, this.view.state, match);
            if (node) li.appendChild(node);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
      if (range.from) ul.classList.add("cm-completionListIncompleteTop");
      if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
      return ul;
    }
  }]);
  return CompletionTooltip;
}(); // We allocate a new function instance every time the completion
// changes to force redrawing/repositioning of the tooltip
function completionTooltip(stateField) {
  return function (view) {
    return new CompletionTooltip(view, stateField);
  };
}
function scrollIntoView(container, element) {
  var parent = container.getBoundingClientRect();
  var self = element.getBoundingClientRect();
  if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;
}

// Used to pick a preferred option when two options with the same
// label occur in the result.
function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}
function sortOptions(active, state) {
  var options = [];
  var sections = null;
  var addOption = function addOption(option) {
    options.push(option);
    var section = option.completion.section;
    if (section) {
      if (!sections) sections = [];
      var name = typeof section == "string" ? section : section.name;
      if (!sections.some(function (s) {
        return s.name == name;
      })) sections.push(typeof section == "string" ? {
        name: name
      } : section);
    }
  };
  var _iterator6 = _createForOfIteratorHelper(active),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var a = _step6.value;
      if (a.hasResult()) {
        if (a.result.filter === false) {
          var getMatch = a.result.getMatch;
          var _iterator10 = _createForOfIteratorHelper(a.result.options),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var _option = _step10.value;
              var match = [1e9 - options.length];
              if (getMatch) {
                var _iterator11 = _createForOfIteratorHelper(getMatch(_option)),
                  _step11;
                try {
                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                    var n = _step11.value;
                    match.push(n);
                  }
                } catch (err) {
                  _iterator11.e(err);
                } finally {
                  _iterator11.f();
                }
              }
              addOption(new Option(_option, a, match, match[0]));
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        } else {
          var matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),
            _match = void 0;
          var _iterator12 = _createForOfIteratorHelper(a.result.options),
            _step12;
          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var _option2 = _step12.value;
              if (_match = matcher.match(_option2.label)) {
                addOption(new Option(_option2, a, _match, _match[0] + (_option2.boost || 0)));
              }
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  if (sections) {
    var sectionOrder = Object.create(null),
      pos = 0;
    var cmp = function cmp(a, b) {
      var _a, _b;
      return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);
    };
    var _iterator7 = _createForOfIteratorHelper(sections.sort(cmp)),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var s = _step7.value;
        pos -= 1e5;
        sectionOrder[s.name] = pos;
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    var _iterator8 = _createForOfIteratorHelper(options),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var option = _step8.value;
        var section = option.completion.section;
        if (section) option.score += sectionOrder[typeof section == "string" ? section : section.name];
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
  }
  var result = [],
    prev = null;
  var compare = state.facet(completionConfig).compareCompletions;
  var _iterator9 = _createForOfIteratorHelper(options.sort(function (a, b) {
      return b.score - a.score || compare(a.completion, b.completion);
    })),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var opt = _step9.value;
      if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail || prev.type != null && opt.completion.type != null && prev.type != opt.completion.type || prev.apply != opt.completion.apply) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
      prev = opt.completion;
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return result;
}
var CompletionDialog = /*#__PURE__*/function () {
  function CompletionDialog(options, attrs, tooltip, timestamp, selected, disabled) {
    _classCallCheck(this, CompletionDialog);
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
    this.disabled = disabled;
  }
  _createClass(CompletionDialog, [{
    key: "setSelected",
    value: function setSelected(selected, id) {
      return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
    }
  }, {
    key: "map",
    value: function map(changes) {
      return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
        pos: changes.mapPos(this.tooltip.pos)
      }), this.timestamp, this.selected, this.disabled);
    }
  }], [{
    key: "build",
    value: function build(active, state, id, prev, conf) {
      var options = sortOptions(active, state);
      if (!options.length) {
        return prev && active.some(function (a) {
          return a.state == 1;
        } /* State.Pending */) ? new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
      }
      var selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
      if (prev && prev.selected != selected && prev.selected != -1) {
        var selectedValue = prev.options[prev.selected].completion;
        for (var i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {
          selected = i;
          break;
        }
      }
      return new CompletionDialog(options, makeAttrs(id, selected), {
        pos: active.reduce(function (a, b) {
          return b.hasResult() ? Math.min(a, b.from) : a;
        }, 1e8),
        create: completionTooltip(completionState),
        above: conf.aboveCursor
      }, prev ? prev.timestamp : Date.now(), selected, false);
    }
  }]);
  return CompletionDialog;
}();
var CompletionState = /*#__PURE__*/function () {
  function CompletionState(active, id, open) {
    _classCallCheck(this, CompletionState);
    this.active = active;
    this.id = id;
    this.open = open;
  }
  _createClass(CompletionState, [{
    key: "update",
    value: function update(tr) {
      var _this3 = this;
      var state = tr.state,
        conf = state.facet(completionConfig);
      var sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      var active = sources.map(function (source) {
        var value = _this3.active.find(function (s) {
          return s.source == source;
        }) || new ActiveSource(source, _this3.active.some(function (a) {
          return a.state != 0;
        } /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every(function (a, i) {
        return a == _this3.active[i];
      })) active = this.active;
      var open = this.open;
      if (open && tr.docChanged) open = open.map(tr.changes);
      if (tr.selection || active.some(function (a) {
        return a.hasResult() && tr.changes.touchesRange(a.from, a.to);
      }) || !sameResults(active, this.active)) open = CompletionDialog.build(active, state, this.id, open, conf);else if (open && open.disabled && !active.some(function (a) {
        return a.state == 1;
      } /* State.Pending */)) open = null;
      if (!open && active.every(function (a) {
        return a.state != 1;
      } /* State.Pending */) && active.some(function (a) {
        return a.hasResult();
      })) active = active.map(function (a) {
        return a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a;
      });
      var _iterator13 = _createForOfIteratorHelper(tr.effects),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var effect = _step13.value;
          if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
    }
  }, {
    key: "tooltip",
    get: function get() {
      return this.open ? this.open.tooltip : null;
    }
  }, {
    key: "attrs",
    get: function get() {
      return this.open ? this.open.attrs : baseAttrs;
    }
  }], [{
    key: "start",
    value: function start() {
      return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
  }]);
  return CompletionState;
}();
function sameResults(a, b) {
  if (a == b) return true;
  for (var iA = 0, iB = 0;;) {
    while (iA < a.length && !a[iA].hasResult) iA++;
    while (iB < b.length && !b[iB].hasResult) iB++;
    var endA = iA == a.length,
      endB = iB == b.length;
    if (endA || endB) return endA == endB;
    if (a[iA++].result != b[iB++].result) return false;
  }
}
var baseAttrs = {
  "aria-autocomplete": "list"
};
function makeAttrs(id, selected) {
  var result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id
  };
  if (selected > -1) result["aria-activedescendant"] = id + "-" + selected;
  return result;
}
var none = [];
function getUserEvent(tr) {
  return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
}
var ActiveSource = /*#__PURE__*/function () {
  function ActiveSource(source, state) {
    var explicitPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    _classCallCheck(this, ActiveSource);
    this.source = source;
    this.state = state;
    this.explicitPos = explicitPos;
  }
  _createClass(ActiveSource, [{
    key: "hasResult",
    value: function hasResult() {
      return false;
    }
  }, {
    key: "update",
    value: function update(tr, conf) {
      var event = getUserEvent(tr),
        value = this;
      if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0 /* State.Inactive */) value = new ActiveSource(value.source, 0 /* State.Inactive */);
      var _iterator14 = _createForOfIteratorHelper(tr.effects),
        _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var effect = _step14.value;
          if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* State.Inactive */);else if (effect.is(setActiveEffect)) {
            var _iterator15 = _createForOfIteratorHelper(effect.value),
              _step15;
            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var active = _step15.value;
                if (active.source == value.source) value = active;
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      return value;
    }
  }, {
    key: "handleUserEvent",
    value: function handleUserEvent(tr, type, conf) {
      return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);
    }
  }, {
    key: "handleChange",
    value: function handleChange(tr) {
      return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
    }
  }, {
    key: "map",
    value: function map(changes) {
      return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
    }
  }]);
  return ActiveSource;
}();
var ActiveResult = /*#__PURE__*/function (_ActiveSource) {
  _inherits(ActiveResult, _ActiveSource);
  var _super = _createSuper(ActiveResult);
  function ActiveResult(source, explicitPos, result, from, to) {
    var _this4;
    _classCallCheck(this, ActiveResult);
    _this4 = _super.call(this, source, 2 /* State.Result */, explicitPos);
    _this4.result = result;
    _this4.from = from;
    _this4.to = to;
    return _this4;
  }
  _createClass(ActiveResult, [{
    key: "hasResult",
    value: function hasResult() {
      return true;
    }
  }, {
    key: "handleUserEvent",
    value: function handleUserEvent(tr, type, conf) {
      var _a;
      var from = tr.changes.mapPos(this.from),
        to = tr.changes.mapPos(this.to, 1);
      var pos = cur(tr.state);
      if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || type == "delete" && cur(tr.startState) == this.from) return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);
      var explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos),
        updated;
      if (checkValid(this.result.validFor, tr.state, from, to)) return new ActiveResult(this.source, explicitPos, this.result, from, to);
      if (this.result.update && (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0)))) return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
      return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);
    }
  }, {
    key: "handleChange",
    value: function handleChange(tr) {
      return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
    }
  }]);
  return ActiveResult;
}(ActiveSource);
function checkValid(validFor, state, from, to) {
  if (!validFor) return false;
  var text = state.sliceDoc(from, to);
  return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
}
var setActiveEffect = /*@__PURE__*/_state.StateEffect.define({
  map: function map(sources, mapping) {
    return sources.map(function (s) {
      return s.map(mapping);
    });
  }
});
var setSelectedEffect = /*@__PURE__*/_state.StateEffect.define();
var completionState = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return CompletionState.start();
  },
  update: function update(value, tr) {
    return value.update(tr);
  },
  provide: function provide(f) {
    return [_view.showTooltip.from(f, function (val) {
      return val.tooltip;
    }), _view.EditorView.contentAttributes.from(f, function (state) {
      return state.attrs;
    })];
  }
});

/**
Returns a command that moves the completion selection forward or
backward by the given amount.
*/
function moveCompletionSelection(forward) {
  var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "option";
  return function (view) {
    var cState = view.state.field(completionState, false);
    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
    var step = 1,
      tooltip;
    if (by == "page" && (tooltip = (0, _view.getTooltip)(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    var length = cState.open.options.length;
    var selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
    if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
    view.dispatch({
      effects: setSelectedEffect.of(selected)
    });
    return true;
  };
}
/**
Accept the current completion.
*/
var acceptCompletion = function acceptCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
  if (!cState.open.disabled) applyCompletion(view, cState.open.options[cState.open.selected]);
  return true;
};
/**
Explicitly start autocompletion.
*/
exports.acceptCompletion = acceptCompletion;
var startCompletion = function startCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState) return false;
  view.dispatch({
    effects: startCompletionEffect.of(true)
  });
  return true;
};
/**
Close the currently active completion.
*/
exports.startCompletion = startCompletion;
var closeCompletion = function closeCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(function (a) {
    return a.state != 0;
  } /* State.Inactive */)) return false;
  view.dispatch({
    effects: closeCompletionEffect.of(null)
  });
  return true;
};
exports.closeCompletion = closeCompletion;
var RunningQuery = /*#__PURE__*/_createClass(function RunningQuery(active, context) {
  _classCallCheck(this, RunningQuery);
  this.active = active;
  this.context = context;
  this.time = Date.now();
  this.updates = [];
  // Note that 'undefined' means 'not done yet', whereas 'null' means
  // 'query returned null'.
  this.done = undefined;
});
var DebounceTime = 50,
  MaxUpdateCount = 50,
  MinAbortTime = 1000;
var completionPlugin = /*@__PURE__*/_view.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.composing = 0 /* CompositionState.None */;
    var _iterator16 = _createForOfIteratorHelper(view.state.field(completionState).active),
      _step16;
    try {
      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
        var active = _step16.value;
        if (active.state == 1 /* State.Pending */) this.startQuery(active);
      }
    } catch (err) {
      _iterator16.e(err);
    } finally {
      _iterator16.f();
    }
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update2) {
      var _this5 = this;
      var cState = _update2.state.field(completionState);
      if (!_update2.selectionSet && !_update2.docChanged && _update2.startState.field(completionState) == cState) return;
      var doesReset = _update2.transactions.some(function (tr) {
        return (tr.selection || tr.docChanged) && !getUserEvent(tr);
      });
      for (var i = 0; i < this.running.length; i++) {
        var query = this.running[i];
        if (doesReset || query.updates.length + _update2.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
          var _iterator17 = _createForOfIteratorHelper(query.context.abortListeners),
            _step17;
          try {
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              var handler = _step17.value;
              try {
                handler();
              } catch (e) {
                (0, _view.logException)(this.view.state, e);
              }
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }
          query.context.abortListeners = null;
          this.running.splice(i--, 1);
        } else {
          var _query$updates;
          (_query$updates = query.updates).push.apply(_query$updates, _toConsumableArray(_update2.transactions));
        }
      }
      if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
      this.debounceUpdate = cState.active.some(function (a) {
        return a.state == 1 /* State.Pending */ && !_this5.running.some(function (q) {
          return q.active.source == a.source;
        });
      }) ? setTimeout(function () {
        return _this5.startUpdate();
      }, DebounceTime) : -1;
      if (this.composing != 0 /* CompositionState.None */) {
        var _iterator18 = _createForOfIteratorHelper(_update2.transactions),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var tr = _step18.value;
            if (getUserEvent(tr) == "input") this.composing = 2 /* CompositionState.Changed */;else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection) this.composing = 3 /* CompositionState.ChangedAndMoved */;
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      }
    }
  }, {
    key: "startUpdate",
    value: function startUpdate() {
      var _this6 = this;
      this.debounceUpdate = -1;
      var state = this.view.state,
        cState = state.field(completionState);
      var _iterator19 = _createForOfIteratorHelper(cState.active),
        _step19;
      try {
        var _loop = function _loop() {
          var active = _step19.value;
          if (active.state == 1 /* State.Pending */ && !_this6.running.some(function (r) {
            return r.active.source == active.source;
          })) _this6.startQuery(active);
        };
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
    }
  }, {
    key: "startQuery",
    value: function startQuery(active) {
      var _this7 = this;
      var state = this.view.state,
        pos = cur(state);
      var context = new CompletionContext(state, pos, active.explicitPos == pos);
      var pending = new RunningQuery(active, context);
      this.running.push(pending);
      Promise.resolve(active.source(context)).then(function (result) {
        if (!pending.context.aborted) {
          pending.done = result || null;
          _this7.scheduleAccept();
        }
      }, function (err) {
        _this7.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
        (0, _view.logException)(_this7.view.state, err);
      });
    }
  }, {
    key: "scheduleAccept",
    value: function scheduleAccept() {
      var _this8 = this;
      if (this.running.every(function (q) {
        return q.done !== undefined;
      })) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(function () {
        return _this8.accept();
      }, DebounceTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
  }, {
    key: "accept",
    value: function accept() {
      var _this9 = this;
      var _a;
      if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      var updated = [];
      var conf = this.view.state.facet(completionConfig);
      var _loop2 = function _loop2(_i3) {
        var query = _this9.running[_i3];
        if (query.done === undefined) {
          i = _i3;
          return "continue";
        }
        _this9.running.splice(_i3--, 1);
        if (query.done) {
          var active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : _this9.view.state));
          // Replay the transactions that happened since the start of
          // the request and see if that preserves the result
          var _iterator20 = _createForOfIteratorHelper(query.updates),
            _step20;
          try {
            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
              var tr = _step20.value;
              active = active.update(tr, conf);
            }
          } catch (err) {
            _iterator20.e(err);
          } finally {
            _iterator20.f();
          }
          if (active.hasResult()) {
            updated.push(active);
            i = _i3;
            return "continue";
          }
        }
        var current = _this9.view.state.field(completionState).active.find(function (a) {
          return a.source == query.active.source;
        });
        if (current && current.state == 1 /* State.Pending */) {
          if (query.done == null) {
            // Explicitly failed. Should clear the pending status if it
            // hasn't been re-set in the meantime.
            var _active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
            var _iterator21 = _createForOfIteratorHelper(query.updates),
              _step21;
            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var _tr = _step21.value;
                _active = _active.update(_tr, conf);
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
            if (_active.state != 1 /* State.Pending */) updated.push(_active);
          } else {
            // Cleared by subsequent transactions. Restart.
            _this9.startQuery(current);
          }
        }
        i = _i3;
      };
      for (var i = 0; i < this.running.length; i++) {
        var _ret = _loop2(i);
        if (_ret === "continue") continue;
      }
      if (updated.length) this.view.dispatch({
        effects: setActiveEffect.of(updated)
      });
    }
  }]);
  return _class;
}(), {
  eventHandlers: {
    blur: function blur(event) {
      var state = this.view.state.field(completionState, false);
      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
        var dialog = state.open && (0, _view.getTooltip)(this.view, state.open.tooltip);
        if (!dialog || !dialog.dom.contains(event.relatedTarget)) this.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
      }
    },
    compositionstart: function compositionstart() {
      this.composing = 1 /* CompositionState.Started */;
    },
    compositionend: function compositionend() {
      var _this10 = this;
      if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
        // Safari fires compositionend events synchronously, possibly
        // from inside an update, so dispatch asynchronously to avoid reentrancy
        setTimeout(function () {
          return _this10.view.dispatch({
            effects: startCompletionEffect.of(false)
          });
        }, 20);
      }
      this.composing = 0 /* CompositionState.None */;
    }
  }
});

var baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "".concat(400 /* Info.Width */, "px"),
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": {
    right: "100%"
  },
  ".cm-completionInfo.cm-completionInfo-right": {
    left: "100%"
  },
  ".cm-completionInfo.cm-completionInfo-left-narrow": {
    right: "".concat(30 /* Info.Margin */, "px")
  },
  ".cm-completionInfo.cm-completionInfo-right-narrow": {
    left: "".concat(30 /* Info.Margin */, "px")
  },
  "&light .cm-snippetField": {
    backgroundColor: "#00000022"
  },
  "&dark .cm-snippetField": {
    backgroundColor: "#ffffff22"
  },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": {
      content: "'ƒ'"
    }
  },
  ".cm-completionIcon-class": {
    "&:after": {
      content: "'○'"
    }
  },
  ".cm-completionIcon-interface": {
    "&:after": {
      content: "'◌'"
    }
  },
  ".cm-completionIcon-variable": {
    "&:after": {
      content: "'𝑥'"
    }
  },
  ".cm-completionIcon-constant": {
    "&:after": {
      content: "'𝐶'"
    }
  },
  ".cm-completionIcon-type": {
    "&:after": {
      content: "'𝑡'"
    }
  },
  ".cm-completionIcon-enum": {
    "&:after": {
      content: "'∪'"
    }
  },
  ".cm-completionIcon-property": {
    "&:after": {
      content: "'□'"
    }
  },
  ".cm-completionIcon-keyword": {
    "&:after": {
      content: "'\uD83D\uDD11\uFE0E'"
    } // Disable emoji rendering
  },

  ".cm-completionIcon-namespace": {
    "&:after": {
      content: "'▢'"
    }
  },
  ".cm-completionIcon-text": {
    "&:after": {
      content: "'abc'",
      fontSize: "50%",
      verticalAlign: "middle"
    }
  }
});
var FieldPos = /*#__PURE__*/_createClass(function FieldPos(field, line, from, to) {
  _classCallCheck(this, FieldPos);
  this.field = field;
  this.line = line;
  this.from = from;
  this.to = to;
});
var FieldRange = /*#__PURE__*/function () {
  function FieldRange(field, from, to) {
    _classCallCheck(this, FieldRange);
    this.field = field;
    this.from = from;
    this.to = to;
  }
  _createClass(FieldRange, [{
    key: "map",
    value: function map(changes) {
      var from = changes.mapPos(this.from, -1, _state.MapMode.TrackDel);
      var to = changes.mapPos(this.to, 1, _state.MapMode.TrackDel);
      return from == null || to == null ? null : new FieldRange(this.field, from, to);
    }
  }]);
  return FieldRange;
}();
var Snippet = /*#__PURE__*/function () {
  function Snippet(lines, fieldPositions) {
    _classCallCheck(this, Snippet);
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  _createClass(Snippet, [{
    key: "instantiate",
    value: function instantiate(state, pos) {
      var text = [],
        lineStart = [pos];
      var lineObj = state.doc.lineAt(pos),
        baseIndent = /^\s*/.exec(lineObj.text)[0];
      var _iterator22 = _createForOfIteratorHelper(this.lines),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var line = _step22.value;
          if (text.length) {
            var indent = baseIndent,
              tabs = /^\t*/.exec(line)[0].length;
            for (var i = 0; i < tabs; i++) indent += state.facet(_language.indentUnit);
            lineStart.push(pos + indent.length - tabs);
            line = indent + line.slice(tabs);
          }
          text.push(line);
          pos += line.length + 1;
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      var ranges = this.fieldPositions.map(function (pos) {
        return new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to);
      });
      return {
        text: text,
        ranges: ranges
      };
    }
  }], [{
    key: "parse",
    value: function parse(template) {
      var fields = [];
      var lines = [],
        positions = [],
        m;
      var _iterator23 = _createForOfIteratorHelper(template.split(/\r\n?|\n/)),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var line = _step23.value;
          while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
            var seq = m[1] ? +m[1] : null,
              name = m[2] || m[3] || "",
              found = -1;
            for (var i = 0; i < fields.length; i++) {
              if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;
            }
            if (found < 0) {
              var _i4 = 0;
              while (_i4 < fields.length && (seq == null || fields[_i4].seq != null && fields[_i4].seq < seq)) _i4++;
              fields.splice(_i4, 0, {
                seq: seq,
                name: name
              });
              found = _i4;
              var _iterator24 = _createForOfIteratorHelper(positions),
                _step24;
              try {
                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                  var pos = _step24.value;
                  if (pos.field >= found) pos.field++;
                }
              } catch (err) {
                _iterator24.e(err);
              } finally {
                _iterator24.f();
              }
            }
            positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
            line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
          }
          for (var esc; esc = /\\([{}])/.exec(line);) {
            line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
            var _iterator25 = _createForOfIteratorHelper(positions),
              _step25;
            try {
              for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                var _pos = _step25.value;
                if (_pos.line == lines.length && _pos.from > esc.index) {
                  _pos.from--;
                  _pos.to--;
                }
              }
            } catch (err) {
              _iterator25.e(err);
            } finally {
              _iterator25.f();
            }
          }
          lines.push(line);
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      return new Snippet(lines, positions);
    }
  }]);
  return Snippet;
}();
var fieldMarker = /*@__PURE__*/_view.Decoration.widget({
  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {
    _inherits(_class2, _WidgetType);
    var _super2 = _createSuper(_class2);
    function _class2() {
      _classCallCheck(this, _class2);
      return _super2.apply(this, arguments);
    }
    _createClass(_class2, [{
      key: "toDOM",
      value: function toDOM() {
        var span = document.createElement("span");
        span.className = "cm-snippetFieldPosition";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
    return _class2;
  }(_view.WidgetType))()
});
var fieldRange = /*@__PURE__*/_view.Decoration.mark({
  "class": "cm-snippetField"
});
var ActiveSnippet = /*#__PURE__*/function () {
  function ActiveSnippet(ranges, active) {
    _classCallCheck(this, ActiveSnippet);
    this.ranges = ranges;
    this.active = active;
    this.deco = _view.Decoration.set(ranges.map(function (r) {
      return (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to);
    }));
  }
  _createClass(ActiveSnippet, [{
    key: "map",
    value: function map(changes) {
      var ranges = [];
      var _iterator26 = _createForOfIteratorHelper(this.ranges),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var r = _step26.value;
          var mapped = r.map(changes);
          if (!mapped) return null;
          ranges.push(mapped);
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      return new ActiveSnippet(ranges, this.active);
    }
  }, {
    key: "selectionInsideField",
    value: function selectionInsideField(sel) {
      var _this11 = this;
      return sel.ranges.every(function (range) {
        return _this11.ranges.some(function (r) {
          return r.field == _this11.active && r.from <= range.from && r.to >= range.to;
        });
      });
    }
  }]);
  return ActiveSnippet;
}();
var setActive = /*@__PURE__*/_state.StateEffect.define({
  map: function map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = /*@__PURE__*/_state.StateEffect.define();
var snippetState = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return null;
  },
  update: function update(value, tr) {
    var _iterator27 = _createForOfIteratorHelper(tr.effects),
      _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
        var effect = _step27.value;
        if (effect.is(setActive)) return effect.value;
        if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    if (value && tr.docChanged) value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
    return value;
  },
  provide: function provide(f) {
    return _view.EditorView.decorations.from(f, function (val) {
      return val ? val.deco : _view.Decoration.none;
    });
  }
});
function fieldSelection(ranges, field) {
  return _state.EditorSelection.create(ranges.filter(function (r) {
    return r.field == field;
  }).map(function (r) {
    return _state.EditorSelection.range(r.from, r.to);
  }));
}
/**
Convert a snippet template to a function that can
[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
using syntax like this:

    "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

Each `${}` placeholder (you may also use `#{}`) indicates a field
that the user can fill in. Its name, if any, will be the default
content for the field.

When the snippet is activated by calling the returned function,
the code is inserted at the given position. Newlines in the
template are indented by the indentation of the start line, plus
one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
the newline.

On activation, (all instances of) the first field are selected.
The user can move between fields with Tab and Shift-Tab as long as
the fields are active. Moving to the last field or moving the
cursor out of the current field deactivates the fields.

The order of fields defaults to textual order, but you can add
numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
a custom order.

To include a literal `{` or `}` in your template, put a backslash
in front of it. This will be removed and the brace will not be
interpreted as indicating a placeholder.
*/
function snippet(template) {
  var snippet = Snippet.parse(template);
  return function (editor, completion, from, to) {
    var _snippet$instantiate = snippet.instantiate(editor.state, from),
      text = _snippet$instantiate.text,
      ranges = _snippet$instantiate.ranges;
    var spec = {
      changes: {
        from: from,
        to: to,
        insert: _state.Text.of(text)
      },
      scrollIntoView: true,
      annotations: pickedCompletion.of(completion)
    };
    if (ranges.length) spec.selection = fieldSelection(ranges, 0);
    if (ranges.length > 1) {
      var active = new ActiveSnippet(ranges, 0);
      var effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === undefined) effects.push(_state.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return function (_ref3) {
    var state = _ref3.state,
      dispatch = _ref3.dispatch;
    var active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0) return false;
    var next = active.active + dir,
      last = dir > 0 && !active.ranges.some(function (r) {
        return r.field == next + dir;
      });
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
    }));
    return true;
  };
}
/**
A command that clears the active snippet, if any.
*/
var clearSnippet = function clearSnippet(_ref4) {
  var state = _ref4.state,
    dispatch = _ref4.dispatch;
  var active = state.field(snippetState, false);
  if (!active) return false;
  dispatch(state.update({
    effects: setActive.of(null)
  }));
  return true;
};
/**
Move to the next snippet field, if available.
*/
exports.clearSnippet = clearSnippet;
var nextSnippetField = /*@__PURE__*/moveField(1);
/**
Move to the previous snippet field, if available.
*/
exports.nextSnippetField = nextSnippetField;
var prevSnippetField = /*@__PURE__*/moveField(-1);
exports.prevSnippetField = prevSnippetField;
var defaultSnippetKeymap = [{
  key: "Tab",
  run: nextSnippetField,
  shift: prevSnippetField
}, {
  key: "Escape",
  run: clearSnippet
}];
/**
A facet that can be used to configure the key bindings used by
snippets. The default binds Tab to
[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
*/
var snippetKeymap = /*@__PURE__*/_state.Facet.define({
  combine: function combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
exports.snippetKeymap = snippetKeymap;
var addSnippetKeymap = /*@__PURE__*/_state.Prec.highest( /*@__PURE__*/_view.keymap.compute([snippetKeymap], function (state) {
  return state.facet(snippetKeymap);
}));
/**
Create a completion from a snippet. Returns an object with the
properties from `completion`, plus an `apply` function that
applies the snippet.
*/
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), {
    apply: snippet(template)
  });
}
var snippetPointerHandler = /*@__PURE__*/_view.EditorView.domEventHandlers({
  mousedown: function mousedown(event, view) {
    var active = view.state.field(snippetState, false),
      pos;
    if (!active || (pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    })) == null) return false;
    var match = active.ranges.find(function (r) {
      return r.from <= pos && r.to >= pos;
    });
    if (!match || match.field == active.active) return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some(function (r) {
        return r.field > match.field;
      }) ? new ActiveSnippet(active.ranges, match.field) : null)
    });
    return true;
  }
});
function wordRE(wordChars) {
  var escaped = wordChars.replace(/[\\[.+*?(){|^$]/g, "\\$&");
  try {
    return new RegExp("[\\p{Alphabetic}\\p{Number}_".concat(escaped, "]+"), "ug");
  } catch (_a) {
    return new RegExp("[w".concat(escaped, "]"), "g");
  }
}
function mapRE(re, f) {
  return new RegExp(f(re.source), re.unicode ? "u" : "");
}
var wordCaches = /*@__PURE__*/Object.create(null);
function wordCache(wordChars) {
  return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap());
}
function storeWords(doc, wordRE, result, seen, ignoreAt) {
  for (var lines = doc.iterLines(), pos = 0; !lines.next().done;) {
    var value = lines.value,
      m = void 0;
    wordRE.lastIndex = 0;
    while (m = wordRE.exec(value)) {
      if (!seen[m[0]] && pos + m.index != ignoreAt) {
        result.push({
          type: "text",
          label: m[0]
        });
        seen[m[0]] = true;
        if (result.length >= 2000 /* C.MaxList */) return;
      }
    }
    pos += value.length + 1;
  }
}
function collectWords(doc, cache, wordRE, to, ignoreAt) {
  var big = doc.length >= 1000 /* C.MinCacheLen */;
  var cached = big && cache.get(doc);
  if (cached) return cached;
  var result = [],
    seen = Object.create(null);
  if (doc.children) {
    var pos = 0;
    var _iterator28 = _createForOfIteratorHelper(doc.children),
      _step28;
    try {
      for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
        var ch = _step28.value;
        if (ch.length >= 1000 /* C.MinCacheLen */) {
          var _iterator29 = _createForOfIteratorHelper(collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)),
            _step29;
          try {
            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
              var c = _step29.value;
              if (!seen[c.label]) {
                seen[c.label] = true;
                result.push(c);
              }
            }
          } catch (err) {
            _iterator29.e(err);
          } finally {
            _iterator29.f();
          }
        } else {
          storeWords(ch, wordRE, result, seen, ignoreAt - pos);
        }
        pos += ch.length + 1;
      }
    } catch (err) {
      _iterator28.e(err);
    } finally {
      _iterator28.f();
    }
  } else {
    storeWords(doc, wordRE, result, seen, ignoreAt);
  }
  if (big && result.length < 2000 /* C.MaxList */) cache.set(doc, result);
  return result;
}
/**
A completion source that will scan the document for words (using a
[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and
return those as completions.
*/
var completeAnyWord = function completeAnyWord(context) {
  var wordChars = context.state.languageDataAt("wordChars", context.pos).join("");
  var re = wordRE(wordChars);
  var token = context.matchBefore(mapRE(re, function (s) {
    return s + "$";
  }));
  if (!token && !context.explicit) return null;
  var from = token ? token.from : context.pos;
  var options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* C.Range */, from);
  return {
    from: from,
    options: options,
    validFor: mapRE(re, function (s) {
      return "^" + s;
    })
  };
};
exports.completeAnyWord = completeAnyWord;
var defaults = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
};
var closeBracketEffect = /*@__PURE__*/_state.StateEffect.define({
  map: function map(value, mapping) {
    var mapped = mapping.mapPos(value, -1, _state.MapMode.TrackAfter);
    return mapped == null ? undefined : mapped;
  }
});
var closedBracket = /*@__PURE__*/new ( /*#__PURE__*/function (_RangeValue) {
  _inherits(_class3, _RangeValue);
  var _super3 = _createSuper(_class3);
  function _class3() {
    _classCallCheck(this, _class3);
    return _super3.apply(this, arguments);
  }
  return _createClass(_class3);
}(_state.RangeValue))();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var bracketState = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return _state.RangeSet.empty;
  },
  update: function update(value, tr) {
    if (tr.selection) {
      var lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
      var prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
      if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = _state.RangeSet.empty;
    }
    value = value.map(tr.changes);
    var _iterator30 = _createForOfIteratorHelper(tr.effects),
      _step30;
    try {
      for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
        var effect = _step30.value;
        if (effect.is(closeBracketEffect)) value = value.update({
          add: [closedBracket.range(effect.value, effect.value + 1)]
        });
      }
    } catch (err) {
      _iterator30.e(err);
    } finally {
      _iterator30.f();
    }
    return value;
  }
});
/**
Extension to enable bracket-closing behavior. When a closeable
bracket is typed, its closing bracket is immediately inserted
after the cursor. When closing a bracket directly in front of a
closing bracket inserted by the extension, the cursor moves over
that bracket.
*/
function closeBrackets() {
  return [inputHandler, bracketState];
}
var definedClosing = "()[]{}<>";
function closing(ch) {
  for (var i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);
  return (0, _state.fromCodePoint)(ch < 128 ? ch : ch + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults;
}
var android = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) == "object" && /*@__PURE__*/ /Android\b/.test(navigator.userAgent);
var inputHandler = /*@__PURE__*/_view.EditorView.inputHandler.of(function (view, from, to, insert) {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;
  var sel = view.state.selection.main;
  if (insert.length > 2 || insert.length == 2 && (0, _state.codePointSize)((0, _state.codePointAt)(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
  var tr = insertBracket(view.state, insert);
  if (!tr) return false;
  view.dispatch(tr);
  return true;
});
/**
Command that implements deleting a pair of matching brackets when
the cursor is between them.
*/
var deleteBracketPair = function deleteBracketPair(_ref5) {
  var state = _ref5.state,
    dispatch = _ref5.dispatch;
  if (state.readOnly) return false;
  var conf = config(state, state.selection.main.head);
  var tokens = conf.brackets || defaults.brackets;
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (range.empty) {
        var before = prevChar(state.doc, range.head);
        var _iterator31 = _createForOfIteratorHelper(tokens),
          _step31;
        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var token = _step31.value;
            if (token == before && nextChar(state.doc, range.head) == closing((0, _state.codePointAt)(token, 0))) return {
              changes: {
                from: range.head - token.length,
                to: range.head + token.length
              },
              range: _state.EditorSelection.cursor(range.head - token.length)
            };
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }
      }
      return {
        range: dont = range
      };
    });
  if (!dont) dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "delete.backward"
  }));
  return !dont;
};
/**
Close-brackets related key bindings. Binds Backspace to
[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
*/
exports.deleteBracketPair = deleteBracketPair;
var closeBracketsKeymap = [{
  key: "Backspace",
  run: deleteBracketPair
}];
/**
Implements the extension's behavior on text insertion. If the
given string counts as a bracket in the language around the
selection, and replacing the selection with it requires custom
behavior (inserting a closing version or skipping past a
previously-closed bracket), this function returns a transaction
representing that custom behavior. (You only need this if you want
to programmatically insert brackets—the
[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
take care of running this for user input.)
*/
exports.closeBracketsKeymap = closeBracketsKeymap;
function insertBracket(state, bracket) {
  var conf = config(state, state.selection.main.head);
  var tokens = conf.brackets || defaults.brackets;
  var _iterator32 = _createForOfIteratorHelper(tokens),
    _step32;
  try {
    for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
      var tok = _step32.value;
      var closed = closing((0, _state.codePointAt)(tok, 0));
      if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);
      if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
    }
  } catch (err) {
    _iterator32.e(err);
  } finally {
    _iterator32.f();
  }
  return null;
}
function closedBracketAt(state, pos) {
  var found = false;
  state.field(bracketState).between(0, state.doc.length, function (from) {
    if (from == pos) found = true;
  });
  return found;
}
function nextChar(doc, pos) {
  var next = doc.sliceString(pos, pos + 2);
  return next.slice(0, (0, _state.codePointSize)((0, _state.codePointAt)(next, 0)));
}
function prevChar(doc, pos) {
  var prev = doc.sliceString(pos - 2, pos);
  return (0, _state.codePointSize)((0, _state.codePointAt)(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (!range.empty) return {
        changes: [{
          insert: open,
          from: range.from
        }, {
          insert: close,
          from: range.to
        }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: _state.EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
      var next = nextChar(state.doc, range.head);
      if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
        changes: {
          insert: open + close,
          from: range.head
        },
        effects: closeBracketEffect.of(range.head + open.length),
        range: _state.EditorSelection.cursor(range.head + open.length)
      };
      return {
        range: dont = range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close) {
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (range.empty && nextChar(state.doc, range.head) == close) return {
        changes: {
          from: range.head,
          to: range.head + close.length,
          insert: close
        },
        range: _state.EditorSelection.cursor(range.head + close.length)
      };
      return dont = {
        range: range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
// Handles cases where the open and close token are the same, and
// possibly triple quotes (as in `"""abc"""`-style quoting).
function handleSame(state, token, allowTriple, config) {
  var stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (!range.empty) return {
        changes: [{
          insert: token,
          from: range.from
        }, {
          insert: token,
          from: range.to
        }],
        effects: closeBracketEffect.of(range.to + token.length),
        range: _state.EditorSelection.range(range.anchor + token.length, range.head + token.length)
      };
      var pos = range.head,
        next = nextChar(state.doc, pos),
        start;
      if (next == token) {
        if (nodeStart(state, pos)) {
          return {
            changes: {
              insert: token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: _state.EditorSelection.cursor(pos + token.length)
          };
        } else if (closedBracketAt(state, pos)) {
          var isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
          var content = isTriple ? token + token + token : token;
          return {
            changes: {
              from: pos,
              to: pos + content.length,
              insert: content
            },
            range: _state.EditorSelection.cursor(pos + content.length)
          };
        }
      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
        return {
          changes: {
            insert: token + token + token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: _state.EditorSelection.cursor(pos + token.length)
        };
      } else if (state.charCategorizer(pos)(next) != _state.CharCategory.Word) {
        if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes)) return {
          changes: {
            insert: token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: _state.EditorSelection.cursor(pos + token.length)
        };
      }
      return {
        range: dont = range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  var tree = (0, _language.syntaxTree)(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes) {
  var node = (0, _language.syntaxTree)(state).resolveInner(pos, -1);
  var maxPrefix = prefixes.reduce(function (m, p) {
    return Math.max(m, p.length);
  }, 0);
  for (var i = 0; i < 5; i++) {
    var start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
    var quotePos = start.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
      var first = node.firstChild;
      while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;
        first = first.firstChild;
      }
      return true;
    }
    var parent = node.to == pos && node.parent;
    if (!parent) break;
    node = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes) {
  var charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != _state.CharCategory.Word) return pos;
  var _iterator33 = _createForOfIteratorHelper(prefixes),
    _step33;
  try {
    for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
      var prefix = _step33.value;
      var start = pos - prefix.length;
      if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != _state.CharCategory.Word) return start;
    }
  } catch (err) {
    _iterator33.e(err);
  } finally {
    _iterator33.f();
  }
  return -1;
}

/**
Returns an extension that enables autocompletion.
*/
function autocompletion() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];
}
/**
Basic keybindings for autocompletion.

 - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
 - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
 - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
 - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
*/
var completionKeymap = [{
  key: "Ctrl-Space",
  run: startCompletion
}, {
  key: "Escape",
  run: closeCompletion
}, {
  key: "ArrowDown",
  run: /*@__PURE__*/moveCompletionSelection(true)
}, {
  key: "ArrowUp",
  run: /*@__PURE__*/moveCompletionSelection(false)
}, {
  key: "PageDown",
  run: /*@__PURE__*/moveCompletionSelection(true, "page")
}, {
  key: "PageUp",
  run: /*@__PURE__*/moveCompletionSelection(false, "page")
}, {
  key: "Enter",
  run: acceptCompletion
}];
exports.completionKeymap = completionKeymap;
var completionKeymapExt = /*@__PURE__*/_state.Prec.highest( /*@__PURE__*/_view.keymap.computeN([completionConfig], function (state) {
  return state.facet(completionConfig).defaultKeymap ? [completionKeymap] : [];
}));
/**
Get the current completion status. When completions are available,
this will return `"active"`. When completions are pending (in the
process of being queried), this returns `"pending"`. Otherwise, it
returns `null`.
*/
function completionStatus(state) {
  var cState = state.field(completionState, false);
  return cState && cState.active.some(function (a) {
    return a.state == 1;
  } /* State.Pending */) ? "pending" : cState && cState.active.some(function (a) {
    return a.state != 0;
  } /* State.Inactive */) ? "active" : null;
}
var completionArrayCache = /*@__PURE__*/new WeakMap();
/**
Returns the available completions as an array.
*/
function currentCompletions(state) {
  var _a;
  var open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  if (!open || open.disabled) return [];
  var completions = completionArrayCache.get(open.options);
  if (!completions) completionArrayCache.set(open.options, completions = open.options.map(function (o) {
    return o.completion;
  }));
  return completions;
}
/**
Return the currently selected completion, if any.
*/
function selectedCompletion(state) {
  var _a;
  var open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;
}
/**
Returns the currently selected position in the active completion
list, or null if no completions are active.
*/
function selectedCompletionIndex(state) {
  var _a;
  var open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  return open && !open.disabled && open.selected >= 0 ? open.selected : null;
}
/**
Create an effect that can be attached to a transaction to change
the currently selected completion.
*/
function setSelectedCompletion(index) {
  return setSelectedEffect.of(index);
}

},{"@codemirror/language":18,"@codemirror/state":20,"@codemirror/view":21}],17:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emacsStyleKeymap = exports.deleteTrailingWhitespace = exports.deleteToLineStart = exports.deleteToLineEnd = exports.deleteLine = exports.deleteGroupForward = exports.deleteGroupBackward = exports.deleteCharForward = exports.deleteCharBackward = exports.defaultKeymap = exports.cursorSyntaxRight = exports.cursorSyntaxLeft = exports.cursorSubwordForward = exports.cursorSubwordBackward = exports.cursorPageUp = exports.cursorPageDown = exports.cursorMatchingBracket = exports.cursorLineUp = exports.cursorLineStart = exports.cursorLineEnd = exports.cursorLineDown = exports.cursorLineBoundaryRight = exports.cursorLineBoundaryLeft = exports.cursorLineBoundaryForward = exports.cursorLineBoundaryBackward = exports.cursorGroupRight = exports.cursorGroupLeft = exports.cursorGroupForward = exports.cursorGroupBackward = exports.cursorDocStart = exports.cursorDocEnd = exports.cursorCharRight = exports.cursorCharLeft = exports.cursorCharForward = exports.cursorCharBackward = exports.copyLineUp = exports.copyLineDown = exports.blockUncomment = exports.blockComment = void 0;
exports.history = history;
exports.undoSelection = exports.undoDepth = exports.undo = exports.transposeChars = exports.toggleLineComment = exports.toggleComment = exports.toggleBlockCommentByLine = exports.toggleBlockComment = exports.standardKeymap = exports.splitLine = exports.simplifySelection = exports.selectSyntaxRight = exports.selectSyntaxLeft = exports.selectSubwordForward = exports.selectSubwordBackward = exports.selectParentSyntax = exports.selectPageUp = exports.selectPageDown = exports.selectMatchingBracket = exports.selectLineUp = exports.selectLineStart = exports.selectLineEnd = exports.selectLineDown = exports.selectLineBoundaryRight = exports.selectLineBoundaryLeft = exports.selectLineBoundaryForward = exports.selectLineBoundaryBackward = exports.selectLine = exports.selectGroupRight = exports.selectGroupLeft = exports.selectGroupForward = exports.selectGroupBackward = exports.selectDocStart = exports.selectDocEnd = exports.selectCharRight = exports.selectCharLeft = exports.selectCharForward = exports.selectCharBackward = exports.selectAll = exports.redoSelection = exports.redoDepth = exports.redo = exports.moveLineUp = exports.moveLineDown = exports.lineUncomment = exports.lineComment = exports.isolateHistory = exports.invertedEffects = exports.insertTab = exports.insertNewlineAndIndent = exports.insertNewline = exports.insertBlankLine = exports.indentWithTab = exports.indentSelection = exports.indentMore = exports.indentLess = exports.historyKeymap = exports.historyField = void 0;
var _state = require("@codemirror/state");
var _view = require("@codemirror/view");
var _language = require("@codemirror/language");
var _common = require("@lezer/common");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
Comment or uncomment the current selection. Will use line comments
if available, otherwise falling back to block comments.
*/
var toggleComment = function toggleComment(target) {
  var state = target.state,
    line = state.doc.lineAt(state.selection.main.from),
    config = getConfig(target.state, line.from);
  return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
};
exports.toggleComment = toggleComment;
function command(f, option) {
  return function (_ref) {
    var state = _ref.state,
      dispatch = _ref.dispatch;
    if (state.readOnly) return false;
    var tr = f(option, state);
    if (!tr) return false;
    dispatch(state.update(tr));
    return true;
  };
}
/**
Comment or uncomment the current selection using line comments.
The line comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/
var toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
/**
Comment the current selection using line comments.
*/
exports.toggleLineComment = toggleLineComment;
var lineComment = /*@__PURE__*/command(changeLineComment, 1 /* CommentOption.Comment */);
/**
Uncomment the current selection using line comments.
*/
exports.lineComment = lineComment;
var lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* CommentOption.Uncomment */);
/**
Comment or uncomment the current selection using block comments.
The block comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/
exports.lineUncomment = lineUncomment;
var toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
/**
Comment the current selection using block comments.
*/
exports.toggleBlockComment = toggleBlockComment;
var blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* CommentOption.Comment */);
/**
Uncomment the current selection using block comments.
*/
exports.blockComment = blockComment;
var blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* CommentOption.Uncomment */);
/**
Comment or uncomment the lines around the current selection using
block comments.
*/
exports.blockUncomment = blockUncomment;
var toggleBlockCommentByLine = /*@__PURE__*/command(function (o, s) {
  return changeBlockComment(o, s, selectedLineRanges(s));
}, 0 /* CommentOption.Toggle */);
exports.toggleBlockCommentByLine = toggleBlockCommentByLine;
function getConfig(state, pos) {
  var data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}
var SearchMargin = 50;
/**
Determines if the given range is block-commented in the given
state.
*/
function findBlockComment(state, _ref2, from, to) {
  var open = _ref2.open,
    close = _ref2.close;
  var textBefore = state.sliceDoc(from - SearchMargin, from);
  var textAfter = state.sliceDoc(to, to + SearchMargin);
  var spaceBefore = /\s*$/.exec(textBefore)[0].length,
    spaceAfter = /^\s*/.exec(textAfter)[0].length;
  var beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: {
        pos: from - spaceBefore,
        margin: spaceBefore && 1
      },
      close: {
        pos: to + spaceAfter,
        margin: spaceAfter && 1
      }
    };
  }
  var startText, endText;
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  var startSpace = /^\s*/.exec(startText)[0].length,
    endSpace = /\s*$/.exec(endText)[0].length;
  var endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  var ranges = [];
  var _iterator = _createForOfIteratorHelper(state.selection.ranges),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var r = _step.value;
      var fromLine = state.doc.lineAt(r.from);
      var toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
      var last = ranges.length - 1;
      if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({
        from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length,
        to: toLine.to
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return ranges;
}
// Performs toggle, comment and uncomment of block comments in
// languages that support them.
function changeBlockComment(option, state) {
  var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
  var tokens = ranges.map(function (r) {
    return getConfig(state, r.from).block;
  });
  if (!tokens.every(function (c) {
    return c;
  })) return null;
  var comments = ranges.map(function (r, i) {
    return findBlockComment(state, tokens[i], r.from, r.to);
  });
  if (option != 2 /* CommentOption.Uncomment */ && !comments.every(function (c) {
    return c;
  })) {
    return {
      changes: state.changes(ranges.map(function (range, i) {
        if (comments[i]) return [];
        return [{
          from: range.from,
          insert: tokens[i].open + " "
        }, {
          from: range.to,
          insert: " " + tokens[i].close
        }];
      }))
    };
  } else if (option != 1 /* CommentOption.Comment */ && comments.some(function (c) {
    return c;
  })) {
    var changes = [];
    for (var i = 0, comment; i < comments.length; i++) if (comment = comments[i]) {
      var token = tokens[i],
        _comment = comment,
        open = _comment.open,
        close = _comment.close;
      changes.push({
        from: open.pos - token.open.length,
        to: open.pos + open.margin
      }, {
        from: close.pos - close.margin,
        to: close.pos + token.close.length
      });
    }
    return {
      changes: changes
    };
  }
  return null;
}
// Performs toggle, comment and uncomment of line comments.
function changeLineComment(option, state) {
  var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
  var lines = [];
  var prevLine = -1;
  var _iterator2 = _createForOfIteratorHelper(ranges),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _step2.value,
        _from = _step2$value.from,
        _to = _step2$value.to;
      var startI = lines.length,
        minIndent = 1e9;
      var _token2 = getConfig(state, _from).line;
      if (!_token2) continue;
      for (var pos = _from; pos <= _to;) {
        var _line2 = state.doc.lineAt(pos);
        if (_line2.from > prevLine && (_from == _to || _to > _line2.from)) {
          prevLine = _line2.from;
          var _indent = /^\s*/.exec(_line2.text)[0].length;
          var _empty = _indent == _line2.length;
          var _comment2 = _line2.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;
          if (_indent < _line2.text.length && _indent < minIndent) minIndent = _indent;
          lines.push({
            line: _line2,
            comment: _comment2,
            token: _token2,
            indent: _indent,
            empty: _empty,
            single: false
          });
        }
        pos = _line2.to + 1;
      }
      if (minIndent < 1e9) for (var i = startI; i < lines.length; i++) if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;
      if (lines.length == startI + 1) lines[startI].single = true;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (option != 2 /* CommentOption.Uncomment */ && lines.some(function (l) {
    return l.comment < 0 && (!l.empty || l.single);
  })) {
    var changes = [];
    var _iterator3 = _createForOfIteratorHelper(lines),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _step3.value,
          line = _step3$value.line,
          token = _step3$value.token,
          indent = _step3$value.indent,
          empty = _step3$value.empty,
          single = _step3$value.single;
        if (single || !empty) changes.push({
          from: line.from + indent,
          insert: token + " "
        });
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    var changeSet = state.changes(changes);
    return {
      changes: changeSet,
      selection: state.selection.map(changeSet, 1)
    };
  } else if (option != 1 /* CommentOption.Comment */ && lines.some(function (l) {
    return l.comment >= 0;
  })) {
    var _changes = [];
    var _iterator4 = _createForOfIteratorHelper(lines),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _step4$value = _step4.value,
          _line = _step4$value.line,
          comment = _step4$value.comment,
          _token = _step4$value.token;
        if (comment >= 0) {
          var from = _line.from + comment,
            to = from + _token.length;
          if (_line.text[to - _line.from] == " ") to++;
          _changes.push({
            from: from,
            to: to
          });
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    return {
      changes: _changes
    };
  }
  return null;
}
var fromHistory = /*@__PURE__*/_state.Annotation.define();
/**
Transaction annotation that will prevent that transaction from
being combined with other transactions in the undo history. Given
`"before"`, it'll prevent merging with previous transactions. With
`"after"`, subsequent transactions won't be combined with this
one. With `"full"`, the transaction is isolated on both sides.
*/
var isolateHistory = /*@__PURE__*/_state.Annotation.define();
/**
This facet provides a way to register functions that, given a
transaction, provide a set of effects that the history should
store when inverting the transaction. This can be used to
integrate some kinds of effects in the history, so that they can
be undone (and redone again).
*/
exports.isolateHistory = isolateHistory;
var invertedEffects = /*@__PURE__*/_state.Facet.define();
exports.invertedEffects = invertedEffects;
var historyConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(configs) {
    return (0, _state.combineConfig)(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: function joinToEvent(_t, isAdjacent) {
        return isAdjacent;
      }
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: function joinToEvent(a, b) {
        return function (tr, adj) {
          return a(tr, adj) || b(tr, adj);
        };
      }
    });
  }
});
function changeEnd(changes) {
  var end = 0;
  changes.iterChangedRanges(function (_, to) {
    return end = to;
  });
  return end;
}
var historyField_ = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return HistoryState.empty;
  },
  update: function update(state, tr) {
    var config = tr.state.facet(historyConfig);
    var fromHist = tr.annotation(fromHistory);
    if (fromHist) {
      var selection = tr.docChanged ? _state.EditorSelection.single(changeEnd(tr.changes)) : undefined;
      var item = HistEvent.fromTransaction(tr, selection),
        from = fromHist.side;
      var other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
      if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);
      return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
    }
    var isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before") state = state.isolate();
    if (tr.annotation(_state.Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    var event = HistEvent.fromTransaction(tr);
    var time = tr.annotation(_state.Transaction.time),
      userEvent = tr.annotation(_state.Transaction.userEvent);
    if (event) state = state.addChanges(event, time, userEvent, config, tr);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
    if (isolate == "full" || isolate == "after") state = state.isolate();
    return state;
  },
  toJSON: function toJSON(value) {
    return {
      done: value.done.map(function (e) {
        return e.toJSON();
      }),
      undone: value.undone.map(function (e) {
        return e.toJSON();
      })
    };
  },
  fromJSON: function fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
/**
Create a history extension with the given configuration.
*/
function history() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [historyField_, historyConfig.of(config), _view.EditorView.domEventHandlers({
    beforeinput: function beforeinput(e, view) {
      var command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
      if (!command) return false;
      e.preventDefault();
      return command(view);
    }
  })];
}
/**
The state field used to store the history data. Should probably
only be used when you want to
[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
that preserves history.
*/
var historyField = historyField_;
exports.historyField = historyField;
function cmd(side, selection) {
  return function (_ref3) {
    var state = _ref3.state,
      dispatch = _ref3.dispatch;
    if (!selection && state.readOnly) return false;
    var historyState = state.field(historyField_, false);
    if (!historyState) return false;
    var tr = historyState.pop(side, state, selection);
    if (!tr) return false;
    dispatch(tr);
    return true;
  };
}
/**
Undo a single group of history events. Returns false if no group
was available.
*/
var undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
/**
Redo a group of history events. Returns false if no group was
available.
*/
exports.undo = undo;
var redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
/**
Undo a change or selection change.
*/
exports.redo = redo;
var undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
/**
Redo a change or selection change.
*/
exports.undoSelection = undoSelection;
var redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
exports.redoSelection = redoSelection;
function depth(side) {
  return function (state) {
    var histState = state.field(historyField_, false);
    if (!histState) return 0;
    var branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;
    return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
  };
}
/**
The amount of undoable change events available in a given state.
*/
var undoDepth = /*@__PURE__*/depth(0 /* BranchName.Done */);
/**
The amount of redoable change events available in a given state.
*/
exports.undoDepth = undoDepth;
var redoDepth = /*@__PURE__*/depth(1 /* BranchName.Undone */);
// History events store groups of changes or effects that need to be
// undone/redone together.
exports.redoDepth = redoDepth;
var HistEvent = /*#__PURE__*/function () {
  function HistEvent(
  // The changes in this event. Normal events hold at least one
  // change or effect. But it may be necessary to store selection
  // events before the first change, in which case a special type of
  // instance is created which doesn't hold any changes, with
  // changes == startSelection == undefined
  changes,
  // The effects associated with this event
  effects,
  // Accumulated mapping (from addToHistory==false) that should be
  // applied to events below this one.
  mapped,
  // The selection before this event
  startSelection,
  // Stores selection changes after this event, to be used for
  // selection undo/redo.
  selectionsAfter) {
    _classCallCheck(this, HistEvent);
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  _createClass(HistEvent, [{
    key: "setSelAfter",
    value: function setSelAfter(after) {
      return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var _a, _b, _c;
      return {
        changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
        selectionsAfter: this.selectionsAfter.map(function (s) {
          return s.toJSON();
        })
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      return new HistEvent(json.changes && _state.ChangeSet.fromJSON(json.changes), [], json.mapped && _state.ChangeDesc.fromJSON(json.mapped), json.startSelection && _state.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(_state.EditorSelection.fromJSON));
    }
    // This does not check `addToHistory` and such, it assumes the
    // transaction needs to be converted to an item. Returns null when
    // there are no changes or effects in the transaction.
  }, {
    key: "fromTransaction",
    value: function fromTransaction(tr, selection) {
      var effects = none;
      var _iterator5 = _createForOfIteratorHelper(tr.startState.facet(invertedEffects)),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var invert = _step5.value;
          var result = invert(tr);
          if (result.length) effects = effects.concat(result);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (!effects.length && tr.changes.empty) return null;
      return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
    }
  }, {
    key: "selection",
    value: function selection(selections) {
      return new HistEvent(undefined, none, undefined, undefined, selections);
    }
  }]);
  return HistEvent;
}();
function updateBranch(branch, to, maxLen, newEvent) {
  var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  var newBranch = branch.slice(start, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a, b) {
  var ranges = [],
    isAdjacent = false;
  a.iterChangedRanges(function (f, t) {
    return ranges.push(f, t);
  });
  b.iterChangedRanges(function (_f, _t, f, t) {
    for (var i = 0; i < ranges.length;) {
      var from = ranges[i++],
        to = ranges[i++];
      if (t >= from && f <= to) isAdjacent = true;
    }
  });
  return isAdjacent;
}
function eqSelectionShape(a, b) {
  return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {
    return r.empty != b.ranges[i].empty;
  }).length === 0;
}
function conc(a, b) {
  return !a.length ? b : !b.length ? a : a.concat(b);
}
var none = [];
var MaxSelectionsPerEvent = 200;
function _addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    var lastEvent = branch[branch.length - 1];
    var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
// Assumes the top item has one or more selectionAfter values
function popSelection(branch) {
  var last = branch[branch.length - 1];
  var newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
// Add a mapping to the top event in the given branch. If this maps
// away all the changes and effects in that item, drop it and
// propagate the mapping to the next item.
function addMappingToBranch(branch, mapping) {
  if (!branch.length) return branch;
  var length = branch.length,
    selections = none;
  while (length) {
    var event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      // Event survived mapping
      var result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      // Drop this event, since there's no changes or effects left
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none;
}
function mapEvent(event, mapping, extraSelections) {
  var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {
    return s.map(mapping);
  }) : none, extraSelections);
  // Change-less events don't store mappings (they are always the last event in a branch)
  if (!event.changes) return HistEvent.selection(selections);
  var mappedChanges = event.changes.map(mapping),
    before = mapping.mapDesc(event.changes, true);
  var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, _state.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = /*#__PURE__*/function () {
  function HistoryState(done, undone) {
    var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    _classCallCheck(this, HistoryState);
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  _createClass(HistoryState, [{
    key: "isolate",
    value: function isolate() {
      return this.prevTime ? new HistoryState(this.done, this.undone) : this;
    }
  }, {
    key: "addChanges",
    value: function addChanges(event, time, userEvent, config, tr) {
      var done = this.done,
        lastEvent = done[done.length - 1];
      if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config.newGroupDelay && config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) ||
      // For compose (but not compose.start) events, always join with previous event
      userEvent == "input.type.compose")) {
        done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
      } else {
        done = updateBranch(done, done.length, config.minDepth, event);
      }
      return new HistoryState(done, none, time, userEvent);
    }
  }, {
    key: "addSelection",
    value: function addSelection(selection, time, userEvent, newGroupDelay) {
      var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;
      return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);
    }
  }, {
    key: "addMapping",
    value: function addMapping(mapping) {
      return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
    }
  }, {
    key: "pop",
    value: function pop(side, state, selection) {
      var branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
      if (branch.length == 0) return null;
      var event = branch[branch.length - 1];
      if (selection && event.selectionsAfter.length) {
        return state.update({
          selection: event.selectionsAfter[event.selectionsAfter.length - 1],
          annotations: fromHistory.of({
            side: side,
            rest: popSelection(branch)
          }),
          userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
          scrollIntoView: true
        });
      } else if (!event.changes) {
        return null;
      } else {
        var rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
        if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
        return state.update({
          changes: event.changes,
          selection: event.startSelection,
          effects: event.effects,
          annotations: fromHistory.of({
            side: side,
            rest: rest
          }),
          filter: false,
          userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
          scrollIntoView: true
        });
      }
    }
  }]);
  return HistoryState;
}();
HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
/**
Default key bindings for the undo history.

- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
*/
var historyKeymap = [{
  key: "Mod-z",
  run: undo,
  preventDefault: true
}, {
  key: "Mod-y",
  mac: "Mod-Shift-z",
  run: redo,
  preventDefault: true
}, {
  linux: "Ctrl-Shift-z",
  run: redo,
  preventDefault: true
}, {
  key: "Mod-u",
  run: undoSelection,
  preventDefault: true
}, {
  key: "Alt-u",
  mac: "Mod-Shift-u",
  run: redoSelection,
  preventDefault: true
}];
exports.historyKeymap = historyKeymap;
function updateSel(sel, by) {
  return _state.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({
    selection: selection,
    scrollIntoView: true,
    userEvent: "select"
  });
}
function moveSel(_ref4, how) {
  var state = _ref4.state,
    dispatch = _ref4.dispatch;
  var selection = updateSel(state.selection, how);
  if (selection.eq(state.selection)) return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range, forward) {
  return _state.EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);
  });
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == _view.Direction.LTR;
}
/**
Move the selection one character to the left (which is backward in
left-to-right text, forward in right-to-left text).
*/
var cursorCharLeft = function cursorCharLeft(view) {
  return cursorByChar(view, !ltrAtCursor(view));
};
/**
Move the selection one character to the right.
*/
exports.cursorCharLeft = cursorCharLeft;
var cursorCharRight = function cursorCharRight(view) {
  return cursorByChar(view, ltrAtCursor(view));
};
/**
Move the selection one character forward.
*/
exports.cursorCharRight = cursorCharRight;
var cursorCharForward = function cursorCharForward(view) {
  return cursorByChar(view, true);
};
/**
Move the selection one character backward.
*/
exports.cursorCharForward = cursorCharForward;
var cursorCharBackward = function cursorCharBackward(view) {
  return cursorByChar(view, false);
};
exports.cursorCharBackward = cursorCharBackward;
function cursorByGroup(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);
  });
}
/**
Move the selection to the left across one group of word or
non-word (but also non-space) characters.
*/
var cursorGroupLeft = function cursorGroupLeft(view) {
  return cursorByGroup(view, !ltrAtCursor(view));
};
/**
Move the selection one group to the right.
*/
exports.cursorGroupLeft = cursorGroupLeft;
var cursorGroupRight = function cursorGroupRight(view) {
  return cursorByGroup(view, ltrAtCursor(view));
};
/**
Move the selection one group forward.
*/
exports.cursorGroupRight = cursorGroupRight;
var cursorGroupForward = function cursorGroupForward(view) {
  return cursorByGroup(view, true);
};
/**
Move the selection one group backward.
*/
exports.cursorGroupForward = cursorGroupForward;
var cursorGroupBackward = function cursorGroupBackward(view) {
  return cursorByGroup(view, false);
};
exports.cursorGroupBackward = cursorGroupBackward;
function moveBySubword(view, range, forward) {
  var categorize = view.state.charCategorizer(range.from);
  return view.moveByChar(range, forward, function (start) {
    var cat = _state.CharCategory.Space,
      pos = range.from;
    var done = false,
      sawUpper = false,
      sawLower = false;
    var step = function step(next) {
      if (done) return false;
      pos += forward ? next.length : -next.length;
      var nextCat = categorize(next),
        ahead;
      if (cat == _state.CharCategory.Space) cat = nextCat;
      if (cat != nextCat) return false;
      if (cat == _state.CharCategory.Word) {
        if (next.toLowerCase() == next) {
          if (!forward && sawUpper) return false;
          sawLower = true;
        } else if (sawLower) {
          if (forward) return false;
          done = true;
        } else {
          if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == _state.CharCategory.Word && ahead.toLowerCase() == ahead) return false;
          sawUpper = true;
        }
      }
      return true;
    };
    step(start);
    return step;
  });
}
function cursorBySubword(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward);
  });
}
/**
Move the selection one group or camel-case subword forward.
*/
var cursorSubwordForward = function cursorSubwordForward(view) {
  return cursorBySubword(view, true);
};
/**
Move the selection one group or camel-case subword backward.
*/
exports.cursorSubwordForward = cursorSubwordForward;
var cursorSubwordBackward = function cursorSubwordBackward(view) {
  return cursorBySubword(view, false);
};
exports.cursorSubwordBackward = cursorSubwordBackward;
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp)) return true;
  var len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start, forward) {
  var pos = (0, _language.syntaxTree)(state).resolveInner(start.head);
  var bracketProp = forward ? _common.NodeProp.closedBy : _common.NodeProp.openedBy;
  // Scan forward through child nodes to see if there's an interesting
  // node ahead.
  for (var at = start.head;;) {
    var next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next) break;
    if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
  }
  var bracket = pos.type.prop(bracketProp),
    match,
    newPos;
  if (bracket && (match = forward ? (0, _language.matchBrackets)(state, pos.from, 1) : (0, _language.matchBrackets)(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
  return _state.EditorSelection.cursor(newPos, forward ? -1 : 1);
}
/**
Move the cursor over the next syntactic element to the left.
*/
var cursorSyntaxLeft = function cursorSyntaxLeft(view) {
  return moveSel(view, function (range) {
    return moveBySyntax(view.state, range, !ltrAtCursor(view));
  });
};
/**
Move the cursor over the next syntactic element to the right.
*/
exports.cursorSyntaxLeft = cursorSyntaxLeft;
var cursorSyntaxRight = function cursorSyntaxRight(view) {
  return moveSel(view, function (range) {
    return moveBySyntax(view.state, range, ltrAtCursor(view));
  });
};
exports.cursorSyntaxRight = cursorSyntaxRight;
function cursorByLine(view, forward) {
  return moveSel(view, function (range) {
    if (!range.empty) return rangeEnd(range, forward);
    var moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
/**
Move the selection one line up.
*/
var cursorLineUp = function cursorLineUp(view) {
  return cursorByLine(view, false);
};
/**
Move the selection one line down.
*/
exports.cursorLineUp = cursorLineUp;
var cursorLineDown = function cursorLineDown(view) {
  return cursorByLine(view, true);
};
exports.cursorLineDown = cursorLineDown;
function pageInfo(view) {
  var selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  var marginTop = 0,
    marginBottom = 0,
    height;
  if (selfScroll) {
    var _iterator6 = _createForOfIteratorHelper(view.state.facet(_view.EditorView.scrollMargins)),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var source = _step6.value;
        var margins = source(view);
        if (margins === null || margins === void 0 ? void 0 : margins.top) marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
        if (margins === null || margins === void 0 ? void 0 : margins.bottom) marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop: marginTop,
    marginBottom: marginBottom,
    selfScroll: selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  var page = pageInfo(view);
  var state = view.state,
    selection = updateSel(state.selection, function (range) {
      return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
    });
  if (selection.eq(state.selection)) return false;
  var effect;
  if (page.selfScroll) {
    var startPos = view.coordsAtPos(state.selection.main.head);
    var scrollRect = view.scrollDOM.getBoundingClientRect();
    var scrollTop = scrollRect.top + page.marginTop,
      scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom) effect = _view.EditorView.scrollIntoView(selection.main.head, {
      y: "start",
      yMargin: startPos.top - scrollTop
    });
  }
  view.dispatch(setSel(state, selection), {
    effects: effect
  });
  return true;
}
/**
Move the selection one page up.
*/
var cursorPageUp = function cursorPageUp(view) {
  return cursorByPage(view, false);
};
/**
Move the selection one page down.
*/
exports.cursorPageUp = cursorPageUp;
var cursorPageDown = function cursorPageDown(view) {
  return cursorByPage(view, true);
};
exports.cursorPageDown = cursorPageDown;
function moveByLineBoundary(view, start, forward) {
  var line = view.lineBlockAt(start.head),
    moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    var space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space && start.head != line.from + space) moved = _state.EditorSelection.cursor(line.from + space);
  }
  return moved;
}
/**
Move the selection to the next line wrap point, or to the end of
the line if there isn't one left on this line.
*/
var cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, true);
  });
};
/**
Move the selection to previous line wrap point, or failing that to
the start of the line. If the line is indented, and the cursor
isn't already at the end of the indentation, this will move to the
end of the indentation instead of the start of the line.
*/
exports.cursorLineBoundaryForward = cursorLineBoundaryForward;
var cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, false);
  });
};
/**
Move the selection one line wrap point to the left.
*/
exports.cursorLineBoundaryBackward = cursorLineBoundaryBackward;
var cursorLineBoundaryLeft = function cursorLineBoundaryLeft(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, !ltrAtCursor(view));
  });
};
/**
Move the selection one line wrap point to the right.
*/
exports.cursorLineBoundaryLeft = cursorLineBoundaryLeft;
var cursorLineBoundaryRight = function cursorLineBoundaryRight(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, ltrAtCursor(view));
  });
};
/**
Move the selection to the start of the line.
*/
exports.cursorLineBoundaryRight = cursorLineBoundaryRight;
var cursorLineStart = function cursorLineStart(view) {
  return moveSel(view, function (range) {
    return _state.EditorSelection.cursor(view.lineBlockAt(range.head).from, 1);
  });
};
/**
Move the selection to the end of the line.
*/
exports.cursorLineStart = cursorLineStart;
var cursorLineEnd = function cursorLineEnd(view) {
  return moveSel(view, function (range) {
    return _state.EditorSelection.cursor(view.lineBlockAt(range.head).to, -1);
  });
};
exports.cursorLineEnd = cursorLineEnd;
function toMatchingBracket(state, dispatch, extend) {
  var found = false,
    selection = updateSel(state.selection, function (range) {
      var matching = (0, _language.matchBrackets)(state, range.head, -1) || (0, _language.matchBrackets)(state, range.head, 1) || range.head > 0 && (0, _language.matchBrackets)(state, range.head - 1, 1) || range.head < state.doc.length && (0, _language.matchBrackets)(state, range.head + 1, -1);
      if (!matching || !matching.end) return range;
      found = true;
      var head = matching.start.from == range.head ? matching.end.to : matching.end.from;
      return extend ? _state.EditorSelection.range(range.anchor, head) : _state.EditorSelection.cursor(head);
    });
  if (!found) return false;
  dispatch(setSel(state, selection));
  return true;
}
/**
Move the selection to the bracket matching the one it is currently
on, if any.
*/
var cursorMatchingBracket = function cursorMatchingBracket(_ref5) {
  var state = _ref5.state,
    dispatch = _ref5.dispatch;
  return toMatchingBracket(state, dispatch, false);
};
/**
Extend the selection to the bracket matching the one the selection
head is currently on, if any.
*/
exports.cursorMatchingBracket = cursorMatchingBracket;
var selectMatchingBracket = function selectMatchingBracket(_ref6) {
  var state = _ref6.state,
    dispatch = _ref6.dispatch;
  return toMatchingBracket(state, dispatch, true);
};
exports.selectMatchingBracket = selectMatchingBracket;
function extendSel(view, how) {
  var selection = updateSel(view.state.selection, function (range) {
    var head = how(range);
    return _state.EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
  });
  if (selection.eq(view.state.selection)) return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, function (range) {
    return view.moveByChar(range, forward);
  });
}
/**
Move the selection head one character to the left, while leaving
the anchor in place.
*/
var selectCharLeft = function selectCharLeft(view) {
  return selectByChar(view, !ltrAtCursor(view));
};
/**
Move the selection head one character to the right.
*/
exports.selectCharLeft = selectCharLeft;
var selectCharRight = function selectCharRight(view) {
  return selectByChar(view, ltrAtCursor(view));
};
/**
Move the selection head one character forward.
*/
exports.selectCharRight = selectCharRight;
var selectCharForward = function selectCharForward(view) {
  return selectByChar(view, true);
};
/**
Move the selection head one character backward.
*/
exports.selectCharForward = selectCharForward;
var selectCharBackward = function selectCharBackward(view) {
  return selectByChar(view, false);
};
exports.selectCharBackward = selectCharBackward;
function selectByGroup(view, forward) {
  return extendSel(view, function (range) {
    return view.moveByGroup(range, forward);
  });
}
/**
Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
the left.
*/
var selectGroupLeft = function selectGroupLeft(view) {
  return selectByGroup(view, !ltrAtCursor(view));
};
/**
Move the selection head one group to the right.
*/
exports.selectGroupLeft = selectGroupLeft;
var selectGroupRight = function selectGroupRight(view) {
  return selectByGroup(view, ltrAtCursor(view));
};
/**
Move the selection head one group forward.
*/
exports.selectGroupRight = selectGroupRight;
var selectGroupForward = function selectGroupForward(view) {
  return selectByGroup(view, true);
};
/**
Move the selection head one group backward.
*/
exports.selectGroupForward = selectGroupForward;
var selectGroupBackward = function selectGroupBackward(view) {
  return selectByGroup(view, false);
};
exports.selectGroupBackward = selectGroupBackward;
function selectBySubword(view, forward) {
  return extendSel(view, function (range) {
    return moveBySubword(view, range, forward);
  });
}
/**
Move the selection head one group or camel-case subword forward.
*/
var selectSubwordForward = function selectSubwordForward(view) {
  return selectBySubword(view, true);
};
/**
Move the selection head one group or subword backward.
*/
exports.selectSubwordForward = selectSubwordForward;
var selectSubwordBackward = function selectSubwordBackward(view) {
  return selectBySubword(view, false);
};
/**
Move the selection head over the next syntactic element to the left.
*/
exports.selectSubwordBackward = selectSubwordBackward;
var selectSyntaxLeft = function selectSyntaxLeft(view) {
  return extendSel(view, function (range) {
    return moveBySyntax(view.state, range, !ltrAtCursor(view));
  });
};
/**
Move the selection head over the next syntactic element to the right.
*/
exports.selectSyntaxLeft = selectSyntaxLeft;
var selectSyntaxRight = function selectSyntaxRight(view) {
  return extendSel(view, function (range) {
    return moveBySyntax(view.state, range, ltrAtCursor(view));
  });
};
exports.selectSyntaxRight = selectSyntaxRight;
function selectByLine(view, forward) {
  return extendSel(view, function (range) {
    return view.moveVertically(range, forward);
  });
}
/**
Move the selection head one line up.
*/
var selectLineUp = function selectLineUp(view) {
  return selectByLine(view, false);
};
/**
Move the selection head one line down.
*/
exports.selectLineUp = selectLineUp;
var selectLineDown = function selectLineDown(view) {
  return selectByLine(view, true);
};
exports.selectLineDown = selectLineDown;
function selectByPage(view, forward) {
  return extendSel(view, function (range) {
    return view.moveVertically(range, forward, pageInfo(view).height);
  });
}
/**
Move the selection head one page up.
*/
var selectPageUp = function selectPageUp(view) {
  return selectByPage(view, false);
};
/**
Move the selection head one page down.
*/
exports.selectPageUp = selectPageUp;
var selectPageDown = function selectPageDown(view) {
  return selectByPage(view, true);
};
/**
Move the selection head to the next line boundary.
*/
exports.selectPageDown = selectPageDown;
var selectLineBoundaryForward = function selectLineBoundaryForward(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, true);
  });
};
/**
Move the selection head to the previous line boundary.
*/
exports.selectLineBoundaryForward = selectLineBoundaryForward;
var selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, false);
  });
};
/**
Move the selection head one line boundary to the left.
*/
exports.selectLineBoundaryBackward = selectLineBoundaryBackward;
var selectLineBoundaryLeft = function selectLineBoundaryLeft(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, !ltrAtCursor(view));
  });
};
/**
Move the selection head one line boundary to the right.
*/
exports.selectLineBoundaryLeft = selectLineBoundaryLeft;
var selectLineBoundaryRight = function selectLineBoundaryRight(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, ltrAtCursor(view));
  });
};
/**
Move the selection head to the start of the line.
*/
exports.selectLineBoundaryRight = selectLineBoundaryRight;
var selectLineStart = function selectLineStart(view) {
  return extendSel(view, function (range) {
    return _state.EditorSelection.cursor(view.lineBlockAt(range.head).from);
  });
};
/**
Move the selection head to the end of the line.
*/
exports.selectLineStart = selectLineStart;
var selectLineEnd = function selectLineEnd(view) {
  return extendSel(view, function (range) {
    return _state.EditorSelection.cursor(view.lineBlockAt(range.head).to);
  });
};
/**
Move the selection to the start of the document.
*/
exports.selectLineEnd = selectLineEnd;
var cursorDocStart = function cursorDocStart(_ref7) {
  var state = _ref7.state,
    dispatch = _ref7.dispatch;
  dispatch(setSel(state, {
    anchor: 0
  }));
  return true;
};
/**
Move the selection to the end of the document.
*/
exports.cursorDocStart = cursorDocStart;
var cursorDocEnd = function cursorDocEnd(_ref8) {
  var state = _ref8.state,
    dispatch = _ref8.dispatch;
  dispatch(setSel(state, {
    anchor: state.doc.length
  }));
  return true;
};
/**
Move the selection head to the start of the document.
*/
exports.cursorDocEnd = cursorDocEnd;
var selectDocStart = function selectDocStart(_ref9) {
  var state = _ref9.state,
    dispatch = _ref9.dispatch;
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: 0
  }));
  return true;
};
/**
Move the selection head to the end of the document.
*/
exports.selectDocStart = selectDocStart;
var selectDocEnd = function selectDocEnd(_ref10) {
  var state = _ref10.state,
    dispatch = _ref10.dispatch;
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: state.doc.length
  }));
  return true;
};
/**
Select the entire document.
*/
exports.selectDocEnd = selectDocEnd;
var selectAll = function selectAll(_ref11) {
  var state = _ref11.state,
    dispatch = _ref11.dispatch;
  dispatch(state.update({
    selection: {
      anchor: 0,
      head: state.doc.length
    },
    userEvent: "select"
  }));
  return true;
};
/**
Expand the selection to cover entire lines.
*/
exports.selectAll = selectAll;
var selectLine = function selectLine(_ref12) {
  var state = _ref12.state,
    dispatch = _ref12.dispatch;
  var ranges = selectedLineBlocks(state).map(function (_ref13) {
    var from = _ref13.from,
      to = _ref13.to;
    return _state.EditorSelection.range(from, Math.min(to + 1, state.doc.length));
  });
  dispatch(state.update({
    selection: _state.EditorSelection.create(ranges),
    userEvent: "select"
  }));
  return true;
};
/**
Select the next syntactic construct that is larger than the
selection. Note that this will only work insofar as the language
[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
syntax tree.
*/
exports.selectLine = selectLine;
var selectParentSyntax = function selectParentSyntax(_ref14) {
  var state = _ref14.state,
    dispatch = _ref14.dispatch;
  var selection = updateSel(state.selection, function (range) {
    var _a;
    var context = (0, _language.syntaxTree)(state).resolveInner(range.head, 1);
    while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) context = context.parent;
    return _state.EditorSelection.range(context.to, context.from);
  });
  dispatch(setSel(state, selection));
  return true;
};
/**
Simplify the current selection. When multiple ranges are selected,
reduce it to its main range. Otherwise, if the selection is
non-empty, convert it to a cursor selection.
*/
exports.selectParentSyntax = selectParentSyntax;
var simplifySelection = function simplifySelection(_ref15) {
  var state = _ref15.state,
    dispatch = _ref15.dispatch;
  var cur = state.selection,
    selection = null;
  if (cur.ranges.length > 1) selection = _state.EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = _state.EditorSelection.create([_state.EditorSelection.cursor(cur.main.head)]);
  if (!selection) return false;
  dispatch(setSel(state, selection));
  return true;
};
exports.simplifySelection = simplifySelection;
function deleteBy(target, by) {
  if (target.state.readOnly) return false;
  var event = "delete.selection",
    state = target.state;
  var changes = state.changeByRange(function (range) {
    var from = range.from,
      to = range.to;
    if (from == to) {
      var towards = by(from);
      if (towards < from) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    } else {
      from = skipAtomic(target, from, false);
      to = skipAtomic(target, to, true);
    }
    return from == to ? {
      range: range
    } : {
      changes: {
        from: from,
        to: to
      },
      range: _state.EditorSelection.cursor(from)
    };
  });
  if (changes.changes.empty) return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? _view.EditorView.announce.of(state.phrase("Selection deleted")) : undefined
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof _view.EditorView) {
    var _iterator7 = _createForOfIteratorHelper(target.state.facet(_view.EditorView.atomicRanges).map(function (f) {
        return f(target);
      })),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var ranges = _step7.value;
        ranges.between(pos, pos, function (from, to) {
          if (from < pos && to > pos) pos = forward ? to : from;
        });
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }
  return pos;
}
var deleteByChar = function deleteByChar(target, forward) {
  return deleteBy(target, function (pos) {
    var state = target.state,
      line = state.doc.lineAt(pos),
      before,
      targetPos;
    if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "\t") return pos - 1;
      var col = (0, _state.countColumn)(before, state.tabSize),
        drop = col % (0, _language.getIndentUnit)(state) || (0, _language.getIndentUnit)(state);
      for (var i = 0; i < drop && before[before.length - 1 - i] == " "; i++) pos--;
      targetPos = pos;
    } else {
      targetPos = (0, _state.findClusterBreak)(line.text, pos - line.from, forward, forward) + line.from;
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;
    }
    return targetPos;
  });
};
/**
Delete the selection, or, for cursor selections, the character
before the cursor.
*/
var deleteCharBackward = function deleteCharBackward(view) {
  return deleteByChar(view, false);
};
/**
Delete the selection or the character after the cursor.
*/
exports.deleteCharBackward = deleteCharBackward;
var deleteCharForward = function deleteCharForward(view) {
  return deleteByChar(view, true);
};
exports.deleteCharForward = deleteCharForward;
var deleteByGroup = function deleteByGroup(target, forward) {
  return deleteBy(target, function (start) {
    var pos = start,
      state = target.state,
      line = state.doc.lineAt(pos);
    var categorize = state.charCategorizer(pos);
    for (var cat = null;;) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
        break;
      }
      var next = (0, _state.findClusterBreak)(line.text, pos - line.from, forward) + line.from;
      var nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      var nextCat = categorize(nextChar);
      if (cat != null && nextCat != cat) break;
      if (nextChar != " " || pos != start) cat = nextCat;
      pos = next;
    }
    return pos;
  });
};
/**
Delete the selection or backward until the end of the next
[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
whitespace when they consist of a single space.
*/
var deleteGroupBackward = function deleteGroupBackward(target) {
  return deleteByGroup(target, false);
};
/**
Delete the selection or forward until the end of the next group.
*/
exports.deleteGroupBackward = deleteGroupBackward;
var deleteGroupForward = function deleteGroupForward(target) {
  return deleteByGroup(target, true);
};
/**
Delete the selection, or, if it is a cursor selection, delete to
the end of the line. If the cursor is directly at the end of the
line, delete the line break after it.
*/
exports.deleteGroupForward = deleteGroupForward;
var deleteToLineEnd = function deleteToLineEnd(view) {
  return deleteBy(view, function (pos) {
    var lineEnd = view.lineBlockAt(pos).to;
    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
  });
};
/**
Delete the selection, or, if it is a cursor selection, delete to
the start of the line. If the cursor is directly at the start of the
line, delete the line break before it.
*/
exports.deleteToLineEnd = deleteToLineEnd;
var deleteToLineStart = function deleteToLineStart(view) {
  return deleteBy(view, function (pos) {
    var lineStart = view.lineBlockAt(pos).from;
    return pos > lineStart ? lineStart : Math.max(0, pos - 1);
  });
};
/**
Delete all whitespace directly before a line end from the
document.
*/
exports.deleteToLineStart = deleteToLineStart;
var deleteTrailingWhitespace = function deleteTrailingWhitespace(_ref16) {
  var state = _ref16.state,
    dispatch = _ref16.dispatch;
  if (state.readOnly) return false;
  var changes = [];
  for (var pos = 0, prev = "", iter = state.doc.iter();;) {
    iter.next();
    if (iter.lineBreak || iter.done) {
      var trailing = prev.search(/\s+$/);
      if (trailing > -1) changes.push({
        from: pos - (prev.length - trailing),
        to: pos
      });
      if (iter.done) break;
      prev = "";
    } else {
      prev = iter.value;
    }
    pos += iter.value.length;
  }
  if (!changes.length) return false;
  dispatch(state.update({
    changes: changes,
    userEvent: "delete"
  }));
  return true;
};
/**
Replace each selection range with a line break, leaving the cursor
on the line before the break.
*/
exports.deleteTrailingWhitespace = deleteTrailingWhitespace;
var splitLine = function splitLine(_ref17) {
  var state = _ref17.state,
    dispatch = _ref17.dispatch;
  if (state.readOnly) return false;
  var changes = state.changeByRange(function (range) {
    return {
      changes: {
        from: range.from,
        to: range.to,
        insert: _state.Text.of(["", ""])
      },
      range: _state.EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};
/**
Flip the characters before and after the cursor(s).
*/
exports.splitLine = splitLine;
var transposeChars = function transposeChars(_ref18) {
  var state = _ref18.state,
    dispatch = _ref18.dispatch;
  if (state.readOnly) return false;
  var changes = state.changeByRange(function (range) {
    if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
      range: range
    };
    var pos = range.from,
      line = state.doc.lineAt(pos);
    var from = pos == line.from ? pos - 1 : (0, _state.findClusterBreak)(line.text, pos - line.from, false) + line.from;
    var to = pos == line.to ? pos + 1 : (0, _state.findClusterBreak)(line.text, pos - line.from, true) + line.from;
    return {
      changes: {
        from: from,
        to: to,
        insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
      },
      range: _state.EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty) return false;
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "move.character"
  }));
  return true;
};
exports.transposeChars = transposeChars;
function selectedLineBlocks(state) {
  var blocks = [],
    upto = -1;
  var _iterator8 = _createForOfIteratorHelper(state.selection.ranges),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var range = _step8.value;
      var startLine = state.doc.lineAt(range.from),
        endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        var prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({
          from: startLine.from,
          to: endLine.to,
          ranges: [range]
        });
      }
      upto = endLine.number + 1;
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly) return false;
  var changes = [],
    ranges = [];
  var _iterator9 = _createForOfIteratorHelper(selectedLineBlocks(state)),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var block = _step9.value;
      if (forward ? block.to == state.doc.length : block.from == 0) continue;
      var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      var size = nextLine.length + 1;
      if (forward) {
        changes.push({
          from: block.to,
          to: nextLine.to
        }, {
          from: block.from,
          insert: nextLine.text + state.lineBreak
        });
        var _iterator10 = _createForOfIteratorHelper(block.ranges),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var r = _step10.value;
            ranges.push(_state.EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      } else {
        changes.push({
          from: nextLine.from,
          to: block.from
        }, {
          from: block.to,
          insert: state.lineBreak + nextLine.text
        });
        var _iterator11 = _createForOfIteratorHelper(block.ranges),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _r = _step11.value;
            ranges.push(_state.EditorSelection.range(_r.anchor - size, _r.head - size));
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  if (!changes.length) return false;
  dispatch(state.update({
    changes: changes,
    scrollIntoView: true,
    selection: _state.EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
/**
Move the selected lines up one line.
*/
var moveLineUp = function moveLineUp(_ref19) {
  var state = _ref19.state,
    dispatch = _ref19.dispatch;
  return moveLine(state, dispatch, false);
};
/**
Move the selected lines down one line.
*/
exports.moveLineUp = moveLineUp;
var moveLineDown = function moveLineDown(_ref20) {
  var state = _ref20.state,
    dispatch = _ref20.dispatch;
  return moveLine(state, dispatch, true);
};
exports.moveLineDown = moveLineDown;
function copyLine(state, dispatch, forward) {
  if (state.readOnly) return false;
  var changes = [];
  var _iterator12 = _createForOfIteratorHelper(selectedLineBlocks(state)),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var block = _step12.value;
      if (forward) changes.push({
        from: block.from,
        insert: state.doc.slice(block.from, block.to) + state.lineBreak
      });else changes.push({
        from: block.to,
        insert: state.lineBreak + state.doc.slice(block.from, block.to)
      });
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  dispatch(state.update({
    changes: changes,
    scrollIntoView: true,
    userEvent: "input.copyline"
  }));
  return true;
}
/**
Create a copy of the selected lines. Keep the selection in the top copy.
*/
var copyLineUp = function copyLineUp(_ref21) {
  var state = _ref21.state,
    dispatch = _ref21.dispatch;
  return copyLine(state, dispatch, false);
};
/**
Create a copy of the selected lines. Keep the selection in the bottom copy.
*/
exports.copyLineUp = copyLineUp;
var copyLineDown = function copyLineDown(_ref22) {
  var state = _ref22.state,
    dispatch = _ref22.dispatch;
  return copyLine(state, dispatch, true);
};
/**
Delete selected lines.
*/
exports.copyLineDown = copyLineDown;
var deleteLine = function deleteLine(view) {
  if (view.state.readOnly) return false;
  var state = view.state,
    changes = state.changes(selectedLineBlocks(state).map(function (_ref23) {
      var from = _ref23.from,
        to = _ref23.to;
      if (from > 0) from--;else if (to < state.doc.length) to++;
      return {
        from: from,
        to: to
      };
    }));
  var selection = updateSel(state.selection, function (range) {
    return view.moveVertically(range, true);
  }).map(changes);
  view.dispatch({
    changes: changes,
    selection: selection,
    scrollIntoView: true,
    userEvent: "delete.line"
  });
  return true;
};
/**
Replace the selection with a newline.
*/
exports.deleteLine = deleteLine;
var insertNewline = function insertNewline(_ref24) {
  var state = _ref24.state,
    dispatch = _ref24.dispatch;
  dispatch(state.update(state.replaceSelection(state.lineBreak), {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};
exports.insertNewline = insertNewline;
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
    from: pos,
    to: pos
  };
  var context = (0, _language.syntaxTree)(state).resolveInner(pos);
  var before = context.childBefore(pos),
    after = context.childAfter(pos),
    closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(_common.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {
    from: before.to,
    to: after.from
  };
  return null;
}
/**
Replace the selection with a newline and indent the newly created
line(s). If the current line consists only of whitespace, this
will also delete that whitespace. When the cursor is between
matching brackets, an additional newline will be inserted after
the cursor.
*/
var insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
/**
Create a blank, indented line below the current line.
*/
exports.insertNewlineAndIndent = insertNewlineAndIndent;
var insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
exports.insertBlankLine = insertBlankLine;
function newlineAndIndent(atEof) {
  return function (_ref25) {
    var state = _ref25.state,
      dispatch = _ref25.dispatch;
    if (state.readOnly) return false;
    var changes = state.changeByRange(function (range) {
      var from = range.from,
        to = range.to,
        line = state.doc.lineAt(from);
      var explode = !atEof && from == to && isBetweenBrackets(state, from);
      if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
      var cx = new _language.IndentContext(state, {
        simulateBreak: from,
        simulateDoubleBreak: !!explode
      });
      var indent = (0, _language.getIndentation)(cx, from);
      if (indent == null) indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
      while (to < line.to && /\s/.test(line.text[to - line.from])) to++;
      if (explode) {
        from = explode.from;
        to = explode.to;
      } else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
      var insert = ["", (0, _language.indentString)(state, indent)];
      if (explode) insert.push((0, _language.indentString)(state, cx.lineIndent(line.from, -1)));
      return {
        changes: {
          from: from,
          to: to,
          insert: _state.Text.of(insert)
        },
        range: _state.EditorSelection.cursor(from + 1 + insert[1].length)
      };
    });
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
}
function changeBySelectedLine(state, f) {
  var atLine = -1;
  return state.changeByRange(function (range) {
    var changes = [];
    for (var pos = range.from; pos <= range.to;) {
      var line = state.doc.lineAt(pos);
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f(line, changes, range);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    var changeSet = state.changes(changes);
    return {
      changes: changes,
      range: _state.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
/**
Auto-indent the selected lines. This uses the [indentation service
facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
information.
*/
var indentSelection = function indentSelection(_ref26) {
  var state = _ref26.state,
    dispatch = _ref26.dispatch;
  if (state.readOnly) return false;
  var updated = Object.create(null);
  var context = new _language.IndentContext(state, {
    overrideIndentation: function overrideIndentation(start) {
      var found = updated[start];
      return found == null ? -1 : found;
    }
  });
  var changes = changeBySelectedLine(state, function (line, changes, range) {
    var indent = (0, _language.getIndentation)(context, line.from);
    if (indent == null) return;
    if (!/\S/.test(line.text)) indent = 0;
    var cur = /^\s*/.exec(line.text)[0];
    var norm = (0, _language.indentString)(state, indent);
    if (cur != norm || range.from < line.from + cur.length) {
      updated[line.from] = indent;
      changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }
  });
  if (!changes.changes.empty) dispatch(state.update(changes, {
    userEvent: "indent"
  }));
  return true;
};
/**
Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
lines.
*/
exports.indentSelection = indentSelection;
var indentMore = function indentMore(_ref27) {
  var state = _ref27.state,
    dispatch = _ref27.dispatch;
  if (state.readOnly) return false;
  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
    changes.push({
      from: line.from,
      insert: state.facet(_language.indentUnit)
    });
  }), {
    userEvent: "input.indent"
  }));
  return true;
};
/**
Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
selected lines.
*/
exports.indentMore = indentMore;
var indentLess = function indentLess(_ref28) {
  var state = _ref28.state,
    dispatch = _ref28.dispatch;
  if (state.readOnly) return false;
  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
    var space = /^\s*/.exec(line.text)[0];
    if (!space) return;
    var col = (0, _state.countColumn)(space, state.tabSize),
      keep = 0;
    var insert = (0, _language.indentString)(state, Math.max(0, col - (0, _language.getIndentUnit)(state)));
    while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) keep++;
    changes.push({
      from: line.from + keep,
      to: line.from + space.length,
      insert: insert.slice(keep)
    });
  }), {
    userEvent: "delete.dedent"
  }));
  return true;
};
/**
Insert a tab character at the cursor or, if something is selected,
use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
selection.
*/
exports.indentLess = indentLess;
var insertTab = function insertTab(_ref29) {
  var state = _ref29.state,
    dispatch = _ref29.dispatch;
  if (state.selection.ranges.some(function (r) {
    return !r.empty;
  })) return indentMore({
    state: state,
    dispatch: dispatch
  });
  dispatch(state.update(state.replaceSelection("\t"), {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};
/**
Array of key bindings containing the Emacs-style bindings that are
available on macOS by default.

 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
*/
exports.insertTab = insertTab;
var emacsStyleKeymap = [{
  key: "Ctrl-b",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Ctrl-f",
  run: cursorCharRight,
  shift: selectCharRight
}, {
  key: "Ctrl-p",
  run: cursorLineUp,
  shift: selectLineUp
}, {
  key: "Ctrl-n",
  run: cursorLineDown,
  shift: selectLineDown
}, {
  key: "Ctrl-a",
  run: cursorLineStart,
  shift: selectLineStart
}, {
  key: "Ctrl-e",
  run: cursorLineEnd,
  shift: selectLineEnd
}, {
  key: "Ctrl-d",
  run: deleteCharForward
}, {
  key: "Ctrl-h",
  run: deleteCharBackward
}, {
  key: "Ctrl-k",
  run: deleteToLineEnd
}, {
  key: "Ctrl-Alt-h",
  run: deleteGroupBackward
}, {
  key: "Ctrl-o",
  run: splitLine
}, {
  key: "Ctrl-t",
  run: transposeChars
}, {
  key: "Ctrl-v",
  run: cursorPageDown
}];
/**
An array of key bindings closely sticking to platform-standard or
widely used bindings. (This includes the bindings from
[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
property changed to `mac`.)

 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
 - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
 - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
 - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
*/
exports.emacsStyleKeymap = emacsStyleKeymap;
var standardKeymap = /*@__PURE__*/[{
  key: "ArrowLeft",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Mod-ArrowLeft",
  mac: "Alt-ArrowLeft",
  run: cursorGroupLeft,
  shift: selectGroupLeft,
  preventDefault: true
}, {
  mac: "Cmd-ArrowLeft",
  run: cursorLineBoundaryLeft,
  shift: selectLineBoundaryLeft,
  preventDefault: true
}, {
  key: "ArrowRight",
  run: cursorCharRight,
  shift: selectCharRight,
  preventDefault: true
}, {
  key: "Mod-ArrowRight",
  mac: "Alt-ArrowRight",
  run: cursorGroupRight,
  shift: selectGroupRight,
  preventDefault: true
}, {
  mac: "Cmd-ArrowRight",
  run: cursorLineBoundaryRight,
  shift: selectLineBoundaryRight,
  preventDefault: true
}, {
  key: "ArrowUp",
  run: cursorLineUp,
  shift: selectLineUp,
  preventDefault: true
}, {
  mac: "Cmd-ArrowUp",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  mac: "Ctrl-ArrowUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "ArrowDown",
  run: cursorLineDown,
  shift: selectLineDown,
  preventDefault: true
}, {
  mac: "Cmd-ArrowDown",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  mac: "Ctrl-ArrowDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "PageUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "PageDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "Home",
  run: cursorLineBoundaryBackward,
  shift: selectLineBoundaryBackward,
  preventDefault: true
}, {
  key: "Mod-Home",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  key: "End",
  run: cursorLineBoundaryForward,
  shift: selectLineBoundaryForward,
  preventDefault: true
}, {
  key: "Mod-End",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  key: "Enter",
  run: insertNewlineAndIndent
}, {
  key: "Mod-a",
  run: selectAll
}, {
  key: "Backspace",
  run: deleteCharBackward,
  shift: deleteCharBackward
}, {
  key: "Delete",
  run: deleteCharForward
}, {
  key: "Mod-Backspace",
  mac: "Alt-Backspace",
  run: deleteGroupBackward
}, {
  key: "Mod-Delete",
  mac: "Alt-Delete",
  run: deleteGroupForward
}, {
  mac: "Mod-Backspace",
  run: deleteToLineStart
}, {
  mac: "Mod-Delete",
  run: deleteToLineEnd
}].concat( /*@__PURE__*/emacsStyleKeymap.map(function (b) {
  return {
    mac: b.key,
    run: b.run,
    shift: b.shift
  };
}));
/**
The default keymap. Includes all bindings from
[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
*/
exports.standardKeymap = standardKeymap;
var defaultKeymap = /*@__PURE__*/[{
  key: "Alt-ArrowLeft",
  mac: "Ctrl-ArrowLeft",
  run: cursorSyntaxLeft,
  shift: selectSyntaxLeft
}, {
  key: "Alt-ArrowRight",
  mac: "Ctrl-ArrowRight",
  run: cursorSyntaxRight,
  shift: selectSyntaxRight
}, {
  key: "Alt-ArrowUp",
  run: moveLineUp
}, {
  key: "Shift-Alt-ArrowUp",
  run: copyLineUp
}, {
  key: "Alt-ArrowDown",
  run: moveLineDown
}, {
  key: "Shift-Alt-ArrowDown",
  run: copyLineDown
}, {
  key: "Escape",
  run: simplifySelection
}, {
  key: "Mod-Enter",
  run: insertBlankLine
}, {
  key: "Alt-l",
  mac: "Ctrl-l",
  run: selectLine
}, {
  key: "Mod-i",
  run: selectParentSyntax,
  preventDefault: true
}, {
  key: "Mod-[",
  run: indentLess
}, {
  key: "Mod-]",
  run: indentMore
}, {
  key: "Mod-Alt-\\",
  run: indentSelection
}, {
  key: "Shift-Mod-k",
  run: deleteLine
}, {
  key: "Shift-Mod-\\",
  run: cursorMatchingBracket
}, {
  key: "Mod-/",
  run: toggleComment
}, {
  key: "Alt-A",
  run: toggleBlockComment
}].concat(standardKeymap);
/**
A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
Please see the [Tab example](../../examples/tab/) before using
this.
*/
exports.defaultKeymap = defaultKeymap;
var indentWithTab = {
  key: "Tab",
  run: indentMore,
  shift: indentLess
};
exports.indentWithTab = indentWithTab;

},{"@codemirror/language":18,"@codemirror/state":20,"@codemirror/view":21,"@lezer/common":22}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeIndentContext = exports.StringStream = exports.StreamLanguage = exports.ParseContext = exports.LanguageSupport = exports.LanguageDescription = exports.Language = exports.LRLanguage = exports.IndentContext = exports.HighlightStyle = void 0;
exports.bracketMatching = bracketMatching;
exports.bracketMatchingHandle = void 0;
exports.codeFolding = codeFolding;
exports.continuedIndent = continuedIndent;
exports.defaultHighlightStyle = void 0;
exports.defineLanguageFacet = defineLanguageFacet;
exports.delimitedIndent = delimitedIndent;
exports.ensureSyntaxTree = ensureSyntaxTree;
exports.foldEffect = exports.foldCode = exports.foldAll = exports.flatIndent = void 0;
exports.foldGutter = foldGutter;
exports.foldInside = foldInside;
exports.foldState = exports.foldService = exports.foldNodeProp = exports.foldKeymap = void 0;
exports.foldable = foldable;
exports.foldedRanges = foldedRanges;
exports.forceParsing = forceParsing;
exports.getIndentUnit = getIndentUnit;
exports.getIndentation = getIndentation;
exports.highlightingFor = highlightingFor;
exports.indentNodeProp = void 0;
exports.indentOnInput = indentOnInput;
exports.indentRange = indentRange;
exports.indentService = void 0;
exports.indentString = indentString;
exports.languageDataProp = exports.language = exports.indentUnit = void 0;
exports.matchBrackets = matchBrackets;
exports.sublanguageProp = void 0;
exports.syntaxHighlighting = syntaxHighlighting;
exports.syntaxParserRunning = syntaxParserRunning;
exports.syntaxTree = syntaxTree;
exports.syntaxTreeAvailable = syntaxTreeAvailable;
exports.unfoldEffect = exports.unfoldCode = exports.unfoldAll = exports.toggleFold = void 0;
var _common = require("@lezer/common");
var _state2 = require("@codemirror/state");
var _view = require("@codemirror/view");
var _highlight = require("@lezer/highlight");
var _styleMod = require("style-mod");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _a;
/**
Node prop stored in a parser's top syntax node to provide the
facet that stores language-specific data for that language.
*/
var languageDataProp = /*@__PURE__*/new _common.NodeProp();
/**
Helper function to define a facet (to be added to the top syntax
node(s) for a language via
[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
used to associate language data with the language. You
probably only need this when subclassing
[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
*/
exports.languageDataProp = languageDataProp;
function defineLanguageFacet(baseData) {
  return _state2.Facet.define({
    combine: baseData ? function (values) {
      return values.concat(baseData);
    } : undefined
  });
}
/**
Syntax node prop used to register sublangauges. Should be added to
the top level node type for the language.
*/
var sublanguageProp = /*@__PURE__*/new _common.NodeProp();
/**
A language object manages parsing and per-language
[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
managed as a [Lezer](https://lezer.codemirror.net) tree. The class
can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
for stream parsers.
*/
exports.sublanguageProp = sublanguageProp;
var Language = /*#__PURE__*/function () {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  function Language(
  /**
  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
  used for this language.
  */
  data, parser) {
    var extraExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    _classCallCheck(this, Language);
    this.data = data;
    this.name = name;
    // Kludge to define EditorState.tree as a debugging helper,
    // without the EditorState package actually knowing about
    // languages and lezer trees.
    if (!_state2.EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(_state2.EditorState.prototype, "tree", {
      get: function get() {
        return syntaxTree(this);
      }
    });
    this.parser = parser;
    this.extension = [language.of(this), _state2.EditorState.languageData.of(function (state, pos, side) {
      var top = topNodeAt(state, pos, side),
        data = top.type.prop(languageDataProp);
      if (!data) return [];
      var base = state.facet(data),
        sub = top.type.prop(sublanguageProp);
      if (sub) {
        var innerNode = top.resolve(pos - top.from, side);
        var _iterator = _createForOfIteratorHelper(sub),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var sublang = _step.value;
            if (sublang.test(innerNode, state)) {
              var _data = state.facet(sublang.facet);
              return sublang.type == "replace" ? _data : _data.concat(base);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return base;
    })].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  _createClass(Language, [{
    key: "isActiveAt",
    value: function isActiveAt(state, pos) {
      var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
  }, {
    key: "findRegions",
    value: function findRegions(state) {
      var _this = this;
      var lang = state.facet(language);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
        from: 0,
        to: state.doc.length
      }];
      if (!lang || !lang.allowsNesting) return [];
      var result = [];
      var explore = function explore(tree, from) {
        if (tree.prop(languageDataProp) == _this.data) {
          result.push({
            from: from,
            to: from + tree.length
          });
          return;
        }
        var mount = tree.prop(_common.NodeProp.mounted);
        if (mount) {
          if (mount.tree.prop(languageDataProp) == _this.data) {
            if (mount.overlay) {
              var _iterator2 = _createForOfIteratorHelper(mount.overlay),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var r = _step2.value;
                  result.push({
                    from: r.from + from,
                    to: r.to + from
                  });
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            } else result.push({
              from: from,
              to: from + tree.length
            });
            return;
          } else if (mount.overlay) {
            var size = result.length;
            explore(mount.tree, mount.overlay[0].from + from);
            if (result.length > size) return;
          }
        }
        for (var i = 0; i < tree.children.length; i++) {
          var ch = tree.children[i];
          if (ch instanceof _common.Tree) explore(ch, tree.positions[i] + from);
        }
      };
      explore(syntaxTree(state), 0);
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
  }, {
    key: "allowsNesting",
    get: function get() {
      return true;
    }
  }]);
  return Language;
}();
/**
@internal
*/
exports.Language = Language;
Language.setState = /*@__PURE__*/_state2.StateEffect.define();
function topNodeAt(state, pos, side) {
  var topLang = state.facet(language),
    tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (var node = tree; node; node = node.enter(pos, side, _common.IterMode.ExcludeBuffers)) if (node.type.isTop) tree = node;
  }
  return tree;
}
/**
A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
parsers.
*/
var LRLanguage = /*#__PURE__*/function (_Language) {
  _inherits(LRLanguage, _Language);
  var _super = _createSuper(LRLanguage);
  function LRLanguage(data, parser, name) {
    var _this2;
    _classCallCheck(this, LRLanguage);
    _this2 = _super.call(this, data, parser, [], name);
    _this2.parser = parser;
    return _this2;
  }
  /**
  Define a language from a parser.
  */
  _createClass(LRLanguage, [{
    key: "configure",
    value:
    /**
    Create a new instance of this language with a reconfigured
    version of its parser and optionally a new name.
    */
    function configure(options, name) {
      return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
    }
  }, {
    key: "allowsNesting",
    get: function get() {
      return this.parser.hasWrappers();
    }
  }], [{
    key: "define",
    value: function define(spec) {
      var data = defineLanguageFacet(spec.languageData);
      return new LRLanguage(data, spec.parser.configure({
        props: [languageDataProp.add(function (type) {
          return type.isTop ? data : undefined;
        })]
      }), spec.name);
    }
  }]);
  return LRLanguage;
}(Language);
/**
Get the syntax tree for a state, which is the current (possibly
incomplete) parse tree of the active
[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
language available.
*/
exports.LRLanguage = LRLanguage;
function syntaxTree(state) {
  var field = state.field(Language.state, false);
  return field ? field.tree : _common.Tree.empty;
}
/**
Try to get a parse tree that spans at least up to `upto`. The
method will do at most `timeout` milliseconds of work to parse
up to that point if the tree isn't already available.
*/
function ensureSyntaxTree(state, upto) {
  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
  var _a;
  var parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;
  if (!parse) return null;
  var oldVieport = parse.viewport;
  parse.updateViewport({
    from: 0,
    to: upto
  });
  var result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;
  parse.updateViewport(oldVieport);
  return result;
}
/**
Queries whether there is a full syntax tree available up to the
given document position. If there isn't, the background parse
process _might_ still be working and update the tree further, but
there is no guarantee of that—the parser will [stop
working](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a
certain amount of time or has moved beyond the visible viewport.
Always returns false if no language has been enabled.
*/
function syntaxTreeAvailable(state) {
  var upto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state.doc.length;
  var _a;
  return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;
}
/**
Move parsing forward, and update the editor state afterwards to
reflect the new tree. Will work for at most `timeout`
milliseconds. Returns true if the parser managed get to the given
position in that time.
*/
function forceParsing(view) {
  var upto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : view.viewport.to;
  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var success = ensureSyntaxTree(view.state, upto, timeout);
  if (success != syntaxTree(view.state)) view.dispatch({});
  return !!success;
}
/**
Tells you whether the language parser is planning to do more
parsing work (in a `requestIdleCallback` pseudo-thread) or has
stopped running, either because it parsed the entire document,
because it spent too much time and was cut off, or because there
is no language parser enabled.
*/
function syntaxParserRunning(view) {
  var _a;
  return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;
}
// Lezer-style Input object for a Text document.
var DocInput = /*#__PURE__*/function () {
  function DocInput(doc) {
    _classCallCheck(this, DocInput);
    this.doc = doc;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc.iter();
  }
  _createClass(DocInput, [{
    key: "length",
    get: function get() {
      return this.doc.length;
    }
  }, {
    key: "syncTo",
    value: function syncTo(pos) {
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
  }, {
    key: "chunk",
    value: function chunk(pos) {
      this.syncTo(pos);
      return this.string;
    }
  }, {
    key: "lineChunks",
    get: function get() {
      return true;
    }
  }, {
    key: "read",
    value: function read(from, to) {
      var stringStart = this.cursorPos - this.string.length;
      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
    }
  }]);
  return DocInput;
}();
var currentContext = null;
/**
A parse context provided to parsers working on the editor content.
*/
var ParseContext = /*#__PURE__*/function () {
  function ParseContext(parser,
  /**
  The current editor state.
  */
  state) {
    var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var
    /**
    @internal
    */
    tree = arguments.length > 3 ? arguments[3] : undefined;
    var
    /**
    @internal
    */
    treeLen = arguments.length > 4 ? arguments[4] : undefined;
    var
    /**
    The current editor viewport (or some overapproximation
    thereof). Intended to be used for opportunistically avoiding
    work (in which case
    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
    should be called to make sure the parser is restarted when the
    skipped region becomes visible).
    */
    viewport = arguments.length > 5 ? arguments[5] : undefined;
    var
    /**
    @internal
    */
    skipped = arguments.length > 6 ? arguments[6] : undefined;
    var
    /**
    This is where skipping parsers can register a promise that,
    when resolved, will schedule a new parse. It is cleared when
    the parse worker picks up the promise. @internal
    */
    scheduleOn = arguments.length > 7 ? arguments[7] : undefined;
    _classCallCheck(this, ParseContext);
    this.parser = parser;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    /**
    @internal
    */
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  _createClass(ParseContext, [{
    key: "startParse",
    value: function startParse() {
      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
    }
    /**
    @internal
    */
  }, {
    key: "work",
    value: function work(until, upto) {
      var _this3 = this;
      if (upto != null && upto >= this.state.doc.length) upto = undefined;
      if (this.tree != _common.Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
        this.takeTree();
        return true;
      }
      return this.withContext(function () {
        var _a;
        if (typeof until == "number") {
          var endTime = Date.now() + until;
          until = function until() {
            return Date.now() > endTime;
          };
        }
        if (!_this3.parse) _this3.parse = _this3.startParse();
        if (upto != null && (_this3.parse.stoppedAt == null || _this3.parse.stoppedAt > upto) && upto < _this3.state.doc.length) _this3.parse.stopAt(upto);
        for (;;) {
          var done = _this3.parse.advance();
          if (done) {
            _this3.fragments = _this3.withoutTempSkipped(_common.TreeFragment.addTree(done, _this3.fragments, _this3.parse.stoppedAt != null));
            _this3.treeLen = (_a = _this3.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this3.state.doc.length;
            _this3.tree = done;
            _this3.parse = null;
            if (_this3.treeLen < (upto !== null && upto !== void 0 ? upto : _this3.state.doc.length)) _this3.parse = _this3.startParse();else return true;
          }
          if (until()) return false;
        }
      });
    }
    /**
    @internal
    */
  }, {
    key: "takeTree",
    value: function takeTree() {
      var _this4 = this;
      var pos, tree;
      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
        this.withContext(function () {
          while (!(tree = _this4.parse.advance())) {}
        });
        this.treeLen = pos;
        this.tree = tree;
        this.fragments = this.withoutTempSkipped(_common.TreeFragment.addTree(this.tree, this.fragments, true));
        this.parse = null;
      }
    }
  }, {
    key: "withContext",
    value: function withContext(f) {
      var prev = currentContext;
      currentContext = this;
      try {
        return f();
      } finally {
        currentContext = prev;
      }
    }
  }, {
    key: "withoutTempSkipped",
    value: function withoutTempSkipped(fragments) {
      for (var r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);
      return fragments;
    }
    /**
    @internal
    */
  }, {
    key: "changes",
    value: function changes(_changes, newState) {
      var fragments = this.fragments,
        tree = this.tree,
        treeLen = this.treeLen,
        viewport = this.viewport,
        skipped = this.skipped;
      this.takeTree();
      if (!_changes.empty) {
        var ranges = [];
        _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
          return ranges.push({
            fromA: fromA,
            toA: toA,
            fromB: fromB,
            toB: toB
          });
        });
        fragments = _common.TreeFragment.applyChanges(fragments, ranges);
        tree = _common.Tree.empty;
        treeLen = 0;
        viewport = {
          from: _changes.mapPos(viewport.from, -1),
          to: _changes.mapPos(viewport.to, 1)
        };
        if (this.skipped.length) {
          skipped = [];
          var _iterator3 = _createForOfIteratorHelper(this.skipped),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var r = _step3.value;
              var from = _changes.mapPos(r.from, 1),
                to = _changes.mapPos(r.to, -1);
              if (from < to) skipped.push({
                from: from,
                to: to
              });
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }
      return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
  }, {
    key: "updateViewport",
    value: function updateViewport(viewport) {
      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
      this.viewport = viewport;
      var startLen = this.skipped.length;
      for (var i = 0; i < this.skipped.length; i++) {
        var _this$skipped$i = this.skipped[i],
          from = _this$skipped$i.from,
          to = _this$skipped$i.to;
        if (from < viewport.to && to > viewport.from) {
          this.fragments = cutFragments(this.fragments, from, to);
          this.skipped.splice(i--, 1);
        }
      }
      if (this.skipped.length >= startLen) return false;
      this.reset();
      return true;
    }
    /**
    @internal
    */
  }, {
    key: "reset",
    value: function reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
  }, {
    key: "skipUntilInView",
    value: function skipUntilInView(from, to) {
      this.skipped.push({
        from: from,
        to: to
      });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
  }, {
    key: "isDone",
    value:
    /**
    @internal
    */
    function isDone(upto) {
      upto = Math.min(upto, this.state.doc.length);
      var frags = this.fragments;
      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
    }
    /**
    Get the context for the current parse, or `null` if no editor
    parse is in progress.
    */
  }], [{
    key: "create",
    value: function create(parser, state, viewport) {
      return new ParseContext(parser, state, [], _common.Tree.empty, 0, viewport, [], null);
    }
  }, {
    key: "getSkippingParser",
    value: function getSkippingParser(until) {
      return new ( /*#__PURE__*/function (_Parser) {
        _inherits(_class, _Parser);
        var _super2 = _createSuper(_class);
        function _class() {
          _classCallCheck(this, _class);
          return _super2.apply(this, arguments);
        }
        _createClass(_class, [{
          key: "createParse",
          value: function createParse(input, fragments, ranges) {
            var from = ranges[0].from,
              to = ranges[ranges.length - 1].to;
            var parser = {
              parsedPos: from,
              advance: function advance() {
                var cx = currentContext;
                if (cx) {
                  var _iterator4 = _createForOfIteratorHelper(ranges),
                    _step4;
                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                      var r = _step4.value;
                      cx.tempSkipped.push(r);
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                  if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                }
                this.parsedPos = to;
                return new _common.Tree(_common.NodeType.none, [], [], to - from);
              },
              stoppedAt: null,
              stopAt: function stopAt() {}
            };
            return parser;
          }
        }]);
        return _class;
      }(_common.Parser))();
    }
  }, {
    key: "get",
    value: function get() {
      return currentContext;
    }
  }]);
  return ParseContext;
}();
exports.ParseContext = ParseContext;
function cutFragments(fragments, from, to) {
  return _common.TreeFragment.applyChanges(fragments, [{
    fromA: from,
    toA: to,
    fromB: from,
    toB: to
  }]);
}
var LanguageState = /*#__PURE__*/function () {
  function LanguageState(
  // A mutable parse state that is used to preserve work done during
  // the lifetime of a state when moving to the next state.
  context) {
    _classCallCheck(this, LanguageState);
    this.context = context;
    this.tree = context.tree;
  }
  _createClass(LanguageState, [{
    key: "apply",
    value: function apply(tr) {
      if (!tr.docChanged && this.tree == this.context.tree) return this;
      var newCx = this.context.changes(tr.changes, tr.state);
      // If the previous parse wasn't done, go forward only up to its
      // end position or the end of the viewport, to avoid slowing down
      // state updates with parse work beyond the viewport.
      var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
      if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();
      return new LanguageState(newCx);
    }
  }], [{
    key: "init",
    value: function init(state) {
      var vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
      var parseState = ParseContext.create(state.facet(language).parser, state, {
        from: 0,
        to: vpTo
      });
      if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();
      return new LanguageState(parseState);
    }
  }]);
  return LanguageState;
}();
Language.state = /*@__PURE__*/_state2.StateField.define({
  create: LanguageState.init,
  update: function update(value, tr) {
    var _iterator5 = _createForOfIteratorHelper(tr.effects),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var e = _step5.value;
        if (e.is(Language.setState)) return e.value;
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
    return value.apply(tr);
  }
});
var requestIdle = function requestIdle(callback) {
  var timeout = setTimeout(function () {
    return callback();
  }, 500 /* Work.MaxPause */);
  return function () {
    return clearTimeout(timeout);
  };
};
if (typeof requestIdleCallback != "undefined") requestIdle = function requestIdle(callback) {
  var idle = -1,
    timeout = setTimeout(function () {
      idle = requestIdleCallback(callback, {
        timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */
      });
    }, 100 /* Work.MinPause */);
  return function () {
    return idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
};
var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? function () {
  return navigator.scheduling.isInputPending();
} : null;
var parseWorker = /*@__PURE__*/_view.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function ParseWorker(view) {
    _classCallCheck(this, ParseWorker);
    this.view = view;
    this.working = null;
    this.workScheduled = 0;
    // End of the current time chunk
    this.chunkEnd = -1;
    // Milliseconds of budget left for this chunk
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  _createClass(ParseWorker, [{
    key: "update",
    value: function update(_update) {
      var cx = this.view.state.field(Language.state).context;
      if (cx.updateViewport(_update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();
      if (_update.docChanged) {
        if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
  }, {
    key: "scheduleWork",
    value: function scheduleWork() {
      if (this.working) return;
      var state = this.view.state,
        field = state.field(Language.state);
      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);
    }
  }, {
    key: "work",
    value: function work(deadline) {
      this.working = null;
      var now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        // Start a new chunk
        this.chunkEnd = now + 30000 /* Work.ChunkTime */;
        this.chunkBudget = 3000 /* Work.ChunkBudget */;
      }

      if (this.chunkBudget <= 0) return; // No more budget
      var _this$view = this.view,
        state = _this$view.state,
        vpTo = _this$view.viewport.to,
        field = state.field(Language.state);
      if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;
      var endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
      var viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
      var done = field.context.work(function () {
        return isInputPending && isInputPending() || Date.now() > endTime;
      }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0) {
        field.context.takeTree();
        this.view.dispatch({
          effects: Language.setState.of(new LanguageState(field.context))
        });
      }
      if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
  }, {
    key: "checkAsyncSchedule",
    value: function checkAsyncSchedule(cx) {
      var _this5 = this;
      if (cx.scheduleOn) {
        this.workScheduled++;
        cx.scheduleOn.then(function () {
          return _this5.scheduleWork();
        })["catch"](function (err) {
          return (0, _view.logException)(_this5.view.state, err);
        }).then(function () {
          return _this5.workScheduled--;
        });
        cx.scheduleOn = null;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.working) this.working();
    }
  }, {
    key: "isWorking",
    value: function isWorking() {
      return !!(this.working || this.workScheduled > 0);
    }
  }]);
  return ParseWorker;
}(), {
  eventHandlers: {
    focus: function focus() {
      this.scheduleWork();
    }
  }
});
/**
The facet used to associate a language with an editor state. Used
by `Language` object's `extension` property (so you don't need to
manually wrap your languages in this). Can be used to access the
current language on a state.
*/
var language = /*@__PURE__*/_state2.Facet.define({
  combine: function combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: function enables(language) {
    return [Language.state, parseWorker, _view.EditorView.contentAttributes.compute([language], function (state) {
      var lang = state.facet(language);
      return lang && lang.name ? {
        "data-language": lang.name
      } : {};
    })];
  }
});
/**
This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
optional set of supporting extensions. Language packages are
encouraged to export a function that optionally takes a
configuration object and returns a `LanguageSupport` instance, as
the main way for client code to use the package.
*/
exports.language = language;
var LanguageSupport = /*#__PURE__*/_createClass(
/**
Create a language support object.
*/
function LanguageSupport(
/**
The language object.
*/
language) {
  var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  _classCallCheck(this, LanguageSupport);
  this.language = language;
  this.support = support;
  this.extension = [language, support];
});
/**
Language descriptions are used to store metadata about languages
and to dynamically load them. Their main role is finding the
appropriate language for a filename or dynamically loading nested
parsers.
*/
exports.LanguageSupport = LanguageSupport;
var LanguageDescription = /*#__PURE__*/function () {
  function LanguageDescription(
  /**
  The name of this language.
  */
  name,
  /**
  Alternative names for the mode (lowercased, includes `this.name`).
  */
  alias,
  /**
  File extensions associated with this language.
  */
  extensions,
  /**
  Optional filename pattern that should be associated with this
  language.
  */
  filename, loadFunc) {
    var support = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
    _classCallCheck(this, LanguageDescription);
    this.name = name;
    this.alias = alias;
    this.extensions = extensions;
    this.filename = filename;
    this.loadFunc = loadFunc;
    this.support = support;
    this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  _createClass(LanguageDescription, [{
    key: "load",
    value: function load() {
      var _this6 = this;
      return this.loading || (this.loading = this.loadFunc().then(function (support) {
        return _this6.support = support;
      }, function (err) {
        _this6.loading = null;
        throw err;
      }));
    }
    /**
    Create a language description.
    */
  }], [{
    key: "of",
    value: function of(spec) {
      var load = spec.load,
        support = spec.support;
      if (!load) {
        if (!support) throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
        load = function load() {
          return Promise.resolve(support);
        };
      }
      return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {
        return s.toLowerCase();
      }), spec.extensions || [], spec.filename, load, support);
    }
    /**
    Look for a language in the given array of descriptions that
    matches the filename. Will first match
    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
    and return the first language that matches.
    */
  }, {
    key: "matchFilename",
    value: function matchFilename(descs, filename) {
      var _iterator6 = _createForOfIteratorHelper(descs),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _d = _step6.value;
          if (_d.filename && _d.filename.test(filename)) return _d;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var ext = /\.([^.]+)$/.exec(filename);
      if (ext) {
        var _iterator7 = _createForOfIteratorHelper(descs),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var d = _step7.value;
            if (d.extensions.indexOf(ext[1]) > -1) return d;
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
      return null;
    }
    /**
    Look for a language whose name or alias matches the the given
    name (case-insensitively). If `fuzzy` is true, and no direct
    matchs is found, this'll also search for a language whose name
    or alias occurs in the string (for names shorter than three
    characters, only when surrounded by non-word characters).
    */
  }, {
    key: "matchLanguageName",
    value: function matchLanguageName(descs, name) {
      var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      name = name.toLowerCase();
      var _iterator8 = _createForOfIteratorHelper(descs),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _d2 = _step8.value;
          if (_d2.alias.some(function (a) {
            return a == name;
          })) return _d2;
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      if (fuzzy) {
        var _iterator9 = _createForOfIteratorHelper(descs),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var d = _step9.value;
            var _iterator10 = _createForOfIteratorHelper(d.alias),
              _step10;
            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var a = _step10.value;
                var found = name.indexOf(a);
                if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length]))) return d;
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
      return null;
    }
  }]);
  return LanguageDescription;
}();
/**
Facet that defines a way to provide a function that computes the
appropriate indentation depth, as a column number (see
[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
line. A return value of `null` indicates no indentation can be
determined, and the line should inherit the indentation of the one
above it. A return value of `undefined` defers to the next indent
service.
*/
exports.LanguageDescription = LanguageDescription;
var indentService = /*@__PURE__*/_state2.Facet.define();
/**
Facet for overriding the unit by which indentation happens. Should
be a string consisting either entirely of the same whitespace
character. When not set, this defaults to 2 spaces.
*/
exports.indentService = indentService;
var indentUnit = /*@__PURE__*/_state2.Facet.define({
  combine: function combine(values) {
    if (!values.length) return "  ";
    var unit = values[0];
    if (!unit || /\S/.test(unit) || Array.from(unit).some(function (e) {
      return e != unit[0];
    })) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
    return unit;
  }
});
/**
Return the _column width_ of an indent unit in the state.
Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
contains tabs.
*/
exports.indentUnit = indentUnit;
function getIndentUnit(state) {
  var unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
/**
Create an indentation string that covers columns 0 to `cols`.
Will use tabs for as much of the columns as possible when the
[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
tabs.
*/
function indentString(state, cols) {
  var result = "",
    ts = state.tabSize,
    ch = state.facet(indentUnit)[0];
  if (ch == "\t") {
    while (cols >= ts) {
      result += "\t";
      cols -= ts;
    }
    ch = " ";
  }
  for (var i = 0; i < cols; i++) result += ch;
  return result;
}
/**
Get the indentation, as a column number, at the given position.
Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
that are registered, and if none of those return an indentation,
this will check the syntax tree for the [indent node
prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
number when an indentation could be determined, and null
otherwise.
*/
function getIndentation(context, pos) {
  if (context instanceof _state2.EditorState) context = new IndentContext(context);
  var _iterator11 = _createForOfIteratorHelper(context.state.facet(indentService)),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var service = _step11.value;
      var result = service(context, pos);
      if (result !== undefined) return result;
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  var tree = syntaxTree(context.state);
  return tree ? syntaxIndentation(context, tree, pos) : null;
}
/**
Create a change set that auto-indents all lines touched by the
given document range.
*/
function indentRange(state, from, to) {
  var updated = Object.create(null);
  var context = new IndentContext(state, {
    overrideIndentation: function overrideIndentation(start) {
      var _a;
      return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1;
    }
  });
  var changes = [];
  for (var pos = from; pos <= to;) {
    var line = state.doc.lineAt(pos);
    pos = line.to + 1;
    var indent = getIndentation(context, line.from);
    if (indent == null) continue;
    if (!/\S/.test(line.text)) indent = 0;
    var cur = /^\s*/.exec(line.text)[0];
    var norm = indentString(state, indent);
    if (cur != norm) {
      updated[line.from] = indent;
      changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }
  }
  return state.changes(changes);
}
/**
Indentation contexts are used when calling [indentation
services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
useful in indentation logic, and can selectively override the
indentation reported for some lines.
*/
var IndentContext = /*#__PURE__*/function () {
  /**
  Create an indent context.
  */
  function IndentContext(
  /**
  The editor state.
  */
  state) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, IndentContext);
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  _createClass(IndentContext, [{
    key: "lineAt",
    value: function lineAt(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var line = this.state.doc.lineAt(pos);
      var _this$options = this.options,
        simulateBreak = _this$options.simulateBreak,
        simulateDoubleBreak = _this$options.simulateDoubleBreak;
      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
        if (simulateDoubleBreak && simulateBreak == pos) return {
          text: "",
          from: pos
        };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
          text: line.text.slice(simulateBreak - line.from),
          from: simulateBreak
        };else return {
          text: line.text.slice(0, simulateBreak - line.from),
          from: line.from
        };
      }
      return line;
    }
    /**
    Get the text directly after `pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
  }, {
    key: "textAfterPos",
    value: function textAfterPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";
      var _this$lineAt = this.lineAt(pos, bias),
        text = _this$lineAt.text,
        from = _this$lineAt.from;
      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
    }
    /**
    Find the column for the given position.
    */
  }, {
    key: "column",
    value: function column(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var _this$lineAt2 = this.lineAt(pos, bias),
        text = _this$lineAt2.text,
        from = _this$lineAt2.from;
      var result = this.countColumn(text, pos - from);
      var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
      if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
      return result;
    }
    /**
    Find the column position (taking tabs into account) of the given
    position in the given string.
    */
  }, {
    key: "countColumn",
    value: function countColumn(line) {
      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;
      return (0, _state2.countColumn)(line, this.state.tabSize, pos);
    }
    /**
    Find the indentation column of the line at the given point.
    */
  }, {
    key: "lineIndent",
    value: function lineIndent(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var _this$lineAt3 = this.lineAt(pos, bias),
        text = _this$lineAt3.text,
        from = _this$lineAt3.from;
      var override = this.options.overrideIndentation;
      if (override) {
        var overriden = override(from);
        if (overriden > -1) return overriden;
      }
      return this.countColumn(text, text.search(/\S|$/));
    }
    /**
    Returns the [simulated line
    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    for this context, if any.
    */
  }, {
    key: "simulatedBreak",
    get: function get() {
      return this.options.simulateBreak || null;
    }
  }]);
  return IndentContext;
}();
/**
A syntax tree node prop used to associate indentation strategies
with node types. Such a strategy is a function from an indentation
context to a column number (see also
[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
indicates that no definitive indentation can be determined.
*/
exports.IndentContext = IndentContext;
var indentNodeProp = /*@__PURE__*/new _common.NodeProp();
// Compute the indentation for a given position from the syntax tree.
exports.indentNodeProp = indentNodeProp;
function syntaxIndentation(cx, ast, pos) {
  return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
}
function ignoreClosed(cx) {
  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  var strategy = tree.type.prop(indentNodeProp);
  if (strategy) return strategy;
  var first = tree.firstChild,
    close;
  if (first && (close = first.type.prop(_common.NodeProp.closedBy))) {
    var last = tree.lastChild,
      closed = last && close.indexOf(last.name) > -1;
    return function (cx) {
      return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
    };
  }
  return tree.parent == null ? topIndent : null;
}
function indentFrom(node, pos, base) {
  for (; node; node = node.parent) {
    var strategy = indentStrategy(node);
    if (strategy) return strategy(TreeIndentContext.create(base, pos, node));
  }
  return null;
}
function topIndent() {
  return 0;
}
/**
Objects of this type provide context information and helper
methods to indentation functions registered on syntax nodes.
*/
var TreeIndentContext = /*#__PURE__*/function (_IndentContext) {
  _inherits(TreeIndentContext, _IndentContext);
  var _super3 = _createSuper(TreeIndentContext);
  function TreeIndentContext(base,
  /**
  The position at which indentation is being computed.
  */
  pos,
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  node) {
    var _this7;
    _classCallCheck(this, TreeIndentContext);
    _this7 = _super3.call(this, base.state, base.options);
    _this7.base = base;
    _this7.pos = pos;
    _this7.node = node;
    return _this7;
  }
  /**
  @internal
  */
  _createClass(TreeIndentContext, [{
    key: "textAfter",
    get:
    /**
    Get the text directly after `this.pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    function get() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
  }, {
    key: "baseIndent",
    get: function get() {
      var line = this.state.doc.lineAt(this.node.from);
      // Skip line starts that are covered by a sibling (or cousin, etc)
      for (;;) {
        var atBreak = this.node.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;
        if (isParent(atBreak, this.node)) break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line.from);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
  }, {
    key: "continue",
    value: function _continue() {
      var parent = this.node.parent;
      return parent ? indentFrom(parent, this.pos, this.base) : 0;
    }
  }], [{
    key: "create",
    value: function create(base, pos, node) {
      return new TreeIndentContext(base, pos, node);
    }
  }]);
  return TreeIndentContext;
}(IndentContext);
exports.TreeIndentContext = TreeIndentContext;
function isParent(parent, of) {
  for (var cur = of; cur; cur = cur.parent) if (parent == cur) return true;
  return false;
}
// Check whether a delimited node is aligned (meaning there are
// non-skipped nodes on the same line as the opening delimiter). And
// if so, return the opening token.
function bracketedAligned(context) {
  var tree = context.node;
  var openToken = tree.childAfter(tree.from),
    last = tree.lastChild;
  if (!openToken) return null;
  var sim = context.options.simulateBreak;
  var openLine = context.state.doc.lineAt(openToken.from);
  var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (var pos = openToken.to;;) {
    var next = tree.childAfter(pos);
    if (!next || next == last) return null;
    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;
    pos = next.to;
  }
}
/**
An indentation strategy for delimited (usually bracketed) nodes.
Will, by default, indent one unit more than the parent's base
indent unless the line starts with a closing token. When `align`
is true and there are non-skipped nodes on the node's opening
line, the content of the node will be aligned with the end of the
opening node, like this:

    foo(bar,
        baz)
*/
function delimitedIndent(_ref) {
  var closing = _ref.closing,
    _ref$align = _ref.align,
    align = _ref$align === void 0 ? true : _ref$align,
    _ref$units = _ref.units,
    units = _ref$units === void 0 ? 1 : _ref$units;
  return function (context) {
    return delimitedStrategy(context, align, units, closing);
  };
}
function delimitedStrategy(context, align, units, closing, closedAt) {
  var after = context.textAfter,
    space = after.match(/^\s*/)[0].length;
  var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
  var aligned = align ? bracketedAligned(context) : null;
  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
/**
An indentation strategy that aligns a node's content to its base
indentation.
*/
var flatIndent = function flatIndent(context) {
  return context.baseIndent;
};
/**
Creates an indentation strategy that, by default, indents
continued lines one unit more than the node's base indentation.
You can provide `except` to prevent indentation of lines that
match a pattern (for example `/^else\b/` in `if`/`else`
constructs), and you can change the amount of units used with the
`units` option.
*/
exports.flatIndent = flatIndent;
function continuedIndent() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    except = _ref2.except,
    _ref2$units = _ref2.units,
    units = _ref2$units === void 0 ? 1 : _ref2$units;
  return function (context) {
    var matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
var DontIndentBeyond = 200;
/**
Enables reindentation on input. When a language defines an
`indentOnInput` field in its [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
expression, the line at the cursor will be reindented whenever new
text is typed and the input from the start of the line up to the
cursor matches that regexp.

To avoid unneccesary reindents, it is recommended to start the
regexp with `^` (usually followed by `\s*`), and end it with `$`.
For example, `/^\s*\}$/` will reindent when a closing brace is
added at the start of a line.
*/
function indentOnInput() {
  return _state2.EditorState.transactionFilter.of(function (tr) {
    if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete")) return tr;
    var rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
    if (!rules.length) return tr;
    var doc = tr.newDoc,
      head = tr.newSelection.main.head,
      line = doc.lineAt(head);
    if (head > line.from + DontIndentBeyond) return tr;
    var lineStart = doc.sliceString(line.from, head);
    if (!rules.some(function (r) {
      return r.test(lineStart);
    })) return tr;
    var state = tr.state,
      last = -1,
      changes = [];
    var _iterator12 = _createForOfIteratorHelper(state.selection.ranges),
      _step12;
    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var _head = _step12.value.head;
        var _line = state.doc.lineAt(_head);
        if (_line.from == last) continue;
        last = _line.from;
        var indent = getIndentation(state, _line.from);
        if (indent == null) continue;
        var cur = /^\s*/.exec(_line.text)[0];
        var norm = indentString(state, indent);
        if (cur != norm) changes.push({
          from: _line.from,
          to: _line.from + cur.length,
          insert: norm
        });
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
    return changes.length ? [tr, {
      changes: changes,
      sequential: true
    }] : tr;
  });
}

/**
A facet that registers a code folding service. When called with
the extent of a line, such a function should return a foldable
range that starts on that line (but continues beyond it), if one
can be found.
*/
var foldService = /*@__PURE__*/_state2.Facet.define();
/**
This node prop is used to associate folding information with
syntax node types. Given a syntax node, it should check whether
that tree is foldable and return the range that can be collapsed
when it is.
*/
exports.foldService = foldService;
var foldNodeProp = /*@__PURE__*/new _common.NodeProp();
/**
[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
the first and the last child of a syntax node. Useful for nodes
that start and end with delimiters.
*/
exports.foldNodeProp = foldNodeProp;
function foldInside(node) {
  var first = node.firstChild,
    last = node.lastChild;
  return first && first.to < last.from ? {
    from: first.to,
    to: last.type.isError ? node.to : last.from
  } : null;
}
function syntaxFolding(state, start, end) {
  var tree = syntaxTree(state);
  if (tree.length < end) return null;
  var inner = tree.resolveInner(end, 1);
  var found = null;
  for (var cur = inner; cur; cur = cur.parent) {
    if (cur.to <= end || cur.from > end) continue;
    if (found && cur.from < start) break;
    var prop = cur.type.prop(foldNodeProp);
    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
      var value = prop(cur, state);
      if (value && value.from <= end && value.from >= start && value.to > end) found = value;
    }
  }
  return found;
}
function isUnfinished(node) {
  var ch = node.lastChild;
  return ch && ch.to == node.to && ch.type.isError;
}
/**
Check whether the given line is foldable. First asks any fold
services registered through
[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
a result, tries to query the [fold node
prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
of the line.
*/
function foldable(state, lineStart, lineEnd) {
  var _iterator13 = _createForOfIteratorHelper(state.facet(foldService)),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var service = _step13.value;
      var result = service(state, lineStart, lineEnd);
      if (result) return result;
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return syntaxFolding(state, lineStart, lineEnd);
}
function mapRange(range, mapping) {
  var from = mapping.mapPos(range.from, 1),
    to = mapping.mapPos(range.to, -1);
  return from >= to ? undefined : {
    from: from,
    to: to
  };
}
/**
State effect that can be attached to a transaction to fold the
given range. (You probably only need this in exceptional
circumstances—usually you'll just want to let
[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
*/
var foldEffect = /*@__PURE__*/_state2.StateEffect.define({
  map: mapRange
});
/**
State effect that unfolds the given range (if it was folded).
*/
exports.foldEffect = foldEffect;
var unfoldEffect = /*@__PURE__*/_state2.StateEffect.define({
  map: mapRange
});
exports.unfoldEffect = unfoldEffect;
function selectedLines(view) {
  var lines = [];
  var _iterator14 = _createForOfIteratorHelper(view.state.selection.ranges),
    _step14;
  try {
    var _loop = function _loop() {
      var head = _step14.value.head;
      if (lines.some(function (l) {
        return l.from <= head && l.to >= head;
      })) return "continue";
      lines.push(view.lineBlockAt(head));
    };
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var _ret = _loop();
      if (_ret === "continue") continue;
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }
  return lines;
}
/**
The state field that stores the folded ranges (as a [decoration
set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
state.
*/
var foldState = /*@__PURE__*/_state2.StateField.define({
  create: function create() {
    return _view.Decoration.none;
  },
  update: function update(folded, tr) {
    folded = folded.map(tr.changes);
    var _iterator15 = _createForOfIteratorHelper(tr.effects),
      _step15;
    try {
      var _loop2 = function _loop2() {
        var e = _step15.value;
        if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) folded = folded.update({
          add: [foldWidget.range(e.value.from, e.value.to)]
        });else if (e.is(unfoldEffect)) folded = folded.update({
          filter: function filter(from, to) {
            return e.value.from != from || e.value.to != to;
          },
          filterFrom: e.value.from,
          filterTo: e.value.to
        });
      };
      for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
        _loop2();
      }
      // Clear folded ranges that cover the selection head
    } catch (err) {
      _iterator15.e(err);
    } finally {
      _iterator15.f();
    }
    if (tr.selection) {
      var onSelection = false,
        head = tr.selection.main.head;
      folded.between(head, head, function (a, b) {
        if (a < head && b > head) onSelection = true;
      });
      if (onSelection) folded = folded.update({
        filterFrom: head,
        filterTo: head,
        filter: function filter(a, b) {
          return b <= head || a >= head;
        }
      });
    }
    return folded;
  },
  provide: function provide(f) {
    return _view.EditorView.decorations.from(f);
  },
  toJSON: function toJSON(folded, state) {
    var ranges = [];
    folded.between(0, state.doc.length, function (from, to) {
      ranges.push(from, to);
    });
    return ranges;
  },
  fromJSON: function fromJSON(value) {
    if (!Array.isArray(value) || value.length % 2) throw new RangeError("Invalid JSON for fold state");
    var ranges = [];
    for (var i = 0; i < value.length;) {
      var from = value[i++],
        to = value[i++];
      if (typeof from != "number" || typeof to != "number") throw new RangeError("Invalid JSON for fold state");
      ranges.push(foldWidget.range(from, to));
    }
    return _view.Decoration.set(ranges, true);
  }
});
/**
Get a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges
in the given state.
*/
exports.foldState = foldState;
function foldedRanges(state) {
  return state.field(foldState, false) || _state2.RangeSet.empty;
}
function findFold(state, from, to) {
  var _a;
  var found = null;
  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {
    if (!found || found.from > from) found = {
      from: from,
      to: to
    };
  });
  return found;
}
function foldExists(folded, from, to) {
  var found = false;
  folded.between(from, from, function (a, b) {
    if (a == from && b == to) found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(_state2.StateEffect.appendConfig.of(codeFolding()));
}
/**
Fold the lines that are selected, if possible.
*/
var foldCode = function foldCode(view) {
  var _iterator16 = _createForOfIteratorHelper(selectedLines(view)),
    _step16;
  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var line = _step16.value;
      var range = foldable(view.state, line.from, line.to);
      if (range) {
        view.dispatch({
          effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
        });
        return true;
      }
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
  return false;
};
/**
Unfold folded ranges on selected lines.
*/
exports.foldCode = foldCode;
var unfoldCode = function unfoldCode(view) {
  if (!view.state.field(foldState, false)) return false;
  var effects = [];
  var _iterator17 = _createForOfIteratorHelper(selectedLines(view)),
    _step17;
  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var line = _step17.value;
      var folded = findFold(view.state, line.from, line.to);
      if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }
  if (effects.length) view.dispatch({
    effects: effects
  });
  return effects.length > 0;
};
exports.unfoldCode = unfoldCode;
function announceFold(view, range) {
  var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var lineFrom = view.state.doc.lineAt(range.from).number,
    lineTo = view.state.doc.lineAt(range.to).number;
  return _view.EditorView.announce.of("".concat(view.state.phrase(fold ? "Folded lines" : "Unfolded lines"), " ").concat(lineFrom, " ").concat(view.state.phrase("to"), " ").concat(lineTo, "."));
}
/**
Fold all top-level foldable ranges. Note that, in most cases,
folding information will depend on the [syntax
tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
reliably when the document hasn't been fully parsed (either
because the editor state was only just initialized, or because the
document is so big that the parser decided not to parse it
entirely).
*/
var foldAll = function foldAll(view) {
  var state = view.state,
    effects = [];
  for (var pos = 0; pos < state.doc.length;) {
    var line = view.lineBlockAt(pos),
      range = foldable(state, line.from, line.to);
    if (range) effects.push(foldEffect.of(range));
    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
  }
  if (effects.length) view.dispatch({
    effects: maybeEnable(view.state, effects)
  });
  return !!effects.length;
};
/**
Unfold all folded code.
*/
exports.foldAll = foldAll;
var unfoldAll = function unfoldAll(view) {
  var field = view.state.field(foldState, false);
  if (!field || !field.size) return false;
  var effects = [];
  field.between(0, view.state.doc.length, function (from, to) {
    effects.push(unfoldEffect.of({
      from: from,
      to: to
    }));
  });
  view.dispatch({
    effects: effects
  });
  return true;
};
// Find the foldable region containing the given line, if one exists
exports.unfoldAll = unfoldAll;
function foldableContainer(view, lineBlock) {
  // Look backwards through line blocks until we find a foldable region that
  // intersects with the line
  for (var line = lineBlock;;) {
    var foldableRegion = foldable(view.state, line.from, line.to);
    if (foldableRegion && foldableRegion.to > lineBlock.from) return foldableRegion;
    if (!line.from) return null;
    line = view.lineBlockAt(line.from - 1);
  }
}
/**
Toggle folding at cursors. Unfolds if there is an existing fold
starting in that line, tries to find a foldable range around it
otherwise.
*/
var toggleFold = function toggleFold(view) {
  var effects = [];
  var _iterator18 = _createForOfIteratorHelper(selectedLines(view)),
    _step18;
  try {
    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
      var line = _step18.value;
      var folded = findFold(view.state, line.from, line.to);
      if (folded) {
        effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      } else {
        var foldRange = foldableContainer(view, line);
        if (foldRange) effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));
      }
    }
  } catch (err) {
    _iterator18.e(err);
  } finally {
    _iterator18.f();
  }
  if (effects.length > 0) view.dispatch({
    effects: maybeEnable(view.state, effects)
  });
  return !!effects.length;
};
/**
Default fold-related key bindings.

 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
*/
exports.toggleFold = toggleFold;
var foldKeymap = [{
  key: "Ctrl-Shift-[",
  mac: "Cmd-Alt-[",
  run: foldCode
}, {
  key: "Ctrl-Shift-]",
  mac: "Cmd-Alt-]",
  run: unfoldCode
}, {
  key: "Ctrl-Alt-[",
  run: foldAll
}, {
  key: "Ctrl-Alt-]",
  run: unfoldAll
}];
exports.foldKeymap = foldKeymap;
var defaultConfig = {
  placeholderDOM: null,
  placeholderText: "…"
};
var foldConfig = /*@__PURE__*/_state2.Facet.define({
  combine: function combine(values) {
    return (0, _state2.combineConfig)(values, defaultConfig);
  }
});
/**
Create an extension that configures code folding.
*/
function codeFolding(config) {
  var result = [foldState, baseTheme$1];
  if (config) result.push(foldConfig.of(config));
  return result;
}
var foldWidget = /*@__PURE__*/_view.Decoration.replace({
  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {
    _inherits(_class2, _WidgetType);
    var _super4 = _createSuper(_class2);
    function _class2() {
      _classCallCheck(this, _class2);
      return _super4.apply(this, arguments);
    }
    _createClass(_class2, [{
      key: "toDOM",
      value: function toDOM(view) {
        var state = view.state,
          conf = state.facet(foldConfig);
        var onclick = function onclick(event) {
          var line = view.lineBlockAt(view.posAtDOM(event.target));
          var folded = findFold(view.state, line.from, line.to);
          if (folded) view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          event.preventDefault();
        };
        if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick);
        var element = document.createElement("span");
        element.textContent = conf.placeholderText;
        element.setAttribute("aria-label", state.phrase("folded code"));
        element.title = state.phrase("unfold");
        element.className = "cm-foldPlaceholder";
        element.onclick = onclick;
        return element;
      }
    }]);
    return _class2;
  }(_view.WidgetType))()
});
var foldGutterDefaults = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: function foldingChanged() {
    return false;
  }
};
var FoldMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(FoldMarker, _GutterMarker);
  var _super5 = _createSuper(FoldMarker);
  function FoldMarker(config, open) {
    var _this8;
    _classCallCheck(this, FoldMarker);
    _this8 = _super5.call(this);
    _this8.config = config;
    _this8.open = open;
    return _this8;
  }
  _createClass(FoldMarker, [{
    key: "eq",
    value: function eq(other) {
      return this.config == other.config && this.open == other.open;
    }
  }, {
    key: "toDOM",
    value: function toDOM(view) {
      if (this.config.markerDOM) return this.config.markerDOM(this.open);
      var span = document.createElement("span");
      span.textContent = this.open ? this.config.openText : this.config.closedText;
      span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
      return span;
    }
  }]);
  return FoldMarker;
}(_view.GutterMarker);
/**
Create an extension that registers a fold gutter, which shows a
fold status indicator before foldable lines (which can be clicked
to fold or unfold the line).
*/
function foldGutter() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
  var canFold = new FoldMarker(fullConfig, true),
    canUnfold = new FoldMarker(fullConfig, false);
  var _markers = _view.ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class3(view) {
      _classCallCheck(this, _class3);
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }
    _createClass(_class3, [{
      key: "update",
      value: function update(_update2) {
        if (_update2.docChanged || _update2.viewportChanged || _update2.startState.facet(language) != _update2.state.facet(language) || _update2.startState.field(foldState, false) != _update2.state.field(foldState, false) || syntaxTree(_update2.startState) != syntaxTree(_update2.state) || fullConfig.foldingChanged(_update2)) this.markers = this.buildMarkers(_update2.view);
      }
    }, {
      key: "buildMarkers",
      value: function buildMarkers(view) {
        var builder = new _state2.RangeSetBuilder();
        var _iterator19 = _createForOfIteratorHelper(view.viewportLineBlocks),
          _step19;
        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var line = _step19.value;
            var mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
            if (mark) builder.add(line.from, line.from, mark);
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
        return builder.finish();
      }
    }]);
    return _class3;
  }());
  var domEventHandlers = fullConfig.domEventHandlers;
  return [_markers, (0, _view.gutter)({
    "class": "cm-foldGutter",
    markers: function markers(view) {
      var _a;
      return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || _state2.RangeSet.empty;
    },
    initialSpacer: function initialSpacer() {
      return new FoldMarker(fullConfig, false);
    },
    domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {
      click: function click(view, line, event) {
        if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;
        var folded = findFold(view.state, line.from, line.to);
        if (folded) {
          view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          return true;
        }
        var range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({
            effects: foldEffect.of(range)
          });
          return true;
        }
        return false;
      }
    })
  }), codeFolding()];
}
var baseTheme$1 = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});

/**
A highlight style associates CSS styles with higlighting
[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
*/
var HighlightStyle = /*#__PURE__*/function () {
  function HighlightStyle(
  /**
  The tag styles used to create this highlight style.
  */
  specs, options) {
    _classCallCheck(this, HighlightStyle);
    this.specs = specs;
    var modSpec;
    function def(spec) {
      var cls = _styleMod.StyleModule.newName();
      (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
      return cls;
    }
    var all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
    var scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? function (type) {
      return type.prop(languageDataProp) == scopeOpt.data;
    } : scopeOpt ? function (type) {
      return type == scopeOpt;
    } : undefined;
    this.style = (0, _highlight.tagHighlighter)(specs.map(function (style) {
      return {
        tag: style.tag,
        "class": style["class"] || def(Object.assign({}, style, {
          tag: null
        }))
      };
    }), {
      all: all
    }).style;
    this.module = modSpec ? new _styleMod.StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  _createClass(HighlightStyle, null, [{
    key: "define",
    value: function define(specs, options) {
      return new HighlightStyle(specs, options || {});
    }
  }]);
  return HighlightStyle;
}();
exports.HighlightStyle = HighlightStyle;
var highlighterFacet = /*@__PURE__*/_state2.Facet.define();
var fallbackHighlighter = /*@__PURE__*/_state2.Facet.define({
  combine: function combine(values) {
    return values.length ? [values[0]] : null;
  }
});
function getHighlighters(state) {
  var main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
/**
Wrap a highlighter in an editor extension that uses it to apply
syntax highlighting to the editor content.

When multiple (non-fallback) styles are provided, the styling
applied is the union of the classes they emit.
*/
function syntaxHighlighting(highlighter, options) {
  var ext = [treeHighlighter],
    themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module) ext.push(_view.EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([_view.EditorView.darkTheme], function (state) {
    return state.facet(_view.EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
  }));else ext.push(highlighterFacet.of(highlighter));
  return ext;
}
/**
Returns the CSS classes (if any) that the highlighters active in
the state would assign to the given style
[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and
(optional) language
[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).
*/
function highlightingFor(state, tags, scope) {
  var highlighters = getHighlighters(state);
  var result = null;
  if (highlighters) {
    var _iterator20 = _createForOfIteratorHelper(highlighters),
      _step20;
    try {
      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
        var highlighter = _step20.value;
        if (!highlighter.scope || scope && highlighter.scope(scope)) {
          var cls = highlighter.style(tags);
          if (cls) result = result ? result + " " + cls : cls;
        }
      }
    } catch (err) {
      _iterator20.e(err);
    } finally {
      _iterator20.f();
    }
  }
  return result;
}
var TreeHighlighter = /*#__PURE__*/function () {
  function TreeHighlighter(view) {
    _classCallCheck(this, TreeHighlighter);
    this.markCache = Object.create(null);
    this.tree = syntaxTree(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
  }
  _createClass(TreeHighlighter, [{
    key: "update",
    value: function update(_update3) {
      var tree = syntaxTree(_update3.state),
        highlighters = getHighlighters(_update3.state);
      var styleChange = highlighters != getHighlighters(_update3.startState);
      if (tree.length < _update3.view.viewport.to && !styleChange && tree.type == this.tree.type) {
        this.decorations = this.decorations.map(_update3.changes);
      } else if (tree != this.tree || _update3.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(_update3.view, highlighters);
      }
    }
  }, {
    key: "buildDeco",
    value: function buildDeco(view, highlighters) {
      var _this9 = this;
      if (!highlighters || !this.tree.length) return _view.Decoration.none;
      var builder = new _state2.RangeSetBuilder();
      var _iterator21 = _createForOfIteratorHelper(view.visibleRanges),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var _step21$value = _step21.value,
            from = _step21$value.from,
            to = _step21$value.to;
          (0, _highlight.highlightTree)(this.tree, highlighters, function (from, to, style) {
            builder.add(from, to, _this9.markCache[style] || (_this9.markCache[style] = _view.Decoration.mark({
              "class": style
            })));
          }, from, to);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      return builder.finish();
    }
  }]);
  return TreeHighlighter;
}();
var treeHighlighter = /*@__PURE__*/_state2.Prec.high( /*@__PURE__*/_view.ViewPlugin.fromClass(TreeHighlighter, {
  decorations: function decorations(v) {
    return v.decorations;
  }
}));
/**
A default highlight style (works well with light themes).
*/
var defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
  tag: _highlight.tags.meta,
  color: "#404740"
}, {
  tag: _highlight.tags.link,
  textDecoration: "underline"
}, {
  tag: _highlight.tags.heading,
  textDecoration: "underline",
  fontWeight: "bold"
}, {
  tag: _highlight.tags.emphasis,
  fontStyle: "italic"
}, {
  tag: _highlight.tags.strong,
  fontWeight: "bold"
}, {
  tag: _highlight.tags.strikethrough,
  textDecoration: "line-through"
}, {
  tag: _highlight.tags.keyword,
  color: "#708"
}, {
  tag: [_highlight.tags.atom, _highlight.tags.bool, _highlight.tags.url, _highlight.tags.contentSeparator, _highlight.tags.labelName],
  color: "#219"
}, {
  tag: [_highlight.tags.literal, _highlight.tags.inserted],
  color: "#164"
}, {
  tag: [_highlight.tags.string, _highlight.tags.deleted],
  color: "#a11"
}, {
  tag: [_highlight.tags.regexp, _highlight.tags.escape, /*@__PURE__*/_highlight.tags.special(_highlight.tags.string)],
  color: "#e40"
}, {
  tag: /*@__PURE__*/_highlight.tags.definition(_highlight.tags.variableName),
  color: "#00f"
}, {
  tag: /*@__PURE__*/_highlight.tags.local(_highlight.tags.variableName),
  color: "#30a"
}, {
  tag: [_highlight.tags.typeName, _highlight.tags.namespace],
  color: "#085"
}, {
  tag: _highlight.tags.className,
  color: "#167"
}, {
  tag: [/*@__PURE__*/_highlight.tags.special(_highlight.tags.variableName), _highlight.tags.macroName],
  color: "#256"
}, {
  tag: /*@__PURE__*/_highlight.tags.definition(_highlight.tags.propertyName),
  color: "#00c"
}, {
  tag: _highlight.tags.comment,
  color: "#940"
}, {
  tag: _highlight.tags.invalid,
  color: "#f00"
}]);
exports.defaultHighlightStyle = defaultHighlightStyle;
var baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": {
    backgroundColor: "#328c8252"
  },
  "&.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bb555544"
  }
});
var DefaultScanDist = 10000,
  DefaultBrackets = "()[]{}";
var bracketMatchingConfig = /*@__PURE__*/_state2.Facet.define({
  combine: function combine(configs) {
    return (0, _state2.combineConfig)(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }
});
var matchingMark = /*@__PURE__*/_view.Decoration.mark({
    "class": "cm-matchingBracket"
  }),
  nonmatchingMark = /*@__PURE__*/_view.Decoration.mark({
    "class": "cm-nonmatchingBracket"
  });
function defaultRenderMatch(match) {
  var decorations = [];
  var mark = match.matched ? matchingMark : nonmatchingMark;
  decorations.push(mark.range(match.start.from, match.start.to));
  if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
  return decorations;
}
var bracketMatchingState = /*@__PURE__*/_state2.StateField.define({
  create: function create() {
    return _view.Decoration.none;
  },
  update: function update(deco, tr) {
    if (!tr.docChanged && !tr.selection) return deco;
    var decorations = [];
    var config = tr.state.facet(bracketMatchingConfig);
    var _iterator22 = _createForOfIteratorHelper(tr.state.selection.ranges),
      _step22;
    try {
      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
        var range = _step22.value;
        if (!range.empty) continue;
        var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
        if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));
      }
    } catch (err) {
      _iterator22.e(err);
    } finally {
      _iterator22.f();
    }
    return _view.Decoration.set(decorations, true);
  },
  provide: function provide(f) {
    return _view.EditorView.decorations.from(f);
  }
});
var bracketMatchingUnique = [bracketMatchingState, baseTheme];
/**
Create an extension that enables bracket matching. Whenever the
cursor is next to a bracket, that bracket and the one it matches
are highlighted. Or, when no matching bracket is found, another
highlighting style is used to indicate this.
*/
function bracketMatching() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [bracketMatchingConfig.of(config), bracketMatchingUnique];
}
/**
When larger syntax nodes, such as HTML tags, are marked as
opening/closing, it can be a bit messy to treat the whole node as
a matchable bracket. This node prop allows you to define, for such
a node, a ‘handle’—the part of the node that is highlighted, and
that the cursor must be on to activate highlighting in the first
place.
*/
var bracketMatchingHandle = /*@__PURE__*/new _common.NodeProp();
exports.bracketMatchingHandle = bracketMatchingHandle;
function matchingNodes(node, dir, brackets) {
  var byProp = node.prop(dir < 0 ? _common.NodeProp.openedBy : _common.NodeProp.closedBy);
  if (byProp) return byProp;
  if (node.name.length == 1) {
    var index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
  }
  return null;
}
function findHandle(node) {
  var hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
/**
Find the matching bracket for the token at `pos`, scanning
direction `dir`. Only the `brackets` and `maxScanDistance`
properties are used from `config`, if given. Returns null if no
bracket was found at `pos`, or a match result otherwise.
*/
function matchBrackets(state, pos, dir) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var maxScanDistance = config.maxScanDistance || DefaultScanDist,
    brackets = config.brackets || DefaultBrackets;
  var tree = syntaxTree(state),
    node = tree.resolveInner(pos, dir);
  for (var cur = node; cur; cur = cur.parent) {
    var matches = matchingNodes(cur.type, dir, brackets);
    if (matches && cur.from < cur.to) {
      var handle = findHandle(cur);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
  var parent = token.parent,
    firstToken = {
      from: handle.from,
      to: handle.to
    };
  var depth = 0,
    cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
      if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
        var endHandle = findHandle(cursor);
        return {
          start: firstToken,
          end: endHandle ? {
            from: endHandle.from,
            to: endHandle.to
          } : undefined,
          matched: true
        };
      } else if (matchingNodes(cursor.type, dir, brackets)) {
        depth++;
      } else if (matchingNodes(cursor.type, -dir, brackets)) {
        if (depth == 0) {
          var _endHandle = findHandle(cursor);
          return {
            start: firstToken,
            end: _endHandle && _endHandle.from < _endHandle.to ? {
              from: _endHandle.from,
              to: _endHandle.to
            } : undefined,
            matched: false
          };
        }
        depth--;
      }
    }
  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return {
    start: firstToken,
    matched: false
  };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  var bracket = brackets.indexOf(startCh);
  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
  var startToken = {
    from: dir < 0 ? pos - 1 : pos,
    to: dir > 0 ? pos + 1 : pos
  };
  var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
    depth = 0;
  for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {
    var text = iter.value;
    if (dir < 0) distance += text.length;
    var basePos = pos + distance * dir;
    for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {
      var found = brackets.indexOf(text[_pos2]);
      if (found < 0 || tree.resolveInner(basePos + _pos2, 1).type != tokenType) continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        // Closing
        return {
          start: startToken,
          end: {
            from: basePos + _pos2,
            to: basePos + _pos2 + 1
          },
          matched: found >> 1 == bracket >> 1
        };
      } else {
        depth--;
      }
    }
    if (dir > 0) distance += text.length;
  }
  return iter.done ? {
    start: startToken,
    matched: false
  } : null;
}

// Counts the column offset in a string, taking tabs into account.
// Used mostly to find indentation.
function countCol(string, end, tabSize) {
  var startIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var startValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  if (end == null) {
    end = string.search(/[^\s\u00a0]/);
    if (end == -1) end = string.length;
  }
  var n = startValue;
  for (var i = startIndex; i < end; i++) {
    if (string.charCodeAt(i) == 9) n += tabSize - n % tabSize;else n++;
  }
  return n;
}
/**
Encapsulates a single line of input. Given to stream syntax code,
which uses it to tokenize the content.
*/
var StringStream = /*#__PURE__*/function () {
  /**
  Create a stream.
  */
  function StringStream(
  /**
  The line.
  */
  string, tabSize,
  /**
  The current indent unit size.
  */
  indentUnit, overrideIndent) {
    _classCallCheck(this, StringStream);
    this.string = string;
    this.tabSize = tabSize;
    this.indentUnit = indentUnit;
    this.overrideIndent = overrideIndent;
    /**
    The current position on the line.
    */
    this.pos = 0;
    /**
    The start position of the current token.
    */
    this.start = 0;
    this.lastColumnPos = 0;
    this.lastColumnValue = 0;
  }
  /**
  True if we are at the end of the line.
  */
  _createClass(StringStream, [{
    key: "eol",
    value: function eol() {
      return this.pos >= this.string.length;
    }
    /**
    True if we are at the start of the line.
    */
  }, {
    key: "sol",
    value: function sol() {
      return this.pos == 0;
    }
    /**
    Get the next code unit after the current position, or undefined
    if we're at the end of the line.
    */
  }, {
    key: "peek",
    value: function peek() {
      return this.string.charAt(this.pos) || undefined;
    }
    /**
    Read the next code unit and advance `this.pos`.
    */
  }, {
    key: "next",
    value: function next() {
      if (this.pos < this.string.length) return this.string.charAt(this.pos++);
    }
    /**
    Match the next character against the given string, regular
    expression, or predicate. Consume and return it if it matches.
    */
  }, {
    key: "eat",
    value: function eat(match) {
      var ch = this.string.charAt(this.pos);
      var ok;
      if (typeof match == "string") ok = ch == match;else ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
      if (ok) {
        ++this.pos;
        return ch;
      }
    }
    /**
    Continue matching characters that match the given string,
    regular expression, or predicate function. Return true if any
    characters were consumed.
    */
  }, {
    key: "eatWhile",
    value: function eatWhile(match) {
      var start = this.pos;
      while (this.eat(match)) {}
      return this.pos > start;
    }
    /**
    Consume whitespace ahead of `this.pos`. Return true if any was
    found.
    */
  }, {
    key: "eatSpace",
    value: function eatSpace() {
      var start = this.pos;
      while (/[\s\u00a0]/.test(this.string.charAt(this.pos))) ++this.pos;
      return this.pos > start;
    }
    /**
    Move to the end of the line.
    */
  }, {
    key: "skipToEnd",
    value: function skipToEnd() {
      this.pos = this.string.length;
    }
    /**
    Move to directly before the given character, if found on the
    current line.
    */
  }, {
    key: "skipTo",
    value: function skipTo(ch) {
      var found = this.string.indexOf(ch, this.pos);
      if (found > -1) {
        this.pos = found;
        return true;
      }
    }
    /**
    Move back `n` characters.
    */
  }, {
    key: "backUp",
    value: function backUp(n) {
      this.pos -= n;
    }
    /**
    Get the column position at `this.pos`.
    */
  }, {
    key: "column",
    value: function column() {
      if (this.lastColumnPos < this.start) {
        this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
        this.lastColumnPos = this.start;
      }
      return this.lastColumnValue;
    }
    /**
    Get the indentation column of the current line.
    */
  }, {
    key: "indentation",
    value: function indentation() {
      var _a;
      return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);
    }
    /**
    Match the input against the given string or regular expression
    (which should start with a `^`). Return true or the regexp match
    if it matches.
    
    Unless `consume` is set to `false`, this will move `this.pos`
    past the matched text.
    
    When matching a string `caseInsensitive` can be set to true to
    make the match case-insensitive.
    */
  }, {
    key: "match",
    value: function match(pattern, consume, caseInsensitive) {
      if (typeof pattern == "string") {
        var cased = function cased(str) {
          return caseInsensitive ? str.toLowerCase() : str;
        };
        var substr = this.string.substr(this.pos, pattern.length);
        if (cased(substr) == cased(pattern)) {
          if (consume !== false) this.pos += pattern.length;
          return true;
        } else return null;
      } else {
        var match = this.string.slice(this.pos).match(pattern);
        if (match && match.index > 0) return null;
        if (match && consume !== false) this.pos += match[0].length;
        return match;
      }
    }
    /**
    Get the current token.
    */
  }, {
    key: "current",
    value: function current() {
      return this.string.slice(this.start, this.pos);
    }
  }]);
  return StringStream;
}();
exports.StringStream = StringStream;
function fullParser(spec) {
  return {
    name: spec.name || "",
    token: spec.token,
    blankLine: spec.blankLine || function () {},
    startState: spec.startState || function () {
      return true;
    },
    copyState: spec.copyState || defaultCopyState,
    indent: spec.indent || function () {
      return null;
    },
    languageData: spec.languageData || {},
    tokenTable: spec.tokenTable || noTokens
  };
}
function defaultCopyState(state) {
  if (_typeof(state) != "object") return state;
  var newState = {};
  for (var prop in state) {
    var val = state[prop];
    newState[prop] = val instanceof Array ? val.slice() : val;
  }
  return newState;
}
var IndentedFrom = /*@__PURE__*/new WeakMap();
/**
A [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror
5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).
*/
var StreamLanguage = /*#__PURE__*/function (_Language2) {
  _inherits(StreamLanguage, _Language2);
  var _super6 = _createSuper(StreamLanguage);
  function StreamLanguage(parser) {
    var _this10;
    _classCallCheck(this, StreamLanguage);
    var data = defineLanguageFacet(parser.languageData);
    var p = fullParser(parser),
      self;
    var impl = new ( /*#__PURE__*/function (_Parser2) {
      _inherits(_class4, _Parser2);
      var _super7 = _createSuper(_class4);
      function _class4() {
        _classCallCheck(this, _class4);
        return _super7.apply(this, arguments);
      }
      _createClass(_class4, [{
        key: "createParse",
        value: function createParse(input, fragments, ranges) {
          return new Parse(self, input, fragments, ranges);
        }
      }]);
      return _class4;
    }(_common.Parser))();
    _this10 = _super6.call(this, data, impl, [indentService.of(function (cx, pos) {
      return _this10.getIndent(cx, pos);
    })], parser.name);
    _this10.topNode = docID(data);
    self = _assertThisInitialized(_this10);
    _this10.streamParser = p;
    _this10.stateAfter = new _common.NodeProp({
      perNode: true
    });
    _this10.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
    return _this10;
  }
  /**
  Define a stream language.
  */
  _createClass(StreamLanguage, [{
    key: "getIndent",
    value: function getIndent(cx, pos) {
      var tree = syntaxTree(cx.state),
        at = tree.resolve(pos);
      while (at && at.type != this.topNode) at = at.parent;
      if (!at) return null;
      var from = undefined;
      var overrideIndentation = cx.options.overrideIndentation;
      if (overrideIndentation) {
        from = IndentedFrom.get(cx.state);
        if (from != null && from < pos - 1e4) from = undefined;
      }
      var start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos),
        statePos,
        state;
      if (start) {
        state = start.state;
        statePos = start.pos + 1;
      } else {
        state = this.streamParser.startState(cx.unit);
        statePos = 0;
      }
      if (pos - statePos > 10000 /* C.MaxIndentScanDist */) return null;
      while (statePos < pos) {
        var _line2 = cx.state.doc.lineAt(statePos),
          end = Math.min(pos, _line2.to);
        if (_line2.length) {
          var indentation = overrideIndentation ? overrideIndentation(_line2.from) : -1;
          var stream = new StringStream(_line2.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);
          while (stream.pos < end - _line2.from) readToken(this.streamParser.token, stream, state);
        } else {
          this.streamParser.blankLine(state, cx.unit);
        }
        if (end == pos) break;
        statePos = _line2.to + 1;
      }
      var line = cx.lineAt(pos);
      if (overrideIndentation && from == null) IndentedFrom.set(cx.state, line.from);
      return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx);
    }
  }, {
    key: "allowsNesting",
    get: function get() {
      return false;
    }
  }], [{
    key: "define",
    value: function define(spec) {
      return new StreamLanguage(spec);
    }
  }]);
  return StreamLanguage;
}(Language);
exports.StreamLanguage = StreamLanguage;
function findState(lang, tree, off, startPos, before) {
  var state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
  if (state) return {
    state: lang.streamParser.copyState(state),
    pos: off + tree.length
  };
  for (var i = tree.children.length - 1; i >= 0; i--) {
    var child = tree.children[i],
      pos = off + tree.positions[i];
    var found = child instanceof _common.Tree && pos < before && findState(lang, child, pos, startPos, before);
    if (found) return found;
  }
  return null;
}
function cutTree(lang, tree, from, to, inside) {
  if (inside && from <= 0 && to >= tree.length) return tree;
  if (!inside && tree.type == lang.topNode) inside = true;
  for (var i = tree.children.length - 1; i >= 0; i--) {
    var pos = tree.positions[i],
      child = tree.children[i],
      inner = void 0;
    if (pos < to && child instanceof _common.Tree) {
      if (!(inner = cutTree(lang, child, from - pos, to - pos, inside))) break;
      return !inside ? inner : new _common.Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
    }
  }
  return null;
}
function findStartInFragments(lang, fragments, startPos, editorState) {
  var _iterator23 = _createForOfIteratorHelper(fragments),
    _step23;
  try {
    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
      var f = _step23.value;
      var from = f.from + (f.openStart ? 25 : 0),
        to = f.to - (f.openEnd ? 25 : 0);
      var found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to),
        tree = void 0;
      if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false))) return {
        state: found.state,
        tree: tree
      };
    }
  } catch (err) {
    _iterator23.e(err);
  } finally {
    _iterator23.f();
  }
  return {
    state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4),
    tree: _common.Tree.empty
  };
}
var Parse = /*#__PURE__*/function () {
  function Parse(lang, input, fragments, ranges) {
    _classCallCheck(this, Parse);
    this.lang = lang;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.stoppedAt = null;
    this.chunks = [];
    this.chunkPos = [];
    this.chunk = [];
    this.chunkReused = undefined;
    this.rangeIndex = 0;
    this.to = ranges[ranges.length - 1].to;
    var context = ParseContext.get(),
      from = ranges[0].from;
    var _findStartInFragments = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state),
      state = _findStartInFragments.state,
      tree = _findStartInFragments.tree;
    this.state = state;
    this.parsedPos = this.chunkStart = from + tree.length;
    for (var i = 0; i < tree.children.length; i++) {
      this.chunks.push(tree.children[i]);
      this.chunkPos.push(tree.positions[i]);
    }
    if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {
      this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
      context.skipUntilInView(this.parsedPos, context.viewport.from);
      this.parsedPos = context.viewport.from;
    }
    this.moveRangeIndex();
  }
  _createClass(Parse, [{
    key: "advance",
    value: function advance() {
      var context = ParseContext.get();
      var parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
      var end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);
      if (context) end = Math.min(end, context.viewport.to);
      while (this.parsedPos < end) this.parseLine(context);
      if (this.chunkStart < this.parsedPos) this.finishChunk();
      if (this.parsedPos >= parseEnd) return this.finish();
      if (context && this.parsedPos >= context.viewport.to) {
        context.skipUntilInView(this.parsedPos, parseEnd);
        return this.finish();
      }
      return null;
    }
  }, {
    key: "stopAt",
    value: function stopAt(pos) {
      this.stoppedAt = pos;
    }
  }, {
    key: "lineAfter",
    value: function lineAfter(pos) {
      var chunk = this.input.chunk(pos);
      if (!this.input.lineChunks) {
        var eol = chunk.indexOf("\n");
        if (eol > -1) chunk = chunk.slice(0, eol);
      } else if (chunk == "\n") {
        chunk = "";
      }
      return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
    }
  }, {
    key: "nextLine",
    value: function nextLine() {
      var from = this.parsedPos,
        line = this.lineAfter(from),
        end = from + line.length;
      for (var index = this.rangeIndex;;) {
        var rangeEnd = this.ranges[index].to;
        if (rangeEnd >= end) break;
        line = line.slice(0, rangeEnd - (end - line.length));
        index++;
        if (index == this.ranges.length) break;
        var rangeStart = this.ranges[index].from;
        var after = this.lineAfter(rangeStart);
        line += after;
        end = rangeStart + after.length;
      }
      return {
        line: line,
        end: end
      };
    }
  }, {
    key: "skipGapsTo",
    value: function skipGapsTo(pos, offset, side) {
      for (;;) {
        var end = this.ranges[this.rangeIndex].to,
          offPos = pos + offset;
        if (side > 0 ? end > offPos : end >= offPos) break;
        var start = this.ranges[++this.rangeIndex].from;
        offset += start - end;
      }
      return offset;
    }
  }, {
    key: "moveRangeIndex",
    value: function moveRangeIndex() {
      while (this.ranges[this.rangeIndex].to < this.parsedPos) this.rangeIndex++;
    }
  }, {
    key: "emitToken",
    value: function emitToken(id, from, to, size, offset) {
      if (this.ranges.length > 1) {
        offset = this.skipGapsTo(from, offset, 1);
        from += offset;
        var len0 = this.chunk.length;
        offset = this.skipGapsTo(to, offset, -1);
        to += offset;
        size += this.chunk.length - len0;
      }
      this.chunk.push(id, from, to, size);
      return offset;
    }
  }, {
    key: "parseLine",
    value: function parseLine(context) {
      var _this$nextLine = this.nextLine(),
        line = _this$nextLine.line,
        end = _this$nextLine.end,
        offset = 0,
        streamParser = this.lang.streamParser;
      var stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
      if (stream.eol()) {
        streamParser.blankLine(this.state, stream.indentUnit);
      } else {
        while (!stream.eol()) {
          var token = readToken(streamParser.token, stream, this.state);
          if (token) offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
          if (stream.start > 10000 /* C.MaxLineLength */) break;
        }
      }
      this.parsedPos = end;
      this.moveRangeIndex();
      if (this.parsedPos < this.to) this.parsedPos++;
    }
  }, {
    key: "finishChunk",
    value: function finishChunk() {
      var tree = _common.Tree.build({
        buffer: this.chunk,
        start: this.chunkStart,
        length: this.parsedPos - this.chunkStart,
        nodeSet: nodeSet,
        topID: 0,
        maxBufferLength: 2048 /* C.ChunkSize */,
        reused: this.chunkReused
      });
      tree = new _common.Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
      this.chunks.push(tree);
      this.chunkPos.push(this.chunkStart - this.ranges[0].from);
      this.chunk = [];
      this.chunkReused = undefined;
      this.chunkStart = this.parsedPos;
    }
  }, {
    key: "finish",
    value: function finish() {
      return new _common.Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
    }
  }]);
  return Parse;
}();
function readToken(token, stream, state) {
  stream.start = stream.pos;
  for (var i = 0; i < 10; i++) {
    var result = token(stream, state);
    if (stream.pos > stream.start) return result;
  }
  throw new Error("Stream parser failed to advance stream.");
}
var noTokens = /*@__PURE__*/Object.create(null);
var typeArray = [_common.NodeType.none];
var nodeSet = /*@__PURE__*/new _common.NodeSet(typeArray);
var warned = [];
var defaultTable = /*@__PURE__*/Object.create(null);
for (var _i = 0, _arr = [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]]; _i < _arr.length; _i++) {
  var _arr$_i = _slicedToArray(_arr[_i], 2),
    legacyName = _arr$_i[0],
    name = _arr$_i[1];
  defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
}
var TokenTable = /*#__PURE__*/function () {
  function TokenTable(extra) {
    _classCallCheck(this, TokenTable);
    this.extra = extra;
    this.table = Object.assign(Object.create(null), defaultTable);
  }
  _createClass(TokenTable, [{
    key: "resolve",
    value: function resolve(tag) {
      return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
    }
  }]);
  return TokenTable;
}();
var defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1) return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  var tag = null;
  var _iterator24 = _createForOfIteratorHelper(tagStr.split(".")),
    _step24;
  try {
    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
      var part = _step24.value;
      var value = extra[part] || _highlight.tags[part];
      if (!value) {
        warnForPart(part, "Unknown highlighting tag ".concat(part));
      } else if (typeof value == "function") {
        if (!tag) warnForPart(part, "Modifier ".concat(part, " used at start of tag"));else tag = value(tag);
      } else {
        if (tag) warnForPart(part, "Tag ".concat(part, " used as modifier"));else tag = value;
      }
    }
  } catch (err) {
    _iterator24.e(err);
  } finally {
    _iterator24.f();
  }
  if (!tag) return 0;
  var name = tagStr.replace(/ /g, "_"),
    type = _common.NodeType.define({
      id: typeArray.length,
      name: name,
      props: [(0, _highlight.styleTags)(_defineProperty({}, name, tag))]
    });
  typeArray.push(type);
  return type.id;
}
function docID(data) {
  var type = _common.NodeType.define({
    id: typeArray.length,
    name: "Document",
    props: [languageDataProp.add(function () {
      return data;
    })]
  });
  typeArray.push(type);
  return type;
}

},{"@codemirror/state":20,"@codemirror/view":21,"@lezer/common":22,"@lezer/highlight":23,"style-mod":52}],19:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeLintPanel = void 0;
exports.diagnosticCount = diagnosticCount;
exports.forEachDiagnostic = forEachDiagnostic;
exports.forceLinting = forceLinting;
exports.lintGutter = lintGutter;
exports.lintKeymap = void 0;
exports.linter = linter;
exports.openLintPanel = exports.nextDiagnostic = void 0;
exports.setDiagnostics = setDiagnostics;
exports.setDiagnosticsEffect = void 0;
var _view = require("@codemirror/view");
var _state = require("@codemirror/state");
var _crelt = _interopRequireDefault(require("crelt"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var SelectedDiagnostic = /*#__PURE__*/_createClass(function SelectedDiagnostic(from, to, diagnostic) {
  _classCallCheck(this, SelectedDiagnostic);
  this.from = from;
  this.to = to;
  this.diagnostic = diagnostic;
});
var LintState = /*#__PURE__*/function () {
  function LintState(diagnostics, panel, selected) {
    _classCallCheck(this, LintState);
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  _createClass(LintState, null, [{
    key: "init",
    value: function init(diagnostics, panel, state) {
      // Filter the list of diagnostics for which to create markers
      var markedDiagnostics = diagnostics;
      var diagnosticFilter = state.facet(lintConfig).markerFilter;
      if (diagnosticFilter) markedDiagnostics = diagnosticFilter(markedDiagnostics);
      var ranges = _view.Decoration.set(markedDiagnostics.map(function (d) {
        // For zero-length ranges or ranges covering only a line break, create a widget
        return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? _view.Decoration.widget({
          widget: new DiagnosticWidget(d),
          diagnostic: d
        }).range(d.from) : _view.Decoration.mark({
          attributes: {
            "class": "cm-lintRange cm-lintRange-" + d.severity
          },
          diagnostic: d
        }).range(d.from, d.to);
      }), true);
      return new LintState(ranges, panel, findDiagnostic(ranges));
    }
  }]);
  return LintState;
}();
function findDiagnostic(diagnostics) {
  var diagnostic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var found = null;
  diagnostics.between(after, 1e9, function (from, to, _ref) {
    var spec = _ref.spec;
    if (diagnostic && spec.diagnostic != diagnostic) return;
    found = new SelectedDiagnostic(from, to, spec.diagnostic);
    return false;
  });
  return found;
}
function hideTooltip(tr, tooltip) {
  return !!(tr.effects.some(function (e) {
    return e.is(setDiagnosticsEffect);
  }) || tr.changes.touchesRange(tooltip.pos));
}
function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(_state.StateEffect.appendConfig.of(lintExtensions));
}
/**
Returns a transaction spec which updates the current set of
diagnostics, and enables the lint extension if if wasn't already
active.
*/
function setDiagnostics(state, diagnostics) {
  return {
    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
  };
}
/**
The state effect that updates the set of active diagnostics. Can
be useful when writing an extension that needs to track these.
*/
var setDiagnosticsEffect = /*@__PURE__*/_state.StateEffect.define();
exports.setDiagnosticsEffect = setDiagnosticsEffect;
var togglePanel = /*@__PURE__*/_state.StateEffect.define();
var movePanelSelection = /*@__PURE__*/_state.StateEffect.define();
var lintState = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return new LintState(_view.Decoration.none, null, null);
  },
  update: function update(value, tr) {
    if (tr.docChanged) {
      var mapped = value.diagnostics.map(tr.changes),
        selected = null;
      if (value.selected) {
        var selPos = tr.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      value = new LintState(mapped, value.panel, selected);
    }
    var _iterator = _createForOfIteratorHelper(tr.effects),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var effect = _step.value;
        if (effect.is(setDiagnosticsEffect)) {
          value = LintState.init(effect.value, value.panel, tr.state);
        } else if (effect.is(togglePanel)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return value;
  },
  provide: function provide(f) {
    return [_view.showPanel.from(f, function (val) {
      return val.panel;
    }), _view.EditorView.decorations.from(f, function (s) {
      return s.diagnostics;
    })];
  }
});
/**
Returns the number of active lint diagnostics in the given state.
*/
function diagnosticCount(state) {
  var lint = state.field(lintState, false);
  return lint ? lint.diagnostics.size : 0;
}
var activeMark = /*@__PURE__*/_view.Decoration.mark({
  "class": "cm-lintRange cm-lintRange-active"
});
function lintTooltip(view, pos, side) {
  var _view$state$field = view.state.field(lintState),
    diagnostics = _view$state$field.diagnostics;
  var found = [],
    stackStart = 2e8,
    stackEnd = 0;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), function (from, to, _ref2) {
    var spec = _ref2.spec;
    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
      found.push(spec.diagnostic);
      stackStart = Math.min(from, stackStart);
      stackEnd = Math.max(to, stackEnd);
    }
  });
  var diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (diagnosticFilter) found = diagnosticFilter(found);
  if (!found.length) return null;
  return {
    pos: stackStart,
    end: stackEnd,
    above: view.state.doc.lineAt(stackStart).to < stackEnd,
    create: function create() {
      return {
        dom: diagnosticsTooltip(view, found)
      };
    }
  };
}
function diagnosticsTooltip(view, diagnostics) {
  return (0, _crelt["default"])("ul", {
    "class": "cm-tooltip-lint"
  }, diagnostics.map(function (d) {
    return renderDiagnostic(view, d, false);
  }));
}
/**
Command to open and focus the lint panel.
*/
var openLintPanel = function openLintPanel(view) {
  var field = view.state.field(lintState, false);
  if (!field || !field.panel) view.dispatch({
    effects: maybeEnableLint(view.state, [togglePanel.of(true)])
  });
  var panel = (0, _view.getPanel)(view, LintPanel.open);
  if (panel) panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
/**
Command to close the lint panel, when open.
*/
exports.openLintPanel = openLintPanel;
var closeLintPanel = function closeLintPanel(view) {
  var field = view.state.field(lintState, false);
  if (!field || !field.panel) return false;
  view.dispatch({
    effects: togglePanel.of(false)
  });
  return true;
};
/**
Move the selection to the next diagnostic.
*/
exports.closeLintPanel = closeLintPanel;
var nextDiagnostic = function nextDiagnostic(view) {
  var field = view.state.field(lintState, false);
  if (!field) return false;
  var sel = view.state.selection.main,
    next = field.diagnostics.iter(sel.to + 1);
  if (!next.value) {
    next = field.diagnostics.iter(0);
    if (!next.value || next.from == sel.from && next.to == sel.to) return false;
  }
  view.dispatch({
    selection: {
      anchor: next.from,
      head: next.to
    },
    scrollIntoView: true
  });
  return true;
};
/**
A set of default key bindings for the lint functionality.

- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
*/
exports.nextDiagnostic = nextDiagnostic;
var lintKeymap = [{
  key: "Mod-Shift-m",
  run: openLintPanel,
  preventDefault: true
}, {
  key: "F8",
  run: nextDiagnostic
}];
exports.lintKeymap = lintKeymap;
var lintPlugin = /*@__PURE__*/_view.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.timeout = -1;
    this.set = true;
    var _view$state$facet = view.state.facet(lintConfig),
      delay = _view$state$facet.delay;
    this.lintTime = Date.now() + delay;
    this.run = this.run.bind(this);
    this.timeout = setTimeout(this.run, delay);
  }
  _createClass(_class, [{
    key: "run",
    value: function run() {
      var _this = this;
      var now = Date.now();
      if (now < this.lintTime - 10) {
        setTimeout(this.run, this.lintTime - now);
      } else {
        this.set = false;
        var state = this.view.state,
          _state$facet = state.facet(lintConfig),
          sources = _state$facet.sources;
        Promise.all(sources.map(function (source) {
          return Promise.resolve(source(_this.view));
        })).then(function (annotations) {
          var all = annotations.reduce(function (a, b) {
            return a.concat(b);
          });
          if (_this.view.state.doc == state.doc) _this.view.dispatch(setDiagnostics(_this.view.state, all));
        }, function (error) {
          (0, _view.logException)(_this.view.state, error);
        });
      }
    }
  }, {
    key: "update",
    value: function update(_update) {
      var config = _update.state.facet(lintConfig);
      if (_update.docChanged || config != _update.startState.facet(lintConfig) || config.needsRefresh && config.needsRefresh(_update)) {
        this.lintTime = Date.now() + config.delay;
        if (!this.set) {
          this.set = true;
          this.timeout = setTimeout(this.run, config.delay);
        }
      }
    }
  }, {
    key: "force",
    value: function force() {
      if (this.set) {
        this.lintTime = Date.now();
        this.run();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearTimeout(this.timeout);
    }
  }]);
  return _class;
}());
var lintConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(input) {
    return Object.assign({
      sources: input.map(function (i) {
        return i.source;
      })
    }, (0, _state.combineConfig)(input.map(function (i) {
      return i.config;
    }), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null
    }, {
      needsRefresh: function needsRefresh(a, b) {
        return !a ? b : !b ? a : function (u) {
          return a(u) || b(u);
        };
      }
    }));
  }
});
/**
Given a diagnostic source, this function returns an extension that
enables linting with that source. It will be called whenever the
editor is idle (after its content changed).
*/
function linter(source) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [lintConfig.of({
    source: source,
    config: config
  }), lintPlugin, lintExtensions];
}
/**
Forces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the
editor is idle to run right away.
*/
function forceLinting(view) {
  var plugin = view.plugin(lintPlugin);
  if (plugin) plugin.force();
}
function assignKeys(actions) {
  var assigned = [];
  if (actions) {
    var _iterator2 = _createForOfIteratorHelper(actions),
      _step2;
    try {
      actions: for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var name = _step2.value.name;
        var _loop = function _loop() {
          var ch = name[i];
          if (/[a-zA-Z]/.test(ch) && !assigned.some(function (c) {
            return c.toLowerCase() == ch.toLowerCase();
          })) {
            assigned.push(ch);
            return "continue|actions";
          }
        };
        for (var i = 0; i < name.length; i++) {
          var _ret = _loop();
          if (_ret === "continue|actions") continue actions;
        }
        assigned.push("");
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a;
  var keys = inPanel ? assignKeys(diagnostic.actions) : [];
  return (0, _crelt["default"])("li", {
    "class": "cm-diagnostic cm-diagnostic-" + diagnostic.severity
  }, (0, _crelt["default"])("span", {
    "class": "cm-diagnosticText"
  }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map(function (action, i) {
    var fired = false,
      click = function click(e) {
        e.preventDefault();
        if (fired) return;
        fired = true;
        var found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
        if (found) action.apply(view, found.from, found.to);
      };
    var name = action.name,
      keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
    var nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), (0, _crelt["default"])("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
    return (0, _crelt["default"])("button", {
      type: "button",
      "class": "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": " Action: ".concat(name).concat(keyIndex < 0 ? "" : " (access key \"".concat(keys[i], ")\""), ".")
    }, nameElt);
  }), diagnostic.source && (0, _crelt["default"])("div", {
    "class": "cm-diagnosticSource"
  }, diagnostic.source));
}
var DiagnosticWidget = /*#__PURE__*/function (_WidgetType) {
  _inherits(DiagnosticWidget, _WidgetType);
  var _super = _createSuper(DiagnosticWidget);
  function DiagnosticWidget(diagnostic) {
    var _this2;
    _classCallCheck(this, DiagnosticWidget);
    _this2 = _super.call(this);
    _this2.diagnostic = diagnostic;
    return _this2;
  }
  _createClass(DiagnosticWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.diagnostic == this.diagnostic;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return (0, _crelt["default"])("span", {
        "class": "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
      });
    }
  }]);
  return DiagnosticWidget;
}(_view.WidgetType);
var PanelItem = /*#__PURE__*/_createClass(function PanelItem(view, diagnostic) {
  _classCallCheck(this, PanelItem);
  this.diagnostic = diagnostic;
  this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
  this.dom = renderDiagnostic(view, diagnostic, true);
  this.dom.id = this.id;
  this.dom.setAttribute("role", "option");
});
var LintPanel = /*#__PURE__*/function () {
  function LintPanel(view) {
    var _this3 = this;
    _classCallCheck(this, LintPanel);
    this.view = view;
    this.items = [];
    var onkeydown = function onkeydown(event) {
      if (event.keyCode == 27) {
        // Escape
        closeLintPanel(_this3.view);
        _this3.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        // ArrowUp, PageUp
        _this3.moveSelection((_this3.selectedIndex - 1 + _this3.items.length) % _this3.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        // ArrowDown, PageDown
        _this3.moveSelection((_this3.selectedIndex + 1) % _this3.items.length);
      } else if (event.keyCode == 36) {
        // Home
        _this3.moveSelection(0);
      } else if (event.keyCode == 35) {
        // End
        _this3.moveSelection(_this3.items.length - 1);
      } else if (event.keyCode == 13) {
        // Enter
        _this3.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && _this3.selectedIndex >= 0) {
        // A-Z
        var diagnostic = _this3.items[_this3.selectedIndex].diagnostic,
          keys = assignKeys(diagnostic.actions);
        for (var i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
          var found = findDiagnostic(_this3.view.state.field(lintState).diagnostics, diagnostic);
          if (found) diagnostic.actions[i].apply(view, found.from, found.to);
        }
      } else {
        return;
      }
      event.preventDefault();
    };
    var onclick = function onclick(event) {
      for (var i = 0; i < _this3.items.length; i++) {
        if (_this3.items[i].dom.contains(event.target)) _this3.moveSelection(i);
      }
    };
    this.list = (0, _crelt["default"])("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: onkeydown,
      onclick: onclick
    });
    this.dom = (0, _crelt["default"])("div", {
      "class": "cm-panel-lint"
    }, this.list, (0, _crelt["default"])("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: function onclick() {
        return closeLintPanel(_this3.view);
      }
    }, "×"));
    this.update();
  }
  _createClass(LintPanel, [{
    key: "selectedIndex",
    get: function get() {
      var selected = this.view.state.field(lintState).selected;
      if (!selected) return -1;
      for (var i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;
      return -1;
    }
  }, {
    key: "update",
    value: function update() {
      var _this4 = this;
      var _this$view$state$fiel = this.view.state.field(lintState),
        diagnostics = _this$view$state$fiel.diagnostics,
        selected = _this$view$state$fiel.selected;
      var i = 0,
        needsSync = false,
        newSelectedItem = null;
      diagnostics.between(0, this.view.state.doc.length, function (_start, _end, _ref3) {
        var spec = _ref3.spec;
        var found = -1,
          item;
        for (var j = i; j < _this4.items.length; j++) if (_this4.items[j].diagnostic == spec.diagnostic) {
          found = j;
          break;
        }
        if (found < 0) {
          item = new PanelItem(_this4.view, spec.diagnostic);
          _this4.items.splice(i, 0, item);
          needsSync = true;
        } else {
          item = _this4.items[found];
          if (found > i) {
            _this4.items.splice(i, found - i);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i++;
      });
      while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: function read() {
            return {
              sel: newSelectedItem.dom.getBoundingClientRect(),
              panel: _this4.list.getBoundingClientRect()
            };
          },
          write: function write(_ref4) {
            var sel = _ref4.sel,
              panel = _ref4.panel;
            if (sel.top < panel.top) _this4.list.scrollTop -= panel.top - sel.top;else if (sel.bottom > panel.bottom) _this4.list.scrollTop += sel.bottom - panel.bottom;
          }
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync) this.sync();
    }
  }, {
    key: "sync",
    value: function sync() {
      var domPos = this.list.firstChild;
      function rm() {
        var prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      var _iterator3 = _createForOfIteratorHelper(this.items),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var item = _step3.value;
          if (item.dom.parentNode == this.list) {
            while (domPos != item.dom) rm();
            domPos = item.dom.nextSibling;
          } else {
            this.list.insertBefore(item.dom, domPos);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      while (domPos) rm();
    }
  }, {
    key: "moveSelection",
    value: function moveSelection(selectedIndex) {
      if (this.selectedIndex < 0) return;
      var field = this.view.state.field(lintState);
      var selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection) return;
      this.view.dispatch({
        selection: {
          anchor: selection.from,
          head: selection.to
        },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
  }], [{
    key: "open",
    value: function open(view) {
      return new LintPanel(view);
    }
  }]);
  return LintPanel;
}();
function svg(content) {
  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "viewBox=\"0 0 40 40\"";
  return "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ".concat(attrs, ">").concat(encodeURIComponent(content), "</svg>')");
}
function underline(color) {
  return svg("<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"".concat(color, "\" fill=\"none\" stroke-width=\".7\"/>"), "width=\"6\" height=\"3\"");
}
var baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": {
    borderLeft: "5px solid #d11"
  },
  ".cm-diagnostic-warning": {
    borderLeft: "5px solid orange"
  },
  ".cm-diagnostic-info": {
    borderLeft: "5px solid #999"
  },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: .7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": {
    backgroundImage: /*@__PURE__*/underline("#d11")
  },
  ".cm-lintRange-warning": {
    backgroundImage: /*@__PURE__*/underline("orange")
  },
  ".cm-lintRange-info": {
    backgroundImage: /*@__PURE__*/underline("#999")
  },
  ".cm-lintRange-active": {
    backgroundColor: "#ffdd9980"
  },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": {
      borderBottomColor: "orange"
    }
  },
  ".cm-lintPoint-info": {
    "&:after": {
      borderBottomColor: "#999"
    }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": {
          textDecoration: "underline"
        }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": {
        textDecoration: "none"
      },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
var LintGutterMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(LintGutterMarker, _GutterMarker);
  var _super2 = _createSuper(LintGutterMarker);
  function LintGutterMarker(diagnostics) {
    var _this5;
    _classCallCheck(this, LintGutterMarker);
    _this5 = _super2.call(this);
    _this5.diagnostics = diagnostics;
    _this5.severity = diagnostics.reduce(function (max, d) {
      var s = d.severity;
      return s == "error" || s == "warning" && max == "info" ? s : max;
    }, "info");
    return _this5;
  }
  _createClass(LintGutterMarker, [{
    key: "toDOM",
    value: function toDOM(view) {
      var elt = document.createElement("div");
      elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
      var diagnostics = this.diagnostics;
      var diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
      if (diagnosticsFilter) diagnostics = diagnosticsFilter(diagnostics);
      if (diagnostics.length) elt.onmouseover = function () {
        return gutterMarkerMouseOver(view, elt, diagnostics);
      };
      return elt;
    }
  }]);
  return LintGutterMarker;
}(_view.GutterMarker);
function trackHoverOn(view, marker) {
  var mousemove = function mousemove(event) {
    var rect = marker.getBoundingClientRect();
    if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ && event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */) return;
    for (var target = event.target; target; target = target.parentNode) {
      if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint")) return;
    }
    window.removeEventListener("mousemove", mousemove);
    if (view.state.field(lintGutterTooltip)) view.dispatch({
      effects: setLintGutterTooltip.of(null)
    });
  };
  window.addEventListener("mousemove", mousemove);
}
function gutterMarkerMouseOver(view, marker, diagnostics) {
  function hovered() {
    var line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
    var linePos = view.coordsAtPos(line.from);
    if (linePos) {
      view.dispatch({
        effects: setLintGutterTooltip.of({
          pos: line.from,
          above: false,
          create: function create() {
            return {
              dom: diagnosticsTooltip(view, diagnostics),
              getCoords: function getCoords() {
                return marker.getBoundingClientRect();
              }
            };
          }
        })
      });
    }
    marker.onmouseout = marker.onmousemove = null;
    trackHoverOn(view, marker);
  }
  var _view$state$facet2 = view.state.facet(lintGutterConfig),
    hoverTime = _view$state$facet2.hoverTime;
  var hoverTimeout = setTimeout(hovered, hoverTime);
  marker.onmouseout = function () {
    clearTimeout(hoverTimeout);
    marker.onmouseout = marker.onmousemove = null;
  };
  marker.onmousemove = function () {
    clearTimeout(hoverTimeout);
    hoverTimeout = setTimeout(hovered, hoverTime);
  };
}
function markersForDiagnostics(doc, diagnostics) {
  var byLine = Object.create(null);
  var _iterator4 = _createForOfIteratorHelper(diagnostics),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var diagnostic = _step4.value;
      var _line = doc.lineAt(diagnostic.from);
      (byLine[_line.from] || (byLine[_line.from] = [])).push(diagnostic);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  var markers = [];
  for (var line in byLine) {
    markers.push(new LintGutterMarker(byLine[line]).range(+line));
  }
  return _state.RangeSet.of(markers, true);
}
var lintGutterExtension = /*@__PURE__*/(0, _view.gutter)({
  "class": "cm-gutter-lint",
  markers: function markers(view) {
    return view.state.field(lintGutterMarkers);
  }
});
var lintGutterMarkers = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return _state.RangeSet.empty;
  },
  update: function update(markers, tr) {
    markers = markers.map(tr.changes);
    var diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;
    var _iterator5 = _createForOfIteratorHelper(tr.effects),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var effect = _step5.value;
        if (effect.is(setDiagnosticsEffect)) {
          var diagnostics = effect.value;
          if (diagnosticFilter) diagnostics = diagnosticFilter(diagnostics || []);
          markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    return markers;
  }
});
var setLintGutterTooltip = /*@__PURE__*/_state.StateEffect.define();
var lintGutterTooltip = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return null;
  },
  update: function update(tooltip, tr) {
    if (tooltip && tr.docChanged) tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), {
      pos: tr.changes.mapPos(tooltip.pos)
    });
    return tr.effects.reduce(function (t, e) {
      return e.is(setLintGutterTooltip) ? e.value : t;
    }, tooltip);
  },
  provide: function provide(field) {
    return _view.showTooltip.from(field);
  }
});
var lintGutterTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-gutter-lint": {
    width: "1.4em",
    "& .cm-gutterElement": {
      padding: ".2em"
    }
  },
  ".cm-lint-marker": {
    width: "1em",
    height: "1em"
  },
  ".cm-lint-marker-info": {
    content: /*@__PURE__*/svg("<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>")
  },
  ".cm-lint-marker-warning": {
    content: /*@__PURE__*/svg("<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>")
  },
  ".cm-lint-marker-error": {
    content: /*@__PURE__*/svg("<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>")
  }
});
var lintExtensions = [lintState, /*@__PURE__*/_view.EditorView.decorations.compute([lintState], function (state) {
  var _state$field = state.field(lintState),
    selected = _state$field.selected,
    panel = _state$field.panel;
  return !selected || !panel || selected.from == selected.to ? _view.Decoration.none : _view.Decoration.set([activeMark.range(selected.from, selected.to)]);
}), /*@__PURE__*/(0, _view.hoverTooltip)(lintTooltip, {
  hideOn: hideTooltip
}), baseTheme];
var lintGutterConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(configs) {
    return (0, _state.combineConfig)(configs, {
      hoverTime: 300 /* Hover.Time */,
      markerFilter: null,
      tooltipFilter: null
    });
  }
});
/**
Returns an extension that installs a gutter showing markers for
each line that has diagnostics, which can be hovered over to see
the diagnostics.
*/
function lintGutter() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
}
/**
Iterate over the marked diagnostics for the given editor state,
calling `f` for each of them. Note that, if the document changed
since the diagnostics were created, the `Diagnostic` object will
hold the original outdated position, whereas the `to` and `from`
arguments hold the diagnostic's current position.
*/
function forEachDiagnostic(state, f) {
  var lState = state.field(lintState, false);
  if (lState && lState.diagnostics.size) for (var iter = _state.RangeSet.iter([lState.diagnostics]); iter.value; iter.next()) f(iter.value.spec.diagnostic, iter.from, iter.to);
}

},{"@codemirror/state":20,"@codemirror/view":21,"crelt":34}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transaction = exports.Text = exports.StateField = exports.StateEffectType = exports.StateEffect = exports.SelectionRange = exports.RangeValue = exports.RangeSetBuilder = exports.RangeSet = exports.Range = exports.Prec = exports.MapMode = exports.Line = exports.Facet = exports.EditorState = exports.EditorSelection = exports.Compartment = exports.CharCategory = exports.ChangeSet = exports.ChangeDesc = exports.AnnotationType = exports.Annotation = void 0;
exports.codePointAt = codePointAt;
exports.codePointSize = codePointSize;
exports.combineConfig = combineConfig;
exports.countColumn = countColumn;
exports.findClusterBreak = findClusterBreak;
exports.findColumn = findColumn;
exports.fromCodePoint = fromCodePoint;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
The data structure for documents. @nonabstract
*/
var Text = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Text() {
    _classCallCheck(this, Text);
  }
  /**
  Get the line description around the given position.
  */
  _createClass(Text, [{
    key: "lineAt",
    value: function lineAt(pos) {
      if (pos < 0 || pos > this.length) throw new RangeError("Invalid position ".concat(pos, " in document of length ").concat(this.length));
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
  }, {
    key: "line",
    value: function line(n) {
      if (n < 1 || n > this.lines) throw new RangeError("Invalid line number ".concat(n, " in ").concat(this.lines, "-line document"));
      return this.lineInner(n, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      var parts = [];
      this.decompose(0, from, parts, 2 /* Open.To */);
      if (text.length) text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
      this.decompose(to, this.length, parts, 1 /* Open.From */);
      return TextNode.from(parts, this.length - (to - from) + text.length);
    }
    /**
    Append another document to this one.
    */
  }, {
    key: "append",
    value: function append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
  }, {
    key: "slice",
    value: function slice(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var parts = [];
      this.decompose(from, to, parts, 0);
      return TextNode.from(parts, to - from);
    }
    /**
    Test whether this text is equal to another instance.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      if (other == this) return true;
      if (other.length != this.length || other.lines != this.lines) return false;
      var start = this.scanIdentical(other, 1),
        end = this.length - this.scanIdentical(other, -1);
      var a = new RawTextCursor(this),
        b = new RawTextCursor(other);
      for (var skip = start, pos = start;;) {
        a.next(skip);
        b.next(skip);
        skip = 0;
        if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
        pos += a.value.length;
        if (a.done || pos >= end) return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings.
    */
  }, {
    key: "iter",
    value: function iter() {
      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
  }, {
    key: "iterRange",
    value: function iterRange(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      return new PartialTextCursor(this, from, to);
    }
    /**
    Return a cursor that iterates over the given range of lines,
    _without_ returning the line breaks between, and yielding empty
    strings for empty lines.
    
    When `from` and `to` are given, they should be 1-based line numbers.
    */
  }, {
    key: "iterLines",
    value: function iterLines(from, to) {
      var inner;
      if (from == null) {
        inner = this.iter();
      } else {
        if (to == null) to = this.lines + 1;
        var start = this.line(from).from;
        inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
      }
      return new LineCursor(inner);
    }
    /**
    @internal
    */
  }, {
    key: "toString",
    value: function toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var lines = [];
      this.flatten(lines);
      return lines;
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
  }], [{
    key: "of",
    value: function of(text) {
      if (text.length == 0) throw new RangeError("A document must have at least one line");
      if (text.length == 1 && !text[0]) return Text.empty;
      return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
    }
  }]);
  return Text;
}(); // Leaves store an array of line strings. There are always line breaks
// between these strings. Leaves are limited in size and have to be
// contained in TextNode instances for bigger documents.
exports.Text = Text;
var TextLeaf = /*#__PURE__*/function (_Text) {
  _inherits(TextLeaf, _Text);
  var _super = _createSuper(TextLeaf);
  function TextLeaf(text) {
    var _this;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);
    _classCallCheck(this, TextLeaf);
    _this = _super.call(this);
    _this.text = text;
    _this.length = length;
    return _this;
  }
  _createClass(TextLeaf, [{
    key: "lines",
    get: function get() {
      return this.text.length;
    }
  }, {
    key: "children",
    get: function get() {
      return null;
    }
  }, {
    key: "lineInner",
    value: function lineInner(target, isLine, line, offset) {
      for (var i = 0;; i++) {
        var string = this.text[i],
          end = offset + string.length;
        if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);
        offset = end + 1;
        line++;
      }
    }
  }, {
    key: "decompose",
    value: function decompose(from, to, target, open) {
      var text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
      if (open & 1 /* Open.From */) {
        var prev = target.pop();
        var joined = appendText(text.text, prev.text.slice(), 0, text.length);
        if (joined.length <= 32 /* Tree.Branch */) {
          target.push(new TextLeaf(joined, prev.length + text.length));
        } else {
          var mid = joined.length >> 1;
          target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text);
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      if (!(text instanceof TextLeaf)) return _get(_getPrototypeOf(TextLeaf.prototype), "replace", this).call(this, from, to, text);
      var lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
      var newLen = this.length + text.length - (to - from);
      if (lines.length <= 32 /* Tree.Branch */) return new TextLeaf(lines, newLen);
      return TextNode.from(TextLeaf.split(lines, []), newLen);
    }
  }, {
    key: "sliceString",
    value: function sliceString(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
      var result = "";
      for (var pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
        var line = this.text[i],
          end = pos + line.length;
        if (pos > from && i) result += lineSep;
        if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
  }, {
    key: "flatten",
    value: function flatten(target) {
      var _iterator = _createForOfIteratorHelper(this.text),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          target.push(line);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "scanIdentical",
    value: function scanIdentical() {
      return 0;
    }
  }], [{
    key: "split",
    value: function split(text, target) {
      var part = [],
        len = -1;
      var _iterator2 = _createForOfIteratorHelper(text),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var line = _step2.value;
          part.push(line);
          len += line.length + 1;
          if (part.length == 32 /* Tree.Branch */) {
            target.push(new TextLeaf(part, len));
            part = [];
            len = -1;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (len > -1) target.push(new TextLeaf(part, len));
      return target;
    }
  }]);
  return TextLeaf;
}(Text); // Nodes provide the tree structure of the `Text` type. They store a
// number of other nodes or leaves, taking care to balance themselves
// on changes. There are implied line breaks _between_ the children of
// a node (but not before the first or after the last child).
var TextNode = /*#__PURE__*/function (_Text2) {
  _inherits(TextNode, _Text2);
  var _super2 = _createSuper(TextNode);
  function TextNode(children, length) {
    var _this2;
    _classCallCheck(this, TextNode);
    _this2 = _super2.call(this);
    _this2.children = children;
    _this2.length = length;
    _this2.lines = 0;
    var _iterator3 = _createForOfIteratorHelper(children),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;
        _this2.lines += child.lines;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return _this2;
  }
  _createClass(TextNode, [{
    key: "lineInner",
    value: function lineInner(target, isLine, line, offset) {
      for (var i = 0;; i++) {
        var child = this.children[i],
          end = offset + child.length,
          endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
  }, {
    key: "decompose",
    value: function decompose(from, to, target, open) {
      for (var i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (from <= end && to >= pos) {
          var childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
          if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      if (text.lines < this.lines) for (var i = 0, pos = 0; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        // Fast path: if the change only affects one child and the
        // child's size remains in the acceptable range, only update
        // that child
        if (from >= pos && to <= end) {
          var updated = child.replace(from - pos, to - pos, text);
          var totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 /* Tree.BranchShift */ - 1 && updated.lines > totalLines >> 5 /* Tree.BranchShift */ + 1) {
            var copy = this.children.slice();
            copy[i] = updated;
            return new TextNode(copy, this.length - (to - from) + text.length);
          }
          return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, pos, end, updated);
        }
        pos = end + 1;
      }
      return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, from, to, text);
    }
  }, {
    key: "sliceString",
    value: function sliceString(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
      var result = "";
      for (var i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (pos > from && i) result += lineSep;
        if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
  }, {
    key: "flatten",
    value: function flatten(target) {
      var _iterator4 = _createForOfIteratorHelper(this.children),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var child = _step4.value;
          child.flatten(target);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "scanIdentical",
    value: function scanIdentical(other, dir) {
      if (!(other instanceof TextNode)) return 0;
      var length = 0;
      var _ref = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1],
        _ref2 = _slicedToArray(_ref, 4),
        iA = _ref2[0],
        iB = _ref2[1],
        eA = _ref2[2],
        eB = _ref2[3];
      for (;; iA += dir, iB += dir) {
        if (iA == eA || iB == eB) return length;
        var chA = this.children[iA],
          chB = other.children[iB];
        if (chA != chB) return length + chA.scanIdentical(chB, dir);
        length += chA.length + 1;
      }
    }
  }], [{
    key: "from",
    value: function from(children) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce(function (l, ch) {
        return l + ch.length + 1;
      }, -1);
      var lines = 0;
      var _iterator5 = _createForOfIteratorHelper(children),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _ch = _step5.value;
          lines += _ch.lines;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (lines < 32 /* Tree.Branch */) {
        var flat = [];
        var _iterator6 = _createForOfIteratorHelper(children),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var ch = _step6.value;
            ch.flatten(flat);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        return new TextLeaf(flat, length);
      }
      var chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */),
        maxChunk = chunk << 1,
        minChunk = chunk >> 1;
      var chunked = [],
        currentLines = 0,
        currentLen = -1,
        currentChunk = [];
      function add(child) {
        var last;
        if (child.lines > maxChunk && child instanceof TextNode) {
          var _iterator7 = _createForOfIteratorHelper(child.children),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var node = _step7.value;
              add(node);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32 /* Tree.Branch */) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk) flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      function flush() {
        if (currentLines == 0) return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      var _iterator8 = _createForOfIteratorHelper(children),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var child = _step8.value;
          add(child);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      flush();
      return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
    }
  }]);
  return TextNode;
}(Text);
Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
function textLength(text) {
  var length = -1;
  var _iterator9 = _createForOfIteratorHelper(text),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var line = _step9.value;
      length += line.length + 1;
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return length;
}
function appendText(text, target) {
  var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;
  for (var pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
    var line = text[i],
      end = pos + line.length;
    if (end >= from) {
      if (end > to) line = line.slice(0, to - pos);
      if (pos < from) line = line.slice(from - pos);
      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else target.push(line);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}
var RawTextCursor = /*#__PURE__*/function () {
  function RawTextCursor(text) {
    var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    _classCallCheck(this, RawTextCursor);
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  _createClass(RawTextCursor, [{
    key: "nextInner",
    value: function nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (;;) {
        var last = this.nodes.length - 1;
        var top = this.nodes[last],
          offsetValue = this.offsets[last],
          offset = offsetValue >> 1;
        var size = top instanceof TextLeaf ? top.text.length : top.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0) this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top instanceof TextLeaf) {
          // Move to the next string
          var next = top.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          var _next = top.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > _next.length) {
            skip -= _next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0) this.offsets[last]--;
            this.nodes.push(_next);
            this.offsets.push(dir > 0 ? 1 : (_next instanceof TextLeaf ? _next.text.length : _next.children.length) << 1);
          }
        }
      }
    }
  }, {
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  }]);
  return RawTextCursor;
}();
var PartialTextCursor = /*#__PURE__*/function () {
  function PartialTextCursor(text, start, end) {
    _classCallCheck(this, PartialTextCursor);
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  _createClass(PartialTextCursor, [{
    key: "nextInner",
    value: function nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      var limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit) skip = limit;
      limit -= skip;
      var _this$cursor$next = this.cursor.next(skip),
        value = _this$cursor$next.value;
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      this.done = !this.value;
      return this;
    }
  }, {
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
  }, {
    key: "lineBreak",
    get: function get() {
      return this.cursor.lineBreak && this.value != "";
    }
  }]);
  return PartialTextCursor;
}();
var LineCursor = /*#__PURE__*/function () {
  function LineCursor(inner) {
    _classCallCheck(this, LineCursor);
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  _createClass(LineCursor, [{
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var _this$inner$next = this.inner.next(skip),
        done = _this$inner$next.done,
        lineBreak = _this$inner$next.lineBreak,
        value = _this$inner$next.value;
      if (done) {
        this.done = true;
        this.value = "";
      } else if (lineBreak) {
        if (this.afterBreak) {
          this.value = "";
        } else {
          this.afterBreak = true;
          this.next();
        }
      } else {
        this.value = value;
        this.afterBreak = false;
      }
      return this;
    }
  }, {
    key: "lineBreak",
    get: function get() {
      return false;
    }
  }]);
  return LineCursor;
}();
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function () {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
    return this;
  };
}
/**
This type describes a line in the document. It is created
on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
*/
var Line = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Line(
  /**
  The position of the start of the line.
  */
  from,
  /**
  The position at the end of the line (_before_ the line break,
  or at the end of document for the last line).
  */
  to,
  /**
  This line's line number (1-based).
  */
  number,
  /**
  The line's content.
  */
  text) {
    _classCallCheck(this, Line);
    this.from = from;
    this.to = to;
    this.number = number;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  _createClass(Line, [{
    key: "length",
    get: function get() {
      return this.to - this.from;
    }
  }]);
  return Line;
}(); // Compressed representation of the Grapheme_Cluster_Break=Extend
// information from
// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
// Each pair of elements represents a range, as an offet from the
// previous range and a length. Numbers are in base-36, with the empty
// string being a shorthand for 1.
exports.Line = Line;
var extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(function (s) {
  return s ? parseInt(s, 36) : 1;
});
// Convert offsets into absolute values
for (var i = 1; i < extend.length; i++) extend[i] += extend[i - 1];
function isExtendingChar(code) {
  for (var _i2 = 1; _i2 < extend.length; _i2 += 2) if (extend[_i2] > code) return extend[_i2 - 1] <= code;
  return false;
}
function isRegionalIndicator(code) {
  return code >= 0x1F1E6 && code <= 0x1F1FF;
}
var ZWJ = 0x200d;
/**
Returns a next grapheme cluster break _after_ (not equal to)
`pos`, if `forward` is true, or before otherwise. Returns `pos`
itself if no further cluster break is available in the string.
Moves across surrogate pairs, extending characters (when
`includeExtending` is true), characters joined with zero-width
joiners, and flag emoji.
*/
function findClusterBreak(str, pos) {
  var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var includeExtending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length) return pos;
  // If pos is in the middle of a surrogate pair, move to its start
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
  var prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    var next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      var countBefore = 0,
        _i3 = pos - 2;
      while (_i3 >= 0 && isRegionalIndicator(codePointAt(str, _i3))) {
        countBefore++;
        _i3 -= 2;
      }
      if (countBefore % 2 == 0) break;else pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    var found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos) return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch) {
  return ch >= 0xDC00 && ch < 0xE000;
}
function surrogateHigh(ch) {
  return ch >= 0xD800 && ch < 0xDC00;
}
/**
Find the code point at the given position in a string (like the
[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
string method).
*/
function codePointAt(str, pos) {
  var code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
  var code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1)) return code0;
  return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
}
/**
Given a Unicode codepoint, return the JavaScript string that
respresents it (like
[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
*/
function fromCodePoint(code) {
  if (code <= 0xffff) return String.fromCharCode(code);
  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
}
/**
The amount of positions a character takes up a JavaScript string.
*/
function codePointSize(code) {
  return code < 0x10000 ? 1 : 2;
}
var DefaultSplit = /\r\n?|\n/;
/**
Distinguishes different ways in which positions can be mapped.
*/
var MapMode = /*@__PURE__*/function (MapMode) {
  /**
  Map a position to a valid new position, even when its context
  was deleted.
  */
  MapMode[MapMode["Simple"] = 0] = "Simple";
  /**
  Return null if deletion happens across the position.
  */
  MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
  /**
  Return null if the character _before_ the position is deleted.
  */
  MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
  /**
  Return null if the character _after_ the position is deleted.
  */
  MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode;
}(MapMode || (exports.MapMode = MapMode = {}));
/**
A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
that doesn't store the inserted text. As such, it can't be
applied, but is cheaper to store and manipulate.
*/
exports.MapMode = MapMode;
var ChangeDesc = /*#__PURE__*/function () {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  function ChangeDesc(
  /**
  @internal
  */
  sections) {
    _classCallCheck(this, ChangeDesc);
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  _createClass(ChangeDesc, [{
    key: "length",
    get: function get() {
      var result = 0;
      for (var _i4 = 0; _i4 < this.sections.length; _i4 += 2) result += this.sections[_i4];
      return result;
    }
    /**
    The length of the document after the change.
    */
  }, {
    key: "newLength",
    get: function get() {
      var result = 0;
      for (var _i5 = 0; _i5 < this.sections.length; _i5 += 2) {
        var ins = this.sections[_i5 + 1];
        result += ins < 0 ? this.sections[_i5] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
  }, {
    key: "empty",
    get: function get() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes. `posA`
    provides the position of the range in the old document, `posB`
    the new position in the changed document.
    */
  }, {
    key: "iterGaps",
    value: function iterGaps(f) {
      for (var _i6 = 0, posA = 0, posB = 0; _i6 < this.sections.length;) {
        var len = this.sections[_i6++],
          ins = this.sections[_i6++];
        if (ins < 0) {
          f(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    `fromA`/`toA` provides the extent of the change in the starting
    document, `fromB`/`toB` the extent of the replacement in the
    changed document.
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
  }, {
    key: "iterChangedRanges",
    value: function iterChangedRanges(f) {
      var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _iterChanges(this, f, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
  }, {
    key: "invertedDesc",
    get: function get() {
      var sections = [];
      for (var _i7 = 0; _i7 < this.sections.length;) {
        var len = this.sections[_i7++],
          ins = this.sections[_i7++];
        if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
      }
      return new ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
  }, {
    key: "composeDesc",
    value: function composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `other` happened before the ones in `this`.
    */
  }, {
    key: "mapDesc",
    value: function mapDesc(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return other.empty ? this : mapSet(this, other, before);
    }
  }, {
    key: "mapPos",
    value: function mapPos(pos) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
      var posA = 0,
        posB = 0;
      for (var _i8 = 0; _i8 < this.sections.length;) {
        var len = this.sections[_i8++],
          ins = this.sections[_i8++],
          endA = posA + len;
        if (ins < 0) {
          if (endA > pos) return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
          if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
  }, {
    key: "touchesRange",
    value: function touchesRange(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      for (var _i9 = 0, pos = 0; _i9 < this.sections.length && pos <= to;) {
        var len = this.sections[_i9++],
          ins = this.sections[_i9++],
          end = pos + len;
        if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      for (var _i10 = 0; _i10 < this.sections.length;) {
        var len = this.sections[_i10++],
          ins = this.sections[_i10++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
        return typeof a != "number";
      })) throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new ChangeDesc(json);
    }
    /**
    @internal
    */
  }, {
    key: "create",
    value: function create(sections) {
      return new ChangeDesc(sections);
    }
  }]);
  return ChangeDesc;
}();
/**
A change set represents a group of modifications to a document. It
stores the document length, and can only be applied to documents
with exactly that length.
*/
exports.ChangeDesc = ChangeDesc;
var ChangeSet = /*#__PURE__*/function (_ChangeDesc) {
  _inherits(ChangeSet, _ChangeDesc);
  var _super3 = _createSuper(ChangeSet);
  function ChangeSet(sections,
  /**
  @internal
  */
  inserted) {
    var _this3;
    _classCallCheck(this, ChangeSet);
    _this3 = _super3.call(this, sections);
    _this3.inserted = inserted;
    return _this3;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  _createClass(ChangeSet, [{
    key: "apply",
    value: function apply(doc) {
      if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
      _iterChanges(this, function (fromA, toA, fromB, _toB, text) {
        return doc = doc.replace(fromB, fromB + (toA - fromA), text);
      }, false);
      return doc;
    }
  }, {
    key: "mapDesc",
    value: function mapDesc(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
  }, {
    key: "invert",
    value: function invert(doc) {
      var sections = this.sections.slice(),
        inserted = [];
      for (var _i11 = 0, pos = 0; _i11 < sections.length; _i11 += 2) {
        var len = sections[_i11],
          ins = sections[_i11 + 1];
        if (ins >= 0) {
          sections[_i11] = ins;
          sections[_i11 + 1] = len;
          var index = _i11 >> 1;
          while (inserted.length < index) inserted.push(Text.empty);
          inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
        }
        pos += len;
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
  }, {
    key: "compose",
    value: function compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
  }, {
    key: "map",
    value: function map(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each, with the range in the original document (`fromA`-`toA`)
    and the range that replaces it in the new document
    (`fromB`-`toB`).
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
  }, {
    key: "iterChanges",
    value: function iterChanges(f) {
      var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _iterChanges(this, f, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
  }, {
    key: "desc",
    get: function get() {
      return ChangeDesc.create(this.sections);
    }
    /**
    @internal
    */
  }, {
    key: "filter",
    value: function filter(ranges) {
      var resultSections = [],
        resultInserted = [],
        filteredSections = [];
      var iter = new SectionIter(this);
      done: for (var _i12 = 0, pos = 0;;) {
        var next = _i12 == ranges.length ? 1e9 : ranges[_i12++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done) break done;
          var len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        var end = ranges[_i12++];
        while (pos < end) {
          if (iter.done) break done;
          var _len = Math.min(iter.len, end - pos);
          addSection(resultSections, _len, -1);
          addSection(filteredSections, _len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(_len);
          pos += _len;
        }
      }
      return {
        changes: new ChangeSet(resultSections, resultInserted),
        filtered: ChangeDesc.create(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var parts = [];
      for (var _i13 = 0; _i13 < this.sections.length; _i13 += 2) {
        var len = this.sections[_i13],
          ins = this.sections[_i13 + 1];
        if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[_i13 >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
  }], [{
    key: "of",
    value: function of(changes, length, lineSep) {
      var sections = [],
        inserted = [],
        pos = 0;
      var total = null;
      function flush() {
        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!force && !sections.length) return;
        if (pos < length) addSection(sections, length - pos, -1);
        var set = new ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      function process(spec) {
        if (Array.isArray(spec)) {
          var _iterator10 = _createForOfIteratorHelper(spec),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var sub = _step10.value;
              process(sub);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        } else if (spec instanceof ChangeSet) {
          if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          var from = spec.from,
            _spec$to = spec.to,
            to = _spec$to === void 0 ? from : _spec$to,
            _insert = spec.insert;
          if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
          var insText = !_insert ? Text.empty : typeof _insert == "string" ? Text.of(_insert.split(lineSep || DefaultSplit)) : _insert;
          var insLen = insText.length;
          if (from == to && insLen == 0) return;
          if (from < pos) flush();
          if (from > pos) addSection(sections, from - pos, -1);
          addSection(sections, to - from, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      process(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
  }, {
    key: "empty",
    value: function empty(length) {
      return new ChangeSet(length ? [length, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
      var sections = [],
        inserted = [];
      for (var _i14 = 0; _i14 < json.length; _i14++) {
        var part = json[_i14];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
          return i && typeof e != "string";
        })) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < _i14) inserted.push(Text.empty);
          inserted[_i14] = Text.of(part.slice(1));
          sections.push(part[0], inserted[_i14].length);
        }
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    @internal
    */
  }, {
    key: "createSet",
    value: function createSet(sections, inserted) {
      return new ChangeSet(sections, inserted);
    }
  }]);
  return ChangeSet;
}(ChangeDesc);
exports.ChangeSet = ChangeSet;
function addSection(sections, len, ins) {
  var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (len == 0 && ins <= 0) return;
  var last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else sections.push(len, ins);
}
function addInsert(values, sections, value) {
  if (value.length == 0) return;
  var index = sections.length - 2 >> 1;
  if (index < values.length) {
    values[values.length - 1] = values[values.length - 1].append(value);
  } else {
    while (values.length < index) values.push(Text.empty);
    values.push(value);
  }
}
function _iterChanges(desc, f, individual) {
  var inserted = desc.inserted;
  for (var posA = 0, posB = 0, _i15 = 0; _i15 < desc.sections.length;) {
    var len = desc.sections[_i15++],
      ins = desc.sections[_i15++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      var endA = posA,
        endB = posB,
        _text = Text.empty;
      for (;;) {
        endA += len;
        endB += ins;
        if (ins && inserted) _text = _text.append(inserted[_i15 - 2 >> 1]);
        if (individual || _i15 == desc.sections.length || desc.sections[_i15 + 1] < 0) break;
        len = desc.sections[_i15++];
        ins = desc.sections[_i15++];
      }
      f(posA, endA, posB, endB, _text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before) {
  var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  // Produce a copy of setA that applies to the document after setB
  // has been applied (assuming both start at the same document).
  var sections = [],
    insert = mkSet ? [] : null;
  var a = new SectionIter(setA),
    b = new SectionIter(setB);
  // Iterate over both sets in parallel. inserted tracks, for changes
  // in A that have to be processed piece-by-piece, whether their
  // content has been inserted already, and refers to the section
  // index.
  for (var inserted = -1;;) {
    if (a.ins == -1 && b.ins == -1) {
      // Move across ranges skipped by both sets.
      var len = Math.min(a.len, b.len);
      addSection(sections, len, -1);
      a.forward(len);
      b.forward(len);
    } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
      // If there's a change in B that comes before the next change in
      // A (ordered by start pos, then len, then before flag), skip
      // that (and process any changes in A it covers).
      var _len2 = b.len;
      addSection(sections, b.ins, -1);
      while (_len2) {
        var piece = Math.min(a.len, _len2);
        if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
          addSection(sections, 0, a.ins);
          if (insert) addInsert(insert, sections, a.text);
          inserted = a.i;
        }
        a.forward(piece);
        _len2 -= piece;
      }
      b.next();
    } else if (a.ins >= 0) {
      // Process the part of a change in A up to the start of the next
      // non-deletion change in B (if overlapping).
      var _len3 = 0,
        left = a.len;
      while (left) {
        if (b.ins == -1) {
          var _piece = Math.min(left, b.len);
          _len3 += _piece;
          left -= _piece;
          b.forward(_piece);
        } else if (b.ins == 0 && b.len < left) {
          left -= b.len;
          b.next();
        } else {
          break;
        }
      }
      addSection(sections, _len3, inserted < a.i ? a.ins : 0);
      if (insert && inserted < a.i) addInsert(insert, sections, a.text);
      inserted = a.i;
      a.forward(a.len - left);
    } else if (a.done && b.done) {
      return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB) {
  var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var sections = [];
  var insert = mkSet ? [] : null;
  var a = new SectionIter(setA),
    b = new SectionIter(setB);
  for (var open = false;;) {
    if (a.done && b.done) {
      return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
    } else if (a.ins == 0) {
      // Deletion in A
      addSection(sections, a.len, 0, open);
      a.next();
    } else if (b.len == 0 && !b.done) {
      // Insertion in B
      addSection(sections, 0, b.ins, open);
      if (insert) addInsert(insert, sections, b.text);
      b.next();
    } else if (a.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      var len = Math.min(a.len2, b.len),
        sectionLen = sections.length;
      if (a.ins == -1) {
        var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert && insB) addInsert(insert, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a.off ? 0 : a.len, len, open);
        if (insert) addInsert(insert, sections, a.textBit(len));
      } else {
        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
        if (insert && !b.off) addInsert(insert, sections, b.text);
      }
      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a.forward2(len);
      b.forward(len);
    }
  }
}
var SectionIter = /*#__PURE__*/function () {
  function SectionIter(set) {
    _classCallCheck(this, SectionIter);
    this.set = set;
    this.i = 0;
    this.next();
  }
  _createClass(SectionIter, [{
    key: "next",
    value: function next() {
      var sections = this.set.sections;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
  }, {
    key: "done",
    get: function get() {
      return this.ins == -2;
    }
  }, {
    key: "len2",
    get: function get() {
      return this.ins < 0 ? this.len : this.ins;
    }
  }, {
    key: "text",
    get: function get() {
      var inserted = this.set.inserted,
        index = this.i - 2 >> 1;
      return index >= inserted.length ? Text.empty : inserted[index];
    }
  }, {
    key: "textBit",
    value: function textBit(len) {
      var inserted = this.set.inserted,
        index = this.i - 2 >> 1;
      return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
    }
  }, {
    key: "forward",
    value: function forward(len) {
      if (len == this.len) this.next();else {
        this.len -= len;
        this.off += len;
      }
    }
  }, {
    key: "forward2",
    value: function forward2(len) {
      if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
        this.ins -= len;
        this.off += len;
      }
    }
  }]);
  return SectionIter;
}();
/**
A single selection range. When
[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
multiple ranges. By default, selections hold exactly one range.
*/
var SelectionRange = /*#__PURE__*/function () {
  function SelectionRange(
  /**
  The lower boundary of the range.
  */
  from,
  /**
  The upper boundary of the range.
  */
  to, flags) {
    _classCallCheck(this, SelectionRange);
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  _createClass(SelectionRange, [{
    key: "anchor",
    get: function get() {
      return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
  }, {
    key: "head",
    get: function get() {
      return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
  }, {
    key: "empty",
    get: function get() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
  }, {
    key: "assoc",
    get: function get() {
      return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
  }, {
    key: "bidiLevel",
    get: function get() {
      var level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
      return level == 3 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
  }, {
    key: "goalColumn",
    get: function get() {
      var value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
      return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
  }, {
    key: "map",
    value: function map(change) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var from, to;
      if (this.empty) {
        from = to = change.mapPos(this.from, assoc);
      } else {
        from = change.mapPos(this.from, 1);
        to = change.mapPos(this.to, -1);
      }
      return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
  }, {
    key: "extend",
    value: function extend(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
      var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return this.anchor == other.anchor && this.head == other.head;
    }
    /**
    Return a JSON-serializable object representing the range.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        anchor: this.anchor,
        head: this.head
      };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
    /**
    @internal
    */
  }, {
    key: "create",
    value: function create(from, to, flags) {
      return new SelectionRange(from, to, flags);
    }
  }]);
  return SelectionRange;
}();
/**
An editor selection holds one or more selection ranges.
*/
exports.SelectionRange = SelectionRange;
var EditorSelection = /*#__PURE__*/function () {
  function EditorSelection(
  /**
  The ranges in the selection, sorted by position. Ranges cannot
  overlap (but they may touch, if they aren't empty).
  */
  ranges,
  /**
  The index of the _main_ range in the selection (which is
  usually the range that was added last).
  */
  mainIndex) {
    _classCallCheck(this, EditorSelection);
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  _createClass(EditorSelection, [{
    key: "map",
    value: function map(change) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      if (change.empty) return this;
      return EditorSelection.create(this.ranges.map(function (r) {
        return r.map(change, assoc);
      }), this.mainIndex);
    }
    /**
    Compare this selection to another selection.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;
      for (var _i16 = 0; _i16 < this.ranges.length; _i16++) if (!this.ranges[_i16].eq(other.ranges[_i16])) return false;
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
  }, {
    key: "main",
    get: function get() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
  }, {
    key: "asSingle",
    value: function asSingle() {
      return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
    }
    /**
    Extend this selection with an extra range.
    */
  }, {
    key: "addRange",
    value: function addRange(range) {
      var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
  }, {
    key: "replaceRange",
    value: function replaceRange(range) {
      var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
      var ranges = this.ranges.slice();
      ranges[which] = range;
      return EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        ranges: this.ranges.map(function (r) {
          return r.toJSON();
        }),
        main: this.mainIndex
      };
    }
    /**
    Create a selection from a JSON representation.
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
      return new EditorSelection(json.ranges.map(function (r) {
        return SelectionRange.fromJSON(r);
      }), json.main);
    }
    /**
    Create a selection holding a single range.
    */
  }, {
    key: "single",
    value: function single(anchor) {
      var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
      return new EditorSelection([EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
  }, {
    key: "create",
    value: function create(ranges) {
      var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (ranges.length == 0) throw new RangeError("A selection needs at least one range");
      for (var pos = 0, _i17 = 0; _i17 < ranges.length; _i17++) {
        var range = ranges[_i17];
        if (range.empty ? range.from <= pos : range.from < pos) return EditorSelection.normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
  }, {
    key: "cursor",
    value: function cursor(pos) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
      var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
      return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */);
    }
    /**
    Create a selection range.
    */
  }, {
    key: "range",
    value: function range(anchor, head, goalColumn, bidiLevel) {
      var flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */ | (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
      return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags) : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);
    }
    /**
    @internal
    */
  }, {
    key: "normalized",
    value: function normalized(ranges) {
      var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var main = ranges[mainIndex];
      ranges.sort(function (a, b) {
        return a.from - b.from;
      });
      mainIndex = ranges.indexOf(main);
      for (var _i18 = 1; _i18 < ranges.length; _i18++) {
        var range = ranges[_i18],
          prev = ranges[_i18 - 1];
        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
          var from = prev.from,
            to = Math.max(range.to, prev.to);
          if (_i18 <= mainIndex) mainIndex--;
          ranges.splice(--_i18, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
        }
      }
      return new EditorSelection(ranges, mainIndex);
    }
  }]);
  return EditorSelection;
}();
exports.EditorSelection = EditorSelection;
function checkSelection(selection, docLength) {
  var _iterator11 = _createForOfIteratorHelper(selection.ranges),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var range = _step11.value;
      if (range.to > docLength) throw new RangeError("Selection points outside of document");
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
}
var nextID = 0;
/**
A facet is a labeled value that is associated with an editor
state. It takes inputs from any number of extensions, and combines
those into a single output value.

Examples of uses of facets are the [tab
size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
*/
var Facet = /*#__PURE__*/function () {
  function Facet(
  /**
  @internal
  */
  combine,
  /**
  @internal
  */
  compareInput,
  /**
  @internal
  */
  compare, isStatic, enables) {
    _classCallCheck(this, Facet);
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare;
    this.isStatic = isStatic;
    /**
    @internal
    */
    this.id = nextID++;
    this["default"] = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Define a new facet.
  */
  _createClass(Facet, [{
    key: "of",
    value:
    /**
    Returns an extension that adds the given value to this facet.
    */
    function of(value) {
      return new FacetProvider([], this, 0 /* Provider.Static */, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In cases where your value depends only on a single field, you'll
    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
    */
  }, {
    key: "compute",
    value: function compute(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
  }, {
    key: "computeN",
    value: function computeN(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
    }
  }, {
    key: "from",
    value: function from(field, get) {
      if (!get) get = function get(x) {
        return x;
      };
      return this.compute([field], function (state) {
        return get(state.field(field));
      });
    }
  }], [{
    key: "define",
    value: function define() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new Facet(config.combine || function (a) {
        return a;
      }, config.compareInput || function (a, b) {
        return a === b;
      }, config.compare || (!config.combine ? sameArray : function (a, b) {
        return a === b;
      }), !!config["static"], config.enables);
    }
  }]);
  return Facet;
}();
exports.Facet = Facet;
function sameArray(a, b) {
  return a == b || a.length == b.length && a.every(function (e, i) {
    return e === b[i];
  });
}
var FacetProvider = /*#__PURE__*/function () {
  function FacetProvider(dependencies, facet, type, value) {
    _classCallCheck(this, FacetProvider);
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  _createClass(FacetProvider, [{
    key: "dynamicSlot",
    value: function dynamicSlot(addresses) {
      var _this4 = this;
      var _a;
      var getter = this.value;
      var compare = this.facet.compareInput;
      var id = this.id,
        idx = addresses[id] >> 1,
        multi = this.type == 2 /* Provider.Multi */;
      var depDoc = false,
        depSel = false,
        depAddrs = [];
      var _iterator12 = _createForOfIteratorHelper(this.dependencies),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var dep = _step12.value;
          if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      return {
        create: function create(state) {
          state.values[idx] = getter(state);
          return 1 /* SlotStatus.Changed */;
        },
        update: function update(state, tr) {
          if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
            var newVal = getter(state);
            if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
              state.values[idx] = newVal;
              return 1 /* SlotStatus.Changed */;
            }
          }

          return 0;
        },
        reconfigure: function reconfigure(state, oldState) {
          var newVal,
            oldAddr = oldState.config.address[id];
          if (oldAddr != null) {
            var oldVal = getAddr(oldState, oldAddr);
            if (_this4.dependencies.every(function (dep) {
              return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
            }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
              state.values[idx] = oldVal;
              return 0;
            }
          } else {
            newVal = getter(state);
          }
          state.values[idx] = newVal;
          return 1 /* SlotStatus.Changed */;
        }
      };
    }
  }]);
  return FacetProvider;
}();
function compareArray(a, b, compare) {
  if (a.length != b.length) return false;
  for (var _i19 = 0; _i19 < a.length; _i19++) if (!compare(a[_i19], b[_i19])) return false;
  return true;
}
function ensureAll(state, addrs) {
  var changed = false;
  var _iterator13 = _createForOfIteratorHelper(addrs),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var addr = _step13.value;
      if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */) changed = true;
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  var providerAddrs = providers.map(function (p) {
    return addresses[p.id];
  });
  var providerTypes = providers.map(function (p) {
    return p.type;
  });
  var dynamic = providerAddrs.filter(function (p) {
    return !(p & 1);
  });
  var idx = addresses[facet.id] >> 1;
  function get(state) {
    var values = [];
    for (var _i20 = 0; _i20 < providerAddrs.length; _i20++) {
      var value = getAddr(state, providerAddrs[_i20]);
      if (providerTypes[_i20] == 2 /* Provider.Multi */) {
        var _iterator14 = _createForOfIteratorHelper(value),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var val = _step14.value;
            values.push(val);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      } else values.push(value);
    }
    return facet.combine(values);
  }
  return {
    create: function create(state) {
      var _iterator15 = _createForOfIteratorHelper(providerAddrs),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var addr = _step15.value;
          ensureAddr(state, addr);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      state.values[idx] = get(state);
      return 1 /* SlotStatus.Changed */;
    },
    update: function update(state, tr) {
      if (!ensureAll(state, dynamic)) return 0;
      var value = get(state);
      if (facet.compare(value, state.values[idx])) return 0;
      state.values[idx] = value;
      return 1 /* SlotStatus.Changed */;
    },
    reconfigure: function reconfigure(state, oldState) {
      var depChanged = ensureAll(state, providerAddrs);
      var oldProviders = oldState.config.facets[facet.id],
        oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      var value = get(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1 /* SlotStatus.Changed */;
    }
  };
}

var initField = /*@__PURE__*/Facet.define({
  "static": true
});
/**
Fields can store additional information in an editor state, and
keep it in sync with the rest of the state.
*/
var StateField = /*#__PURE__*/function () {
  function StateField(
  /**
  @internal
  */
  id, createF, updateF, compareF,
  /**
  @internal
  */
  spec) {
    _classCallCheck(this, StateField);
    this.id = id;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    /**
    @internal
    */
    this.provides = undefined;
  }
  /**
  Define a state field.
  */
  _createClass(StateField, [{
    key: "create",
    value: function create(state) {
      var _this5 = this;
      var init = state.facet(initField).find(function (i) {
        return i.field == _this5;
      });
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
  }, {
    key: "slot",
    value: function slot(addresses) {
      var _this6 = this;
      var idx = addresses[this.id] >> 1;
      return {
        create: function create(state) {
          state.values[idx] = _this6.create(state);
          return 1 /* SlotStatus.Changed */;
        },

        update: function update(state, tr) {
          var oldVal = state.values[idx];
          var value = _this6.updateF(oldVal, tr);
          if (_this6.compareF(oldVal, value)) return 0;
          state.values[idx] = value;
          return 1 /* SlotStatus.Changed */;
        },

        reconfigure: function reconfigure(state, oldState) {
          if (oldState.config.address[_this6.id] != null) {
            state.values[idx] = oldState.field(_this6);
            return 0;
          }
          state.values[idx] = _this6.create(state);
          return 1 /* SlotStatus.Changed */;
        }
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
  }, {
    key: "init",
    value: function init(create) {
      return [this, initField.of({
        field: this,
        create: create
      })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
  }, {
    key: "extension",
    get: function get() {
      return this;
    }
  }], [{
    key: "define",
    value: function define(config) {
      var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
        return a === b;
      }, config);
      if (config.provide) field.provides = config.provide(field);
      return field;
    }
  }]);
  return StateField;
}();
exports.StateField = StateField;
var Prec_ = {
  lowest: 4,
  low: 3,
  "default": 2,
  high: 1,
  highest: 0
};
function prec(value) {
  return function (ext) {
    return new PrecExtension(ext, value);
  };
}
/**
By default extensions are registered in the order they are found
in the flattened form of nested array that was provided.
Individual extension values can be assigned a precedence to
override this. Extensions that do not have a precedence set get
the precedence of the nearest parent with a precedence, or
[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
final ordering of extensions is determined by first sorting by
precedence and then by order within each precedence.
*/
var Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /*@__PURE__*/prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /*@__PURE__*/prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  "default": /*@__PURE__*/prec(Prec_["default"]),
  /**
  A lower-than-default precedence.
  */
  low: /*@__PURE__*/prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /*@__PURE__*/prec(Prec_.lowest)
};
exports.Prec = Prec;
var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
  _classCallCheck(this, PrecExtension);
  this.inner = inner;
  this.prec = prec;
});
/**
Extension compartments can be used to make a configuration
dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
configuration in a compartment, you can later
[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
transaction.
*/
var Compartment = /*#__PURE__*/function () {
  function Compartment() {
    _classCallCheck(this, Compartment);
  }
  _createClass(Compartment, [{
    key: "of",
    value:
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    function of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
  }, {
    key: "reconfigure",
    value: function reconfigure(content) {
      return Compartment.reconfigure.of({
        compartment: this,
        extension: content
      });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
  }, {
    key: "get",
    value: function get(state) {
      return state.config.compartments.get(this);
    }
  }]);
  return Compartment;
}();
exports.Compartment = Compartment;
var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
  _classCallCheck(this, CompartmentInstance);
  this.compartment = compartment;
  this.inner = inner;
});
var Configuration = /*#__PURE__*/function () {
  function Configuration(base, compartments, dynamicSlots, address, staticValues, facets) {
    _classCallCheck(this, Configuration);
    this.base = base;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
  }
  _createClass(Configuration, [{
    key: "staticFacet",
    value: function staticFacet(facet) {
      var addr = this.address[facet.id];
      return addr == null ? facet["default"] : this.staticValues[addr >> 1];
    }
  }], [{
    key: "resolve",
    value: function resolve(base, compartments, oldState) {
      var fields = [];
      var facets = Object.create(null);
      var newCompartments = new Map();
      var _iterator16 = _createForOfIteratorHelper(flatten(base, compartments, newCompartments)),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var ext = _step16.value;
          if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      var address = Object.create(null);
      var staticValues = [];
      var dynamicSlots = [];
      var _loop = function _loop() {
        var field = _fields[_i21];
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push(function (a) {
          return field.slot(a);
        });
      };
      for (var _i21 = 0, _fields = fields; _i21 < _fields.length; _i21++) {
        _loop();
      }
      var oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
      var _loop2 = function _loop2() {
        var providers = facets[id],
          facet = providers[0].facet;
        var oldProviders = oldFacets && oldFacets[id] || [];
        if (providers.every(function (p) {
          return p.type == 0;
        } /* Provider.Static */)) {
          address[facet.id] = staticValues.length << 1 | 1;
          if (sameArray(oldProviders, providers)) {
            staticValues.push(oldState.facet(facet));
          } else {
            var value = facet.combine(providers.map(function (p) {
              return p.value;
            }));
            staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
          }
        } else {
          var _iterator17 = _createForOfIteratorHelper(providers),
            _step17;
          try {
            var _loop3 = function _loop3() {
              var p = _step17.value;
              if (p.type == 0 /* Provider.Static */) {
                address[p.id] = staticValues.length << 1 | 1;
                staticValues.push(p.value);
              } else {
                address[p.id] = dynamicSlots.length << 1;
                dynamicSlots.push(function (a) {
                  return p.dynamicSlot(a);
                });
              }
            };
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              _loop3();
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }
          address[facet.id] = dynamicSlots.length << 1;
          dynamicSlots.push(function (a) {
            return dynamicFacetSlot(a, facet, providers);
          });
        }
      };
      for (var id in facets) {
        _loop2();
      }
      var dynamic = dynamicSlots.map(function (f) {
        return f(address);
      });
      return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
    }
  }]);
  return Configuration;
}();
function flatten(extension, compartments, newCompartments) {
  var result = [[], [], [], [], []];
  var seen = new Map();
  function inner(ext, prec) {
    var known = seen.get(ext);
    if (known != null) {
      if (known <= prec) return;
      var found = result[known].indexOf(ext);
      if (found > -1) result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
    }
    seen.set(ext, prec);
    if (Array.isArray(ext)) {
      var _iterator18 = _createForOfIteratorHelper(ext),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var e = _step18.value;
          inner(e, prec);
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
      var content = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content);
      inner(content, prec);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec].push(ext);
      if (ext.provides) inner(ext.provides, prec);
    } else if (ext instanceof FacetProvider) {
      result[prec].push(ext);
      if (ext.facet.extensions) inner(ext.facet.extensions, Prec_["default"]);
    } else {
      var _content = ext.extension;
      if (!_content) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
      inner(_content, prec);
    }
  }
  inner(extension, Prec_["default"]);
  return result.reduce(function (a, b) {
    return a.concat(b);
  });
}
function ensureAddr(state, addr) {
  if (addr & 1) return 2 /* SlotStatus.Computed */;
  var idx = addr >> 1;
  var status = state.status[idx];
  if (status == 4 /* SlotStatus.Computing */) throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2 /* SlotStatus.Computed */) return status;
  state.status[idx] = 4 /* SlotStatus.Computing */;
  var changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = /*@__PURE__*/Facet.define();
var allowMultipleSelections = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.some(function (v) {
      return v;
    });
  },
  "static": true
});
var lineSeparator = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : undefined;
  },
  "static": true
});
var changeFilter = /*@__PURE__*/Facet.define();
var transactionFilter = /*@__PURE__*/Facet.define();
var transactionExtender = /*@__PURE__*/Facet.define();
var readOnly = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : false;
  }
});

/**
Annotations are tagged values that are used to add metadata to
transactions in an extensible way. They should be used to model
things that effect the entire transaction (such as its [time
stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
_alongside_ the other changes made by the transaction, [state
effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
*/
var Annotation = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Annotation(
  /**
  The annotation type.
  */
  type,
  /**
  The value of this annotation.
  */
  value) {
    _classCallCheck(this, Annotation);
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  _createClass(Annotation, null, [{
    key: "define",
    value: function define() {
      return new AnnotationType();
    }
  }]);
  return Annotation;
}();
/**
Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
*/
exports.Annotation = Annotation;
var AnnotationType = /*#__PURE__*/function () {
  function AnnotationType() {
    _classCallCheck(this, AnnotationType);
  }
  _createClass(AnnotationType, [{
    key: "of",
    value:
    /**
    Create an instance of this annotation.
    */
    function of(value) {
      return new Annotation(this, value);
    }
  }]);
  return AnnotationType;
}();
/**
Representation of a type of state effect. Defined with
[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
*/
exports.AnnotationType = AnnotationType;
var StateEffectType = /*#__PURE__*/function () {
  /**
  @internal
  */
  function StateEffectType(
  // The `any` types in these function types are there to work
  // around TypeScript issue #37631, where the type guard on
  // `StateEffect.is` mysteriously stops working when these properly
  // have type `Value`.
  /**
  @internal
  */
  map) {
    _classCallCheck(this, StateEffectType);
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  _createClass(StateEffectType, [{
    key: "of",
    value: function of(value) {
      return new StateEffect(this, value);
    }
  }]);
  return StateEffectType;
}();
/**
State effects can be used to represent additional effects
associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
are often useful to model changes to custom [state
fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
document or selection changes.
*/
exports.StateEffectType = StateEffectType;
var StateEffect = /*#__PURE__*/function () {
  /**
  @internal
  */
  function StateEffect(
  /**
  @internal
  */
  type,
  /**
  The value of this effect.
  */
  value) {
    _classCallCheck(this, StateEffect);
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  _createClass(StateEffect, [{
    key: "map",
    value: function map(mapping) {
      var mapped = this.type.map(this.value, mapping);
      return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
  }, {
    key: "is",
    value: function is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds.
    */
  }], [{
    key: "define",
    value: function define() {
      var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new StateEffectType(spec.map || function (v) {
        return v;
      });
    }
    /**
    Map an array of effects through a change set.
    */
  }, {
    key: "mapEffects",
    value: function mapEffects(effects, mapping) {
      if (!effects.length) return effects;
      var result = [];
      var _iterator19 = _createForOfIteratorHelper(effects),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var effect = _step19.value;
          var mapped = effect.map(mapping);
          if (mapped) result.push(mapped);
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      return result;
    }
  }]);
  return StateEffect;
}();
/**
This effect can be used to reconfigure the root extensions of
the editor. Doing this will discard any extensions
[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
compartments.
*/
exports.StateEffect = StateEffect;
StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
/**
Append extensions to the top-level configuration of the editor.
*/
StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
/**
Changes to the editor state are grouped into transactions.
Typically, a user action creates a single transaction, which may
contain any number of document changes, may change the selection,
or have other effects. Create a transaction by calling
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
dispatch one by calling
[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
*/
var Transaction = /*#__PURE__*/function () {
  function Transaction(
  /**
  The state from which the transaction starts.
  */
  startState,
  /**
  The document changes made by this transaction.
  */
  changes,
  /**
  The selection set by this transaction, or undefined if it
  doesn't explicitly set a selection.
  */
  selection,
  /**
  The effects added to the transaction.
  */
  effects,
  /**
  @internal
  */
  annotations,
  /**
  Whether the selection should be scrolled into view after this
  transaction is dispatched.
  */
  scrollIntoView) {
    _classCallCheck(this, Transaction);
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView;
    /**
    @internal
    */
    this._doc = null;
    /**
    @internal
    */
    this._state = null;
    if (selection) checkSelection(selection, changes.newLength);
    if (!annotations.some(function (a) {
      return a.type == Transaction.time;
    })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  _createClass(Transaction, [{
    key: "newDoc",
    get:
    /**
    The new document produced by the transaction. Contrary to
    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
    force the entire new state to be computed right away, so it is
    recommended that [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
    when they need to look at the new document.
    */
    function get() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
  }, {
    key: "newSelection",
    get: function get() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so it is recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
  }, {
    key: "state",
    get: function get() {
      if (!this._state) this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
  }, {
    key: "annotation",
    value: function annotation(type) {
      var _iterator20 = _createForOfIteratorHelper(this.annotations),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var ann = _step20.value;
          if (ann.type == type) return ann.value;
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      return undefined;
    }
    /**
    Indicates whether the transaction changed the document.
    */
  }, {
    key: "docChanged",
    get: function get() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
  }, {
    key: "reconfigured",
    get: function get() {
      return this.startState.config != this.state.config;
    }
    /**
    Returns true if the transaction has a [user
    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
    or more specific than `event`. For example, if the transaction
    has `"select.pointer"` as user event, `"select"` and
    `"select.pointer"` will match it.
    */
  }, {
    key: "isUserEvent",
    value: function isUserEvent(event) {
      var e = this.annotation(Transaction.userEvent);
      return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
    }
  }], [{
    key: "create",
    value: function create(startState, changes, selection, effects, annotations, scrollIntoView) {
      return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
    }
  }]);
  return Transaction;
}();
/**
Annotation used to store transaction timestamps. Automatically
added to every transaction, holding `Date.now()`.
*/
exports.Transaction = Transaction;
Transaction.time = /*@__PURE__*/Annotation.define();
/**
Annotation used to associate a transaction with a user interface
event. Holds a string identifying the event, using a
dot-separated format to support attaching more specific
information. The events used by the core libraries are:

 - `"input"` when content is entered
   - `"input.type"` for typed input
     - `"input.type.compose"` for composition
   - `"input.paste"` for pasted input
   - `"input.drop"` when adding content with drag-and-drop
   - `"input.complete"` when autocompleting
 - `"delete"` when the user deletes content
   - `"delete.selection"` when deleting the selection
   - `"delete.forward"` when deleting forward from the selection
   - `"delete.backward"` when deleting backward from the selection
   - `"delete.cut"` when cutting to the clipboard
 - `"move"` when content is moved
   - `"move.drop"` when content is moved within the editor through drag-and-drop
 - `"select"` when explicitly changing the selection
   - `"select.pointer"` when selecting with a mouse or other pointing device
 - `"undo"` and `"redo"` for history actions

Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
whether the annotation matches a given event.
*/
Transaction.userEvent = /*@__PURE__*/Annotation.define();
/**
Annotation indicating whether a transaction should be added to
the undo history or not.
*/
Transaction.addToHistory = /*@__PURE__*/Annotation.define();
/**
Annotation indicating (when present and true) that a transaction
represents a change made by some other actor, not the user. This
is used, for example, to tag other people's changes in
collaborative editing.
*/
Transaction.remote = /*@__PURE__*/Annotation.define();
function joinRanges(a, b) {
  var result = [];
  for (var iA = 0, iB = 0;;) {
    var from = void 0,
      to = void 0;
    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
      from = a[iA++];
      to = a[iA++];
    } else if (iB < b.length) {
      from = b[iB++];
      to = b[iB++];
    } else return result;
    if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
  }
}
function mergeTransaction(a, b, sequential) {
  var _a;
  var mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a.changes);
    mapForB = a.changes.mapDesc(b.changes, true);
    changes = a.changes.compose(mapForA);
  }
  return {
    changes: changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a.scrollIntoView || b.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  var sel = spec.selection,
    annotations = asArray(spec.annotations);
  if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations: annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false) filter = false;
  for (var _i22 = 1; _i22 < specs.length; _i22++) {
    if (specs[_i22].filter === false) filter = false;
    var seq = !!specs[_i22].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[_i22], seq ? s.changes.newLength : state.doc.length), seq);
  }
  var tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr) : tr);
}
// Finish a transaction by applying filters if necessary.
function filterTransaction(tr) {
  var state = tr.startState;
  // Change filters
  var result = true;
  var _iterator21 = _createForOfIteratorHelper(state.facet(changeFilter)),
    _step21;
  try {
    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
      var filter = _step21.value;
      var value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
    }
  } catch (err) {
    _iterator21.e(err);
  } finally {
    _iterator21.f();
  }
  if (result !== true) {
    var changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      var filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  // Transaction filters
  var filters = state.facet(transactionFilter);
  for (var _i23 = filters.length - 1; _i23 >= 0; _i23--) {
    var _filtered = filters[_i23](tr);
    if (_filtered instanceof Transaction) tr = _filtered;else if (Array.isArray(_filtered) && _filtered.length == 1 && _filtered[0] instanceof Transaction) tr = _filtered[0];else tr = resolveTransaction(state, asArray(_filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  var state = tr.startState,
    extenders = state.facet(transactionExtender),
    spec = tr;
  for (var _i24 = extenders.length - 1; _i24 >= 0; _i24--) {
    var extension = extenders[_i24](tr);
    if (extension && Object.keys(extension).length) spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none = [];
function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}

/**
The categories produced by a [character
categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
do things like selecting by word.
*/
var CharCategory = /*@__PURE__*/function (CharCategory) {
  /**
  Word characters.
  */
  CharCategory[CharCategory["Word"] = 0] = "Word";
  /**
  Whitespace.
  */
  CharCategory[CharCategory["Space"] = 1] = "Space";
  /**
  Anything else.
  */
  CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory;
}(CharCategory || (exports.CharCategory = CharCategory = {}));
exports.CharCategory = CharCategory;
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {}
function hasWordChar(str) {
  if (wordChar) return wordChar.test(str);
  for (var _i25 = 0; _i25 < str.length; _i25++) {
    var ch = str[_i25];
    if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return function (_char) {
    if (!/\S/.test(_char)) return CharCategory.Space;
    if (hasWordChar(_char)) return CharCategory.Word;
    for (var _i26 = 0; _i26 < wordChars.length; _i26++) if (_char.indexOf(wordChars[_i26]) > -1) return CharCategory.Word;
    return CharCategory.Other;
  };
}

/**
The editor state class is a persistent (immutable) data structure.
To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
instance, without modifying the original object.

As such, _never_ mutate properties of a state directly. That'll
just break things.
*/
var EditorState = /*#__PURE__*/function () {
  function EditorState(
  /**
  @internal
  */
  config,
  /**
  The current document.
  */
  doc,
  /**
  The current selection.
  */
  selection,
  /**
  @internal
  */
  values, computeSlot, tr) {
    _classCallCheck(this, EditorState);
    this.config = config;
    this.doc = doc;
    this.selection = selection;
    this.values = values;
    this.status = config.statusTemplate.slice();
    this.computeSlot = computeSlot;
    // Fill in the computed state immediately, so that further queries
    // for it made during the update return this state
    if (tr) tr._state = this;
    for (var _i27 = 0; _i27 < this.config.dynamicSlots.length; _i27++) ensureAddr(this, _i27 << 1);
    this.computeSlot = null;
  }
  _createClass(EditorState, [{
    key: "field",
    value: function field(_field) {
      var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var addr = this.config.address[_field.id];
      if (addr == null) {
        if (require) throw new RangeError("Field is not present in this state");
        return undefined;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
  }, {
    key: "update",
    value: function update() {
      for (var _len4 = arguments.length, specs = new Array(_len4), _key = 0; _key < _len4; _key++) {
        specs[_key] = arguments[_key];
      }
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
  }, {
    key: "applyTransaction",
    value: function applyTransaction(tr) {
      var _this7 = this;
      var conf = this.config,
        _conf = conf,
        base = _conf.base,
        compartments = _conf.compartments;
      var _iterator22 = _createForOfIteratorHelper(tr.effects),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var effect = _step22.value;
          if (effect.is(Compartment.reconfigure)) {
            if (conf) {
              compartments = new Map();
              conf.compartments.forEach(function (val, key) {
                return compartments.set(key, val);
              });
              conf = null;
            }
            compartments.set(effect.value.compartment, effect.value.extension);
          } else if (effect.is(StateEffect.reconfigure)) {
            conf = null;
            base = effect.value;
          } else if (effect.is(StateEffect.appendConfig)) {
            conf = null;
            base = asArray(base).concat(effect.value);
          }
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      var startValues;
      if (!conf) {
        conf = Configuration.resolve(base, compartments, this);
        var intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(function () {
          return null;
        }), function (state, slot) {
          return slot.reconfigure(state, _this7);
        }, null);
        startValues = intermediateState.values;
      } else {
        startValues = tr.startState.values.slice();
      }
      new EditorState(conf, tr.newDoc, tr.newSelection, startValues, function (state, slot) {
        return slot.update(state, tr);
      }, tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
  }, {
    key: "replaceSelection",
    value: function replaceSelection(text) {
      if (typeof text == "string") text = this.toText(text);
      return this.changeByRange(function (range) {
        return {
          changes: {
            from: range.from,
            to: range.to,
            insert: text
          },
          range: EditorSelection.cursor(range.from + text.length)
        };
      });
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
  }, {
    key: "changeByRange",
    value: function changeByRange(f) {
      var sel = this.selection;
      var result1 = f(sel.ranges[0]);
      var changes = this.changes(result1.changes),
        ranges = [result1.range];
      var effects = asArray(result1.effects);
      for (var _i28 = 1; _i28 < sel.ranges.length; _i28++) {
        var result = f(sel.ranges[_i28]);
        var newChanges = this.changes(result.changes),
          newMapped = newChanges.map(changes);
        for (var j = 0; j < _i28; j++) ranges[j] = ranges[j].map(newMapped);
        var mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
      }
      return {
        changes: changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects: effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
  }, {
    key: "changes",
    value: function changes() {
      var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (spec instanceof ChangeSet) return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
    */
  }, {
    key: "toText",
    value: function toText(string) {
      return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
  }, {
    key: "sliceDoc",
    value: function sliceDoc() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
      return this.doc.sliceString(from, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
  }, {
    key: "facet",
    value: function facet(_facet) {
      var addr = this.config.address[_facet.id];
      if (addr == null) return _facet["default"];
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
  }, {
    key: "toJSON",
    value: function toJSON(fields) {
      var result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields) for (var prop in fields) {
        var value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
  }, {
    key: "tabSize",
    get:
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    function get() {
      return this.facet(EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
  }, {
    key: "lineBreak",
    get: function get() {
      return this.facet(EditorState.lineSeparator) || "\n";
    }
    /**
    Returns true when the editor is
    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
    */
  }, {
    key: "readOnly",
    get: function get() {
      return this.facet(readOnly);
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    
    If additional arguments are passed, they will be inserted in
    place of markers like `$1` (for the first value) and `$2`, etc.
    A single `$` is equivalent to `$1`, and `$$` will produce a
    literal dollar sign.
    */
  }, {
    key: "phrase",
    value: function phrase(_phrase) {
      for (var _len5 = arguments.length, insert = new Array(_len5 > 1 ? _len5 - 1 : 0), _key2 = 1; _key2 < _len5; _key2++) {
        insert[_key2 - 1] = arguments[_key2];
      }
      var _iterator23 = _createForOfIteratorHelper(this.facet(EditorState.phrases)),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var map = _step23.value;
          if (Object.prototype.hasOwnProperty.call(map, _phrase)) {
            _phrase = map[_phrase];
            break;
          }
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      if (insert.length) _phrase = _phrase.replace(/\$(\$|\d*)/g, function (m, i) {
        if (i == "$") return "$";
        var n = +(i || 1);
        return !n || n > insert.length ? m : insert[n - 1];
      });
      return _phrase;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    
    Examples of language data fields are...
    
    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
      comment syntax.
    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
      for providing language-specific completion sources.
    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
      characters that should be considered part of words in this
      language.
    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
      bracket closing behavior.
    */
  }, {
    key: "languageDataAt",
    value: function languageDataAt(name, pos) {
      var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var values = [];
      var _iterator24 = _createForOfIteratorHelper(this.facet(languageData)),
        _step24;
      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var provider = _step24.value;
          var _iterator25 = _createForOfIteratorHelper(provider(this, pos, side)),
            _step25;
          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var result = _step25.value;
              if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
  }, {
    key: "charCategorizer",
    value: function charCategorizer(at) {
      return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
  }, {
    key: "wordAt",
    value: function wordAt(pos) {
      var _this$doc$lineAt = this.doc.lineAt(pos),
        text = _this$doc$lineAt.text,
        from = _this$doc$lineAt.from,
        length = _this$doc$lineAt.length;
      var cat = this.charCategorizer(pos);
      var start = pos - from,
        end = pos - from;
      while (start > 0) {
        var prev = findClusterBreak(text, start, false);
        if (cat(text.slice(prev, start)) != CharCategory.Word) break;
        start = prev;
      }
      while (end < length) {
        var next = findClusterBreak(text, end);
        if (cat(text.slice(end, next)) != CharCategory.Word) break;
        end = next;
      }
      return start == end ? null : EditorSelection.range(start + from, end + from);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var fields = arguments.length > 2 ? arguments[2] : undefined;
      if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
      var fieldInit = [];
      if (fields) {
        var _loop4 = function _loop4() {
          if (Object.prototype.hasOwnProperty.call(json, prop)) {
            var field = fields[prop],
              value = json[prop];
            fieldInit.push(field.init(function (state) {
              return field.spec.fromJSON(value, state);
            }));
          }
        };
        for (var prop in fields) {
          _loop4();
        }
      }
      return EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
  }, {
    key: "create",
    value: function create() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var configuration = Configuration.resolve(config.extensions || [], new Map());
      var doc = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
      var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
      checkSelection(selection, doc.length);
      if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
      return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(function () {
        return null;
      }), function (state, slot) {
        return slot.create(state);
      }, null);
    }
  }]);
  return EditorState;
}();
/**
A facet that, when enabled, causes the editor to allow multiple
ranges to be selected. Be careful though, because by default the
editor relies on the native DOM selection, which cannot handle
multiple selections. An extension like
[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
secondary selections visible to the user.
*/
exports.EditorState = EditorState;
EditorState.allowMultipleSelections = allowMultipleSelections;
/**
Configures the tab size to use in this state. The first
(highest-precedence) value of the facet is used. If no value is
given, this defaults to 4.
*/
EditorState.tabSize = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : 4;
  }
});
/**
The line separator to use. By default, any of `"\n"`, `"\r\n"`
and `"\r"` is treated as a separator when splitting lines, and
lines are joined with `"\n"`.

When you configure a value here, only that precise separator
will be used, allowing you to round-trip documents through the
editor without normalizing line separators.
*/
EditorState.lineSeparator = lineSeparator;
/**
This facet controls the value of the
[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
consulted by commands and extensions that implement editing
functionality to determine whether they should apply. It
defaults to false, but when its highest-precedence value is
`true`, such functionality disables itself.

Not to be confused with
[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
controls whether the editor's DOM is set to be editable (and
thus focusable).
*/
EditorState.readOnly = readOnly;
/**
Registers translation phrases. The
[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
all objects registered with this facet to find translations for
its argument.
*/
EditorState.phrases = /*@__PURE__*/Facet.define({
  compare: function compare(a, b) {
    var kA = Object.keys(a),
      kB = Object.keys(b);
    return kA.length == kB.length && kA.every(function (k) {
      return a[k] == b[k];
    });
  }
});
/**
A facet used to register [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
*/
EditorState.languageData = languageData;
/**
Facet used to register change filters, which are called for each
transaction (unless explicitly
[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
part of the transaction's changes.

Such a function can return `true` to indicate that it doesn't
want to do anything, `false` to completely stop the changes in
the transaction, or a set of ranges in which changes should be
suppressed. Such ranges are represented as an array of numbers,
with each pair of two numbers indicating the start and end of a
range. So for example `[10, 20, 100, 110]` suppresses changes
between 10 and 20, and between 100 and 110.
*/
EditorState.changeFilter = changeFilter;
/**
Facet used to register a hook that gets a chance to update or
replace transaction specs before they are applied. This will
only be applied for transactions that don't have
[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
can either return a single transaction spec (possibly the input
transaction), or an array of specs (which will be combined in
the same way as the arguments to
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

When possible, it is recommended to avoid accessing
[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
since it will force creation of a state that will then be
discarded again, if the transaction is actually filtered.

(This functionality should be used with care. Indiscriminately
modifying transaction is likely to break something or degrade
the user experience.)
*/
EditorState.transactionFilter = transactionFilter;
/**
This is a more limited form of
[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
which can only add
[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
of filter runs even if the transaction has disabled regular
[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
for effects that don't need to touch the changes or selection,
but do want to process every transaction.

Extenders run _after_ filters, when both are present.
*/
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

/**
Utility function for combining behaviors to fill in a config
object from an array of provided configs. `defaults` should hold
default values for all optional fields in `Config`.

The function will, by default, error
when a field gets two values that aren't `===`-equal, but you can
provide combine functions per field to do something else.
*/
function combineConfig(configs, defaults) {
  var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var result = {};
  var _iterator26 = _createForOfIteratorHelper(configs),
    _step26;
  try {
    for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
      var config = _step26.value;
      for (var _i29 = 0, _Object$keys = Object.keys(config); _i29 < _Object$keys.length; _i29++) {
        var _key3 = _Object$keys[_i29];
        var value = config[_key3],
          current = result[_key3];
        if (current === undefined) result[_key3] = value;else if (current === value || value === undefined) ; // No conflict
        else if (Object.hasOwnProperty.call(combine, _key3)) result[_key3] = combine[_key3](current, value);else throw new Error("Config merge conflict for field " + _key3);
      }
    }
  } catch (err) {
    _iterator26.e(err);
  } finally {
    _iterator26.f();
  }
  for (var key in defaults) if (result[key] === undefined) result[key] = defaults[key];
  return result;
}

/**
Each range is associated with a value, which must inherit from
this class.
*/
var RangeValue = /*#__PURE__*/function () {
  function RangeValue() {
    _classCallCheck(this, RangeValue);
  }
  _createClass(RangeValue, [{
    key: "eq",
    value:
    /**
    Compare this value with another value. Used when comparing
    rangesets. The default implementation compares by identity.
    Unless you are only creating a fixed number of unique instances
    of your value type, it is a good idea to implement this
    properly.
    */
    function eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
    */
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      return Range.create(from, to, this);
    }
  }]);
  return RangeValue;
}();
exports.RangeValue = RangeValue;
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
/**
A range associates a value with a range of positions.
*/
var Range = /*#__PURE__*/function () {
  function Range(
  /**
  The range's start position.
  */
  from,
  /**
  Its end position.
  */
  to,
  /**
  The value associated with this range.
  */
  value) {
    _classCallCheck(this, Range);
    this.from = from;
    this.to = to;
    this.value = value;
  }
  /**
  @internal
  */
  _createClass(Range, null, [{
    key: "create",
    value: function create(from, to, value) {
      return new Range(from, to, value);
    }
  }]);
  return Range;
}();
exports.Range = Range;
function cmpRange(a, b) {
  return a.from - b.from || a.value.startSide - b.value.startSide;
}
var Chunk = /*#__PURE__*/function () {
  function Chunk(from, to, value,
  // Chunks are marked with the largest point that occurs
  // in them (or -1 for no points), so that scans that are
  // only interested in points (such as the
  // heightmap-related logic) can skip range-only chunks.
  maxPoint) {
    _classCallCheck(this, Chunk);
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  _createClass(Chunk, [{
    key: "length",
    get: function get() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
  }, {
    key: "findIndex",
    value: function findIndex(pos, side, end) {
      var startAt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var arr = end ? this.to : this.from;
      for (var lo = startAt, hi = arr.length;;) {
        if (lo == hi) return lo;
        var mid = lo + hi >> 1;
        var diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo) return diff >= 0 ? lo : hi;
        if (diff >= 0) hi = mid;else lo = mid + 1;
      }
    }
  }, {
    key: "between",
    value: function between(offset, from, to, f) {
      for (var _i30 = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, _i30); _i30 < e; _i30++) if (f(this.from[_i30] + offset, this.to[_i30] + offset, this.value[_i30]) === false) return false;
    }
  }, {
    key: "map",
    value: function map(offset, changes) {
      var value = [],
        from = [],
        to = [],
        newPos = -1,
        maxPoint = -1;
      for (var _i31 = 0; _i31 < this.value.length; _i31++) {
        var val = this.value[_i31],
          curFrom = this.from[_i31] + offset,
          curTo = this.to[_i31] + offset,
          newFrom = void 0,
          newTo = void 0;
        if (curFrom == curTo) {
          var mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null) continue;
          newFrom = newTo = mapped;
          if (val.startSide != val.endSide) {
            newTo = changes.mapPos(curFrom, val.endSide);
            if (newTo < newFrom) continue;
          }
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
        if (newPos < 0) newPos = newFrom;
        if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return {
        mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
        pos: newPos
      };
    }
  }]);
  return Chunk;
}();
/**
A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
structure.
*/
var RangeSet = /*#__PURE__*/function () {
  function RangeSet(
  /**
  @internal
  */
  chunkPos,
  /**
  @internal
  */
  chunk,
  /**
  @internal
  */
  nextLayer,
  /**
  @internal
  */
  maxPoint) {
    _classCallCheck(this, RangeSet);
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  _createClass(RangeSet, [{
    key: "length",
    get:
    /**
    @internal
    */
    function get() {
      var last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
  }, {
    key: "size",
    get: function get() {
      if (this.isEmpty) return 0;
      var size = this.nextLayer.size;
      var _iterator27 = _createForOfIteratorHelper(this.chunk),
        _step27;
      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var chunk = _step27.value;
          size += chunk.value.length;
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }
      return size;
    }
    /**
    @internal
    */
  }, {
    key: "chunkEnd",
    value: function chunkEnd(index) {
      return this.chunkPos[index] + this.chunk[index].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (Note: The type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
  }, {
    key: "update",
    value: function update(updateSpec) {
      var _updateSpec$add = updateSpec.add,
        add = _updateSpec$add === void 0 ? [] : _updateSpec$add,
        _updateSpec$sort = updateSpec.sort,
        sort = _updateSpec$sort === void 0 ? false : _updateSpec$sort,
        _updateSpec$filterFro = updateSpec.filterFrom,
        filterFrom = _updateSpec$filterFro === void 0 ? 0 : _updateSpec$filterFro,
        _updateSpec$filterTo = updateSpec.filterTo,
        filterTo = _updateSpec$filterTo === void 0 ? this.length : _updateSpec$filterTo;
      var filter = updateSpec.filter;
      if (add.length == 0 && !filter) return this;
      if (sort) add = add.slice().sort(cmpRange);
      if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
      var cur = new LayerCursor(this, null, -1)["goto"](0),
        i = 0,
        spill = [];
      var builder = new RangeSetBuilder();
      while (cur.value || i < add.length) {
        if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
          var range = add[i++];
          if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
        } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
          cur.nextChunk();
        } else {
          if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
            if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(Range.create(cur.from, cur.to, cur.value));
          }
          cur.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
        add: spill,
        filter: filter,
        filterFrom: filterFrom,
        filterTo: filterTo
      }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
  }, {
    key: "map",
    value: function map(changes) {
      if (changes.empty || this.isEmpty) return this;
      var chunks = [],
        chunkPos = [],
        maxPoint = -1;
      for (var _i32 = 0; _i32 < this.chunk.length; _i32++) {
        var start = this.chunkPos[_i32],
          chunk = this.chunk[_i32];
        var touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          var _chunk$map = chunk.map(start, changes),
            mapped = _chunk$map.mapped,
            pos = _chunk$map.pos;
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      var next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
  }, {
    key: "between",
    value: function between(from, to, f) {
      if (this.isEmpty) return;
      for (var _i33 = 0; _i33 < this.chunk.length; _i33++) {
        var start = this.chunkPos[_i33],
          chunk = this.chunk[_i33];
        if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
      }
      this.nextLayer.between(from, to, f);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
  }, {
    key: "iter",
    value: function iter() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return HeapCursor.from([this])["goto"](from);
    }
    /**
    @internal
    */
  }, {
    key: "isEmpty",
    get: function get() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
  }], [{
    key: "create",
    value: function create(chunkPos, chunk, nextLayer, maxPoint) {
      return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
    }
  }, {
    key: "iter",
    value: function iter(sets) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return HeapCursor.from(sets)["goto"](from);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
  }, {
    key: "compare",
    value: function compare(oldSets, newSets,
    /**
    This indicates how the underlying data changed between these
    ranges, and is needed to synchronize the iteration. `from` and
    `to` are coordinates in the _new_ space, after these changes.
    */
    textDiff, comparator) {
      var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
      var a = oldSets.filter(function (set) {
        return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
      });
      var b = newSets.filter(function (set) {
        return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
      });
      var sharedChunks = findSharedChunks(a, b, textDiff);
      var sideA = new SpanCursor(a, sharedChunks, minPointSize);
      var sideB = new SpanCursor(b, sharedChunks, minPointSize);
      textDiff.iterGaps(function (fromA, fromB, length) {
        return _compare(sideA, fromA, sideB, fromB, length, comparator);
      });
      if (textDiff.empty && textDiff.length == 0) _compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
  }, {
    key: "eq",
    value: function eq(oldSets, newSets) {
      var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var to = arguments.length > 3 ? arguments[3] : undefined;
      if (to == null) to = 1000000000 /* C.Far */ - 1;
      var a = oldSets.filter(function (set) {
        return !set.isEmpty && newSets.indexOf(set) < 0;
      });
      var b = newSets.filter(function (set) {
        return !set.isEmpty && oldSets.indexOf(set) < 0;
      });
      if (a.length != b.length) return false;
      if (!a.length) return true;
      var sharedChunks = findSharedChunks(a, b);
      var sideA = new SpanCursor(a, sharedChunks, 0)["goto"](from),
        sideB = new SpanCursor(b, sharedChunks, 0)["goto"](from);
      for (;;) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
        if (sideA.to > to) return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
    of the iteration.
    */
  }, {
    key: "spans",
    value: function spans(sets, from, to, iterator) {
      var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
      var cursor = new SpanCursor(sets, null, minPointSize)["goto"](from),
        pos = from;
      var openRanges = cursor.openStart;
      for (;;) {
        var curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          var active = cursor.activeForPoint(cursor.to);
          var openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
          iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
          openRanges = Math.min(cursor.openEnd(curTo), active.length);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, openRanges);
          openRanges = cursor.openEnd(curTo);
        }
        if (cursor.to > to) return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
        pos = cursor.to;
        cursor.next();
      }
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
  }, {
    key: "of",
    value: function of(ranges) {
      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var build = new RangeSetBuilder();
      var _iterator28 = _createForOfIteratorHelper(ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges),
        _step28;
      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var range = _step28.value;
          build.add(range.from, range.to, range.value);
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
      return build.finish();
    }
  }]);
  return RangeSet;
}();
/**
The empty set of ranges.
*/
exports.RangeSet = RangeSet;
RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1) for (var prev = ranges[0], _i34 = 1; _i34 < ranges.length; _i34++) {
    var cur = ranges[_i34];
    if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
    prev = cur;
  }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
/**
A range set builder is a data structure that helps build up a
[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
*/
var RangeSetBuilder = /*#__PURE__*/function () {
  /**
  Create an empty builder.
  */
  function RangeSetBuilder() {
    _classCallCheck(this, RangeSetBuilder);
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1000000000 /* C.Far */;
    this.lastTo = -1000000000 /* C.Far */;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  _createClass(RangeSetBuilder, [{
    key: "finishChunk",
    value: function finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
  }, {
    key: "add",
    value: function add(from, to, value) {
      if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
    }
    /**
    @internal
    */
  }, {
    key: "addInner",
    value: function addInner(from, to, value) {
      var diff = from - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0) return false;
      if (this.from.length == 250 /* C.ChunkSize */) this.finishChunk(true);
      if (this.chunkStart < 0) this.chunkStart = from;
      this.from.push(from - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from;
      this.lastTo = to;
      this.value.push(value);
      if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
      return true;
    }
    /**
    @internal
    */
  }, {
    key: "addChunk",
    value: function addChunk(from, chunk) {
      if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
      if (this.from.length) this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from);
      var last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from;
      this.lastTo = chunk.to[last] + from;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
  }, {
    key: "finish",
    value: function finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
  }, {
    key: "finishInner",
    value: function finishInner(next) {
      if (this.from.length) this.finishChunk(false);
      if (this.chunks.length == 0) return next;
      var result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null; // Make sure further `add` calls produce errors
      return result;
    }
  }]);
  return RangeSetBuilder;
}();
exports.RangeSetBuilder = RangeSetBuilder;
function findSharedChunks(a, b, textDiff) {
  var inA = new Map();
  var _iterator29 = _createForOfIteratorHelper(a),
    _step29;
  try {
    for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
      var set = _step29.value;
      for (var _i35 = 0; _i35 < set.chunk.length; _i35++) if (set.chunk[_i35].maxPoint <= 0) inA.set(set.chunk[_i35], set.chunkPos[_i35]);
    }
  } catch (err) {
    _iterator29.e(err);
  } finally {
    _iterator29.f();
  }
  var shared = new Set();
  var _iterator30 = _createForOfIteratorHelper(b),
    _step30;
  try {
    for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
      var _set = _step30.value;
      for (var _i36 = 0; _i36 < _set.chunk.length; _i36++) {
        var known = inA.get(_set.chunk[_i36]);
        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == _set.chunkPos[_i36] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + _set.chunk[_i36].length))) shared.add(_set.chunk[_i36]);
      }
    }
  } catch (err) {
    _iterator30.e(err);
  } finally {
    _iterator30.f();
  }
  return shared;
}
var LayerCursor = /*#__PURE__*/function () {
  function LayerCursor(layer, skip, minPoint) {
    var rank = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, LayerCursor);
    this.layer = layer;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  _createClass(LayerCursor, [{
    key: "startSide",
    get: function get() {
      return this.value ? this.value.startSide : 0;
    }
  }, {
    key: "endSide",
    get: function get() {
      return this.value ? this.value.endSide : 0;
    }
  }, {
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
  }, {
    key: "gotoInner",
    value: function gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        var next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
        this.chunkIndex++;
        forward = false;
      }
      if (this.chunkIndex < this.layer.chunk.length) {
        var rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
        if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
      }
      this.next();
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
    }
  }, {
    key: "next",
    value: function next() {
      for (;;) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1000000000 /* C.Far */;
          this.value = null;
          break;
        } else {
          var chunkPos = this.layer.chunkPos[this.chunkIndex],
            chunk = this.layer.chunk[this.chunkIndex];
          var from = chunkPos + chunk.from[this.rangeIndex];
          this.from = from;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          this.setRangeIndex(this.rangeIndex + 1);
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
        }
      }
    }
  }, {
    key: "setRangeIndex",
    value: function setRangeIndex(index) {
      if (index == this.layer.chunk[this.chunkIndex].value.length) {
        this.chunkIndex++;
        if (this.skip) {
          while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) this.chunkIndex++;
        }
        this.rangeIndex = 0;
      } else {
        this.rangeIndex = index;
      }
    }
  }, {
    key: "nextChunk",
    value: function nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
  }, {
    key: "compare",
    value: function compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
    }
  }]);
  return LayerCursor;
}();
var HeapCursor = /*#__PURE__*/function () {
  function HeapCursor(heap) {
    _classCallCheck(this, HeapCursor);
    this.heap = heap;
  }
  _createClass(HeapCursor, [{
    key: "startSide",
    get: function get() {
      return this.value ? this.value.startSide : 0;
    }
  }, {
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      var _iterator31 = _createForOfIteratorHelper(this.heap),
        _step31;
      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var cur = _step31.value;
          cur["goto"](pos, side);
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }
      for (var _i37 = this.heap.length >> 1; _i37 >= 0; _i37--) heapBubble(this.heap, _i37);
      this.next();
      return this;
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      var _iterator32 = _createForOfIteratorHelper(this.heap),
        _step32;
      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var cur = _step32.value;
          cur.forward(pos, side);
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }
      for (var _i38 = this.heap.length >> 1; _i38 >= 0; _i38--) heapBubble(this.heap, _i38);
      if ((this.to - pos || this.value.endSide - side) < 0) this.next();
    }
  }, {
    key: "next",
    value: function next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1000000000 /* C.Far */;
        this.value = null;
        this.rank = -1;
      } else {
        var top = this.heap[0];
        this.from = top.from;
        this.to = top.to;
        this.value = top.value;
        this.rank = top.rank;
        if (top.value) top.next();
        heapBubble(this.heap, 0);
      }
    }
  }], [{
    key: "from",
    value: function from(sets) {
      var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var minPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var heap = [];
      for (var _i39 = 0; _i39 < sets.length; _i39++) {
        for (var cur = sets[_i39]; !cur.isEmpty; cur = cur.nextLayer) {
          if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, _i39));
        }
      }
      return heap.length == 1 ? heap[0] : new HeapCursor(heap);
    }
  }]);
  return HeapCursor;
}();
function heapBubble(heap, index) {
  for (var cur = heap[index];;) {
    var childIndex = (index << 1) + 1;
    if (childIndex >= heap.length) break;
    var child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur.compare(child) < 0) break;
    heap[childIndex] = cur;
    heap[index] = child;
    index = childIndex;
  }
}
var SpanCursor = /*#__PURE__*/function () {
  function SpanCursor(sets, skip, minPoint) {
    _classCallCheck(this, SpanCursor);
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    // A currently active point range, if any
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1000000000 /* C.Far */;
    this.endSide = 0;
    // The amount of open active ranges at the start of the iterator.
    // Not including points.
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  _createClass(SpanCursor, [{
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      this.cursor["goto"](pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) this.removeActive(this.minActive);
      this.cursor.forward(pos, side);
    }
  }, {
    key: "removeActive",
    value: function removeActive(index) {
      remove(this.active, index);
      remove(this.activeTo, index);
      remove(this.activeRank, index);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
  }, {
    key: "addActive",
    value: function addActive(trackOpen) {
      var i = 0,
        _this$cursor = this.cursor,
        value = _this$cursor.value,
        to = _this$cursor.to,
        rank = _this$cursor.rank;
      while (i < this.activeRank.length && this.activeRank[i] <= rank) i++;
      insert(this.active, i, value);
      insert(this.activeTo, i, to);
      insert(this.activeRank, i, rank);
      if (trackOpen) insert(trackOpen, i, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
  }, {
    key: "next",
    value: function next() {
      var from = this.to,
        wasPoint = this.point;
      this.point = null;
      var trackOpen = this.openStart < 0 ? [] : null;
      for (;;) {
        var a = this.minActive;
        if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a] > from) {
            this.to = this.activeTo[a];
            this.endSide = this.active[a].endSide;
            break;
          }
          this.removeActive(a);
          if (trackOpen) remove(trackOpen, a);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1000000000 /* C.Far */;
          break;
        } else if (this.cursor.from > from) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          var nextVal = this.cursor.value;
          if (!nextVal.point) {
            // Opening a range
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
            // Ignore any non-empty points that end precisely at the end of the prev point
            this.cursor.next();
          } else {
            // New point
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            this.cursor.next();
            this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        this.openStart = 0;
        for (var _i40 = trackOpen.length - 1; _i40 >= 0 && trackOpen[_i40] < from; _i40--) this.openStart++;
      }
    }
  }, {
    key: "activeForPoint",
    value: function activeForPoint(to) {
      if (!this.active.length) return this.active;
      var active = [];
      for (var _i41 = this.active.length - 1; _i41 >= 0; _i41--) {
        if (this.activeRank[_i41] < this.pointRank) break;
        if (this.activeTo[_i41] > to || this.activeTo[_i41] == to && this.active[_i41].endSide >= this.point.endSide) active.push(this.active[_i41]);
      }
      return active.reverse();
    }
  }, {
    key: "openEnd",
    value: function openEnd(to) {
      var open = 0;
      for (var _i42 = this.activeTo.length - 1; _i42 >= 0 && this.activeTo[_i42] > to; _i42--) open++;
      return open;
    }
  }]);
  return SpanCursor;
}();
function _compare(a, startA, b, startB, length, comparator) {
  a["goto"](startA);
  b["goto"](startB);
  var endB = startB + length;
  var pos = startB,
    dPos = startB - startA;
  for (;;) {
    var diff = a.to + dPos - b.to || a.endSide - b.endSide;
    var end = diff < 0 ? a.to + dPos : b.to,
      clipEnd = Math.min(end, endB);
    if (a.point || b.point) {
      if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
    }
    if (end > endB) break;
    pos = end;
    if (diff <= 0) a.next();
    if (diff >= 0) b.next();
  }
}
function sameValues(a, b) {
  if (a.length != b.length) return false;
  for (var _i43 = 0; _i43 < a.length; _i43++) if (a[_i43] != b[_i43] && !a[_i43].eq(b[_i43])) return false;
  return true;
}
function remove(array, index) {
  for (var _i44 = index, e = array.length - 1; _i44 < e; _i44++) array[_i44] = array[_i44 + 1];
  array.pop();
}
function insert(array, index, value) {
  for (var _i45 = array.length - 1; _i45 >= index; _i45--) array[_i45 + 1] = array[_i45];
  array[index] = value;
}
function findMinIndex(value, array) {
  var found = -1,
    foundPos = 1000000000 /* C.Far */;
  for (var _i46 = 0; _i46 < array.length; _i46++) if ((array[_i46] - foundPos || value[_i46].endSide - value[found].endSide) < 0) {
    found = _i46;
    foundPos = array[_i46];
  }
  return found;
}

/**
Count the column position at the given offset into the string,
taking extending characters and tab size into account.
*/
function countColumn(string, tabSize) {
  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string.length;
  var n = 0;
  for (var _i47 = 0; _i47 < to;) {
    if (string.charCodeAt(_i47) == 9) {
      n += tabSize - n % tabSize;
      _i47++;
    } else {
      n++;
      _i47 = findClusterBreak(string, _i47);
    }
  }
  return n;
}
/**
Find the offset that corresponds to the given column position in a
string, taking extending characters and tab size into account. By
default, the string length is returned when it is too short to
reach the column. Pass `strict` true to make it return -1 in that
situation.
*/
function findColumn(string, col, tabSize, strict) {
  for (var _i48 = 0, n = 0;;) {
    if (n >= col) return _i48;
    if (_i48 == string.length) break;
    n += string.charCodeAt(_i48) == 9 ? tabSize - n % tabSize : 1;
    _i48 = findClusterBreak(string, _i48);
  }
  return strict === true ? -1 : string.length;
}

},{}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeHoverTooltips = exports.__test = exports.WidgetType = exports.ViewUpdate = exports.ViewPlugin = exports.RectangleMarker = exports.MatchDecorator = exports.GutterMarker = exports.EditorView = exports.Direction = exports.Decoration = exports.BlockType = exports.BlockInfo = exports.BidiSpan = void 0;
exports.crosshairCursor = crosshairCursor;
exports.drawSelection = drawSelection;
exports.dropCursor = dropCursor;
exports.getPanel = getPanel;
exports.getTooltip = getTooltip;
exports.gutter = gutter;
exports.gutterLineClass = void 0;
exports.gutters = gutters;
exports.hasHoverTooltips = hasHoverTooltips;
exports.highlightActiveLine = highlightActiveLine;
exports.highlightActiveLineGutter = highlightActiveLineGutter;
exports.highlightSpecialChars = highlightSpecialChars;
exports.highlightTrailingWhitespace = highlightTrailingWhitespace;
exports.highlightWhitespace = highlightWhitespace;
exports.hoverTooltip = hoverTooltip;
exports.keymap = void 0;
exports.layer = layer;
exports.lineNumberMarkers = void 0;
exports.lineNumbers = lineNumbers;
exports.logException = logException;
exports.panels = panels;
exports.placeholder = placeholder;
exports.rectangularSelection = rectangularSelection;
exports.repositionTooltips = repositionTooltips;
exports.runScopeHandlers = runScopeHandlers;
exports.scrollPastEnd = scrollPastEnd;
exports.showTooltip = exports.showPanel = void 0;
exports.tooltips = tooltips;
var _state = require("@codemirror/state");
var _styleMod = require("style-mod");
var _w3cKeyname = require("w3c-keyname");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function getSelection(root) {
  var target;
  // Browsers differ on whether shadow roots have a getSelection
  // method. If it exists, use that, otherwise, call it on the
  // document.
  if (root.nodeType == 11) {
    // Shadow root
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function deepActiveElement(doc) {
  var elt = doc.activeElement;
  while (elt && elt.shadowRoot) elt = elt.shadowRoot.activeElement;
  return elt;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode) return false;
  try {
    // Firefox will raise 'permission denied' errors when accessing
    // properties of `sel.anchorNode` when it's in a generated CSS
    // element.
    return contains(dom, selection.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
}
// Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0;; index++) {
    node = node.previousSibling;
    if (!node) return index;
  }
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (;;) {
    if (node == targetNode && off == targetOff) return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV") return false;
      var parent = node.parentNode;
      if (!parent || parent.nodeType != 1) return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false") return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect, left) {
  var x = left ? rect.left : rect.right;
  return {
    left: x,
    right: x,
    top: rect.top,
    bottom: rect.bottom
  };
}
function windowRect(win) {
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
  var doc = dom.ownerDocument,
    win = doc.defaultView || window;
  for (var cur = dom; cur;) {
    if (cur.nodeType == 1) {
      // Element
      var bounding = void 0,
        top = cur == doc.body;
      if (top) {
        bounding = windowRect(win);
      } else {
        if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
          cur = cur.assignedSlot || cur.parentNode;
          continue;
        }
        var _rect = cur.getBoundingClientRect();
        // Make sure scrollbar width isn't included in the rectangle
        bounding = {
          left: _rect.left,
          right: _rect.left + cur.clientWidth,
          top: _rect.top,
          bottom: _rect.top + cur.clientHeight
        };
      }
      var moveX = 0,
        moveY = 0;
      if (y == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        var rectHeight = rect.bottom - rect.top,
          boundingHeight = bounding.bottom - bounding.top;
        var targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        var targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top) {
          win.scrollBy(moveX, moveY);
        } else {
          var movedX = 0,
            movedY = 0;
          if (moveY) {
            var start = cur.scrollTop;
            cur.scrollTop += moveY;
            movedY = cur.scrollTop - start;
          }
          if (moveX) {
            var _start = cur.scrollLeft;
            cur.scrollLeft += moveX;
            movedX = cur.scrollLeft - _start;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1) x = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1) y = "nearest";
        }
      }
      if (top) break;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      // A shadow root
      cur = cur.host;
    } else {
      break;
    }
  }
}
function scrollableParent(dom) {
  var doc = dom.ownerDocument;
  for (var cur = dom.parentNode; cur;) {
    if (cur == doc.body) {
      break;
    } else if (cur.nodeType == 1) {
      if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth) return cur;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      cur = cur.host;
    } else {
      break;
    }
  }
  return null;
}
var DOMSelectionState = /*#__PURE__*/function () {
  function DOMSelectionState() {
    _classCallCheck(this, DOMSelectionState);
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  _createClass(DOMSelectionState, [{
    key: "eq",
    value: function eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
  }, {
    key: "setRange",
    value: function setRange(range) {
      this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
    }
  }, {
    key: "set",
    value: function set(anchorNode, anchorOffset, focusNode, focusOffset) {
      this.anchorNode = anchorNode;
      this.anchorOffset = anchorOffset;
      this.focusNode = focusNode;
      this.focusOffset = focusOffset;
    }
  }]);
  return DOMSelectionState;
}();
var preventScrollSupported = null;
// Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.
function focusPreventScroll(dom) {
  if (dom.setActive) return dom.setActive(); // in IE
  if (preventScrollSupported) return dom.focus(preventScrollSupported);
  var stack = [];
  for (var cur = dom; cur; cur = cur.parentNode) {
    stack.push(cur, cur.scrollTop, cur.scrollLeft);
    if (cur == cur.ownerDocument) break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = {
        preventScroll: true
      };
      return true;
    }
  } : undefined);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (var i = 0; i < stack.length;) {
      var elt = stack[i++],
        top = stack[i++],
        left = stack[i++];
      if (elt.scrollTop != top) elt.scrollTop = top;
      if (elt.scrollLeft != left) elt.scrollLeft = left;
    }
  }
}
var scratchRange;
function textRange(node, from) {
  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
  var range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to);
  range.setStart(node, from);
  return range;
}
function dispatchKey(elt, name, code) {
  var options = {
    key: name,
    code: name,
    keyCode: code,
    which: code,
    cancelable: true
  };
  var down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  var up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length) node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc, selection) {
  var node = selection.focusNode,
    offset = selection.focusOffset;
  if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;
  for (;;) {
    if (offset) {
      if (node.nodeType != 1) return false;
      var prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false") offset--;else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
var DOMPos = /*#__PURE__*/function () {
  function DOMPos(node, offset) {
    var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    _classCallCheck(this, DOMPos);
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  _createClass(DOMPos, null, [{
    key: "before",
    value: function before(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom), precise);
    }
  }, {
    key: "after",
    value: function after(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  }]);
  return DOMPos;
}();
var noChildren = [];
var ContentView = /*#__PURE__*/function () {
  function ContentView() {
    _classCallCheck(this, ContentView);
    this.parent = null;
    this.dom = null;
    this.dirty = 2 /* Dirty.Node */;
  }
  _createClass(ContentView, [{
    key: "overrideDOMText",
    get: function get() {
      return null;
    }
  }, {
    key: "posAtStart",
    get: function get() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
  }, {
    key: "posAtEnd",
    get: function get() {
      return this.posAtStart + this.length;
    }
  }, {
    key: "posBefore",
    value: function posBefore(view) {
      var pos = this.posAtStart;
      var _iterator = _createForOfIteratorHelper(this.children),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          if (child == view) return pos;
          pos += child.length + child.breakAfter;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      throw new RangeError("Invalid child in posBefore");
    }
  }, {
    key: "posAfter",
    value: function posAfter(view) {
      return this.posBefore(view) + view.length;
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      if (this.dirty & 2 /* Dirty.Node */) {
        var parent = this.dom;
        var prev = null,
          next;
        var _iterator2 = _createForOfIteratorHelper(this.children),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            if (child.dirty) {
              if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                var contentView = ContentView.get(next);
                if (!contentView || !contentView.parent && contentView.canReuseDOM(child)) child.reuseDOM(next);
              }
              child.sync(view, track);
              child.dirty = 0 /* Dirty.Not */;
            }

            next = prev ? prev.nextSibling : parent.firstChild;
            if (track && !track.written && track.node == parent && next != child.dom) track.written = true;
            if (child.dom.parentNode == parent) {
              while (next && next != child.dom) next = rm$1(next);
            } else {
              parent.insertBefore(child.dom, next);
            }
            prev = child.dom;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (next && track && track.node == parent) track.written = true;
        while (next) next = rm$1(next);
      } else if (this.dirty & 1 /* Dirty.Child */) {
        var _iterator3 = _createForOfIteratorHelper(this.children),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _child = _step3.value;
            if (_child.dirty) {
              _child.sync(view, track);
              _child.dirty = 0 /* Dirty.Not */;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(_dom) {}
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      var after;
      if (node == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (;;) {
          var parent = node.parentNode;
          if (parent == this.dom) break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node == parent.firstChild) bias = -1;else bias = 1;
          }
          node = parent;
        }
        if (bias < 0) after = node;else after = node.nextSibling;
      }
      if (after == this.dom.firstChild) return 0;
      while (after && !ContentView.get(after)) after = after.nextSibling;
      if (!after) return this.length;
      for (var i = 0, pos = 0;; i++) {
        var child = this.children[i];
        if (child.dom == after) return pos;
        pos += child.length + child.breakAfter;
      }
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround(from, to) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var fromI = -1,
        fromStart = -1,
        toI = -1,
        toEnd = -1;
      for (var i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (pos < from && end > to) return child.domBoundsAround(from, to, pos);
        if (end >= from && fromI == -1) {
          fromI = i;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
  }, {
    key: "markDirty",
    value: function markDirty() {
      var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.dirty |= 2 /* Dirty.Node */;
      this.markParentsDirty(andParent);
    }
  }, {
    key: "markParentsDirty",
    value: function markParentsDirty(childList) {
      for (var parent = this.parent; parent; parent = parent.parent) {
        if (childList) parent.dirty |= 2 /* Dirty.Node */;
        if (parent.dirty & 1 /* Dirty.Child */) return;
        parent.dirty |= 1 /* Dirty.Child */;
        childList = false;
      }
    }
  }, {
    key: "setParent",
    value: function setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.dirty) this.markParentsDirty(true);
      }
    }
  }, {
    key: "setDOM",
    value: function setDOM(dom) {
      if (this.dom) this.dom.cmView = null;
      this.dom = dom;
      dom.cmView = this;
    }
  }, {
    key: "rootView",
    get: function get() {
      for (var v = this;;) {
        var parent = v.parent;
        if (!parent) return v;
        v = parent;
      }
    }
  }, {
    key: "replaceChildren",
    value: function replaceChildren(from, to) {
      var _this$children;
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noChildren;
      this.markDirty();
      for (var i = from; i < to; i++) {
        var child = this.children[i];
        if (child.parent == this) child.destroy();
      }
      (_this$children = this.children).splice.apply(_this$children, [from, to - from].concat(_toConsumableArray(children)));
      for (var _i = 0; _i < children.length; _i++) children[_i].setParent(this);
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation(_rec) {
      return false;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(_event) {
      return false;
    }
  }, {
    key: "childCursor",
    value: function childCursor() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      return new ChildCursor(this.children, pos, this.children.length);
    }
  }, {
    key: "childPos",
    value: function childPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return this.childCursor().findPos(pos, bias);
    }
  }, {
    key: "toString",
    value: function toString() {
      var name = this.constructor.name.replace("View", "");
      return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
  }, {
    key: "isEditable",
    get: function get() {
      return true;
    }
  }, {
    key: "isWidget",
    get: function get() {
      return false;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return false;
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, hasStart, openStart, openEnd) {
      return false;
    }
  }, {
    key: "become",
    value: function become(other) {
      return false;
    }
  }, {
    key: "canReuseDOM",
    value: function canReuseDOM(other) {
      return other.constructor == this.constructor;
    }
    // When this is a zero-length view with a side, this should return a
    // number <= 0 to indicate it is before its position, or a
    // number > 0 when after its position.
  }, {
    key: "getSide",
    value: function getSide() {
      return 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.parent = null;
    }
  }], [{
    key: "get",
    value: function get(node) {
      return node.cmView;
    }
  }]);
  return ContentView;
}();
ContentView.prototype.breakAfter = 0;
// Remove a DOM node and return its next sibling.
function rm$1(dom) {
  var next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
var ChildCursor = /*#__PURE__*/function () {
  function ChildCursor(children, pos, i) {
    _classCallCheck(this, ChildCursor);
    this.children = children;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }
  _createClass(ChildCursor, [{
    key: "findPos",
    value: function findPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (;;) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        var next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  }]);
  return ChildCursor;
}();
function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
  var children = parent.children;
  var before = children.length ? children[fromI] : null;
  var last = insert.length ? insert[insert.length - 1] : null;
  var breakAtEnd = last ? last.breakAfter : breakAtStart;
  // Change within a single child
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;
  if (toI < children.length) {
    var after = children[toI];
    // Make sure the end of the child after the update is preserved in `after`
    if (after && toOff < after.length) {
      // If we're splitting a child, separate part of it to avoid that
      // being mangled when updating the child before the update.
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      // If the element after the replacement should be merged with
      // the last replacing element, update `content`
      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert[insert.length - 1] = after;
      } else {
        // Remove the start of the after element, if necessary, and
        // add it to `content`.
        if (toOff) after.merge(0, toOff, null, false, 0, openEnd);
        insert.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      // The element at `toI` is entirely covered by this range.
      // Preserve its line break, if any.
      if (last) last.breakAfter = 1;else breakAtStart = 1;
    }
    // Since we've handled the next element from the current elements
    // now, make sure `toI` points after that.
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
        before.breakAfter = insert.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  // Try to merge widgets on the boundaries of the replacement
  while (fromI < toI && insert.length) {
    if (children[toI - 1].become(insert[insert.length - 1])) {
      toI--;
      insert.pop();
      openEnd = insert.length ? 0 : openStart;
    } else if (children[fromI].become(insert[0])) {
      fromI++;
      insert.shift();
      openStart = insert.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
  if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
}
function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
  var cur = parent.childCursor();
  var _cur$findPos = cur.findPos(to, 1),
    toI = _cur$findPos.i,
    toOff = _cur$findPos.off;
  var _cur$findPos2 = cur.findPos(from, -1),
    fromI = _cur$findPos2.i,
    fromOff = _cur$findPos2.off;
  var dLen = from - to;
  var _iterator4 = _createForOfIteratorHelper(insert),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var view = _step4.value;
      dLen += view.length;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
}
var nav = typeof navigator != "undefined" ? navigator : {
  userAgent: "",
  vendor: "",
  platform: ""
};
var doc = typeof document != "undefined" ? document : {
  documentElement: {
    style: {}
  }
};
var ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
var ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = ("webkitFontSmoothing" in doc.documentElement.style);
var safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
var ios = safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /*@__PURE__*/ /Mac/.test(nav.platform),
  windows: /*@__PURE__*/ /Win/.test(nav.platform),
  linux: /*@__PURE__*/ /Linux|X11/.test(nav.platform),
  ie: ie,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko: gecko,
  gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios: ios,
  android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
  webkit: webkit,
  safari: safari,
  webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var MaxJoinLen = 256;
var TextView = /*#__PURE__*/function (_ContentView) {
  _inherits(TextView, _ContentView);
  var _super = _createSuper(TextView);
  function TextView(text) {
    var _this;
    _classCallCheck(this, TextView);
    _this = _super.call(this);
    _this.text = text;
    return _this;
  }
  _createClass(TextView, [{
    key: "length",
    get: function get() {
      return this.text.length;
    }
  }, {
    key: "createDOM",
    value: function createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      if (!this.dom) this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track && track.node == this.dom) track.written = true;
        this.dom.nodeValue = this.text;
      }
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(dom) {
      if (dom.nodeType == 3) this.createDOM(dom);
    }
  }, {
    key: "merge",
    value: function merge(from, to, source) {
      if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
      this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
  }, {
    key: "split",
    value: function split(from) {
      var result = new TextView(this.text.slice(from));
      this.text = this.text.slice(0, from);
      this.markDirty();
      return result;
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      return node == this.dom ? offset : offset ? this.text.length : 0;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround(_from, _to, offset) {
      return {
        from: offset,
        to: offset + this.length,
        startDOM: this.dom,
        endDOM: this.dom.nextSibling
      };
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  }]);
  return TextView;
}(ContentView);
var MarkView = /*#__PURE__*/function (_ContentView2) {
  _inherits(MarkView, _ContentView2);
  var _super2 = _createSuper(MarkView);
  function MarkView(mark) {
    var _this2;
    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    _classCallCheck(this, MarkView);
    _this2 = _super2.call(this);
    _this2.mark = mark;
    _this2.children = children;
    _this2.length = length;
    var _iterator5 = _createForOfIteratorHelper(children),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var ch = _step5.value;
        ch.setParent(_assertThisInitialized(_this2));
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    return _this2;
  }
  _createClass(MarkView, [{
    key: "setAttrs",
    value: function setAttrs(dom) {
      clearAttributes(dom);
      if (this.mark["class"]) dom.className = this.mark["class"];
      if (this.mark.attrs) for (var name in this.mark.attrs) dom.setAttribute(name, this.mark.attrs[name]);
      return dom;
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(node) {
      if (node.nodeName == this.mark.tagName.toUpperCase()) {
        this.setDOM(node);
        this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
      }
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.dirty & 4 /* Dirty.Attrs */) this.setAttrs(this.dom);
      _get(_getPrototypeOf(MarkView.prototype), "sync", this).call(this, view, track);
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, _hasStart, openStart, openEnd) {
      if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
  }, {
    key: "split",
    value: function split(from) {
      var result = [],
        off = 0,
        detachFrom = -1,
        i = 0;
      var _iterator6 = _createForOfIteratorHelper(this.children),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var elt = _step6.value;
          var end = off + elt.length;
          if (end > from) result.push(off < from ? elt.split(from - off) : elt);
          if (detachFrom < 0 && off >= from) detachFrom = i;
          off = end;
          i++;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var length = this.length - from;
      this.length = from;
      if (detachFrom > -1) {
        this.children.length = detachFrom;
        this.markDirty();
      }
      return new MarkView(this.mark, result, length);
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  }]);
  return MarkView;
}(ContentView);
function textCoords(text, pos, side) {
  var length = text.nodeValue.length;
  if (pos > length) pos = length;
  var from = pos,
    to = pos,
    flatten = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      // These browsers reliably return valid rectangles for empty ranges
      if (pos) {
        from--;
        flatten = 1;
      } // FIXME this is wrong in RTL text
      else if (to < length) {
        to++;
        flatten = -1;
      }
    }
  } else {
    if (side < 0) from--;else if (to < length) to++;
  }
  var rects = textRange(text, from, to).getClientRects();
  if (!rects.length) return null;
  var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
    return r.width;
  }) || rect;
  return flatten ? flattenRect(rect, flatten < 0) : rect || null;
}
// Also used for collapsed ranges that don't have a placeholder widget!
var WidgetView = /*#__PURE__*/function (_ContentView3) {
  _inherits(WidgetView, _ContentView3);
  var _super3 = _createSuper(WidgetView);
  function WidgetView(widget, length, side) {
    var _this3;
    _classCallCheck(this, WidgetView);
    _this3 = _super3.call(this);
    _this3.widget = widget;
    _this3.length = length;
    _this3.side = side;
    _this3.prevWidget = null;
    return _this3;
  }
  _createClass(WidgetView, [{
    key: "split",
    value: function split(from) {
      var result = WidgetView.create(this.widget, this.length - from, this.side);
      this.length -= from;
      return result;
    }
  }, {
    key: "sync",
    value: function sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        this.dom.contentEditable = "false";
      }
    }
  }, {
    key: "getSide",
    value: function getSide() {
      return this.side;
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, hasStart, openStart, openEnd) {
      if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
  }, {
    key: "become",
    value: function become(other) {
      if (other instanceof WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
        if (!this.widget.compare(other.widget)) this.markDirty(true);
        if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        return true;
      }
      return false;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return true;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      if (this.length == 0) return _state.Text.empty;
      var top = this;
      while (top.parent) top = top.parent;
      var _top = top,
        view = _top.view,
        text = view && view.state.doc,
        start = this.posAtStart;
      return text ? text.slice(start, start + this.length) : _state.Text.empty;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom) return custom;
      var rects = this.dom.getClientRects(),
        rect = null;
      if (!rects.length) return null;
      for (var i = pos > 0 ? rects.length - 1 : 0;; i += pos > 0 ? -1 : 1) {
        rect = rects[i];
        if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;
      }
      return this.length ? rect : flattenRect(rect, this.side > 0);
    }
  }, {
    key: "isEditable",
    get: function get() {
      return false;
    }
  }, {
    key: "isWidget",
    get: function get() {
      return true;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return this.widget.isHidden;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(WidgetView.prototype), "destroy", this).call(this);
      if (this.dom) this.widget.destroy(this.dom);
    }
  }], [{
    key: "create",
    value: function create(widget, length, side) {
      return new (widget.customView || WidgetView)(widget, length, side);
    }
  }]);
  return WidgetView;
}(ContentView);
var CompositionView = /*#__PURE__*/function (_WidgetView) {
  _inherits(CompositionView, _WidgetView);
  var _super4 = _createSuper(CompositionView);
  function CompositionView() {
    _classCallCheck(this, CompositionView);
    return _super4.apply(this, arguments);
  }
  _createClass(CompositionView, [{
    key: "domAtPos",
    value: function domAtPos(pos) {
      var _this$widget = this.widget,
        topView = _this$widget.topView,
        text = _this$widget.text;
      if (!topView) return new DOMPos(text, Math.min(pos, text.nodeValue.length));
      return scanCompositionTree(pos, 0, topView, text, this.length - topView.length, function (v, p) {
        return v.domAtPos(p);
      }, function (text, p) {
        return new DOMPos(text, Math.min(p, text.nodeValue.length));
      });
    }
  }, {
    key: "sync",
    value: function sync() {
      this.setDOM(this.widget.toDOM());
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      var _this$widget2 = this.widget,
        topView = _this$widget2.topView,
        text = _this$widget2.text;
      if (!topView) return Math.min(offset, this.length);
      return posFromDOMInCompositionTree(node, offset, topView, text, this.length - topView.length);
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return false;
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var _this$widget3 = this.widget,
        topView = _this$widget3.topView,
        text = _this$widget3.text;
      if (!topView) return textCoords(text, pos, side);
      return scanCompositionTree(pos, side, topView, text, this.length - topView.length, function (v, pos, side) {
        return v.coordsAt(pos, side);
      }, function (text, pos, side) {
        return textCoords(text, pos, side);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a;
      _get(_getPrototypeOf(CompositionView.prototype), "destroy", this).call(this);
      (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
    }
  }, {
    key: "isEditable",
    get: function get() {
      return true;
    }
  }, {
    key: "canReuseDOM",
    value: function canReuseDOM() {
      return true;
    }
  }]);
  return CompositionView;
}(WidgetView); // Uses the old structure of a chunk of content view frozen for
// composition to try and find a reasonable DOM location for the given
// offset.
function scanCompositionTree(pos, side, view, text, dLen, enterView, fromText) {
  if (view instanceof MarkView) {
    for (var child = view.dom.firstChild; child; child = child.nextSibling) {
      var desc = ContentView.get(child);
      if (!desc) {
        var inner = scanCompositionNode(pos, side, child, fromText);
        if (typeof inner != "number") return inner;
        pos = inner;
      } else {
        var hasComp = contains(child, text);
        var len = desc.length + (hasComp ? dLen : 0);
        if (pos < len || pos == len && desc.getSide() <= 0) return hasComp ? scanCompositionTree(pos, side, desc, text, dLen, enterView, fromText) : enterView(desc, pos, side);
        pos -= len;
      }
    }
    return enterView(view, view.length, -1);
  } else if (view.dom == text) {
    return fromText(text, pos, side);
  } else {
    return enterView(view, pos, side);
  }
}
function scanCompositionNode(pos, side, node, fromText) {
  if (node.nodeType == 3) {
    var len = node.nodeValue.length;
    if (pos <= len) return fromText(node, pos, side);
    pos -= len;
  } else if (node.nodeType == 1 && node.contentEditable != "false") {
    for (var child = node.firstChild; child; child = child.nextSibling) {
      var inner = scanCompositionNode(pos, side, child, fromText);
      if (typeof inner != "number") return inner;
      pos = inner;
    }
  }
  return pos;
}
function posFromDOMInCompositionTree(node, offset, view, text, dLen) {
  if (view instanceof MarkView) {
    var pos = 0;
    for (var child = view.dom.firstChild; child; child = child.nextSibling) {
      var childView = ContentView.get(child);
      if (childView) {
        var hasComp = contains(child, text);
        if (contains(child, node)) return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, childView, text, dLen) : childView.localPosFromDOM(node, offset));
        pos += childView.length + (hasComp ? dLen : 0);
      } else {
        var inner = posFromDOMInOpaqueNode(node, offset, child);
        if (inner.result != null) return pos + inner.result;
        pos += inner.size;
      }
    }
  } else if (view.dom == text) {
    return Math.min(offset, text.nodeValue.length);
  }
  return view.localPosFromDOM(node, offset);
}
function posFromDOMInOpaqueNode(node, offset, target) {
  if (target.nodeType == 3) {
    return node == target ? {
      result: offset
    } : {
      size: target.nodeValue.length
    };
  } else if (target.nodeType == 1 && target.contentEditable != "false") {
    var pos = 0;
    for (var child = target.firstChild, i = 0;; child = child.nextSibling, i++) {
      if (node == target && i == offset) return {
        result: pos
      };
      if (!child) return {
        size: pos
      };
      var inner = posFromDOMInOpaqueNode(node, offset, child);
      if (inner.result != null) return {
        result: offset + inner.result
      };
      pos += inner.size;
    }
  } else {
    return target.contains(node) ? {
      result: 0
    } : {
      size: 0
    };
  }
}
// These are drawn around uneditable widgets to avoid a number of
// browser bugs that show up when the cursor is directly next to
// uneditable inline content.
var WidgetBufferView = /*#__PURE__*/function (_ContentView4) {
  _inherits(WidgetBufferView, _ContentView4);
  var _super5 = _createSuper(WidgetBufferView);
  function WidgetBufferView(side) {
    var _this4;
    _classCallCheck(this, WidgetBufferView);
    _this4 = _super5.call(this);
    _this4.side = side;
    return _this4;
  }
  _createClass(WidgetBufferView, [{
    key: "length",
    get: function get() {
      return 0;
    }
  }, {
    key: "merge",
    value: function merge() {
      return false;
    }
  }, {
    key: "become",
    value: function become(other) {
      return other instanceof WidgetBufferView && other.side == this.side;
    }
  }, {
    key: "split",
    value: function split() {
      return new WidgetBufferView(this.side);
    }
  }, {
    key: "sync",
    value: function sync() {
      if (!this.dom) {
        var dom = document.createElement("img");
        dom.className = "cm-widgetBuffer";
        dom.setAttribute("aria-hidden", "true");
        this.setDOM(dom);
      }
    }
  }, {
    key: "getSide",
    value: function getSide() {
      return this.side;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM() {
      return 0;
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos) {
      return this.dom.getBoundingClientRect();
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return _state.Text.empty;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return true;
    }
  }]);
  return WidgetBufferView;
}(ContentView);
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  var dom = parent.dom,
    children = parent.children,
    i = 0;
  for (var off = 0; i < children.length; i++) {
    var child = children[i],
      end = off + child.length;
    if (end == off && child.getSide() <= 0) continue;
    if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
    if (pos <= off) break;
    off = end;
  }
  for (var j = i; j > 0; j--) {
    var prev = children[j - 1];
    if (prev.dom.parentNode == dom) return prev.domAtPos(prev.length);
  }
  for (var _j = i; _j < children.length; _j++) {
    var next = children[_j];
    if (next.dom.parentNode == dom) return next.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
// Assumes `view`, if a mark view, has precisely 1 child.
function joinInlineInto(parent, view, open) {
  var last,
    children = parent.children;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  var before = null,
    beforePos = -1,
    after = null,
    afterPos = -1;
  function scan(view, pos) {
    for (var i = 0, off = 0; i < view.children.length && off <= pos; i++) {
      var child = view.children[i],
        end = off + child.length;
      if (end >= pos) {
        if (child.children.length) {
          scan(child, pos - off);
        } else if ((!after || after.isHidden && side > 0) && (end > pos || off == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos - off;
        } else if (off < pos || off == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos - off;
        }
      }
      off = end;
    }
  }
  scan(view, pos);
  var target = (side < 0 ? before : after) || before || after;
  if (target) return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  var last = view.dom.lastChild;
  if (!last) return view.dom.getBoundingClientRect();
  var rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}
function combineAttrs(source, target) {
  for (var name in source) {
    if (name == "class" && target["class"]) target["class"] += " " + source["class"];else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
  }
  return target;
}
function attrsEq(a, b) {
  if (a == b) return true;
  if (!a || !b) return false;
  var keysA = Object.keys(a),
    keysB = Object.keys(b);
  if (keysA.length != keysB.length) return false;
  for (var _i2 = 0, _keysA = keysA; _i2 < _keysA.length; _i2++) {
    var key = _keysA[_i2];
    if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
  }
  return true;
}
function _updateAttrs(dom, prev, attrs) {
  var changed = null;
  if (prev) for (var name in prev) if (!(attrs && name in attrs)) dom.removeAttribute(changed = name);
  if (attrs) for (var _name in attrs) if (!(prev && prev[_name] == attrs[_name])) dom.setAttribute(changed = _name, attrs[_name]);
  return !!changed;
}

/**
Widgets added to the content are described by subclasses of this
class. Using a description object like that makes it possible to
delay creating of the DOM structure for a widget until it is
needed, and to avoid redrawing widgets even if the decorations
that define them are recreated.
*/
var WidgetType = /*#__PURE__*/function () {
  function WidgetType() {
    _classCallCheck(this, WidgetType);
  }
  _createClass(WidgetType, [{
    key: "eq",
    value:
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    function eq(widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
  }, {
    key: "updateDOM",
    value: function updateDOM(dom, view) {
      return false;
    }
    /**
    @internal
    */
  }, {
    key: "compare",
    value: function compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
  }, {
    key: "estimatedHeight",
    get: function get() {
      return -1;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return true;
    }
    /**
    Override the way screen coordinates for positions at/in the
    widget are found. `pos` will be the offset into the widget, and
    `side` the side of the position that is being queried—less than
    zero for before, greater than zero for after, and zero for
    directly at that position.
    */
  }, {
    key: "coordsAt",
    value: function coordsAt(dom, pos, side) {
      return null;
    }
    /**
    @internal
    */
  }, {
    key: "customView",
    get: function get() {
      return null;
    }
    /**
    @internal
    */
  }, {
    key: "isHidden",
    get: function get() {
      return false;
    }
    /**
    This is called when the an instance of the widget is removed
    from the editor view.
    */
  }, {
    key: "destroy",
    value: function destroy(dom) {}
  }]);
  return WidgetType;
}();
/**
The different types of blocks that can occur in an editor view.
*/
exports.WidgetType = WidgetType;
var BlockType = /*@__PURE__*/function (BlockType) {
  /**
  A line of text.
  */
  BlockType[BlockType["Text"] = 0] = "Text";
  /**
  A block widget associated with the position after it.
  */
  BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
  /**
  A block widget associated with the position before it.
  */
  BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
  /**
  A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
  */
  BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType;
}(BlockType || (exports.BlockType = BlockType = {}));
/**
A decoration provides information on how to draw or style a piece
of content. You'll usually use it wrapped in a
[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
@nonabstract
*/
exports.BlockType = BlockType;
var Decoration = /*#__PURE__*/function (_RangeValue) {
  _inherits(Decoration, _RangeValue);
  var _super6 = _createSuper(Decoration);
  function Decoration(
  /**
  @internal
  */
  startSide,
  /**
  @internal
  */
  endSide,
  /**
  @internal
  */
  widget,
  /**
  The config object used to create this decoration. You can
  include additional properties in there to store metadata about
  your decoration.
  */
  spec) {
    var _this5;
    _classCallCheck(this, Decoration);
    _this5 = _super6.call(this);
    _this5.startSide = startSide;
    _this5.endSide = endSide;
    _this5.widget = widget;
    _this5.spec = spec;
    return _this5;
  }
  /**
  @internal
  */
  _createClass(Decoration, [{
    key: "heightRelevant",
    get: function get() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
    the higher-precedence decorations creating the inner DOM nodes.
    Such elements are split on line boundaries and on the boundaries
    of lower-precedence decorations.
    */
  }, {
    key: "hasHeight",
    value:
    /**
    @internal
    */
    function hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  }], [{
    key: "mark",
    value: function mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which displays a DOM element at the
    given position.
    */
  }, {
    key: "widget",
    value: function widget(spec) {
      var side = spec.side || 0,
        block = !!spec.block;
      side += block ? side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */ : side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */;
      return new PointDecoration(spec, side, side, block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
  }, {
    key: "replace",
    value: function replace(spec) {
      var block = !!spec.block,
        startSide,
        endSide;
      if (spec.isBlockGap) {
        startSide = -500000000 /* Side.GapStart */;
        endSide = 400000000 /* Side.GapEnd */;
      } else {
        var _getInclusive = getInclusive(spec, block),
          start = _getInclusive.start,
          end = _getInclusive.end;
        startSide = (start ? block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */) - 1;
        endSide = (end ? block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */) + 1;
      }
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
  }, {
    key: "line",
    value: function line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
  }, {
    key: "set",
    value: function set(of) {
      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return _state.RangeSet.of(of, sort);
    }
  }]);
  return Decoration;
}(_state.RangeValue);
/**
The empty set of decorations.
*/
exports.Decoration = Decoration;
Decoration.none = _state.RangeSet.empty;
var MarkDecoration = /*#__PURE__*/function (_Decoration) {
  _inherits(MarkDecoration, _Decoration);
  var _super7 = _createSuper(MarkDecoration);
  function MarkDecoration(spec) {
    var _this6;
    _classCallCheck(this, MarkDecoration);
    var _getInclusive2 = getInclusive(spec),
      start = _getInclusive2.start,
      end = _getInclusive2.end;
    _this6 = _super7.call(this, start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
    _this6.tagName = spec.tagName || "span";
    _this6["class"] = spec["class"] || "";
    _this6.attrs = spec.attributes || null;
    return _this6;
  }
  _createClass(MarkDecoration, [{
    key: "eq",
    value: function eq(other) {
      return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this["class"] == other["class"] && attrsEq(this.attrs, other.attrs);
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (from >= to) throw new RangeError("Mark decorations may not be empty");
      return _get(_getPrototypeOf(MarkDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return MarkDecoration;
}(Decoration);
MarkDecoration.prototype.point = false;
var LineDecoration = /*#__PURE__*/function (_Decoration2) {
  _inherits(LineDecoration, _Decoration2);
  var _super8 = _createSuper(LineDecoration);
  function LineDecoration(spec) {
    _classCallCheck(this, LineDecoration);
    return _super8.call(this, -200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
  }
  _createClass(LineDecoration, [{
    key: "eq",
    value: function eq(other) {
      return other instanceof LineDecoration && this.spec["class"] == other.spec["class"] && attrsEq(this.spec.attributes, other.spec.attributes);
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
      return _get(_getPrototypeOf(LineDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return LineDecoration;
}(Decoration);
LineDecoration.prototype.mapMode = _state.MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = /*#__PURE__*/function (_Decoration3) {
  _inherits(PointDecoration, _Decoration3);
  var _super9 = _createSuper(PointDecoration);
  function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
    var _this7;
    _classCallCheck(this, PointDecoration);
    _this7 = _super9.call(this, startSide, endSide, widget, spec);
    _this7.block = block;
    _this7.isReplace = isReplace;
    _this7.mapMode = !block ? _state.MapMode.TrackDel : startSide <= 0 ? _state.MapMode.TrackBefore : _state.MapMode.TrackAfter;
    return _this7;
  }
  // Only relevant when this.block == true
  _createClass(PointDecoration, [{
    key: "type",
    get: function get() {
      return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
  }, {
    key: "heightRelevant",
    get: function get() {
      return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
      return _get(_getPrototypeOf(PointDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return PointDecoration;
}(Decoration);
PointDecoration.prototype.point = true;
function getInclusive(spec) {
  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var start = spec.inclusiveStart,
    end = spec.inclusiveEnd;
  if (start == null) start = spec.inclusive;
  if (end == null) end = spec.inclusive;
  return {
    start: start !== null && start !== void 0 ? start : block,
    end: end !== null && end !== void 0 ? end : block
  };
}
function widgetsEq(a, b) {
  return a == b || !!(a && b && a.compare(b));
}
function addRange(from, to, ranges) {
  var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
}
var LineView = /*#__PURE__*/function (_ContentView5) {
  _inherits(LineView, _ContentView5);
  var _super10 = _createSuper(LineView);
  function LineView() {
    var _this8;
    _classCallCheck(this, LineView);
    _this8 = _super10.apply(this, arguments);
    _this8.children = [];
    _this8.length = 0;
    _this8.prevAttrs = undefined;
    _this8.attrs = null;
    _this8.breakAfter = 0;
    return _this8;
  }
  // Consumes source
  _createClass(LineView, [{
    key: "merge",
    value: function merge(from, to, source, hasStart, openStart, openEnd) {
      if (source) {
        if (!(source instanceof LineView)) return false;
        if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
      }

      if (hasStart) this.setDeco(source ? source.attrs : null);
      mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
      return true;
    }
  }, {
    key: "split",
    value: function split(at) {
      var end = new LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0) return end;
      var _this$childPos = this.childPos(at),
        i = _this$childPos.i,
        off = _this$childPos.off;
      if (off) {
        end.append(this.children[i].split(off), 0);
        this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
        i++;
      }
      for (var j = i; j < this.children.length; j++) end.append(this.children[j], 0);
      while (i > 0 && this.children[i - 1].length == 0) this.children[--i].destroy();
      this.children.length = i;
      this.markDirty();
      this.length = at;
      return end;
    }
  }, {
    key: "transferDOM",
    value: function transferDOM(other) {
      if (!this.dom) return;
      this.markDirty();
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
      this.prevAttrs = undefined;
      this.dom = null;
    }
  }, {
    key: "setDeco",
    value: function setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
  }, {
    key: "append",
    value: function append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
  }, {
    key: "addLineDeco",
    value: function addLineDeco(deco) {
      var attrs = deco.spec.attributes,
        cls = deco.spec["class"];
      if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
      if (cls) this.attrs = combineAttrs({
        "class": cls
      }, this.attrs || {});
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(node) {
      if (node.nodeName == "DIV") {
        this.setDOM(node);
        this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
      }
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      var _a;
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      } else if (this.dirty & 4 /* Dirty.Attrs */) {
        clearAttributes(this.dom);
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      }
      if (this.prevAttrs !== undefined) {
        _updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = undefined;
      }
      _get(_getPrototypeOf(LineView.prototype), "sync", this).call(this, view, track);
      var last = this.dom.lastChild;
      while (last && ContentView.get(last) instanceof MarkView) last = last.lastChild;
      if (!last || !this.length || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(function (ch) {
        return ch instanceof TextView;
      }))) {
        var hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
  }, {
    key: "measureTextSize",
    value: function measureTextSize() {
      if (this.children.length == 0 || this.length > 20) return null;
      var totalWidth = 0,
        textHeight;
      var _iterator7 = _createForOfIteratorHelper(this.children),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var child = _step7.value;
          if (!(child instanceof TextView) || /[^ -~]/.test(child.text)) return null;
          var rects = clientRectsFor(child.dom);
          if (rects.length != 1) return null;
          totalWidth += rects[0].width;
          textHeight = rects[0].height;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return !totalWidth ? null : {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length,
        textHeight: textHeight
      };
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var rect = coordsInChildren(this, pos, side);
      // Correct rectangle height for empty lines when the returned
      // height is larger than the text height.
      if (!this.children.length && rect && this.parent) {
        var heightOracle = this.parent.view.viewState.heightOracle,
          height = rect.bottom - rect.top;
        if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
          var dist = (height - heightOracle.textHeight) / 2;
          return {
            top: rect.top + dist,
            bottom: rect.bottom - dist,
            left: rect.left,
            right: rect.left
          };
        }
      }
      return rect;
    }
  }, {
    key: "become",
    value: function become(_other) {
      return false;
    }
  }, {
    key: "type",
    get: function get() {
      return BlockType.Text;
    }
  }], [{
    key: "find",
    value: function find(docView, pos) {
      for (var i = 0, off = 0; i < docView.children.length; i++) {
        var block = docView.children[i],
          end = off + block.length;
        if (end >= pos) {
          if (block instanceof LineView) return block;
          if (end > pos) break;
        }
        off = end + block.breakAfter;
      }
      return null;
    }
  }]);
  return LineView;
}(ContentView);
var BlockWidgetView = /*#__PURE__*/function (_ContentView6) {
  _inherits(BlockWidgetView, _ContentView6);
  var _super11 = _createSuper(BlockWidgetView);
  function BlockWidgetView(widget, length, type) {
    var _this9;
    _classCallCheck(this, BlockWidgetView);
    _this9 = _super11.call(this);
    _this9.widget = widget;
    _this9.length = length;
    _this9.type = type;
    _this9.breakAfter = 0;
    _this9.prevWidget = null;
    return _this9;
  }
  _createClass(BlockWidgetView, [{
    key: "merge",
    value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
  }, {
    key: "split",
    value: function split(at) {
      var len = this.length - at;
      this.length = at;
      var end = new BlockWidgetView(this.widget, len, this.type);
      end.breakAfter = this.breakAfter;
      return end;
    }
  }, {
    key: "children",
    get: function get() {
      return noChildren;
    }
  }, {
    key: "sync",
    value: function sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        this.dom.contentEditable = "false";
      }
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _state.Text.empty;
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "become",
    value: function become(other) {
      if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.compare(this.widget)) this.markDirty(true);
        if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return true;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
  }, {
    key: "isEditable",
    get: function get() {
      return false;
    }
  }, {
    key: "isWidget",
    get: function get() {
      return true;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return this.widget.coordsAt(this.dom, pos, side);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(BlockWidgetView.prototype), "destroy", this).call(this);
      if (this.dom) this.widget.destroy(this.dom);
    }
  }]);
  return BlockWidgetView;
}(ContentView);
var ContentBuilder = /*#__PURE__*/function () {
  function ContentBuilder(doc, pos, end, disallowBlockEffectsFor) {
    _classCallCheck(this, ContentBuilder);
    this.doc = doc;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0 /* Buf.No */;
    this.bufferMarks = [];
    // Set to false directly after a widget that covers the position after it
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc.iter();
    this.skip = pos;
  }
  _createClass(ContentBuilder, [{
    key: "posCovered",
    value: function posCovered() {
      if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      var last = this.content[this.content.length - 1];
      return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
    }
  }, {
    key: "getLine",
    value: function getLine() {
      if (!this.curLine) {
        this.content.push(this.curLine = new LineView());
        this.atCursorPos = true;
      }
      return this.curLine;
    }
  }, {
    key: "flushBuffer",
    value: function flushBuffer() {
      var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.bufferMarks;
      if (this.pendingBuffer) {
        this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
        this.pendingBuffer = 0 /* Buf.No */;
      }
    }
  }, {
    key: "addBlockWidget",
    value: function addBlockWidget(view) {
      this.flushBuffer();
      this.curLine = null;
      this.content.push(view);
    }
  }, {
    key: "finish",
    value: function finish(openEnd) {
      if (this.pendingBuffer && openEnd <= this.bufferMarks.length) this.flushBuffer();else this.pendingBuffer = 0 /* Buf.No */;
      if (!this.posCovered()) this.getLine();
    }
  }, {
    key: "buildText",
    value: function buildText(length, active, openStart) {
      while (length > 0) {
        if (this.textOff == this.text.length) {
          var _this$cursor$next = this.cursor.next(this.skip),
            value = _this$cursor$next.value,
            lineBreak = _this$cursor$next.lineBreak,
            done = _this$cursor$next.done;
          this.skip = 0;
          if (done) throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered()) this.getLine();
            if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
            this.flushBuffer();
            this.curLine = null;
            this.atCursorPos = true;
            length--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        var take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
        this.flushBuffer(active.slice(active.length - openStart));
        this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.atCursorPos = true;
        this.textOff += take;
        length -= take;
        openStart = 0;
      }
    }
  }, {
    key: "span",
    value: function span(from, to, active, openStart) {
      this.buildText(to - from, active, openStart);
      this.pos = to;
      if (this.openStart < 0) this.openStart = openStart;
    }
  }, {
    key: "point",
    value: function point(from, to, deco, active, openStart, index) {
      if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
        if (deco.block) throw new RangeError("Block decorations may not be specified via plugins");
        if (to > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
      }
      var len = to - from;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          var type = deco.type;
          if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
          this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
        } else {
          var view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
          var cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
          var cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
          var line = this.getLine();
          if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable) this.pendingBuffer = 0 /* Buf.No */;
          this.flushBuffer(active);
          if (cursorBefore) {
            line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
            openStart = active.length + Math.max(0, openStart - active.length);
          }
          line.append(wrapMarks(view, active), openStart);
          this.atCursorPos = cursorAfter;
          this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
          if (this.pendingBuffer) this.bufferMarks = active.slice();
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        // Line decoration
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        // Advance the iterator past the replaced content
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0) this.openStart = openStart;
    }
  }], [{
    key: "build",
    value: function build(text, from, to, decorations, dynamicDecorationMap) {
      var builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
      builder.openEnd = _state.RangeSet.spans(decorations, from, to, builder);
      if (builder.openStart < 0) builder.openStart = builder.openEnd;
      builder.finish(builder.openEnd);
      return builder;
    }
  }]);
  return ContentBuilder;
}();
function wrapMarks(view, active) {
  var _iterator8 = _createForOfIteratorHelper(active),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var mark = _step8.value;
      view = new MarkView(mark, [view], view.length);
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  return view;
}
var NullWidget = /*#__PURE__*/function (_WidgetType) {
  _inherits(NullWidget, _WidgetType);
  var _super12 = _createSuper(NullWidget);
  function NullWidget(tag) {
    var _this10;
    _classCallCheck(this, NullWidget);
    _this10 = _super12.call(this);
    _this10.tag = tag;
    return _this10;
  }
  _createClass(NullWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.tag == this.tag;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return document.createElement(this.tag);
    }
  }, {
    key: "updateDOM",
    value: function updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return true;
    }
  }]);
  return NullWidget;
}(WidgetType);
var clickAddsSelectionRange = /*@__PURE__*/_state.Facet.define();
var dragMovesSelection$1 = /*@__PURE__*/_state.Facet.define();
var mouseSelectionStyle = /*@__PURE__*/_state.Facet.define();
var exceptionSink = /*@__PURE__*/_state.Facet.define();
var updateListener = /*@__PURE__*/_state.Facet.define();
var inputHandler = /*@__PURE__*/_state.Facet.define();
var focusChangeEffect = /*@__PURE__*/_state.Facet.define();
var perLineTextDirection = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
var nativeSelectionHidden = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
var ScrollTarget = /*#__PURE__*/function () {
  function ScrollTarget(range) {
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "nearest";
    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "nearest";
    var yMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
    var xMargin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;
    _classCallCheck(this, ScrollTarget);
    this.range = range;
    this.y = y;
    this.x = x;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
  }
  _createClass(ScrollTarget, [{
    key: "map",
    value: function map(changes) {
      return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
    }
  }]);
  return ScrollTarget;
}();
var _scrollIntoView2 = /*@__PURE__*/_state.StateEffect.define({
  map: function map(t, ch) {
    return t.map(ch);
  }
});
/**
Log or report an unhandled exception in client code. Should
probably only be used by extension code that allows client code to
provide functions, and calls those functions in a context where an
exception can't be propagated to calling code in a reasonable way
(for example when in an event handler).

Either calls a handler registered with
[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
`window.onerror`, if defined, or `console.error` (in which case
it'll pass `context`, when given, as first argument).
*/
function logException(state, exception, context) {
  var handler = state.facet(exceptionSink);
  if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
}
var editable = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : true;
  }
});
var nextPluginID = 0;
var viewPlugin = /*@__PURE__*/_state.Facet.define();
/**
View plugins associate stateful values with a view. They can
influence the way the content is drawn, and are notified of things
that happen in the view.
*/
var ViewPlugin = /*#__PURE__*/function () {
  function ViewPlugin(
  /**
  @internal
  */
  id,
  /**
  @internal
  */
  create,
  /**
  @internal
  */
  domEventHandlers, buildExtensions) {
    _classCallCheck(this, ViewPlugin);
    this.id = id;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  _createClass(ViewPlugin, null, [{
    key: "define",
    value: function define(create, spec) {
      var _ref = spec || {},
        eventHandlers = _ref.eventHandlers,
        provide = _ref.provide,
        deco = _ref.decorations;
      return new ViewPlugin(nextPluginID++, create, eventHandlers, function (plugin) {
        var ext = [viewPlugin.of(plugin)];
        if (deco) ext.push(decorations.of(function (view) {
          var pluginInst = view.plugin(plugin);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
        if (provide) ext.push(provide(plugin));
        return ext;
      });
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
  }, {
    key: "fromClass",
    value: function fromClass(cls, spec) {
      return ViewPlugin.define(function (view) {
        return new cls(view);
      }, spec);
    }
  }]);
  return ViewPlugin;
}();
exports.ViewPlugin = ViewPlugin;
var PluginInstance = /*#__PURE__*/function () {
  function PluginInstance(spec) {
    _classCallCheck(this, PluginInstance);
    this.spec = spec;
    // When starting an update, all plugins have this field set to the
    // update object, indicating they need to be updated. When finished
    // updating, it is set to `false`. Retrieving a plugin that needs to
    // be updated with `view.plugin` forces an eager update.
    this.mustUpdate = null;
    // This is null when the plugin is initially created, but
    // initialized on the first update.
    this.value = null;
  }
  _createClass(PluginInstance, [{
    key: "update",
    value: function update(view) {
      if (!this.value) {
        if (this.spec) {
          try {
            this.value = this.spec.create(view);
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
            this.deactivate();
          }
        }
      } else if (this.mustUpdate) {
        var update = this.mustUpdate;
        this.mustUpdate = null;
        if (this.value.update) {
          try {
            this.value.update(update);
          } catch (e) {
            logException(update.state, e, "CodeMirror plugin crashed");
            if (this.value.destroy) try {
              this.value.destroy();
            } catch (_) {}
            this.deactivate();
          }
        }
      }
      return this;
    }
  }, {
    key: "destroy",
    value: function destroy(view) {
      var _a;
      if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
        try {
          this.value.destroy();
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
        }
      }
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this.spec = this.value = null;
    }
  }]);
  return PluginInstance;
}();
var editorAttributes = /*@__PURE__*/_state.Facet.define();
var contentAttributes = /*@__PURE__*/_state.Facet.define();
// Provide decorations
var decorations = /*@__PURE__*/_state.Facet.define();
var atomicRanges = /*@__PURE__*/_state.Facet.define();
var scrollMargins = /*@__PURE__*/_state.Facet.define();
var styleModule = /*@__PURE__*/_state.Facet.define();
var ChangedRange = /*#__PURE__*/function () {
  function ChangedRange(fromA, toA, fromB, toB) {
    _classCallCheck(this, ChangedRange);
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  _createClass(ChangedRange, [{
    key: "join",
    value: function join(other) {
      return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
  }, {
    key: "addToSet",
    value: function addToSet(set) {
      var i = set.length,
        me = this;
      for (; i > 0; i--) {
        var range = set[i - 1];
        if (range.fromA > me.toA) continue;
        if (range.toA < me.fromA) break;
        me = me.join(range);
        set.splice(i - 1, 1);
      }
      set.splice(i, 0, me);
      return set;
    }
  }], [{
    key: "extendWithRanges",
    value: function extendWithRanges(diff, ranges) {
      if (ranges.length == 0) return diff;
      var result = [];
      for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
        var next = dI == diff.length ? null : diff[dI],
          off = posA - posB;
        var end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          var from = ranges[rI],
            to = ranges[rI + 1];
          var fromB = Math.max(posB, from),
            toB = Math.min(end, to);
          if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end) break;else rI += 2;
        }
        if (!next) return result;
        new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  }]);
  return ChangedRange;
}();
/**
View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
class, which describe what happened, whenever the view is updated.
*/
var ViewUpdate = /*#__PURE__*/function () {
  function ViewUpdate(
  /**
  The editor view that the update is associated with.
  */
  view,
  /**
  The new editor state.
  */
  state,
  /**
  The transactions involved in the update. May be empty.
  */
  transactions) {
    _classCallCheck(this, ViewUpdate);
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    /**
    @internal
    */
    this.flags = 0;
    this.startState = view.state;
    this.changes = _state.ChangeSet.empty(this.startState.doc.length);
    var _iterator9 = _createForOfIteratorHelper(transactions),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var tr = _step9.value;
        this.changes = this.changes.compose(tr.changes);
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    var changedRanges = [];
    this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
      return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
    });
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  _createClass(ViewUpdate, [{
    key: "viewportChanged",
    get:
    /**
    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
    update.
    */
    function get() {
      return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
    }
    /**
    Indicates whether the height of a block element in the editor
    changed in this update.
    */
  }, {
    key: "heightChanged",
    get: function get() {
      return (this.flags & 2 /* UpdateFlag.Height */) > 0;
    }
    /**
    Returns true when the document was modified or the size of the
    editor, or elements within the editor, changed.
    */
  }, {
    key: "geometryChanged",
    get: function get() {
      return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
  }, {
    key: "focusChanged",
    get: function get() {
      return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
    }
    /**
    Whether the document changed in this update.
    */
  }, {
    key: "docChanged",
    get: function get() {
      return !this.changes.empty;
    }
    /**
    Whether the selection was explicitly set in this update.
    */
  }, {
    key: "selectionSet",
    get: function get() {
      return this.transactions.some(function (tr) {
        return tr.selection;
      });
    }
    /**
    @internal
    */
  }, {
    key: "empty",
    get: function get() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  }], [{
    key: "create",
    value: function create(view, state, transactions) {
      return new ViewUpdate(view, state, transactions);
    }
  }]);
  return ViewUpdate;
}();
/**
Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
*/
exports.ViewUpdate = ViewUpdate;
var Direction = /*@__PURE__*/function (Direction) {
  // (These are chosen to match the base levels, in bidi algorithm
  // terms, of spans in that direction.)
  /**
  Left-to-right.
  */
  Direction[Direction["LTR"] = 0] = "LTR";
  /**
  Right-to-left.
  */
  Direction[Direction["RTL"] = 1] = "RTL";
  return Direction;
}(Direction || (exports.Direction = Direction = {}));
exports.Direction = Direction;
var LTR = Direction.LTR,
  RTL = Direction.RTL;
// Decode a string with each type encoded as log2(type)
function dec(str) {
  var result = [];
  for (var i = 0; i < str.length; i++) result.push(1 << +str[i]);
  return result;
}
// Character types for codepoints 0 to 0xf8
var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
// Character types for codepoints 0x600 to 0x6f9
var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /*@__PURE__*/Object.create(null),
  BracketStack = [];
// There's a lot more in
// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
// which are left out to keep code size down.
for (var _i3 = 0, _arr = ["()", "[]", "{}"]; _i3 < _arr.length; _i3++) {
  var p = _arr[_i3];
  var l = /*@__PURE__*/p.charCodeAt(0),
    r = /*@__PURE__*/p.charCodeAt(1);
  Brackets[l] = r;
  Brackets[r] = -l;
}
function charType(ch) {
  return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ : 0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ : 0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;
}

var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
/**
Represents a contiguous range of text that has a single direction
(as in left-to-right or right-to-left).
*/
var BidiSpan = /*#__PURE__*/function () {
  /**
  @internal
  */
  function BidiSpan(
  /**
  The start of the span (relative to the start of the line).
  */
  from,
  /**
  The end of the span.
  */
  to,
  /**
  The ["bidi
  level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
  of the span (in this context, 0 means
  left-to-right, 1 means right-to-left, 2 means left-to-right
  number inside right-to-left text).
  */
  level) {
    _classCallCheck(this, BidiSpan);
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  The direction of this span.
  */
  _createClass(BidiSpan, [{
    key: "dir",
    get: function get() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
  }, {
    key: "side",
    value: function side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
  }], [{
    key: "find",
    value: function find(order, index, level, assoc) {
      var maybe = -1;
      for (var i = 0; i < order.length; i++) {
        var span = order[i];
        if (span.from <= index && span.to >= index) {
          if (span.level == level) return i;
          // When multiple spans match, if assoc != 0, take the one that
          // covers that side, otherwise take the one with the minimum
          // level.
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;
        }
      }
      if (maybe < 0) throw new RangeError("Index out of range");
      return maybe;
    }
  }]);
  return BidiSpan;
}(); // Reused array of character types
exports.BidiSpan = BidiSpan;
var types = [];
function computeOrder(line, direction) {
  var len = line.length,
    outerType = direction == LTR ? 1 /* T.L */ : 2 /* T.R */,
    oppositeType = direction == LTR ? 2 /* T.R */ : 1 /* T.L */;
  if (!line || outerType == 1 /* T.L */ && !BidiRE.test(line)) return trivialOrder(len);
  // W1. Examine each non-spacing mark (NSM) in the level run, and
  // change the type of the NSM to the type of the previous
  // character. If the NSM is at the start of the level run, it will
  // get the type of sor.
  // W2. Search backwards from each instance of a European number
  // until the first strong type (R, L, AL, or sor) is found. If an
  // AL is found, change the type of the European number to Arabic
  // number.
  // W3. Change all ALs to R.
  // (Left after this: L, R, EN, AN, ET, CS, NI)
  for (var i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    var type = charType(line.charCodeAt(i));
    if (type == 512 /* T.NSM */) type = prev;else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */) type = 16 /* T.AN */;
    types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
    if (type & 7 /* T.Strong */) prevStrong = type;
    prev = type;
  }
  // W5. A sequence of European terminators adjacent to European
  // numbers changes to all European numbers.
  // W6. Otherwise, separators and terminators change to Other
  // Neutral.
  // W7. Search backwards from each instance of a European number
  // until the first strong type (R, L, or sor) is found. If an L is
  // found, then change the type of the European number to L.
  // (Left after this: L, R, EN+AN, NI)
  for (var _i4 = 0, _prev = outerType, _prevStrong = outerType; _i4 < len; _i4++) {
    var _type2 = types[_i4];
    if (_type2 == 128 /* T.CS */) {
      if (_i4 < len - 1 && _prev == types[_i4 + 1] && _prev & 24 /* T.Num */) _type2 = types[_i4] = _prev;else types[_i4] = 256 /* T.NI */;
    } else if (_type2 == 64 /* T.ET */) {
      var end = _i4 + 1;
      while (end < len && types[end] == 64 /* T.ET */) end++;
      var replace = _i4 && _prev == 8 /* T.EN */ || end < len && types[end] == 8 /* T.EN */ ? _prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */ : 256 /* T.NI */;
      for (var j = _i4; j < end; j++) types[j] = replace;
      _i4 = end - 1;
    } else if (_type2 == 8 /* T.EN */ && _prevStrong == 1 /* T.L */) {
      types[_i4] = 1 /* T.L */;
    }

    _prev = _type2;
    if (_type2 & 7 /* T.Strong */) _prevStrong = _type2;
  }
  // N0. Process bracket pairs in an isolating run sequence
  // sequentially in the logical order of the text positions of the
  // opening paired brackets using the logic given below. Within this
  // scope, bidirectional types EN and AN are treated as R.
  for (var _i5 = 0, sI = 0, context = 0, ch, br, _type3; _i5 < len; _i5++) {
    // Keeps [startIndex, type, strongSeen] triples for each open
    // bracket on BracketStack.
    if (br = Brackets[ch = line.charCodeAt(_i5)]) {
      if (br < 0) {
        // Closing bracket
        for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
          if (BracketStack[sJ + 1] == -br) {
            var flags = BracketStack[sJ + 2];
            var _type4 = flags & 2 /* Bracketed.EmbedInside */ ? outerType : !(flags & 4 /* Bracketed.OppositeInside */) ? 0 : flags & 1 /* Bracketed.OppositeBefore */ ? oppositeType : outerType;
            if (_type4) types[_i5] = types[BracketStack[sJ]] = _type4;
            sI = sJ;
            break;
          }
        }
      } else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
        break;
      } else {
        BracketStack[sI++] = _i5;
        BracketStack[sI++] = ch;
        BracketStack[sI++] = context;
      }
    } else if ((_type3 = types[_i5]) == 2 /* T.R */ || _type3 == 1 /* T.L */) {
      var embed = _type3 == outerType;
      context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
      for (var _sJ = sI - 3; _sJ >= 0; _sJ -= 3) {
        var cur = BracketStack[_sJ + 2];
        if (cur & 2 /* Bracketed.EmbedInside */) break;
        if (embed) {
          BracketStack[_sJ + 2] |= 2 /* Bracketed.EmbedInside */;
        } else {
          if (cur & 4 /* Bracketed.OppositeInside */) break;
          BracketStack[_sJ + 2] |= 4 /* Bracketed.OppositeInside */;
        }
      }
    }
  }
  // N1. A sequence of neutrals takes the direction of the
  // surrounding strong text if the text on both sides has the same
  // direction. European and Arabic numbers act as if they were R in
  // terms of their influence on neutrals. Start-of-level-run (sor)
  // and end-of-level-run (eor) are used at level run boundaries.
  // N2. Any remaining neutrals take the embedding direction.
  // (Left after this: L, R, EN+AN)
  for (var _i6 = 0; _i6 < len; _i6++) {
    if (types[_i6] == 256 /* T.NI */) {
      var _end = _i6 + 1;
      while (_end < len && types[_end] == 256 /* T.NI */) _end++;
      var beforeL = (_i6 ? types[_i6 - 1] : outerType) == 1 /* T.L */;
      var afterL = (_end < len ? types[_end] : outerType) == 1 /* T.L */;
      var _replace = beforeL == afterL ? beforeL ? 1 /* T.L */ : 2 /* T.R */ : outerType;
      for (var _j2 = _i6; _j2 < _end; _j2++) types[_j2] = _replace;
      _i6 = _end - 1;
    }
  }
  // Here we depart from the documented algorithm, in order to avoid
  // building up an actual levels array. Since there are only three
  // levels (0, 1, 2) in an implementation that doesn't take
  // explicit embedding into account, we can build up the order on
  // the fly, without following the level-based algorithm.
  var order = [];
  if (outerType == 1 /* T.L */) {
    for (var _i7 = 0; _i7 < len;) {
      var start = _i7,
        rtl = types[_i7++] != 1 /* T.L */;
      while (_i7 < len && rtl == (types[_i7] != 1 /* T.L */)) _i7++;
      if (rtl) {
        for (var _j3 = _i7; _j3 > start;) {
          var _end2 = _j3,
            _l = types[--_j3] != 2 /* T.R */;
          while (_j3 > start && _l == (types[_j3 - 1] != 2 /* T.R */)) _j3--;
          order.push(new BidiSpan(_j3, _end2, _l ? 2 : 1));
        }
      } else {
        order.push(new BidiSpan(start, _i7, 0));
      }
    }
  } else {
    for (var _i8 = 0; _i8 < len;) {
      var _start2 = _i8,
        _rtl = types[_i8++] == 2 /* T.R */;
      while (_i8 < len && _rtl == (types[_i8] == 2 /* T.R */)) _i8++;
      order.push(new BidiSpan(_start2, _i8, _rtl ? 1 : 2));
    }
  }
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
var movedOver = "";
function moveVisually(line, order, dir, start, forward) {
  var _a;
  var startIndex = start.head - line.from,
    spanI = -1;
  if (startIndex == 0) {
    if (!forward || !line.length) return null;
    if (order[0].level != dir) {
      startIndex = order[0].side(false, dir);
      spanI = 0;
    }
  } else if (startIndex == line.length) {
    if (forward) return null;
    var last = order[order.length - 1];
    if (last.level != dir) {
      startIndex = last.side(true, dir);
      spanI = order.length - 1;
    }
  }
  if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
  var span = order[spanI];
  // End of span. (But not end of line--that was checked for above.)
  if (startIndex == span.side(forward, dir)) {
    span = order[spanI += forward ? 1 : -1];
    startIndex = span.side(!forward, dir);
  }
  var indexForward = forward == (span.dir == dir);
  var nextIndex = (0, _state.findClusterBreak)(line.text, startIndex, indexForward);
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  if (nextIndex != span.side(forward, dir)) return _state.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
  var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (!nextSpan && span.level != dir) return _state.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
  if (nextSpan && nextSpan.level < span.level) return _state.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
  return _state.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
}
var LineBreakPlaceholder = "\uFFFF";
var DOMReader = /*#__PURE__*/function () {
  function DOMReader(points, state) {
    _classCallCheck(this, DOMReader);
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(_state.EditorState.lineSeparator);
  }
  _createClass(DOMReader, [{
    key: "append",
    value: function append(text) {
      this.text += text;
    }
  }, {
    key: "lineBreak",
    value: function lineBreak() {
      this.text += LineBreakPlaceholder;
    }
  }, {
    key: "readRange",
    value: function readRange(start, end) {
      if (!start) return this;
      var parent = start.parentNode;
      for (var cur = start;;) {
        this.findPointBefore(parent, cur);
        this.readNode(cur);
        var next = cur.nextSibling;
        if (next == end) break;
        var view = ContentView.get(cur),
          nextView = ContentView.get(next);
        if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)) this.lineBreak();
        cur = next;
      }
      this.findPointBefore(parent, end);
      return this;
    }
  }, {
    key: "readTextNode",
    value: function readTextNode(node) {
      var text = node.nodeValue;
      var _iterator10 = _createForOfIteratorHelper(this.points),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _point = _step10.value;
          if (_point.node == node) _point.pos = this.text.length + Math.min(_point.offset, text.length);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      for (var off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
        var nextBreak = -1,
          breakSize = 1,
          m = void 0;
        if (this.lineSeparator) {
          nextBreak = text.indexOf(this.lineSeparator, off);
          breakSize = this.lineSeparator.length;
        } else if (m = re.exec(text)) {
          nextBreak = m.index;
          breakSize = m[0].length;
        }
        this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
        if (nextBreak < 0) break;
        this.lineBreak();
        if (breakSize > 1) {
          var _iterator11 = _createForOfIteratorHelper(this.points),
            _step11;
          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var point = _step11.value;
              if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
        }
        off = nextBreak + breakSize;
      }
    }
  }, {
    key: "readNode",
    value: function readNode(node) {
      if (node.cmIgnore) return;
      var view = ContentView.get(node);
      var fromView = view && view.overrideDOMText;
      if (fromView != null) {
        this.findPointInside(node, fromView.length);
        for (var i = fromView.iter(); !i.next().done;) {
          if (i.lineBreak) this.lineBreak();else this.append(i.value);
        }
      } else if (node.nodeType == 3) {
        this.readTextNode(node);
      } else if (node.nodeName == "BR") {
        if (node.nextSibling) this.lineBreak();
      } else if (node.nodeType == 1) {
        this.readRange(node.firstChild, null);
      }
    }
  }, {
    key: "findPointBefore",
    value: function findPointBefore(node, next) {
      var _iterator12 = _createForOfIteratorHelper(this.points),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var point = _step12.value;
          if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
    }
  }, {
    key: "findPointInside",
    value: function findPointInside(node, maxLen) {
      var _iterator13 = _createForOfIteratorHelper(this.points),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var point = _step13.value;
          if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  }]);
  return DOMReader;
}();
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
  _classCallCheck(this, DOMPoint);
  this.node = node;
  this.offset = offset;
  this.pos = -1;
});
var DocView = /*#__PURE__*/function (_ContentView7) {
  _inherits(DocView, _ContentView7);
  var _super13 = _createSuper(DocView);
  function DocView(view) {
    var _this11;
    _classCallCheck(this, DocView);
    _this11 = _super13.call(this);
    _this11.view = view;
    _this11.compositionDeco = Decoration.none;
    _this11.decorations = [];
    _this11.dynamicDecorationMap = [];
    // Track a minimum width for the editor. When measuring sizes in
    // measureVisibleLineHeights, this is updated to point at the width
    // of a given element and its extent in the document. When a change
    // happens in that range, these are reset. That way, once we've seen
    // a line/element of a given length, we keep the editor wide enough
    // to fit at least that element, until it is changed, at which point
    // we forget it again.
    _this11.minWidth = 0;
    _this11.minWidthFrom = 0;
    _this11.minWidthTo = 0;
    // Track whether the DOM selection was set in a lossy way, so that
    // we don't mess it up when reading it back it
    _this11.impreciseAnchor = null;
    _this11.impreciseHead = null;
    _this11.forceSelection = false;
    // Used by the resize observer to ignore resizes that we caused
    // ourselves
    _this11.lastUpdate = Date.now();
    _this11.setDOM(view.contentDOM);
    _this11.children = [new LineView()];
    _this11.children[0].setParent(_assertThisInitialized(_this11));
    _this11.updateDeco();
    _this11.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
    return _this11;
  }
  _createClass(DocView, [{
    key: "length",
    get: function get() {
      return this.view.state.doc.length;
    }
    // Update the document view to a given state. scrollIntoView can be
    // used as a hint to compute a new viewport that includes that
    // position, if we know the editor is going to scroll that position
    // into view.
  }, {
    key: "update",
    value: function update(_update) {
      var _this12 = this;
      var changedRanges = _update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(function (_ref2) {
          var fromA = _ref2.fromA,
            toA = _ref2.toA;
          return toA < _this12.minWidthFrom || fromA > _this12.minWidthTo;
        })) {
          this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
        } else {
          this.minWidthFrom = _update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = _update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (_update.transactions.length || this.dirty) this.compositionDeco = computeCompositionDeco(this.view, _update.changes);
      // When the DOM nodes around the selection are moved to another
      // parent, Chrome sometimes reports a different selection through
      // getSelection than the one that it actually shows to the user.
      // This forces a selection update when lines are joined to work
      // around that. Issue #54
      if ((browser.ie || browser.chrome) && !this.compositionDeco.size && _update && _update.state.doc.lines != _update.startState.doc.lines) this.forceSelection = true;
      var prevDeco = this.decorations,
        deco = this.updateDeco();
      var decoDiff = findChangedDeco(prevDeco, deco, _update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      if (this.dirty == 0 /* Dirty.Not */ && changedRanges.length == 0) {
        return false;
      } else {
        this.updateInner(changedRanges, _update.startState.doc.length);
        if (_update.transactions.length) this.lastUpdate = Date.now();
        return true;
      }
    }
    // Used by update and the constructor do perform the actual DOM
    // update
  }, {
    key: "updateInner",
    value: function updateInner(changes, oldLength) {
      var _this13 = this;
      this.view.viewState.mustMeasureContent = true;
      this.updateChildren(changes, oldLength);
      var observer = this.view.observer;
      observer.ignore(function () {
        // Lock the height during redrawing, since Chrome sometimes
        // messes with the scroll position during DOM mutation (though
        // no relayout is triggered and I cannot imagine how it can
        // recompute the scroll position without a layout)
        _this13.dom.style.height = _this13.view.viewState.contentHeight + "px";
        _this13.dom.style.flexBasis = _this13.minWidth ? _this13.minWidth + "px" : "";
        // Chrome will sometimes, when DOM mutations occur directly
        // around the selection, get confused and report a different
        // selection from the one it displays (issue #218). This tries
        // to detect that situation.
        var track = browser.chrome || browser.ios ? {
          node: observer.selectionRange.focusNode,
          written: false
        } : undefined;
        _this13.sync(_this13.view, track);
        _this13.dirty = 0 /* Dirty.Not */;
        if (track && (track.written || observer.selectionRange.focusNode != track.node)) _this13.forceSelection = true;
        _this13.dom.style.height = "";
      });
      var gaps = [];
      if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
        var _iterator14 = _createForOfIteratorHelper(this.children),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var child = _step14.value;
            if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }
      observer.updateGaps(gaps);
    }
  }, {
    key: "updateChildren",
    value: function updateChildren(changes, oldLength) {
      var cursor = this.childCursor(oldLength);
      for (var i = changes.length - 1;; i--) {
        var next = i >= 0 ? changes[i] : null;
        if (!next) break;
        var fromA = next.fromA,
          toA = next.toA,
          fromB = next.fromB,
          toB = next.toB;
        var _ContentBuilder$build = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap),
          content = _ContentBuilder$build.content,
          breakAtStart = _ContentBuilder$build.breakAtStart,
          openStart = _ContentBuilder$build.openStart,
          openEnd = _ContentBuilder$build.openEnd;
        var _cursor$findPos = cursor.findPos(toA, 1),
          toI = _cursor$findPos.i,
          toOff = _cursor$findPos.off;
        var _cursor$findPos2 = cursor.findPos(fromA, -1),
          fromI = _cursor$findPos2.i,
          fromOff = _cursor$findPos2.off;
        replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
      }
    }
    // Sync the DOM selection to this.state.selection
  }, {
    key: "updateSelection",
    value: function updateSelection() {
      var _this14 = this;
      var mustRead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();
      var activeElt = this.view.root.activeElement,
        focused = activeElt == this.dom;
      var selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
      if (!(focused || fromPointer || selectionNotFocus)) return;
      var force = this.forceSelection;
      this.forceSelection = false;
      var main = this.view.state.selection.main;
      // FIXME need to handle the case where the selection falls inside a block range
      var anchor = this.domAtPos(main.anchor);
      var head = main.empty ? anchor : this.domAtPos(main.head);
      // Always reset on Firefox when next to an uneditable node to
      // avoid invisible cursor bugs (#111)
      if (browser.gecko && main.empty && !this.compositionDeco.size && betweenUneditable(anchor)) {
        var dummy = document.createTextNode("");
        this.view.observer.ignore(function () {
          return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
        });
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      var domSel = this.view.observer.selectionRange;
      // If the selection is already here, or in an equivalent position, don't touch it
      if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
        this.view.observer.ignore(function () {
          // Chrome Android will hide the virtual keyboard when tapping
          // inside an uneditable node, and not bring it back when we
          // move the cursor to its proper position. This tries to
          // restore the keyboard by cycling focus.
          if (browser.android && browser.chrome && _this14.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, _this14.dom)) {
            _this14.dom.blur();
            _this14.dom.focus({
              preventScroll: true
            });
          }
          var rawSel = getSelection(_this14.view.root);
          if (!rawSel) ;else if (main.empty) {
            // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
            if (browser.gecko) {
              var nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                var text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
                if (text) anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            rawSel.collapse(anchor.node, anchor.offset);
            // Safari will ignore the call above when the editor is
            // hidden, and then raise an error on the call to extend
            // (#940).
            try {
              rawSel.extend(head.node, head.offset);
            } catch (_) {}
          } else {
            // Primitive (IE) way
            var range = document.createRange();
            if (main.anchor > main.head) {
              var _ref3 = [head, anchor];
              anchor = _ref3[0];
              head = _ref3[1];
            }
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
          if (selectionNotFocus && _this14.view.root.activeElement == _this14.dom) {
            _this14.dom.blur();
            if (activeElt) activeElt.focus();
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
  }, {
    key: "enforceCursorAssoc",
    value: function enforceCursorAssoc() {
      if (this.compositionDeco.size) return;
      var view = this.view,
        cursor = view.state.selection.main;
      var sel = getSelection(view.root);
      var _view$observer$select = view.observer.selectionRange,
        anchorNode = _view$observer$select.anchorNode,
        anchorOffset = _view$observer$select.anchorOffset;
      if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;
      var line = LineView.find(this, cursor.head);
      if (!line) return;
      var lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
      var before = this.coordsAt(cursor.head, -1),
        after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top) return;
      var dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
      // This can go wrong in corner cases like single-character lines,
      // so check and reset if necessary.
      view.observer.readSelectionRange();
      var newRange = view.observer.selectionRange;
      if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from) sel.collapse(anchorNode, anchorOffset);
    }
  }, {
    key: "nearest",
    value: function nearest(dom) {
      for (var cur = dom; cur;) {
        var domView = ContentView.get(cur);
        if (domView && domView.rootView == this) return domView;
        cur = cur.parentNode;
      }
      return null;
    }
  }, {
    key: "posFromDOM",
    value: function posFromDOM(node, offset) {
      var view = this.nearest(node);
      if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view.localPosFromDOM(node, offset) + view.posAtStart;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      var _this$childCursor$fin = this.childCursor().findPos(pos, -1),
        i = _this$childCursor$fin.i,
        off = _this$childCursor$fin.off;
      for (; i < this.children.length - 1;) {
        var child = this.children[i];
        if (off < child.length || child instanceof LineView) break;
        i++;
        off = 0;
      }
      return this.children[i].domAtPos(off);
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      for (var off = this.length, i = this.children.length - 1;; i--) {
        var child = this.children[i],
          start = off - child.breakAfter - child.length;
        if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
        off = start;
      }
    }
  }, {
    key: "measureVisibleLineHeights",
    value: function measureVisibleLineHeights(viewport) {
      var result = [],
        from = viewport.from,
        to = viewport.to;
      var contentWidth = this.view.contentDOM.clientWidth;
      var isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      var widest = -1,
        ltr = this.view.textDirection == Direction.LTR;
      for (var pos = 0, i = 0; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (end > to) break;
        if (pos >= from) {
          var childRect = child.dom.getBoundingClientRect();
          result.push(childRect.height);
          if (isWider) {
            var last = child.dom.lastChild;
            var rects = last ? clientRectsFor(last) : [];
            if (rects.length) {
              var rect = rects[rects.length - 1];
              var width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
              if (width > widest) {
                widest = width;
                this.minWidth = contentWidth;
                this.minWidthFrom = pos;
                this.minWidthTo = end;
              }
            }
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
  }, {
    key: "textDirectionAt",
    value: function textDirectionAt(pos) {
      var _this$childPos2 = this.childPos(pos, 1),
        i = _this$childPos2.i;
      return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
    }
  }, {
    key: "measureTextSize",
    value: function measureTextSize() {
      var _this15 = this;
      var _iterator15 = _createForOfIteratorHelper(this.children),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var child = _step15.value;
          if (child instanceof LineView) {
            var measure = child.measureTextSize();
            if (measure) return measure;
          }
        }
        // If no workable line exists, force a layout of a measurable element
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      var dummy = document.createElement("div"),
        lineHeight,
        charWidth,
        textHeight;
      dummy.className = "cm-line";
      dummy.style.width = "99999px";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(function () {
        _this15.dom.appendChild(dummy);
        var rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        textHeight = rect ? rect.height : lineHeight;
        dummy.remove();
      });
      return {
        lineHeight: lineHeight,
        charWidth: charWidth,
        textHeight: textHeight
      };
    }
  }, {
    key: "childCursor",
    value: function childCursor() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      // Move back to start of last element when possible, so that
      // `ChildCursor.findPos` doesn't have to deal with the edge case
      // of being after the last element.
      var i = this.children.length;
      if (i) pos -= this.children[--i].length;
      return new ChildCursor(this.children, pos, i);
    }
  }, {
    key: "computeBlockGapDeco",
    value: function computeBlockGapDeco() {
      var deco = [],
        vs = this.view.viewState;
      for (var pos = 0, i = 0;; i++) {
        var next = i == vs.viewports.length ? null : vs.viewports[i];
        var end = next ? next.from - 1 : this.length;
        if (end > pos) {
          var height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true,
            isBlockGap: true
          }).range(pos, end));
        }
        if (!next) break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
  }, {
    key: "updateDeco",
    value: function updateDeco() {
      var _this16 = this;
      var allDeco = this.view.state.facet(decorations).map(function (d, i) {
        var dynamic = _this16.dynamicDecorationMap[i] = typeof d == "function";
        return dynamic ? d(_this16.view) : d;
      });
      for (var i = allDeco.length; i < allDeco.length + 3; i++) this.dynamicDecorationMap[i] = false;
      return this.decorations = [].concat(_toConsumableArray(allDeco), [this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView(target) {
      var _this17 = this;
      var range = target.range;
      var rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
        other;
      if (!rect) return;
      if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
      var mLeft = 0,
        mRight = 0,
        mTop = 0,
        mBottom = 0;
      var _iterator16 = _createForOfIteratorHelper(this.view.state.facet(scrollMargins).map(function (f) {
          return f(_this17.view);
        })),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var margins = _step16.value;
          if (margins) {
            var left = margins.left,
              right = margins.right,
              top = margins.top,
              bottom = margins.bottom;
            if (left != null) mLeft = Math.max(mLeft, left);
            if (right != null) mRight = Math.max(mRight, right);
            if (top != null) mTop = Math.max(mTop, top);
            if (bottom != null) mBottom = Math.max(mBottom, bottom);
          }
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      var targetRect = {
        left: rect.left - mLeft,
        top: rect.top - mTop,
        right: rect.right + mRight,
        bottom: rect.bottom + mBottom
      };
      scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
    }
  }]);
  return DocView;
}(ContentView);
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
var BlockGapWidget = /*#__PURE__*/function (_WidgetType2) {
  _inherits(BlockGapWidget, _WidgetType2);
  var _super14 = _createSuper(BlockGapWidget);
  function BlockGapWidget(height) {
    var _this18;
    _classCallCheck(this, BlockGapWidget);
    _this18 = _super14.call(this);
    _this18.height = height;
    return _this18;
  }
  _createClass(BlockGapWidget, [{
    key: "toDOM",
    value: function toDOM() {
      var elt = document.createElement("div");
      this.updateDOM(elt);
      return elt;
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return other.height == this.height;
    }
  }, {
    key: "updateDOM",
    value: function updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
  }, {
    key: "estimatedHeight",
    get: function get() {
      return this.height;
    }
  }]);
  return BlockGapWidget;
}(WidgetType);
function compositionSurroundingNode(view) {
  var sel = view.observer.selectionRange;
  var textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
  if (!textNode) return null;
  var cView = view.docView.nearest(textNode);
  if (!cView) return null;
  if (cView instanceof LineView) {
    var topNode = textNode;
    while (topNode.parentNode != cView.dom) topNode = topNode.parentNode;
    var prev = topNode.previousSibling;
    while (prev && !ContentView.get(prev)) prev = prev.previousSibling;
    var pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
    return {
      from: pos,
      to: pos,
      node: topNode,
      text: textNode
    };
  } else {
    for (;;) {
      var _cView = cView,
        parent = _cView.parent;
      if (!parent) return null;
      if (parent instanceof LineView) break;
      cView = parent;
    }
    var from = cView.posAtStart;
    return {
      from: from,
      to: from + cView.length,
      node: cView.dom,
      text: textNode
    };
  }
}
function computeCompositionDeco(view, changes) {
  var surrounding = compositionSurroundingNode(view);
  if (!surrounding) return Decoration.none;
  var from = surrounding.from,
    to = surrounding.to,
    node = surrounding.node,
    textNode = surrounding.text;
  var newFrom = changes.mapPos(from, 1),
    newTo = Math.max(newFrom, changes.mapPos(to, -1));
  var state = view.state,
    text = node.nodeType == 3 ? node.nodeValue : new DOMReader([], state).readRange(node.firstChild, null).text;
  if (newTo - newFrom < text.length) {
    if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text) newTo = newFrom + text.length;else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text) newFrom = newTo - text.length;else return Decoration.none;
  } else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
    return Decoration.none;
  }
  var topView = ContentView.get(node);
  if (topView instanceof CompositionView) topView = topView.widget.topView;else if (topView) topView.parent = null;
  return Decoration.set(Decoration.replace({
    widget: new CompositionWidget(node, textNode, topView),
    inclusive: true
  }).range(newFrom, newTo));
}
var CompositionWidget = /*#__PURE__*/function (_WidgetType3) {
  _inherits(CompositionWidget, _WidgetType3);
  var _super15 = _createSuper(CompositionWidget);
  function CompositionWidget(top, text, topView) {
    var _this19;
    _classCallCheck(this, CompositionWidget);
    _this19 = _super15.call(this);
    _this19.top = top;
    _this19.text = text;
    _this19.topView = topView;
    return _this19;
  }
  _createClass(CompositionWidget, [{
    key: "eq",
    value: function eq(other) {
      return this.top == other.top && this.text == other.text;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return this.top;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }, {
    key: "customView",
    get: function get() {
      return CompositionView;
    }
  }]);
  return CompositionWidget;
}(WidgetType);
function nearbyTextNode(startNode, startOffset, side) {
  if (side <= 0) for (var node = startNode, offset = startOffset;;) {
    if (node.nodeType == 3) return node;
    if (node.nodeType == 1 && offset > 0) {
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else {
      break;
    }
  }
  if (side >= 0) for (var _node = startNode, _offset = startOffset;;) {
    if (_node.nodeType == 3) return _node;
    if (_node.nodeType == 1 && _offset < _node.childNodes.length && side >= 0) {
      _node = _node.childNodes[_offset];
      _offset = 0;
    } else {
      break;
    }
  }
  return null;
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1) return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
}
var DecorationComparator$1 = /*#__PURE__*/function () {
  function DecorationComparator$1() {
    _classCallCheck(this, DecorationComparator$1);
    this.changes = [];
  }
  _createClass(DecorationComparator$1, [{
    key: "compareRange",
    value: function compareRange(from, to) {
      addRange(from, to, this.changes);
    }
  }, {
    key: "comparePoint",
    value: function comparePoint(from, to) {
      addRange(from, to, this.changes);
    }
  }]);
  return DecorationComparator$1;
}();
function findChangedDeco(a, b, diff) {
  var comp = new DecorationComparator$1();
  _state.RangeSet.compare(a, b, diff, comp);
  return comp.changes;
}
function inUneditable(node, inside) {
  for (var cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
    if (cur.nodeType == 1 && cur.contentEditable == 'false') {
      return true;
    }
  }
  return false;
}
function groupAt(state, pos) {
  var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var categorize = state.charCategorizer(pos);
  var line = state.doc.lineAt(pos),
    linePos = pos - line.from;
  if (line.length == 0) return _state.EditorSelection.cursor(pos);
  if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
  var from = linePos,
    to = linePos;
  if (bias < 0) from = (0, _state.findClusterBreak)(line.text, linePos, false);else to = (0, _state.findClusterBreak)(line.text, linePos);
  var cat = categorize(line.text.slice(from, to));
  while (from > 0) {
    var prev = (0, _state.findClusterBreak)(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat) break;
    from = prev;
  }
  while (to < line.length) {
    var next = (0, _state.findClusterBreak)(line.text, to);
    if (categorize(line.text.slice(to, next)) != cat) break;
    to = next;
  }
  return _state.EditorSelection.range(from + line.from, to + line.from);
}
// Search the DOM for the {node, offset} position closest to the given
// coordinates. Very inefficient and crude, but can usually be avoided
// by calling caret(Position|Range)FromPoint instead.
function getdx(x, rect) {
  return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
}
function getdy(y, rect) {
  return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
}
function yOverlap(a, b) {
  return a.top < b.bottom - 1 && a.bottom > b.top + 1;
}
function upTop(rect, top) {
  return top < rect.top ? {
    top: top,
    left: rect.left,
    right: rect.right,
    bottom: rect.bottom
  } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? {
    top: rect.top,
    left: rect.left,
    right: rect.right,
    bottom: bottom
  } : rect;
}
function domPosAtCoords(parent, x, y) {
  var closest,
    closestRect,
    closestX,
    closestY,
    closestOverlap = false;
  var above, below, aboveRect, belowRect;
  for (var child = parent.firstChild; child; child = child.nextSibling) {
    var rects = clientRectsFor(child);
    for (var i = 0; i < rects.length; i++) {
      var rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      var dx = getdx(x, rect),
        dy = getdy(y, rect);
      if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        var side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
      }
      if (dx == 0) {
        if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest) return {
    node: parent,
    offset: 0
  };
  var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
  if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
  if (closestOverlap && closest.contentEditable != "false") return domPosAtCoords(closest, clipX, y);
  var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return {
    node: parent,
    offset: offset
  };
}
function domPosInText(node, x, y) {
  var len = node.nodeValue.length;
  var closestOffset = -1,
    closestDY = 1e9,
    generalSide = 0;
  for (var i = 0; i < len; i++) {
    var rects = textRange(node, i, i + 1).getClientRects();
    for (var j = 0; j < rects.length; j++) {
      var rect = rects[j];
      if (rect.top == rect.bottom) continue;
      if (!generalSide) generalSide = x - rect.left;
      var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
      if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
        var right = x >= (rect.left + rect.right) / 2,
          after = right;
        if (browser.chrome || browser.gecko) {
          // Check for RTL on browsers that support getting client
          // rects for empty ranges.
          var rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right) after = !right;
        }
        if (dy <= 0) return {
          node: node,
          offset: i + (after ? 1 : 0)
        };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return {
    node: node,
    offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
  };
}
function _posAtCoords(view, coords, precise) {
  var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
  var _a, _b;
  var content = view.contentDOM.getBoundingClientRect(),
    docTop = content.top + view.viewState.paddingTop;
  var block,
    docHeight = view.viewState.docHeight;
  var x = coords.x,
    y = coords.y,
    yOffset = y - docTop;
  if (yOffset < 0) return 0;
  if (yOffset > docHeight) return view.state.doc.length;
  // Scan for a text block near the queried y position
  for (var halfLine = view.defaultLineHeight / 2, bounced = false;;) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text) break;
    for (;;) {
      // Move the y position out of this block
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight) break;
      // If the document consists entirely of replaced widgets, we
      // won't find a text block, so return 0
      if (bounced) return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y = docTop + yOffset;
  var lineStart = block.from;
  // If this is outside of the rendered viewport, we can't determine a position
  if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
  if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
  // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
  var doc = view.dom.ownerDocument;
  var root = view.root.elementFromPoint ? view.root : doc;
  var element = root.elementFromPoint(x, y);
  if (element && !view.contentDOM.contains(element)) element = null;
  // If the element is unexpected, clip x at the sides of the content area and try again
  if (!element) {
    x = Math.max(content.left + 1, Math.min(content.right - 1, x));
    element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element)) element = null;
  }
  // There's visible editor content under the point, so we can try
  // using caret(Position|Range)FromPoint as a shortcut
  var node,
    offset = -1;
  if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
    if (doc.caretPositionFromPoint) {
      var pos = doc.caretPositionFromPoint(x, y);
      if (pos) {
        node = pos.offsetNode;
        offset = pos.offset;
      }
    } else if (doc.caretRangeFromPoint) {
      var range = doc.caretRangeFromPoint(x, y);
      if (range) {
        node = range.startContainer;
        offset = range.startOffset;
        if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;
      }
    }
  }
  // No luck, do our own (potentially expensive) search
  if (!node || !view.docView.dom.contains(node)) {
    var line = LineView.find(view.docView, lineStart);
    if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;
    var _domPosAtCoords = domPosAtCoords(line.dom, x, y);
    node = _domPosAtCoords.node;
    offset = _domPosAtCoords.offset;
  }
  var nearest = view.docView.nearest(node);
  if (!nearest) return null;
  if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
    var rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block, x, y) {
  var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    var line = Math.floor((y - block.top) / view.defaultLineHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  var content = view.state.sliceDoc(block.from, block.to);
  return block.from + (0, _state.findColumn)(content, into, view.state.tabSize);
}
// In case of a high line height, Safari's caretRangeFromPoint treats
// the space between lines as belonging to the last character of the
// line before. This is used to detect such a result so that it can be
// ignored (issue #401).
function isSuspiciousSafariCaretResult(node, offset, x) {
  var len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;
  for (var next = node.nextSibling; next; next = next.nextSibling) if (next.nodeType != 1 || next.nodeName != "BR") return false;
  return textRange(node, len - 1, len).getBoundingClientRect().left > x;
}
// Chrome will move positions between lines to the start of the next line
function isSuspiciousChromeCaretResult(node, offset, x) {
  if (offset != 0) return false;
  for (var cur = node;;) {
    var parent = cur.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur) return false;
    if (parent.classList.contains("cm-line")) break;
    cur = parent;
  }
  var rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x - rect.left > 5;
}
function _moveToLineBoundary(view, start, forward, includeWrap) {
  var line = view.state.doc.lineAt(start.head);
  var coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
  if (coords) {
    var editorRect = view.dom.getBoundingClientRect();
    var direction = view.textDirectionAt(line.from);
    var pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null) return _state.EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  var lineView = LineView.find(view.docView, start.head);
  var end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
  return _state.EditorSelection.cursor(end, forward ? -1 : 1);
}
function _moveByChar(view, start, forward, by) {
  var line = view.state.doc.lineAt(start.head),
    spans = view.bidiSpans(line);
  var direction = view.textDirectionAt(line.from);
  for (var cur = start, check = null;;) {
    var next = moveVisually(line, spans, direction, cur, forward),
      _char = movedOver;
    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
      _char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = _state.EditorSelection.cursor(forward ? line.from : line.to);
    }
    if (!check) {
      if (!by) return next;
      check = by(_char);
    } else if (!check(_char)) {
      return cur;
    }
    cur = next;
  }
}
function byGroup(view, pos, start) {
  var categorize = view.state.charCategorizer(pos);
  var cat = categorize(start);
  return function (next) {
    var nextCat = categorize(next);
    if (cat == _state.CharCategory.Space) cat = nextCat;
    return cat == nextCat;
  };
}
function _moveVertically(view, start, forward, distance) {
  var startPos = start.head,
    dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0)) return _state.EditorSelection.cursor(startPos, start.assoc);
  var goal = start.goalColumn,
    startY;
  var rect = view.contentDOM.getBoundingClientRect();
  var startCoords = view.coordsAtPos(startPos),
    docTop = view.documentTop;
  if (startCoords) {
    if (goal == null) goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    var line = view.viewState.lineBlockAt(startPos);
    if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }
  var resolvedGoal = rect.left + goal;
  var dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
  for (var extra = 0;; extra += 10) {
    var curY = startY + (dist + extra) * dir;
    var pos = _posAtCoords(view, {
      x: resolvedGoal,
      y: curY
    }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return _state.EditorSelection.cursor(pos, start.assoc, undefined, goal);
  }
}
function skipAtoms(view, oldPos, pos) {
  var atoms = view.state.facet(atomicRanges).map(function (f) {
    return f(view);
  });
  var _loop = function _loop() {
    var moved = false;
    var _iterator17 = _createForOfIteratorHelper(atoms),
      _step17;
    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var set = _step17.value;
        set.between(pos.from - 1, pos.from + 1, function (from, to, value) {
          if (pos.from > from && pos.from < to) {
            pos = oldPos.head > pos.from ? _state.EditorSelection.cursor(from, 1) : _state.EditorSelection.cursor(to, -1);
            moved = true;
          }
        });
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
    if (!moved) return {
      v: pos
    };
  };
  for (;;) {
    var _ret = _loop();
    if (_typeof(_ret) === "object") return _ret.v;
  }
}

// This will also be where dragging info and such goes
var InputState = /*#__PURE__*/function () {
  function InputState(view) {
    var _this20 = this;
    _classCallCheck(this, InputState);
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.chromeScrollHack = -1;
    // On iOS, some keys need to have their default behavior happen
    // (after which we retroactively handle them and reset the DOM) to
    // avoid messing up the virtual keyboard state.
    this.pendingIOSKey = undefined;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastEscPress = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.registeredEvents = [];
    this.customHandlers = [];
    // -1 means not in a composition. Otherwise, this counts the number
    // of changes made during the composition. The count is used to
    // avoid treating the start state of the composition, before any
    // changes have been made, as part of the composition.
    this.composing = -1;
    // Tracks whether the next change should be marked as starting the
    // composition (null means no composition, true means next is the
    // first, false means first has already been marked for this
    // composition)
    this.compositionFirstChange = null;
    // End time of the previous composition
    this.compositionEndedAt = 0;
    // Used in a kludge to detect when an Enter keypress should be
    // considered part of the composition on Safari, which fires events
    // in the wrong order
    this.compositionPendingKey = false;
    // Used to categorize changes as part of a composition, even when
    // the mutation events fire shortly after the compositionend event
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    var handleEvent = function handleEvent(handler, event) {
      if (_this20.ignoreDuringComposition(event)) return;
      if (event.type == "keydown" && _this20.keydown(view, event)) return;
      if (_this20.mustFlushObserver(event)) view.observer.forceFlush();
      if (_this20.runCustomHandlers(event.type, view, event)) event.preventDefault();else handler(view, event);
    };
    var _loop2 = function _loop2() {
      var handler = handlers[type];
      view.contentDOM.addEventListener(type, function (event) {
        if (eventBelongsToEditor(view, event)) handleEvent(handler, event);
      }, handlerOptions[type]);
      _this20.registeredEvents.push(type);
    };
    for (var type in handlers) {
      _loop2();
    }
    view.scrollDOM.addEventListener("mousedown", function (event) {
      if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
        handleEvent(handlers.mousedown, event);
        if (!event.defaultPrevented && event.button == 2) {
          // Make sure the content covers the entire scroller height, in order
          // to catch a native context menu click below it
          var start = view.contentDOM.style.minHeight;
          view.contentDOM.style.minHeight = "100%";
          setTimeout(function () {
            return view.contentDOM.style.minHeight = start;
          }, 200);
        }
      }
    });
    view.scrollDOM.addEventListener("drop", function (event) {
      if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) handleEvent(handlers.drop, event);
    });
    if (browser.chrome && browser.chrome_version == 102) {
      // FIXME remove at some point
      // On Chrome 102, viewport updates somehow stop wheel-based
      // scrolling. Turning off pointer events during the scroll seems
      // to avoid the issue.
      view.scrollDOM.addEventListener("wheel", function () {
        if (_this20.chromeScrollHack < 0) view.contentDOM.style.pointerEvents = "none";else window.clearTimeout(_this20.chromeScrollHack);
        _this20.chromeScrollHack = setTimeout(function () {
          _this20.chromeScrollHack = -1;
          view.contentDOM.style.pointerEvents = "";
        }, 100);
      }, {
        passive: true
      });
    }
    this.notifiedFocused = view.hasFocus;
    // On Safari adding an input event handler somehow prevents an
    // issue where the composition vanishes when you press enter.
    if (browser.safari) view.contentDOM.addEventListener("input", function () {
      return null;
    });
  }
  _createClass(InputState, [{
    key: "setSelectionOrigin",
    value: function setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
  }, {
    key: "ensureHandlers",
    value: function ensureHandlers(view, plugins) {
      var _this21 = this;
      var _a;
      var handlers;
      this.customHandlers = [];
      var _iterator18 = _createForOfIteratorHelper(plugins),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var _plugin2 = _step18.value;
          if (handlers = (_a = _plugin2.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
            this.customHandlers.push({
              plugin: _plugin2.value,
              handlers: handlers
            });
            var _loop3 = function _loop3(type) {
              if (_this21.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                _this21.registeredEvents.push(type);
                view.contentDOM.addEventListener(type, function (event) {
                  if (!eventBelongsToEditor(view, event)) return;
                  if (_this21.runCustomHandlers(type, view, event)) event.preventDefault();
                });
              }
            };
            for (var type in handlers) {
              _loop3(type);
            }
          }
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
    }
  }, {
    key: "runCustomHandlers",
    value: function runCustomHandlers(type, view, event) {
      var _iterator19 = _createForOfIteratorHelper(this.customHandlers),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var set = _step19.value;
          var handler = set.handlers[type];
          if (handler) {
            try {
              if (handler.call(set.plugin, event, view) || event.defaultPrevented) return true;
            } catch (e) {
              logException(view.state, e);
            }
          }
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      return false;
    }
  }, {
    key: "runScrollHandlers",
    value: function runScrollHandlers(view, event) {
      this.lastScrollTop = view.scrollDOM.scrollTop;
      this.lastScrollLeft = view.scrollDOM.scrollLeft;
      var _iterator20 = _createForOfIteratorHelper(this.customHandlers),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var set = _step20.value;
          var handler = set.handlers.scroll;
          if (handler) {
            try {
              handler.call(set.plugin, event, view);
            } catch (e) {
              logException(view.state, e);
            }
          }
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
    }
  }, {
    key: "keydown",
    value: function keydown(view, event) {
      var _this22 = this;
      // Must always run, even if a custom handler handled the event
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000) return true;
      if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0) view.inputState.lastEscPress = 0;
      // Chrome for Android usually doesn't fire proper key events, but
      // occasionally does, usually surrounded by a bunch of complicated
      // composition changes. When an enter or backspace key event is
      // seen, hold off on handling DOM events for a bit, and then
      // dispatch it.
      if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
        view.observer.delayAndroidKey(event.key, event.keyCode);
        return true;
      }
      // Prevent the default behavior of Enter on iOS makes the
      // virtual keyboard get stuck in the wrong (lowercase)
      // state. So we let it go through, and then, in
      // applyDOMChange, notify key handlers of it and reset to
      // the state they produce.
      var pending;
      if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find(function (key) {
        return key.keyCode == event.keyCode;
      })) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
        this.pendingIOSKey = pending || event;
        setTimeout(function () {
          return _this22.flushIOSKey(view);
        }, 250);
        return true;
      }
      return false;
    }
  }, {
    key: "flushIOSKey",
    value: function flushIOSKey(view) {
      var key = this.pendingIOSKey;
      if (!key) return false;
      this.pendingIOSKey = undefined;
      return dispatchKey(view.contentDOM, key.key, key.keyCode);
    }
  }, {
    key: "ignoreDuringComposition",
    value: function ignoreDuringComposition(event) {
      if (!/^key/.test(event.type)) return false;
      if (this.composing > 0) return true;
      // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
      // On some input method editors (IMEs), the Enter key is used to
      // confirm character selection. On Safari, when Enter is pressed,
      // compositionend and keydown events are sometimes emitted in the
      // wrong order. The key event should still be ignored, even when
      // it happens after the compositionend event.
      if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
        this.compositionPendingKey = false;
        return true;
      }
      return false;
    }
  }, {
    key: "mustFlushObserver",
    value: function mustFlushObserver(event) {
      return event.type == "keydown" && event.keyCode != 229;
    }
  }, {
    key: "startMouseSelection",
    value: function startMouseSelection(mouseSelection) {
      if (this.mouseSelection) this.mouseSelection.destroy();
      this.mouseSelection = mouseSelection;
    }
  }, {
    key: "update",
    value: function update(_update2) {
      if (this.mouseSelection) this.mouseSelection.update(_update2);
      if (_update2.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.mouseSelection) this.mouseSelection.destroy();
    }
  }]);
  return InputState;
}();
var PendingKeys = [{
  key: "Backspace",
  keyCode: 8,
  inputType: "deleteContentBackward"
}, {
  key: "Enter",
  keyCode: 13,
  inputType: "insertParagraph"
}, {
  key: "Delete",
  keyCode: 46,
  inputType: "deleteContentForward"
}];
var EmacsyPendingKeys = "dthko";
// Key codes for modifier keys
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var dragScrollMargin = 6;
function dragScrollSpeed(dist) {
  return Math.max(0, dist) * 0.7 + 8;
}
var MouseSelection = /*#__PURE__*/function () {
  function MouseSelection(view, startEvent, style, mustSelect) {
    _classCallCheck(this, MouseSelection);
    this.view = view;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = {
      x: 0,
      y: 0
    };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParent = scrollableParent(view.contentDOM);
    var doc = view.contentDOM.ownerDocument;
    doc.addEventListener("mousemove", this.move = this.move.bind(this));
    doc.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(_state.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragMove = dragMovesSelection(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  _createClass(MouseSelection, [{
    key: "start",
    value: function start(event) {
      // When clicking outside of the selection, immediately apply the
      // effect of starting the selection
      if (this.dragging === false) {
        event.preventDefault();
        this.select(event);
      }
    }
  }, {
    key: "move",
    value: function move(event) {
      var _a;
      if (event.buttons == 0) return this.destroy();
      if (this.dragging !== false) return;
      this.select(this.lastEvent = event);
      var sx = 0,
        sy = 0;
      var rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {
        left: 0,
        top: 0,
        right: this.view.win.innerWidth,
        bottom: this.view.win.innerHeight
      };
      if (event.clientX <= rect.left + dragScrollMargin) sx = -dragScrollSpeed(rect.left - event.clientX);else if (event.clientX >= rect.right - dragScrollMargin) sx = dragScrollSpeed(event.clientX - rect.right);
      if (event.clientY <= rect.top + dragScrollMargin) sy = -dragScrollSpeed(rect.top - event.clientY);else if (event.clientY >= rect.bottom - dragScrollMargin) sy = dragScrollSpeed(event.clientY - rect.bottom);
      this.setScrollSpeed(sx, sy);
    }
  }, {
    key: "up",
    value: function up(event) {
      if (this.dragging == null) this.select(this.lastEvent);
      if (!this.dragging) event.preventDefault();
      this.destroy();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.setScrollSpeed(0, 0);
      var doc = this.view.contentDOM.ownerDocument;
      doc.removeEventListener("mousemove", this.move);
      doc.removeEventListener("mouseup", this.up);
      this.view.inputState.mouseSelection = null;
    }
  }, {
    key: "setScrollSpeed",
    value: function setScrollSpeed(sx, sy) {
      var _this23 = this;
      this.scrollSpeed = {
        x: sx,
        y: sy
      };
      if (sx || sy) {
        if (this.scrolling < 0) this.scrolling = setInterval(function () {
          return _this23.scroll();
        }, 50);
      } else if (this.scrolling > -1) {
        clearInterval(this.scrolling);
        this.scrolling = -1;
      }
    }
  }, {
    key: "scroll",
    value: function scroll() {
      if (this.scrollParent) {
        this.scrollParent.scrollLeft += this.scrollSpeed.x;
        this.scrollParent.scrollTop += this.scrollSpeed.y;
      } else {
        this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
      }
      if (this.dragging === false) this.select(this.lastEvent);
    }
  }, {
    key: "select",
    value: function select(event) {
      var selection = this.style.get(event, this.extend, this.multiple);
      if (this.mustSelect || !selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc) this.view.dispatch({
        selection: selection,
        userEvent: "select.pointer"
      });
      this.mustSelect = false;
    }
  }, {
    key: "update",
    value: function update(_update3) {
      var _this24 = this;
      if (_update3.docChanged && this.dragging) this.dragging = this.dragging.map(_update3.changes);
      if (this.style.update(_update3)) setTimeout(function () {
        return _this24.select(_this24.lastEvent);
      }, 20);
    }
  }]);
  return MouseSelection;
}();
function addsSelectionRange(view, event) {
  var facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  var facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  var main = view.state.selection.main;
  if (main.empty) return false;
  // On boundary clicks, check whether the coordinates are inside the
  // selection's client rectangles
  var sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0) return true;
  var rects = sel.getRangeAt(0).getClientRects();
  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles) return true;
  if (event.defaultPrevented) return false;
  for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
  return true;
}
var handlers = /*@__PURE__*/Object.create(null);
var handlerOptions = /*@__PURE__*/Object.create(null);
// This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view) {
  var parent = view.dom.parentNode;
  if (!parent) return;
  var target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(function () {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function doPaste(view, input) {
  var state = view.state,
    changes,
    i = 1,
    text = state.toText(input);
  var byLine = text.lines == state.selection.ranges.length;
  var linewise = lastLinewiseCopy != null && state.selection.ranges.every(function (r) {
    return r.empty;
  }) && lastLinewiseCopy == text.toString();
  if (linewise) {
    var lastLine = -1;
    changes = state.changeByRange(function (range) {
      var line = state.doc.lineAt(range.from);
      if (line.from == lastLine) return {
        range: range
      };
      lastLine = line.from;
      var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: {
          from: line.from,
          insert: insert
        },
        range: _state.EditorSelection.cursor(range.from + insert.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange(function (range) {
      var line = text.line(i++);
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: line.text
        },
        range: _state.EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
handlers.keydown = function (view, event) {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27) view.inputState.lastEscPress = Date.now();
};
handlers.touchstart = function (view, e) {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};
handlers.touchmove = function (view) {
  view.inputState.setSelectionOrigin("select.pointer");
};
handlerOptions.touchstart = handlerOptions.touchmove = {
  passive: true
};
handlers.mousedown = function (view, event) {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2000) return; // Ignore touch interaction
  var style = null;
  var _iterator21 = _createForOfIteratorHelper(view.state.facet(mouseSelectionStyle)),
    _step21;
  try {
    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
      var makeStyle = _step21.value;
      style = makeStyle(view, event);
      if (style) break;
    }
  } catch (err) {
    _iterator21.e(err);
  } finally {
    _iterator21.f();
  }
  if (!style && event.button == 0) style = basicMouseSelection(view, event);
  if (style) {
    var mustFocus = view.root.activeElement != view.contentDOM;
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    if (mustFocus) view.observer.ignore(function () {
      return focusPreventScroll(view.contentDOM);
    });
    if (view.inputState.mouseSelection) view.inputState.mouseSelection.start(event);
  }
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    // Single click
    return _state.EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    // Double click
    return groupAt(view.state, pos, bias);
  } else {
    // Triple click
    var visual = LineView.find(view.docView, pos),
      line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    var from = visual ? visual.posAtStart : line.from,
      to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to) to++;
    return _state.EditorSelection.range(from, to);
  }
}
var insideY = function insideY(y, rect) {
  return y >= rect.top && y <= rect.bottom;
};
var inside = function inside(x, y, rect) {
  return insideY(y, rect) && x >= rect.left && x <= rect.right;
};
// Try to determine, for the given coordinates, associated with the
// given position, whether they are related to the element before or
// the element after the position.
function findPositionSide(view, pos, x, y) {
  var line = LineView.find(view.docView, pos);
  if (!line) return 1;
  var off = pos - line.posAtStart;
  // Line boundaries point into the line
  if (off == 0) return 1;
  if (off == line.length) return -1;
  // Positions on top of an element point at that element
  var before = line.coordsAt(off, -1);
  if (before && inside(x, y, before)) return -1;
  var after = line.coordsAt(off, 1);
  if (after && inside(x, y, after)) return 1;
  // This is probably a line wrap point. Pick before if the point is
  // beside it.
  return before && insideY(y, before) ? -1 : 1;
}
function queryPos(view, event) {
  var pos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  return {
    pos: pos,
    bias: findPositionSide(view, pos, event.clientX, event.clientY)
  };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null,
  lastMouseDownCount = 0,
  lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail) return event.detail;
  var last = lastMouseDown,
    lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  var start = queryPos(view, event),
    type = getClickType(event);
  var startSel = view.state.selection;
  return {
    update: function update(_update4) {
      if (_update4.docChanged) {
        start.pos = _update4.changes.mapPos(start.pos);
        startSel = startSel.map(_update4.changes);
      }
    },
    get: function get(event, extend, multiple) {
      var cur = queryPos(view, event),
        removed;
      var range = rangeForClick(view, cur.pos, cur.bias, type);
      if (start.pos != cur.pos && !extend) {
        var startRange = rangeForClick(view, start.pos, start.bias, type);
        var from = Math.min(startRange.from, range.from),
          to = Math.max(startRange.to, range.to);
        range = from < range.from ? _state.EditorSelection.range(from, to) : _state.EditorSelection.range(to, from);
      }
      if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos))) return removed;else if (multiple) return startSel.addRange(range);else return _state.EditorSelection.create([range]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (var i = 0; i < sel.ranges.length; i++) {
    var _sel$ranges$i = sel.ranges[i],
      from = _sel$ranges$i.from,
      to = _sel$ranges$i.to;
    if (from <= pos && to >= pos) return _state.EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
  return null;
}
handlers.dragstart = function (view, event) {
  var main = view.state.selection.main;
  var mouseSelection = view.inputState.mouseSelection;
  if (mouseSelection) mouseSelection.dragging = main;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
};
function dropText(view, event, text, direct) {
  if (!text) return;
  var dropPos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  event.preventDefault();
  var mouseSelection = view.inputState.mouseSelection;
  var del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
    from: mouseSelection.dragging.from,
    to: mouseSelection.dragging.to
  } : null;
  var ins = {
    from: dropPos,
    insert: text
  };
  var changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes: changes,
    selection: {
      anchor: changes.mapPos(dropPos, -1),
      head: changes.mapPos(dropPos, 1)
    },
    userEvent: del ? "move.drop" : "input.drop"
  });
}
handlers.drop = function (view, event) {
  if (!event.dataTransfer) return;
  if (view.state.readOnly) return event.preventDefault();
  var files = event.dataTransfer.files;
  if (files && files.length) {
    // For a file drop, read the file's text.
    event.preventDefault();
    var text = Array(files.length),
      read = 0;
    var finishFile = function finishFile() {
      if (++read == files.length) dropText(view, event, text.filter(function (s) {
        return s != null;
      }).join(view.state.lineBreak), false);
    };
    var _loop4 = function _loop4(i) {
      var reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = function () {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[i] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i]);
    };
    for (var i = 0; i < files.length; i++) {
      _loop4(i);
    }
  } else {
    dropText(view, event, event.dataTransfer.getData("Text"), true);
  }
};
handlers.paste = function (view, event) {
  if (view.state.readOnly) return event.preventDefault();
  view.observer.flush();
  var data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
    event.preventDefault();
  } else {
    capturePaste(view);
  }
};
function captureCopy(view, text) {
  // The extra wrapper is somehow necessary on IE/Edge to prevent the
  // content from being mangled when it is put onto the clipboard
  var parent = view.dom.parentNode;
  if (!parent) return;
  var target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(function () {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  var content = [],
    ranges = [],
    linewise = false;
  var _iterator22 = _createForOfIteratorHelper(state.selection.ranges),
    _step22;
  try {
    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
      var range = _step22.value;
      if (!range.empty) {
        content.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    }
  } catch (err) {
    _iterator22.e(err);
  } finally {
    _iterator22.f();
  }
  if (!content.length) {
    // Nothing selected, do a line-wise copy
    var upto = -1;
    var _iterator23 = _createForOfIteratorHelper(state.selection.ranges),
      _step23;
    try {
      for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
        var from = _step23.value.from;
        var line = state.doc.lineAt(from);
        if (line.number > upto) {
          content.push(line.text);
          ranges.push({
            from: line.from,
            to: Math.min(state.doc.length, line.to + 1)
          });
        }
        upto = line.number;
      }
    } catch (err) {
      _iterator23.e(err);
    } finally {
      _iterator23.f();
    }
    linewise = true;
  }
  return {
    text: content.join(state.lineBreak),
    ranges: ranges,
    linewise: linewise
  };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = function (view, event) {
  var _copiedRange = copiedRange(view.state),
    text = _copiedRange.text,
    ranges = _copiedRange.ranges,
    linewise = _copiedRange.linewise;
  if (!text && !linewise) return;
  lastLinewiseCopy = linewise ? text : null;
  var data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/plain", text);
  } else {
    captureCopy(view, text);
  }
  if (event.type == "cut" && !view.state.readOnly) view.dispatch({
    changes: ranges,
    scrollIntoView: true,
    userEvent: "delete.cut"
  });
};
var isFocusChange = /*@__PURE__*/_state.Annotation.define();
function focusChangeTransaction(state, focus) {
  var effects = [];
  var _iterator24 = _createForOfIteratorHelper(state.facet(focusChangeEffect)),
    _step24;
  try {
    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
      var getEffect = _step24.value;
      var effect = getEffect(state, focus);
      if (effect) effects.push(effect);
    }
  } catch (err) {
    _iterator24.e(err);
  } finally {
    _iterator24.f();
  }
  return effects ? state.update({
    effects: effects,
    annotations: isFocusChange.of(true)
  }) : null;
}
function updateForFocusChange(view) {
  setTimeout(function () {
    var focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      var tr = focusChangeTransaction(view.state, focus);
      if (tr) view.dispatch(tr);else view.update([]);
    }
  }, 10);
}
handlers.focus = function (view) {
  view.inputState.lastFocusTime = Date.now();
  // When focusing reset the scroll position, move it back to where it was
  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }
  updateForFocusChange(view);
};
handlers.blur = function (view) {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};
handlers.compositionstart = handlers.compositionupdate = function (view) {
  if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;
  if (view.inputState.composing < 0) {
    // FIXME possibly set a timeout to clear it again on Android
    view.inputState.composing = 0;
  }
};
handlers.compositionend = function (view) {
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionPendingKey = true;
  view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
  view.inputState.compositionFirstChange = null;
  if (browser.chrome && browser.android) {
    // Delay flushing for a bit on Android because it'll often fire a
    // bunch of contradictory changes in a row at end of compositon
    view.observer.flushSoon();
  } else if (view.inputState.compositionPendingChange) {
    // If we found pending records, schedule a flush.
    Promise.resolve().then(function () {
      return view.observer.flush();
    });
  } else {
    // Otherwise, make sure that, if no changes come in soon, the
    // composition view is cleared.
    setTimeout(function () {
      if (view.inputState.composing < 0 && view.docView.compositionDeco.size) view.update([]);
    }, 50);
  }
};
handlers.contextmenu = function (view) {
  view.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = function (view, event) {
  var _a;
  // Because Chrome Android doesn't fire useful key events, use
  // beforeinput to detect backspace (and possibly enter and delete,
  // but those usually don't even seem to fire beforeinput events at
  // the moment) and fake a key event for it.
  //
  // (preventDefault on beforeinput, though supported in the spec,
  // seems to do nothing at all on Chrome).
  var pending;
  if (browser.chrome && browser.android && (pending = PendingKeys.find(function (key) {
    return key.inputType == event.inputType;
  }))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      var startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
      setTimeout(function () {
        var _a;
        // Backspacing near uneditable nodes on Chrome Android sometimes
        // closes the virtual keyboard. This tries to crudely detect
        // that and refocus to get it back.
        if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
};
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var HeightOracle = /*#__PURE__*/function () {
  function HeightOracle(lineWrapping) {
    _classCallCheck(this, HeightOracle);
    this.lineWrapping = lineWrapping;
    this.doc = _state.Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14; // The height of an entire line (line-height)
    this.charWidth = 7;
    this.textHeight = 14; // The height of the actual font (font-size)
    this.lineLength = 30;
    // Used to track, during updateHeight, if any actual heights changed
    this.heightChanged = false;
  }
  _createClass(HeightOracle, [{
    key: "heightForGap",
    value: function heightForGap(from, to) {
      var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
      if (this.lineWrapping) lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
      return this.lineHeight * lines;
    }
  }, {
    key: "heightForLine",
    value: function heightForLine(length) {
      if (!this.lineWrapping) return this.lineHeight;
      var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
  }, {
    key: "setDoc",
    value: function setDoc(doc) {
      this.doc = doc;
      return this;
    }
  }, {
    key: "mustRefreshForWrapping",
    value: function mustRefreshForWrapping(whiteSpace) {
      return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
    }
  }, {
    key: "mustRefreshForHeights",
    value: function mustRefreshForHeights(lineHeights) {
      var newHeight = false;
      for (var i = 0; i < lineHeights.length; i++) {
        var h = lineHeights[i];
        if (h < 0) {
          i++;
        } else if (!this.heightSamples[Math.floor(h * 10)]) {
          // Round to .1 pixels
          newHeight = true;
          this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return newHeight;
    }
  }, {
    key: "refresh",
    value: function refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
      var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
      this.lineWrapping = lineWrapping;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.textHeight = textHeight;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (var i = 0; i < knownHeights.length; i++) {
          var h = knownHeights[i];
          if (h < 0) i++;else this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return changed;
    }
  }]);
  return HeightOracle;
}(); // This object is used by `updateHeight` to make DOM measurements
// arrive at the right nides. The `heights` array is a sequence of
// block heights, starting from position `from`.
var MeasuredHeights = /*#__PURE__*/function () {
  function MeasuredHeights(from, heights) {
    _classCallCheck(this, MeasuredHeights);
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  _createClass(MeasuredHeights, [{
    key: "more",
    get: function get() {
      return this.index < this.heights.length;
    }
  }]);
  return MeasuredHeights;
}();
/**
Record used to represent information about a block-level element
in the editor view.
*/
var BlockInfo = /*#__PURE__*/function () {
  /**
  @internal
  */
  function BlockInfo(
  /**
  The start of the element in the document.
  */
  from,
  /**
  The length of the element.
  */
  length,
  /**
  The top position of the element (relative to the top of the
  document).
  */
  top,
  /**
  Its height.
  */
  height,
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  type) {
    _classCallCheck(this, BlockInfo);
    this.from = from;
    this.length = length;
    this.top = top;
    this.height = height;
    this.type = type;
  }
  /**
  The end of the element as a document position.
  */
  _createClass(BlockInfo, [{
    key: "to",
    get: function get() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
  }, {
    key: "bottom",
    get: function get() {
      return this.top + this.height;
    }
    /**
    @internal
    */
  }, {
    key: "join",
    value: function join(other) {
      var detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
      return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
    }
  }]);
  return BlockInfo;
}();
exports.BlockInfo = BlockInfo;
var QueryType = /*@__PURE__*/function (QueryType) {
  QueryType[QueryType["ByPos"] = 0] = "ByPos";
  QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
  QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType;
}(QueryType || (QueryType = {}));
var Epsilon = 1e-3;
var HeightMap = /*#__PURE__*/function () {
  function HeightMap(length,
  // The number of characters covered
  height) {
    var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    _classCallCheck(this, HeightMap);
    this.length = length;
    this.height = height;
    this.flags = flags;
  }
  _createClass(HeightMap, [{
    key: "outdated",
    get: function get() {
      return (this.flags & 2 /* Flag.Outdated */) > 0;
    },
    set: function set(value) {
      this.flags = (value ? 2 /* Flag.Outdated */ : 0) | this.flags & ~2 /* Flag.Outdated */;
    }
  }, {
    key: "setHeight",
    value: function setHeight(oracle, height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
  }, {
    key: "replace",
    value: function replace(_from, _to, nodes) {
      return HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(_to, result) {
      result.push(this);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(_from, result) {
      result.push(this);
    }
  }, {
    key: "applyChanges",
    value: function applyChanges(decorations, oldDoc, oracle, changes) {
      var me = this,
        doc = oracle.doc;
      for (var i = changes.length - 1; i >= 0; i--) {
        var _changes$i = changes[i],
          fromA = _changes$i.fromA,
          toA = _changes$i.toA,
          fromB = _changes$i.fromB,
          toB = _changes$i.toB;
        var start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
        var end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i > 0 && start.from <= changes[i - 1].toA) {
          fromA = changes[i - 1].fromA;
          fromB = changes[i - 1].fromB;
          i--;
          if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        var nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
        me = me.replace(fromA, toA, nodes);
      }
      return me.updateHeight(oracle, 0);
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
  }, {
    key: "of",
    value: function of(nodes) {
      if (nodes.length == 1) return nodes[0];
      var i = 0,
        j = nodes.length,
        before = 0,
        after = 0;
      for (;;) {
        if (i == j) {
          if (before > after * 2) {
            var split = nodes[i - 1];
            if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
            j += 1 + split["break"];
            before -= split.size;
          } else if (after > before * 2) {
            var _split = nodes[j];
            if (_split["break"]) nodes.splice(j, 1, _split.left, null, _split.right);else nodes.splice(j, 1, _split.left, _split.right);
            j += 2 + _split["break"];
            after -= _split.size;
          } else {
            break;
          }
        } else if (before < after) {
          var next = nodes[i++];
          if (next) before += next.size;
        } else {
          var _next = nodes[--j];
          if (_next) after += _next.size;
        }
      }
      var brk = 0;
      if (nodes[i - 1] == null) {
        brk = 1;
        i--;
      } else if (nodes[i] == null) {
        brk = 1;
        j++;
      }
      return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
    }
  }]);
  return HeightMap;
}();
HeightMap.prototype.size = 1;
var HeightMapBlock = /*#__PURE__*/function (_HeightMap) {
  _inherits(HeightMapBlock, _HeightMap);
  var _super16 = _createSuper(HeightMapBlock);
  function HeightMapBlock(length, height, type) {
    var _this25;
    _classCallCheck(this, HeightMapBlock);
    _this25 = _super16.call(this, length, height);
    _this25.type = type;
    return _this25;
  }
  _createClass(HeightMapBlock, [{
    key: "blockAt",
    value: function blockAt(_height, _oracle, top, offset) {
      return new BlockInfo(offset, this.length, top, this.height, this.type);
    }
  }, {
    key: "lineAt",
    value: function lineAt(_value, _type, oracle, top, offset) {
      return this.blockAt(0, oracle, top, offset);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, oracle, top, offset, f) {
      if (from <= offset + this.length && to >= offset) f(this.blockAt(0, oracle, top, offset));
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var _force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "block(".concat(this.length, ")");
    }
  }]);
  return HeightMapBlock;
}(HeightMap);
var HeightMapText = /*#__PURE__*/function (_HeightMapBlock) {
  _inherits(HeightMapText, _HeightMapBlock);
  var _super17 = _createSuper(HeightMapText);
  function HeightMapText(length, height) {
    var _this26;
    _classCallCheck(this, HeightMapText);
    _this26 = _super17.call(this, length, height, BlockType.Text);
    _this26.collapsed = 0; // Amount of collapsed content in the line
    _this26.widgetHeight = 0; // Maximum inline widget height
    return _this26;
  }
  _createClass(HeightMapText, [{
    key: "replace",
    value: function replace(_from, _to, nodes) {
      var node = nodes[0];
      if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4 /* Flag.SingleLine */) && Math.abs(this.length - node.length) < 10) {
        if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
        if (!this.outdated) node.outdated = false;
        return node;
      } else {
        return HeightMap.of(nodes);
      }
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
    }
  }]);
  return HeightMapText;
}(HeightMapBlock);
var HeightMapGap = /*#__PURE__*/function (_HeightMap2) {
  _inherits(HeightMapGap, _HeightMap2);
  var _super18 = _createSuper(HeightMapGap);
  function HeightMapGap(length) {
    _classCallCheck(this, HeightMapGap);
    return _super18.call(this, length, 0);
  }
  _createClass(HeightMapGap, [{
    key: "heightMetrics",
    value: function heightMetrics(oracle, offset) {
      var firstLine = oracle.doc.lineAt(offset).number,
        lastLine = oracle.doc.lineAt(offset + this.length).number;
      var lines = lastLine - firstLine + 1;
      var perLine,
        perChar = 0;
      if (oracle.lineWrapping) {
        var totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
        perLine = totalPerLine / lines;
        if (this.length > lines + 1) perChar = (this.height - totalPerLine) / (this.length - lines - 1);
      } else {
        perLine = this.height / lines;
      }
      return {
        firstLine: firstLine,
        lastLine: lastLine,
        perLine: perLine,
        perChar: perChar
      };
    }
  }, {
    key: "blockAt",
    value: function blockAt(height, oracle, top, offset) {
      var _this$heightMetrics = this.heightMetrics(oracle, offset),
        firstLine = _this$heightMetrics.firstLine,
        lastLine = _this$heightMetrics.lastLine,
        perLine = _this$heightMetrics.perLine,
        perChar = _this$heightMetrics.perChar;
      if (oracle.lineWrapping) {
        var guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
        var line = oracle.doc.lineAt(guess),
          lineHeight = perLine + line.length * perChar;
        var lineTop = Math.max(top, height - lineHeight / 2);
        return new BlockInfo(line.from, line.length, lineTop, lineHeight, BlockType.Text);
      } else {
        var _line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
        var _oracle$doc$line = oracle.doc.line(firstLine + _line),
          from = _oracle$doc$line.from,
          length = _oracle$doc$line.length;
        return new BlockInfo(from, length, top + perLine * _line, perLine, BlockType.Text);
      }
    }
  }, {
    key: "lineAt",
    value: function lineAt(value, type, oracle, top, offset) {
      if (type == QueryType.ByHeight) return this.blockAt(value, oracle, top, offset);
      if (type == QueryType.ByPosNoHeight) {
        var _oracle$doc$lineAt = oracle.doc.lineAt(value),
          from = _oracle$doc$lineAt.from,
          to = _oracle$doc$lineAt.to;
        return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
      }
      var _this$heightMetrics2 = this.heightMetrics(oracle, offset),
        firstLine = _this$heightMetrics2.firstLine,
        perLine = _this$heightMetrics2.perLine,
        perChar = _this$heightMetrics2.perChar;
      var line = oracle.doc.lineAt(value),
        lineHeight = perLine + line.length * perChar;
      var linesAbove = line.number - firstLine;
      var lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
      return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, BlockType.Text);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, oracle, top, offset, f) {
      from = Math.max(from, offset);
      to = Math.min(to, offset + this.length);
      var _this$heightMetrics3 = this.heightMetrics(oracle, offset),
        firstLine = _this$heightMetrics3.firstLine,
        perLine = _this$heightMetrics3.perLine,
        perChar = _this$heightMetrics3.perChar;
      for (var pos = from, lineTop = top; pos <= to;) {
        var line = oracle.doc.lineAt(pos);
        if (pos == from) {
          var linesAbove = line.number - firstLine;
          lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
        }
        var lineHeight = perLine + perChar * line.length;
        f(new BlockInfo(line.from, line.length, lineTop, lineHeight, BlockType.Text));
        lineTop += lineHeight;
        pos = line.to + 1;
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, nodes) {
      var after = this.length - to;
      if (after > 0) {
        var last = nodes[nodes.length - 1];
        if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
      }
      if (from > 0) {
        var first = nodes[0];
        if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
      }
      return HeightMap.of(nodes);
    }
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(to, result) {
      result.push(new HeightMapGap(to - 1), null);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(from, result) {
      result.push(null, new HeightMapGap(this.length - from - 1));
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      var end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        // Fill in part of this gap with measured lines. We know there
        // can't be widgets or collapsed ranges in those lines, because
        // they would already have been added to the heightmap (gaps
        // only contain plain text).
        var nodes = [],
          pos = Math.max(offset, measured.from),
          singleHeight = -1;
        if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          var len = oracle.doc.lineAt(pos).length;
          if (nodes.length) nodes.push(null);
          var height = measured.heights[measured.index++];
          if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
          var line = new HeightMapText(len, height);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
        var result = HeightMap.of(nodes);
        if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon) oracle.heightChanged = true;
        return result;
      } else if (force || this.outdated) {
        this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "gap(".concat(this.length, ")");
    }
  }]);
  return HeightMapGap;
}(HeightMap);
var HeightMapBranch = /*#__PURE__*/function (_HeightMap3) {
  _inherits(HeightMapBranch, _HeightMap3);
  var _super19 = _createSuper(HeightMapBranch);
  function HeightMapBranch(left, brk, right) {
    var _this27;
    _classCallCheck(this, HeightMapBranch);
    _this27 = _super19.call(this, left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
    _this27.left = left;
    _this27.right = right;
    _this27.size = left.size + right.size;
    return _this27;
  }
  _createClass(HeightMapBranch, [{
    key: "break",
    get: function get() {
      return this.flags & 1 /* Flag.Break */;
    }
  }, {
    key: "blockAt",
    value: function blockAt(height, oracle, top, offset) {
      var mid = top + this.left.height;
      return height < mid ? this.left.blockAt(height, oracle, top, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this["break"]);
    }
  }, {
    key: "lineAt",
    value: function lineAt(value, type, oracle, top, offset) {
      var rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this["break"];
      var left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
      var base = left ? this.left.lineAt(value, type, oracle, top, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
      if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
      var subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
      if (left) return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, oracle, top, offset, f) {
      var rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this["break"];
      if (this["break"]) {
        if (from < rightOffset) this.left.forEachLine(from, to, oracle, top, offset, f);
        if (to >= rightOffset) this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
      } else {
        var mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
        if (from < mid.from) this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
        if (mid.to >= from && mid.from <= to) f(mid);
        if (to > mid.to) this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, nodes) {
      var rightStart = this.left.length + this["break"];
      if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
      if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
      var result = [];
      if (from > 0) this.decomposeLeft(from, result);
      var left = result.length;
      var _iterator25 = _createForOfIteratorHelper(nodes),
        _step25;
      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
          var node = _step25.value;
          result.push(node);
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }
      if (from > 0) mergeGaps(result, left - 1);
      if (to < this.length) {
        var right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(to, result) {
      var left = this.left.length;
      if (to <= left) return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this["break"]) {
        left++;
        if (to >= left) result.push(null);
      }
      if (to > left) this.right.decomposeLeft(to - left, result);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(from, result) {
      var left = this.left.length,
        right = left + this["break"];
      if (from >= right) return this.right.decomposeRight(from - right, result);
      if (from < left) this.left.decomposeRight(from, result);
      if (this["break"] && from < right) result.push(null);
      result.push(this.right);
    }
  }, {
    key: "balanced",
    value: function balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
      this.left = left;
      this.right = right;
      this.height = left.height + right.height;
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this["break"] + right.length;
      return this;
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      var left = this.left,
        right = this.right,
        rightStart = offset + left.length + this["break"],
        rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
      if (rebalance) return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.left + (this["break"] ? " " : "-") + this.right;
    }
  }]);
  return HeightMapBranch;
}(HeightMap);
function mergeGaps(nodes, around) {
  var before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = /*#__PURE__*/function () {
  function NodeBuilder(pos, oracle) {
    _classCallCheck(this, NodeBuilder);
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  _createClass(NodeBuilder, [{
    key: "isCovered",
    get: function get() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
  }, {
    key: "span",
    value: function span(_from, to) {
      if (this.lineStart > -1) {
        var end = Math.min(to, this.lineEnd),
          last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
  }, {
    key: "point",
    value: function point(from, to, deco) {
      if (from < to || deco.heightRelevant) {
        var height = deco.widget ? deco.widget.estimatedHeight : 0;
        if (height < 0) height = this.oracle.lineHeight;
        var len = to - from;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco.type));
        } else if (len || height >= relevantWidgetHeight) {
          this.addLineDeco(height, len);
        }
      } else if (to > from) {
        this.span(from, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
  }, {
    key: "enterLine",
    value: function enterLine() {
      if (this.lineStart > -1) return;
      var _this$oracle$doc$line = this.oracle.doc.lineAt(this.pos),
        from = _this$oracle$doc$line.from,
        to = _this$oracle$doc$line.to;
      this.lineStart = from;
      this.lineEnd = to;
      if (this.writtenTo < from) {
        if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
        this.nodes.push(null);
      }
      if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
      this.writtenTo = this.pos;
    }
  }, {
    key: "blankContent",
    value: function blankContent(from, to) {
      var gap = new HeightMapGap(to - from);
      if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* Flag.SingleLine */;
      return gap;
    }
  }, {
    key: "ensureLine",
    value: function ensureLine() {
      this.enterLine();
      var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText) return last;
      var line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
  }, {
    key: "addBlock",
    value: function addBlock(block) {
      this.enterLine();
      if (block.type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (block.type != BlockType.WidgetBefore) this.covering = block;
    }
  }, {
    key: "addLineDeco",
    value: function addLineDeco(height, length) {
      var line = this.ensureLine();
      line.length += length;
      line.collapsed += length;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      this.writtenTo = this.pos = this.pos + length;
    }
  }, {
    key: "finish",
    value: function finish(from) {
      var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      var pos = from;
      var _iterator26 = _createForOfIteratorHelper(this.nodes),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var node = _step26.value;
          if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
          pos += node ? node.length : 1;
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
  }], [{
    key: "build",
    value: function build(oracle, decorations, from, to) {
      var builder = new NodeBuilder(from, oracle);
      _state.RangeSet.spans(decorations, from, to, builder, 0);
      return builder.finish(from);
    }
  }]);
  return NodeBuilder;
}();
function heightRelevantDecoChanges(a, b, diff) {
  var comp = new DecorationComparator();
  _state.RangeSet.compare(a, b, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator = /*#__PURE__*/function () {
  function DecorationComparator() {
    _classCallCheck(this, DecorationComparator);
    this.changes = [];
  }
  _createClass(DecorationComparator, [{
    key: "compareRange",
    value: function compareRange() {}
  }, {
    key: "comparePoint",
    value: function comparePoint(from, to, a, b) {
      if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
    }
  }]);
  return DecorationComparator;
}();
function visiblePixelRange(dom, paddingTop) {
  var rect = dom.getBoundingClientRect();
  var doc = dom.ownerDocument,
    win = doc.defaultView || window;
  var left = Math.max(0, rect.left),
    right = Math.min(win.innerWidth, rect.right);
  var top = Math.max(0, rect.top),
    bottom = Math.min(win.innerHeight, rect.bottom);
  for (var parent = dom.parentNode; parent && parent != doc.body;) {
    if (parent.nodeType == 1) {
      var elt = parent;
      var style = window.getComputedStyle(elt);
      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        var parentRect = elt.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top = Math.max(top, parentRect.top);
        bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      // Shadow root
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top - (rect.top + paddingTop),
    bottom: Math.max(top, bottom) - (rect.top + paddingTop)
  };
}
function fullPixelRange(dom, paddingTop) {
  var rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
// Line gaps are placeholder widgets used to hide pieces of overlong
// lines within the viewport, as a kludge to keep the editor
// responsive when a ridiculously long line is loaded into it.
var LineGap = /*#__PURE__*/function () {
  function LineGap(from, to, size) {
    _classCallCheck(this, LineGap);
    this.from = from;
    this.to = to;
    this.size = size;
  }
  _createClass(LineGap, [{
    key: "draw",
    value: function draw(wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.size, wrapping)
      }).range(this.from, this.to);
    }
  }], [{
    key: "same",
    value: function same(a, b) {
      if (a.length != b.length) return false;
      for (var i = 0; i < a.length; i++) {
        var gA = a[i],
          gB = b[i];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
      }
      return true;
    }
  }]);
  return LineGap;
}();
var LineGapWidget = /*#__PURE__*/function (_WidgetType4) {
  _inherits(LineGapWidget, _WidgetType4);
  var _super20 = _createSuper(LineGapWidget);
  function LineGapWidget(size, vertical) {
    var _this28;
    _classCallCheck(this, LineGapWidget);
    _this28 = _super20.call(this);
    _this28.size = size;
    _this28.vertical = vertical;
    return _this28;
  }
  _createClass(LineGapWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      var elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
  }, {
    key: "estimatedHeight",
    get: function get() {
      return this.vertical ? this.size : -1;
    }
  }]);
  return LineGapWidget;
}(WidgetType);
var ViewState = /*#__PURE__*/function () {
  function ViewState(state) {
    _classCallCheck(this, ViewState);
    this.state = state;
    // These are contentDOM-local coordinates
    this.pixelViewport = {
      left: 0,
      right: window.innerWidth,
      top: 0,
      bottom: 0
    };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    // See VP.MaxDOMHeight
    this.scaler = IdScaler;
    this.scrollTarget = null;
    // Briefly set to true when printing, to disable viewport limiting
    this.printing = false;
    // Flag set when editor content was redrawn, so that the next
    // measure stage knows it must read DOM layout
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    // Cursor 'assoc' is only significant when the cursor is on a line
    // wrap point, where it must stick to the character that it is
    // associated with. Since browsers don't provide a reasonable
    // interface to set or query this, when a selection is set that
    // might cause this to be significant, this flag is set. The next
    // measure phase will check whether the cursor is on a line-wrapping
    // boundary and, if so, reset it to make sure it is positioned in
    // the right place.
    this.mustEnforceCursorAssoc = false;
    var guessWrapping = state.facet(contentAttributes).some(function (v) {
      return typeof v != "function" && v["class"] == "cm-lineWrapping";
    });
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter(function (d) {
      return typeof d != "function";
    });
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, _state.Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    this.viewport = this.getViewport(0, null);
    this.updateViewportLines();
    this.updateForViewport();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
      return gap.draw(false);
    }));
    this.computeVisibleRanges();
  }
  _createClass(ViewState, [{
    key: "updateForViewport",
    value: function updateForViewport() {
      var _this29 = this;
      var viewports = [this.viewport],
        main = this.state.selection.main;
      var _loop5 = function _loop5() {
        var pos = i ? main.head : main.anchor;
        if (!viewports.some(function (_ref4) {
          var from = _ref4.from,
            to = _ref4.to;
          return pos >= from && pos <= to;
        })) {
          var _this29$lineBlockAt = _this29.lineBlockAt(pos),
            from = _this29$lineBlockAt.from,
            to = _this29$lineBlockAt.to;
          viewports.push(new Viewport(from, to));
        }
      };
      for (var i = 0; i <= 1; i++) {
        _loop5();
      }
      this.viewports = viewports.sort(function (a, b) {
        return a.from - b.from;
      });
      this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
    }
  }, {
    key: "updateViewportLines",
    value: function updateViewportLines() {
      var _this30 = this;
      this.viewportLines = [];
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, function (block) {
        _this30.viewportLines.push(_this30.scaler.scale == 1 ? block : scaleBlock(block, _this30.scaler));
      });
    }
  }, {
    key: "update",
    value: function update(_update5) {
      var scrollTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.state = _update5.state;
      var prevDeco = this.stateDeco;
      this.stateDeco = this.state.facet(decorations).filter(function (d) {
        return typeof d != "function";
      });
      var contentChanges = _update5.changedRanges;
      var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, _update5 ? _update5.changes : _state.ChangeSet.empty(this.state.doc.length)));
      var prevHeight = this.heightMap.height;
      this.heightMap = this.heightMap.applyChanges(this.stateDeco, _update5.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight) _update5.flags |= 2 /* UpdateFlag.Height */;
      var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update5.changes) : this.viewport;
      if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
      var updateLines = !_update5.changes.empty || _update5.flags & 2 /* UpdateFlag.Height */ || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
      this.viewport = viewport;
      this.updateForViewport();
      if (updateLines) this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update5.changes)));
      _update5.flags |= this.computeVisibleRanges();
      if (scrollTarget) this.scrollTarget = scrollTarget;
      if (!this.mustEnforceCursorAssoc && _update5.selectionSet && _update5.view.lineWrapping && _update5.state.selection.main.empty && _update5.state.selection.main.assoc && !_update5.state.facet(nativeSelectionHidden)) this.mustEnforceCursorAssoc = true;
    }
  }, {
    key: "measure",
    value: function measure(view) {
      var dom = view.contentDOM,
        style = window.getComputedStyle(dom);
      var oracle = this.heightOracle;
      var whiteSpace = style.whiteSpace;
      this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
      var refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
      var domRect = dom.getBoundingClientRect();
      var measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
      this.contentDOMHeight = domRect.height;
      this.mustMeasureContent = false;
      var result = 0,
        bias = 0;
      // Vertical padding
      var paddingTop = parseInt(style.paddingTop) || 0,
        paddingBottom = parseInt(style.paddingBottom) || 0;
      if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
        this.paddingTop = paddingTop;
        this.paddingBottom = paddingBottom;
        result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
      }

      if (this.editorWidth != view.scrollDOM.clientWidth) {
        if (oracle.lineWrapping) measureContent = true;
        this.editorWidth = view.scrollDOM.clientWidth;
        result |= 8 /* UpdateFlag.Geometry */;
      }
      // Pixel viewport
      var pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
      var dTop = pixelViewport.top - this.pixelViewport.top,
        dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      var inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (inView != this.inView) {
        this.inView = inView;
        if (inView) measureContent = true;
      }
      if (!this.inView && !this.scrollTarget) return 0;
      var contentWidth = domRect.width;
      if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
        this.contentDOMWidth = domRect.width;
        this.editorHeight = view.scrollDOM.clientHeight;
        result |= 8 /* UpdateFlag.Geometry */;
      }

      if (measureContent) {
        var lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
        if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;
        if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
          var _view$docView$measure = view.docView.measureTextSize(),
            lineHeight = _view$docView$measure.lineHeight,
            charWidth = _view$docView$measure.charWidth,
            textHeight = _view$docView$measure.textHeight;
          refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
          if (refresh) {
            view.docView.minWidth = 0;
            result |= 8 /* UpdateFlag.Geometry */;
          }
        }

        if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
        oracle.heightChanged = false;
        var _iterator27 = _createForOfIteratorHelper(this.viewports),
          _step27;
        try {
          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
            var vp = _step27.value;
            var heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
            this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, _state.Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
          }
        } catch (err) {
          _iterator27.e(err);
        } finally {
          _iterator27.f();
        }
        if (oracle.heightChanged) result |= 2 /* UpdateFlag.Height */;
      }

      var viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
      if (viewportChange) this.viewport = this.getViewport(bias, this.scrollTarget);
      this.updateForViewport();
      if (result & 2 /* UpdateFlag.Height */ || viewportChange) this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
      result |= this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        // This is done in the read stage, because moving the selection
        // to a line end is going to trigger a layout anyway, so it
        // can't be a pure write. It should be rare that it does any
        // writing.
        view.docView.enforceCursorAssoc();
      }
      return result;
    }
  }, {
    key: "visibleTop",
    get: function get() {
      return this.scaler.fromDOM(this.pixelViewport.top);
    }
  }, {
    key: "visibleBottom",
    get: function get() {
      return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
  }, {
    key: "getViewport",
    value: function getViewport(bias, scrollTarget) {
      // This will divide VP.Margin between the top and the
      // bottom, depending on the bias (the change in viewport position
      // since the last update). It'll hold a number between 0 and 1
      var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
      var map = this.heightMap,
        oracle = this.heightOracle;
      var visibleTop = this.visibleTop,
        visibleBottom = this.visibleBottom;
      var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
      // If scrollTarget is given, make sure the viewport includes that position
      if (scrollTarget) {
        var head = scrollTarget.range.head;
        if (head < viewport.from || head > viewport.to) {
          var viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
          var block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0),
            topPos;
          if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
          viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
        }
      }
      return viewport;
    }
  }, {
    key: "mapViewport",
    value: function mapViewport(viewport, changes) {
      var from = changes.mapPos(viewport.from, -1),
        to = changes.mapPos(viewport.to, 1);
      return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
  }, {
    key: "viewportIsAppropriate",
    value: function viewportIsAppropriate(_ref5) {
      var from = _ref5.from,
        to = _ref5.to;
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (!this.inView) return true;
      var _this$heightMap$lineA = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0),
        top = _this$heightMap$lineA.top;
      var _this$heightMap$lineA2 = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0),
        bottom = _this$heightMap$lineA2.bottom;
      var visibleTop = this.visibleTop,
        visibleBottom = this.visibleBottom;
      return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) && top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */;
    }
  }, {
    key: "mapLineGaps",
    value: function mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty) return gaps;
      var mapped = [];
      var _iterator28 = _createForOfIteratorHelper(gaps),
        _step28;
      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var gap = _step28.value;
          if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
  }, {
    key: "ensureLineGaps",
    value: function ensureLineGaps(current, mayMeasure) {
      var _this31 = this;
      var wrapping = this.heightOracle.lineWrapping;
      var margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */,
        halfMargin = margin >> 1,
        doubleMargin = margin << 1;
      // The non-wrapping logic won't work at all in predominantly right-to-left text.
      if (this.defaultTextDirection != Direction.LTR && !wrapping) return [];
      var gaps = [];
      var addGap = function addGap(from, to, line, structure) {
        if (to - from < halfMargin) return;
        var sel = _this31.state.selection.main,
          avoid = [sel.from];
        if (!sel.empty) avoid.push(sel.to);
        for (var _i9 = 0, _avoid = avoid; _i9 < _avoid.length; _i9++) {
          var pos = _avoid[_i9];
          if (pos > from && pos < to) {
            addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
            addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
            return;
          }
        }
        var gap = find(current, function (gap) {
          return gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin && !avoid.some(function (pos) {
            return gap.from < pos && gap.to > pos;
          });
        });
        if (!gap) {
          // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
          if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some(function (r) {
            return r.from <= to && r.to >= to;
          })) {
            var lineStart = mayMeasure.moveToLineBoundary(_state.EditorSelection.cursor(to), false, true).head;
            if (lineStart > from) to = lineStart;
          }
          gap = new LineGap(from, to, _this31.gapSize(line, from, to, structure));
        }
        gaps.push(gap);
      };
      var _iterator29 = _createForOfIteratorHelper(this.viewportLines),
        _step29;
      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var line = _step29.value;
          if (line.length < doubleMargin) continue;
          var structure = lineStructure(line.from, line.to, this.stateDeco);
          if (structure.total < doubleMargin) continue;
          var target = this.scrollTarget ? this.scrollTarget.range.head : null;
          var viewFrom = void 0,
            viewTo = void 0;
          if (wrapping) {
            var marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
            var top = void 0,
              bot = void 0;
            if (target != null) {
              var targetFrac = findFraction(structure, target);
              var spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
              top = targetFrac - spaceFrac;
              bot = targetFrac + spaceFrac;
            } else {
              top = (this.visibleTop - line.top - marginHeight) / line.height;
              bot = (this.visibleBottom - line.top + marginHeight) / line.height;
            }
            viewFrom = findPosition(structure, top);
            viewTo = findPosition(structure, bot);
          } else {
            var totalWidth = structure.total * this.heightOracle.charWidth;
            var marginWidth = margin * this.heightOracle.charWidth;
            var left = void 0,
              right = void 0;
            if (target != null) {
              var _targetFrac = findFraction(structure, target);
              var _spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
              left = _targetFrac - _spaceFrac;
              right = _targetFrac + _spaceFrac;
            } else {
              left = (this.pixelViewport.left - marginWidth) / totalWidth;
              right = (this.pixelViewport.right + marginWidth) / totalWidth;
            }
            viewFrom = findPosition(structure, left);
            viewTo = findPosition(structure, right);
          }
          if (viewFrom > line.from) addGap(line.from, viewFrom, line, structure);
          if (viewTo < line.to) addGap(viewTo, line.to, line, structure);
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }
      return gaps;
    }
  }, {
    key: "gapSize",
    value: function gapSize(line, from, to, structure) {
      var fraction = findFraction(structure, to) - findFraction(structure, from);
      if (this.heightOracle.lineWrapping) {
        return line.height * fraction;
      } else {
        return structure.total * this.heightOracle.charWidth * fraction;
      }
    }
  }, {
    key: "updateLineGaps",
    value: function updateLineGaps(gaps) {
      var _this32 = this;
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
          return gap.draw(_this32.heightOracle.lineWrapping);
        }));
      }
    }
  }, {
    key: "computeVisibleRanges",
    value: function computeVisibleRanges() {
      var deco = this.stateDeco;
      if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
      var ranges = [];
      _state.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span: function span(from, to) {
          ranges.push({
            from: from,
            to: to
          });
        },
        point: function point() {}
      }, 20);
      var changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some(function (r, i) {
        return r.from != ranges[i].from || r.to != ranges[i].to;
      });
      this.visibleRanges = ranges;
      return changed ? 4 /* UpdateFlag.Viewport */ : 0;
    }
  }, {
    key: "lineBlockAt",
    value: function lineBlockAt(pos) {
      return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(function (b) {
        return b.from <= pos && b.to >= pos;
      }) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
    }
  }, {
    key: "lineBlockAtHeight",
    value: function lineBlockAtHeight(height) {
      return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
    }
  }, {
    key: "elementAtHeight",
    value: function elementAtHeight(height) {
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
    }
  }, {
    key: "docHeight",
    get: function get() {
      return this.scaler.toDOM(this.heightMap.height);
    }
  }, {
    key: "contentHeight",
    get: function get() {
      return this.docHeight + this.paddingTop + this.paddingBottom;
    }
  }]);
  return ViewState;
}();
var Viewport = /*#__PURE__*/_createClass(function Viewport(from, to) {
  _classCallCheck(this, Viewport);
  this.from = from;
  this.to = to;
});
function lineStructure(from, to, stateDeco) {
  var ranges = [],
    pos = from,
    total = 0;
  _state.RangeSet.spans(stateDeco, from, to, {
    span: function span() {},
    point: function point(from, to) {
      if (from > pos) {
        ranges.push({
          from: pos,
          to: from
        });
        total += from - pos;
      }
      pos = to;
    }
  }, 20); // We're only interested in collapsed ranges of a significant size
  if (pos < to) {
    ranges.push({
      from: pos,
      to: to
    });
    total += to - pos;
  }
  return {
    total: total,
    ranges: ranges
  };
}
function findPosition(_ref6, ratio) {
  var total = _ref6.total,
    ranges = _ref6.ranges;
  if (ratio <= 0) return ranges[0].from;
  if (ratio >= 1) return ranges[ranges.length - 1].to;
  var dist = Math.floor(total * ratio);
  for (var i = 0;; i++) {
    var _ranges$i = ranges[i],
      from = _ranges$i.from,
      to = _ranges$i.to,
      size = to - from;
    if (dist <= size) return from + dist;
    dist -= size;
  }
}
function findFraction(structure, pos) {
  var counted = 0;
  var _iterator30 = _createForOfIteratorHelper(structure.ranges),
    _step30;
  try {
    for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
      var _step30$value = _step30.value,
        from = _step30$value.from,
        to = _step30$value.to;
      if (pos <= to) {
        counted += pos - from;
        break;
      }
      counted += to - from;
    }
  } catch (err) {
    _iterator30.e(err);
  } finally {
    _iterator30.f();
  }
  return counted / structure.total;
}
function find(array, f) {
  var _iterator31 = _createForOfIteratorHelper(array),
    _step31;
  try {
    for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
      var val = _step31.value;
      if (f(val)) return val;
    }
  } catch (err) {
    _iterator31.e(err);
  } finally {
    _iterator31.f();
  }
  return undefined;
}
// Don't scale when the document height is within the range of what
// the DOM can handle.
var IdScaler = {
  toDOM: function toDOM(n) {
    return n;
  },
  fromDOM: function fromDOM(n) {
    return n;
  },
  scale: 1
};
// When the height is too big (> VP.MaxDOMHeight), scale down the
// regions outside the viewports so that the total height is
// VP.MaxDOMHeight.
var BigScaler = /*#__PURE__*/function () {
  function BigScaler(oracle, heightMap, viewports) {
    _classCallCheck(this, BigScaler);
    var vpHeight = 0,
      base = 0,
      domBase = 0;
    this.viewports = viewports.map(function (_ref7) {
      var from = _ref7.from,
        to = _ref7.to;
      var top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
      var bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom - top;
      return {
        from: from,
        to: to,
        top: top,
        bottom: bottom,
        domTop: 0,
        domBottom: 0
      };
    });
    this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
    var _iterator32 = _createForOfIteratorHelper(this.viewports),
      _step32;
    try {
      for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
        var obj = _step32.value;
        obj.domTop = domBase + (obj.top - base) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base = obj.bottom;
      }
    } catch (err) {
      _iterator32.e(err);
    } finally {
      _iterator32.f();
    }
  }
  _createClass(BigScaler, [{
    key: "toDOM",
    value: function toDOM(n) {
      for (var i = 0, _base = 0, domBase = 0;; i++) {
        var vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.top) return domBase + (n - _base) * this.scale;
        if (n <= vp.bottom) return vp.domTop + (n - vp.top);
        _base = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }, {
    key: "fromDOM",
    value: function fromDOM(n) {
      for (var i = 0, _base2 = 0, domBase = 0;; i++) {
        var vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.domTop) return _base2 + (n - domBase) / this.scale;
        if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
        _base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }]);
  return BigScaler;
}();
function scaleBlock(block, scaler) {
  if (scaler.scale == 1) return block;
  var bTop = scaler.toDOM(block.top),
    bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(function (b) {
    return scaleBlock(b, scaler);
  }) : block.type);
}
var _theme = /*@__PURE__*/_state.Facet.define({
  combine: function combine(strs) {
    return strs.join(" ");
  }
});
var darkTheme = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    return values.indexOf(true) > -1;
  }
});
var baseThemeID = /*@__PURE__*/_styleMod.StyleModule.newName(),
  baseLightID = /*@__PURE__*/_styleMod.StyleModule.newName(),
  baseDarkID = /*@__PURE__*/_styleMod.StyleModule.newName();
var lightDarkIDs = {
  "&light": "." + baseLightID,
  "&dark": "." + baseDarkID
};
function buildTheme(main, spec, scopes) {
  return new _styleMod.StyleModule(spec, {
    finish: function finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
        if (m == "&") return main;
        if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
        return scopes[m];
      }) : main + " " + sel;
    }
  });
}
var baseTheme$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": {
    caretColor: "black"
  },
  "&dark .cm-content": {
    caretColor: "white"
  },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": {
    "0%": {},
    "50%": {
      opacity: 0
    },
    "100%": {}
  },
  "@keyframes cm-blink2": {
    "0%": {},
    "50%": {
      opacity: 0
    },
    "100%": {}
  },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": {
    backgroundColor: "#cceeff44"
  },
  "&dark .cm-activeLine": {
    backgroundColor: "#99eeff33"
  },
  "&light .cm-specialChar": {
    color: "red"
  },
  "&dark .cm-specialChar": {
    color: "#f78"
  },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')",
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var DOMChange = /*#__PURE__*/_createClass(function DOMChange(view, start, end, typeOver) {
  _classCallCheck(this, DOMChange);
  this.typeOver = typeOver;
  this.bounds = null;
  this.text = "";
  var _view$docView = view.docView,
    iHead = _view$docView.impreciseHead,
    iAnchor = _view$docView.impreciseAnchor;
  if (view.state.readOnly && start > -1) {
    // Ignore changes when the editor is read-only
    this.newSel = null;
  } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
    var selPoints = iHead || iAnchor ? [] : selectionPoints(view);
    var reader = new DOMReader(selPoints, view.state);
    reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
    this.text = reader.text;
    this.newSel = selectionFromPoints(selPoints, this.bounds.from);
  } else {
    var domSel = view.observer.selectionRange;
    var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
    var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
    this.newSel = _state.EditorSelection.single(anchor, head);
  }
});
function applyDOMChange(view, domChange) {
  var change;
  var newSel = domChange.newSel,
    sel = view.state.selection.main;
  if (domChange.bounds) {
    var _domChange$bounds = domChange.bounds,
      from = _domChange$bounds.from,
      to = _domChange$bounds.to;
    var preferredPos = sel.from,
      preferredSide = null;
    // Prefer anchoring to end when Backspace is pressed (or, on
    // Android, when something was deleted)
    if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && domChange.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    var diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
    if (diff) {
      // Chrome inserts two newlines when pressing shift-enter at the
      // end of a line. DomChange drops one of those.
      if (browser.chrome && view.inputState.lastKeyCode == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder) diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: _state.Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel) return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    // Heuristic to notice typing over a selected character
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, sel.to)
    };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    // If the change is inside the selection and covers most of it,
    // assume it is a selection replace (with identical characters at
    // the start/end not included in the diff)
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    // Detect insert-period-on-double-space Mac and Android behavior,
    // and transform it into a regular space insert.
    if (newSel && change.insert.length == 2) newSel = _state.EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = {
      from: sel.from,
      to: sel.to,
      insert: _state.Text.of([" "])
    };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    // In Chrome, if you insert a space at the start of a wrapped
    // line, it will actually insert a newline and a space, causing a
    // bogus new line to be created in CodeMirror (#968)
    if (newSel) newSel = _state.EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = {
      from: sel.from,
      to: sel.to,
      insert: _state.Text.of([" "])
    };
  }
  if (change) {
    var startState = view.state;
    if (browser.ios && view.inputState.flushIOSKey(view)) return true;
    // Android browsers don't fire reasonable key events for enter,
    // backspace, or delete. So this detects changes that look like
    // they're caused by those keys, and reinterprets them as key
    // events. (Some of these keys are also handled by beforeinput
    // events and the pendingAndroidKey mechanism, but that's not
    // reliable in all situations.)
    if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return true;
    var text = change.insert.toString();
    if (view.state.facet(inputHandler).some(function (h) {
      return h(view, change.from, change.to, text);
    })) return true;
    if (view.inputState.composing >= 0) view.inputState.composing++;
    var tr;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
    } else {
      var changes = startState.changes(change);
      var mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
      // Try to apply a composition change to all cursors
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        var replaced = view.state.sliceDoc(change.from, change.to);
        var compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
        var offset = sel.to - change.to,
          size = sel.to - sel.from;
        tr = startState.changeByRange(function (range) {
          if (range.from == sel.from && range.to == sel.to) return {
            changes: changes,
            range: mainSel || range.map(changes)
          };
          var to = range.to - offset,
            from = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
          // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to) return {
            range: range
          };
          var rangeChanges = startState.changes({
              from: from,
              to: to,
              insert: change.insert
            }),
            selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : _state.EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes: changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    var userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    view.dispatch(tr, {
      scrollIntoView: true,
      userEvent: userEvent
    });
    return true;
  } else if (newSel && !newSel.main.eq(sel)) {
    var _scrollIntoView = false,
      _userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select") _scrollIntoView = true;
      _userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({
      selection: newSel,
      scrollIntoView: _scrollIntoView,
      userEvent: _userEvent
    });
    return true;
  } else {
    return false;
  }
}
function findDiff(a, b, preferredPos, preferredSide) {
  var minLen = Math.min(a.length, b.length);
  var from = 0;
  while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) from++;
  if (from == minLen && a.length == b.length) return null;
  var toA = a.length,
    toB = b.length;
  while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    var adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a.length < b.length) {
    var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    var _move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= _move;
    toA = from + (toA - toB);
    toB = from;
  }
  return {
    from: from,
    toA: toA,
    toB: toB
  };
}
function selectionPoints(view) {
  var result = [];
  if (view.root.activeElement != view.contentDOM) return result;
  var _view$observer$select2 = view.observer.selectionRange,
    anchorNode = _view$observer$select2.anchorNode,
    anchorOffset = _view$observer$select2.anchorOffset,
    focusNode = _view$observer$select2.focusNode,
    focusOffset = _view$observer$select2.focusOffset;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base) {
  if (points.length == 0) return null;
  var anchor = points[0].pos,
    head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? _state.EditorSelection.single(anchor + base, head + base) : null;
}
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
// IE11 has very broken mutation observers, so we also listen to
// DOMCharacterDataModified there
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = /*#__PURE__*/function () {
  function DOMObserver(view) {
    var _this33 = this;
    _classCallCheck(this, DOMObserver);
    this.view = view;
    this.active = false;
    // The known selection. Kept in our own object, as opposed to just
    // directly accessing the selection because:
    //  - Safari doesn't report the right selection in shadow DOM
    //  - Reading from the selection forces a DOM layout
    //  - This way, we can ignore selectionchange events if we have
    //    already seen the 'new' selection
    this.selectionRange = new DOMSelectionState();
    // Set when a selection change is detected, cleared on flush
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.resizeContent = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    // Timeout for scheduling check of the parents that need scroll handlers
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver(function (mutations) {
      var _iterator33 = _createForOfIteratorHelper(mutations),
        _step33;
      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var mut = _step33.value;
          _this33.queue.push(mut);
        }
        // IE11 will sometimes (on typing over a selection or
        // backspacing out a single character text node) call the
        // observer callback before actually updating the DOM.
        //
        // Unrelatedly, iOS Safari will, when ending a composition,
        // sometimes first clear it, deliver the mutations, and then
        // reinsert the finished text. CodeMirror's handling of the
        // deletion will prevent the reinsertion from happening,
        // breaking composition.
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
        return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
      })) _this33.flushSoon();else _this33.flush();
    });
    if (useCharData) this.onCharData = function (event) {
      _this33.queue.push({
        target: event.target,
        type: "characterData",
        oldValue: event.prevValue
      });
      _this33.flushSoon();
    };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(function () {
        var _a;
        if (((_a = _this33.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75) _this33.onResize();
      });
      this.resizeScroll.observe(view.scrollDOM);
      this.resizeContent = new ResizeObserver(function () {
        return _this33.view.requestMeasure();
      });
      this.resizeContent.observe(view.contentDOM);
    }
    this.addWindowListeners(this.win = view.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver(function (entries) {
        if (_this33.parentCheck < 0) _this33.parentCheck = setTimeout(_this33.listenForScroll.bind(_this33), 1000);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != _this33.intersecting) {
          _this33.intersecting = !_this33.intersecting;
          if (_this33.intersecting != _this33.view.inView) _this33.onScrollChanged(document.createEvent("Event"));
        }
      }, {
        threshold: [0, .001]
      });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver(function (entries) {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) _this33.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  _createClass(DOMObserver, [{
    key: "onScrollChanged",
    value: function onScrollChanged(e) {
      this.view.inputState.runScrollHandlers(this.view, e);
      if (this.intersecting) this.view.measure();
    }
  }, {
    key: "onScroll",
    value: function onScroll(e) {
      if (this.intersecting) this.flush(false);
      this.onScrollChanged(e);
    }
  }, {
    key: "onResize",
    value: function onResize() {
      var _this34 = this;
      if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(function () {
        _this34.resizeTimeout = -1;
        _this34.view.requestMeasure();
      }, 50);
    }
  }, {
    key: "onPrint",
    value: function onPrint() {
      var _this35 = this;
      this.view.viewState.printing = true;
      this.view.measure();
      setTimeout(function () {
        _this35.view.viewState.printing = false;
        _this35.view.requestMeasure();
      }, 500);
    }
  }, {
    key: "updateGaps",
    value: function updateGaps(gaps) {
      if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some(function (g, i) {
        return g != gaps[i];
      }))) {
        this.gapIntersection.disconnect();
        var _iterator34 = _createForOfIteratorHelper(gaps),
          _step34;
        try {
          for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
            var gap = _step34.value;
            this.gapIntersection.observe(gap);
          }
        } catch (err) {
          _iterator34.e(err);
        } finally {
          _iterator34.f();
        }
        this.gaps = gaps;
      }
    }
  }, {
    key: "onSelectionChange",
    value: function onSelectionChange(event) {
      var wasChanged = this.selectionChanged;
      if (!this.readSelectionRange() || this.delayedAndroidKey) return;
      var view = this.view,
        sel = this.selectionRange;
      if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
      var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
      if (context && context.ignoreEvent(event)) {
        if (!wasChanged) this.selectionChanged = false;
        return;
      }
      // Deletions on IE11 fire their events in the wrong order, giving
      // us a selection change event before the DOM changes are
      // reported.
      // Chrome Android has a similar issue when backspacing out a
      // selection (#645).
      if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
      // (Selection.isCollapsed isn't reliable on IE)
      sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
    }
  }, {
    key: "readSelectionRange",
    value: function readSelectionRange() {
      var view = this.view;
      // The Selection object is broken in shadow roots in Safari. See
      // https://github.com/codemirror/dev/issues/414
      var range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view) || getSelection(view.root);
      if (!range || this.selectionRange.eq(range)) return false;
      var local = hasSelection(this.dom, range);
      // Detect the situation where the browser has, on focus, moved the
      // selection to the start of the content element. Reset it to the
      // position from the editor state.
      if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
        this.view.inputState.lastFocusTime = 0;
        view.docView.updateSelection();
        return false;
      }
      this.selectionRange.setRange(range);
      if (local) this.selectionChanged = true;
      return true;
    }
  }, {
    key: "setSelectionRange",
    value: function setSelectionRange(anchor, head) {
      this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
      this.selectionChanged = false;
    }
  }, {
    key: "clearSelectionRange",
    value: function clearSelectionRange() {
      this.selectionRange.set(null, 0, null, 0);
    }
  }, {
    key: "listenForScroll",
    value: function listenForScroll() {
      this.parentCheck = -1;
      var i = 0,
        changed = null;
      for (var dom = this.dom; dom;) {
        if (dom.nodeType == 1) {
          if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
          if (changed) changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          // Shadow root
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);
      if (changed) {
        var _iterator35 = _createForOfIteratorHelper(this.scrollTargets),
          _step35;
        try {
          for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
            var _dom2 = _step35.value;
            _dom2.removeEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator35.e(err);
        } finally {
          _iterator35.f();
        }
        var _iterator36 = _createForOfIteratorHelper(this.scrollTargets = changed),
          _step36;
        try {
          for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
            var _dom3 = _step36.value;
            _dom3.addEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator36.e(err);
        } finally {
          _iterator36.f();
        }
      }
    }
  }, {
    key: "ignore",
    value: function ignore(f) {
      if (!this.active) return f();
      try {
        this.stop();
        return f();
      } finally {
        this.start();
        this.clear();
      }
    }
  }, {
    key: "start",
    value: function start() {
      if (this.active) return;
      this.observer.observe(this.dom, observeOptions);
      if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (!this.active) return;
      this.active = false;
      this.observer.disconnect();
      if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
    // Throw away any pending changes
  }, {
    key: "clear",
    value: function clear() {
      this.processRecords();
      this.queue.length = 0;
      this.selectionChanged = false;
    }
    // Chrome Android, especially in combination with GBoard, not only
    // doesn't reliably fire regular key events, but also often
    // surrounds the effect of enter or backspace with a bunch of
    // composition events that, when interrupted, cause text duplication
    // or other kinds of corruption. This hack makes the editor back off
    // from handling DOM changes for a moment when such a key is
    // detected (via beforeinput or keydown), and then tries to flush
    // them or, if that has no effect, dispatches the given key.
  }, {
    key: "delayAndroidKey",
    value: function delayAndroidKey(key, keyCode) {
      var _this36 = this;
      var _a;
      if (!this.delayedAndroidKey) {
        var flush = function flush() {
          var key = _this36.delayedAndroidKey;
          if (key) {
            _this36.clearDelayedAndroidKey();
            if (!_this36.flush() && key.force) dispatchKey(_this36.dom, key.key, key.keyCode);
          }
        };
        this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
      }
      // Since backspace beforeinput is sometimes signalled spuriously,
      // Enter always takes precedence.
      if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
        key: key,
        keyCode: keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
      };
    }
  }, {
    key: "clearDelayedAndroidKey",
    value: function clearDelayedAndroidKey() {
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
    }
  }, {
    key: "flushSoon",
    value: function flushSoon() {
      var _this37 = this;
      if (this.delayedFlush < 0) this.delayedFlush = this.view.win.requestAnimationFrame(function () {
        _this37.delayedFlush = -1;
        _this37.flush();
      });
    }
  }, {
    key: "forceFlush",
    value: function forceFlush() {
      if (this.delayedFlush >= 0) {
        this.view.win.cancelAnimationFrame(this.delayedFlush);
        this.delayedFlush = -1;
      }
      this.flush();
    }
  }, {
    key: "pendingRecords",
    value: function pendingRecords() {
      var _iterator37 = _createForOfIteratorHelper(this.observer.takeRecords()),
        _step37;
      try {
        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
          var mut = _step37.value;
          this.queue.push(mut);
        }
      } catch (err) {
        _iterator37.e(err);
      } finally {
        _iterator37.f();
      }
      return this.queue;
    }
  }, {
    key: "processRecords",
    value: function processRecords() {
      var records = this.pendingRecords();
      if (records.length) this.queue = [];
      var from = -1,
        to = -1,
        typeOver = false;
      var _iterator38 = _createForOfIteratorHelper(records),
        _step38;
      try {
        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
          var record = _step38.value;
          var range = this.readMutation(record);
          if (!range) continue;
          if (range.typeOver) typeOver = true;
          if (from == -1) {
            from = range.from;
            to = range.to;
          } else {
            from = Math.min(range.from, from);
            to = Math.max(range.to, to);
          }
        }
      } catch (err) {
        _iterator38.e(err);
      } finally {
        _iterator38.f();
      }
      return {
        from: from,
        to: to,
        typeOver: typeOver
      };
    }
  }, {
    key: "readChange",
    value: function readChange() {
      var _this$processRecords = this.processRecords(),
        from = _this$processRecords.from,
        to = _this$processRecords.to,
        typeOver = _this$processRecords.typeOver;
      var newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
      if (from < 0 && !newSel) return null;
      if (from > -1) this.lastChange = Date.now();
      this.view.inputState.lastFocusTime = 0;
      this.selectionChanged = false;
      return new DOMChange(this.view, from, to, typeOver);
    }
    // Apply pending changes, if any
  }, {
    key: "flush",
    value: function flush() {
      var readSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      // Completely hold off flushing when pending keys are set—the code
      // managing those will make sure processRecords is called and the
      // view is resynchronized after
      if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;
      if (readSelection) this.readSelectionRange();
      var domChange = this.readChange();
      if (!domChange) return false;
      var startState = this.view.state;
      var handled = applyDOMChange(this.view, domChange);
      // The view wasn't updated
      if (this.view.state == startState) this.view.update([]);
      return handled;
    }
  }, {
    key: "readMutation",
    value: function readMutation(rec) {
      var cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec)) return null;
      cView.markDirty(rec.type == "attributes");
      if (rec.type == "attributes") cView.dirty |= 4 /* Dirty.Attrs */;
      if (rec.type == "childList") {
        var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else if (rec.type == "characterData") {
        return {
          from: cView.posAtStart,
          to: cView.posAtEnd,
          typeOver: rec.target.nodeValue == rec.oldValue
        };
      } else {
        return null;
      }
    }
  }, {
    key: "setWindow",
    value: function setWindow(win) {
      if (win != this.win) {
        this.removeWindowListeners(this.win);
        this.win = win;
        this.addWindowListeners(this.win);
      }
    }
  }, {
    key: "addWindowListeners",
    value: function addWindowListeners(win) {
      win.addEventListener("resize", this.onResize);
      win.addEventListener("beforeprint", this.onPrint);
      win.addEventListener("scroll", this.onScroll);
      win.document.addEventListener("selectionchange", this.onSelectionChange);
    }
  }, {
    key: "removeWindowListeners",
    value: function removeWindowListeners(win) {
      win.removeEventListener("scroll", this.onScroll);
      win.removeEventListener("resize", this.onResize);
      win.removeEventListener("beforeprint", this.onPrint);
      win.document.removeEventListener("selectionchange", this.onSelectionChange);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a, _b, _c, _d;
      this.stop();
      (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
      (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
      (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
      var _iterator39 = _createForOfIteratorHelper(this.scrollTargets),
        _step39;
      try {
        for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
          var dom = _step39.value;
          dom.removeEventListener("scroll", this.onScroll);
        }
      } catch (err) {
        _iterator39.e(err);
      } finally {
        _iterator39.f();
      }
      this.removeWindowListeners(this.win);
      clearTimeout(this.parentCheck);
      clearTimeout(this.resizeTimeout);
      this.win.cancelAnimationFrame(this.delayedFlush);
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
    }
  }]);
  return DOMObserver;
}();
function findChild(cView, dom, dir) {
  while (dom) {
    var curView = ContentView.get(dom);
    if (curView && curView.parent == cView) return curView;
    var parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
// Used to work around a Safari Selection/shadow DOM bug (#414)
function safariSelectionRangeHack(view) {
  var found = null;
  // Because Safari (at least in 2018-2021) doesn't provide regular
  // access to the selection inside a shadowroot, we have to perform a
  // ridiculous hack to get at it—using `execCommand` to trigger a
  // `beforeInput` event so that we can read the target range from the
  // event.
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  if (!found) return null;
  var anchorNode = found.startContainer,
    anchorOffset = found.startOffset;
  var focusNode = found.endContainer,
    focusOffset = found.endOffset;
  var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  // Since such a range doesn't distinguish between anchor and head,
  // use a heuristic that flips it around if its end matches the
  // current anchor.
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
    var _ref8 = [focusNode, focusOffset, anchorNode, anchorOffset];
    anchorNode = _ref8[0];
    anchorOffset = _ref8[1];
    focusNode = _ref8[2];
    focusOffset = _ref8[3];
  }
  return {
    anchorNode: anchorNode,
    anchorOffset: anchorOffset,
    focusNode: focusNode,
    focusOffset: focusOffset
  };
}

// The editor's update state machine looks something like this:
//
//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
//                                         ↑      ↓
//                                         Updating (measure)
//
// The difference between 'Idle' and 'Idle (unchecked)' lies in
// whether a layout check has been scheduled. A regular update through
// the `update` method updates the DOM in a write-only fashion, and
// relies on a check (scheduled with `requestAnimationFrame`) to make
// sure everything is where it should be and the viewport covers the
// visible code. That check continues to measure and then optionally
// update until it reaches a coherent state.
/**
An editor view represents the editor's user interface. It holds
the editable DOM surface, and possibly other elements such as the
line number gutter. It handles events and dispatches state
transactions for editing actions.
*/
var EditorView = /*#__PURE__*/function () {
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  function EditorView() {
    var _this38 = this;
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, EditorView);
    this.plugins = [];
    this.pluginMap = new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    /**
    @internal
    */
    this.updateState = 2 /* UpdateState.Updating */;
    /**
    @internal
    */
    this.measureScheduled = -1;
    /**
    @internal
    */
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.style.cssText = "position: fixed; top: -10000px";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    this._dispatch = config.dispatch || function (tr) {
      return _this38.update([tr]);
    };
    this.dispatch = this.dispatch.bind(this);
    this._root = config.root || getRoot(config.parent) || document;
    this.viewState = new ViewState(config.state || _state.EditorState.create(config));
    this.plugins = this.state.facet(viewPlugin).map(function (spec) {
      return new PluginInstance(spec);
    });
    var _iterator40 = _createForOfIteratorHelper(this.plugins),
      _step40;
    try {
      for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
        var _plugin4 = _step40.value;
        _plugin4.update(this);
      }
    } catch (err) {
      _iterator40.e(err);
    } finally {
      _iterator40.f();
    }
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this, this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0 /* UpdateState.Idle */;
    this.requestMeasure();
    if (config.parent) config.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */
  _createClass(EditorView, [{
    key: "state",
    get: function get() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
  }, {
    key: "viewport",
    get: function get() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
  }, {
    key: "visibleRanges",
    get: function get() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
  }, {
    key: "inView",
    get: function get() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
    one change has been made in the current composition.
    */
  }, {
    key: "composing",
    get: function get() {
      return this.inputState.composing > 0;
    }
    /**
    Indicates whether the user is currently in composing state. Note
    that on some platforms, like Android, this will be the case a
    lot, since just putting the cursor on a word starts a
    composition there.
    */
  }, {
    key: "compositionStarted",
    get: function get() {
      return this.inputState.composing >= 0;
    }
    /**
    The document or shadow root that the view lives in.
    */
  }, {
    key: "root",
    get: function get() {
      return this._root;
    }
    /**
    @internal
    */
  }, {
    key: "win",
    get: function get() {
      return this.dom.ownerDocument.defaultView || window;
    }
  }, {
    key: "dispatch",
    value: function dispatch() {
      var _this$state;
      this._dispatch(arguments.length == 1 && (arguments.length <= 0 ? undefined : arguments[0]) instanceof _state.Transaction ? arguments.length <= 0 ? undefined : arguments[0] : (_this$state = this.state).update.apply(_this$state, arguments));
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
  }, {
    key: "update",
    value: function update(transactions) {
      var _this39 = this;
      if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      var redrawn = false,
        attrsChanged = false,
        update;
      var state = this.state;
      var _iterator41 = _createForOfIteratorHelper(transactions),
        _step41;
      try {
        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
          var _tr = _step41.value;
          if (_tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
          state = _tr.state;
        }
      } catch (err) {
        _iterator41.e(err);
      } finally {
        _iterator41.f();
      }
      if (this.destroyed) {
        this.viewState.state = state;
        return;
      }
      var focus = this.hasFocus,
        focusFlag = 0,
        dispatchFocus = null;
      if (transactions.some(function (tr) {
        return tr.annotation(isFocusChange);
      })) {
        this.inputState.notifiedFocused = focus;
        // If a focus-change transaction is being dispatched, set this update flag.
        focusFlag = 1 /* UpdateFlag.Focus */;
      } else if (focus != this.inputState.notifiedFocused) {
        this.inputState.notifiedFocused = focus;
        // Schedule a separate focus transaction if necessary, otherwise
        // add a flag to this update
        dispatchFocus = focusChangeTransaction(state, focus);
        if (!dispatchFocus) focusFlag = 1 /* UpdateFlag.Focus */;
      }
      // If there was a pending DOM change, eagerly read it and try to
      // apply it after the given transactions.
      var pendingKey = this.observer.delayedAndroidKey,
        domChange = null;
      if (pendingKey) {
        this.observer.clearDelayedAndroidKey();
        domChange = this.observer.readChange();
        // Only try to apply DOM changes if the transactions didn't
        // change the doc or selection.
        if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection)) domChange = null;
      } else {
        this.observer.clear();
      }
      // When the phrases change, redraw the editor
      if (state.facet(_state.EditorState.phrases) != this.state.facet(_state.EditorState.phrases)) return this.setState(state);
      update = ViewUpdate.create(this, state, transactions);
      update.flags |= focusFlag;
      var scrollTarget = this.viewState.scrollTarget;
      try {
        this.updateState = 2 /* UpdateState.Updating */;
        var _iterator42 = _createForOfIteratorHelper(transactions),
          _step42;
        try {
          for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
            var tr = _step42.value;
            if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);
            if (tr.scrollIntoView) {
              var main = tr.state.selection.main;
              scrollTarget = new ScrollTarget(main.empty ? main : _state.EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
            }
            var _iterator43 = _createForOfIteratorHelper(tr.effects),
              _step43;
            try {
              for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
                var e = _step43.value;
                if (e.is(_scrollIntoView2)) scrollTarget = e.value;
              }
            } catch (err) {
              _iterator43.e(err);
            } finally {
              _iterator43.f();
            }
          }
        } catch (err) {
          _iterator42.e(err);
        } finally {
          _iterator42.f();
        }
        this.viewState.update(update, scrollTarget);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
        attrsChanged = this.updateAttrs();
        this.showAnnouncements(transactions);
        this.docView.updateSelection(redrawn, transactions.some(function (tr) {
          return tr.isUserEvent("select.pointer");
        }));
      } finally {
        this.updateState = 0 /* UpdateState.Idle */;
      }

      if (update.startState.facet(_theme) != update.state.facet(_theme)) this.viewState.mustMeasureContent = true;
      if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();
      if (!update.empty) {
        var _iterator44 = _createForOfIteratorHelper(this.state.facet(updateListener)),
          _step44;
        try {
          for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
            var listener = _step44.value;
            listener(update);
          }
        } catch (err) {
          _iterator44.e(err);
        } finally {
          _iterator44.f();
        }
      }
      if (dispatchFocus || domChange) Promise.resolve().then(function () {
        if (dispatchFocus && _this39.state == dispatchFocus.startState) _this39.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(_this39, domChange) && pendingKey.force) dispatchKey(_this39.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
  }, {
    key: "setState",
    value: function setState(newState) {
      if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      if (this.destroyed) {
        this.viewState.state = newState;
        return;
      }
      this.updateState = 2 /* UpdateState.Updating */;
      var hadFocus = this.hasFocus;
      try {
        var _iterator45 = _createForOfIteratorHelper(this.plugins),
          _step45;
        try {
          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
            var _plugin5 = _step45.value;
            _plugin5.destroy(this);
          }
        } catch (err) {
          _iterator45.e(err);
        } finally {
          _iterator45.f();
        }
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map(function (spec) {
          return new PluginInstance(spec);
        });
        this.pluginMap.clear();
        var _iterator46 = _createForOfIteratorHelper(this.plugins),
          _step46;
        try {
          for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
            var _plugin6 = _step46.value;
            _plugin6.update(this);
          }
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this, this.plugins);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0 /* UpdateState.Idle */;
      }

      if (hadFocus) this.focus();
      this.requestMeasure();
    }
  }, {
    key: "updatePlugins",
    value: function updatePlugins(update) {
      var prevSpecs = update.startState.facet(viewPlugin),
        specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        var newPlugins = [];
        var _iterator47 = _createForOfIteratorHelper(specs),
          _step47;
        try {
          for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
            var spec = _step47.value;
            var found = prevSpecs.indexOf(spec);
            if (found < 0) {
              newPlugins.push(new PluginInstance(spec));
            } else {
              var _plugin7 = this.plugins[found];
              _plugin7.mustUpdate = update;
              newPlugins.push(_plugin7);
            }
          }
        } catch (err) {
          _iterator47.e(err);
        } finally {
          _iterator47.f();
        }
        var _iterator48 = _createForOfIteratorHelper(this.plugins),
          _step48;
        try {
          for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
            var _plugin8 = _step48.value;
            if (_plugin8.mustUpdate != update) _plugin8.destroy(this);
          }
        } catch (err) {
          _iterator48.e(err);
        } finally {
          _iterator48.f();
        }
        this.plugins = newPlugins;
        this.pluginMap.clear();
        this.inputState.ensureHandlers(this, this.plugins);
      } else {
        var _iterator49 = _createForOfIteratorHelper(this.plugins),
          _step49;
        try {
          for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
            var _p = _step49.value;
            _p.mustUpdate = update;
          }
        } catch (err) {
          _iterator49.e(err);
        } finally {
          _iterator49.f();
        }
      }
      for (var i = 0; i < this.plugins.length; i++) this.plugins[i].update(this);
    }
    /**
    @internal
    */
  }, {
    key: "measure",
    value: function measure() {
      var _this40 = this;
      var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this.destroyed) return;
      if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
      this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
      if (flush) this.observer.forceFlush();
      var updated = null;
      var _this$scrollDOM = this.scrollDOM,
        scrollHeight = _this$scrollDOM.scrollHeight,
        scrollTop = _this$scrollDOM.scrollTop,
        clientHeight = _this$scrollDOM.clientHeight;
      var refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;
      try {
        for (var i = 0;; i++) {
          this.updateState = 1 /* UpdateState.Measuring */;
          var oldViewport = this.viewport;
          var refBlock = this.viewState.lineBlockAtHeight(refHeight);
          var changed = this.viewState.measure(this);
          if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
          if (i > 5) {
            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
            break;
          }
          var measuring = [];
          // Only run measure requests in this cycle when the viewport didn't change
          if (!(changed & 4 /* UpdateFlag.Viewport */)) {
            var _ref9 = [measuring, this.measureRequests];
            this.measureRequests = _ref9[0];
            measuring = _ref9[1];
          }
          var measured = measuring.map(function (m) {
            try {
              return m.read(_this40);
            } catch (e) {
              logException(_this40.state, e);
              return BadMeasure;
            }
          });
          var update = ViewUpdate.create(this, this.state, []),
            redrawn = false,
            scrolled = false;
          update.flags |= changed;
          if (!updated) updated = update;else updated.flags |= changed;
          this.updateState = 2 /* UpdateState.Updating */;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
            this.updateAttrs();
            redrawn = this.docView.update(update);
          }
          for (var _i10 = 0; _i10 < measuring.length; _i10++) if (measured[_i10] != BadMeasure) {
            try {
              var m = measuring[_i10];
              if (m.write) m.write(measured[_i10], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrolled = true;
            } else {
              var diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;
              if (diff > 1 || diff < -1) {
                this.scrollDOM.scrollTop += diff;
                scrolled = true;
              }
            }
          }
          if (redrawn) this.docView.updateSelection(true);
          if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && !scrolled && this.measureRequests.length == 0) break;
        }
      } finally {
        this.updateState = 0 /* UpdateState.Idle */;
        this.measureScheduled = -1;
      }
      if (updated && !updated.empty) {
        var _iterator50 = _createForOfIteratorHelper(this.state.facet(updateListener)),
          _step50;
        try {
          for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
            var listener = _step50.value;
            listener(updated);
          }
        } catch (err) {
          _iterator50.e(err);
        } finally {
          _iterator50.f();
        }
      }
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
  }, {
    key: "themeClasses",
    get: function get() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme);
    }
  }, {
    key: "updateAttrs",
    value: function updateAttrs() {
      var _this41 = this;
      var editorAttrs = attrsFromFacet(this, editorAttributes, {
        "class": "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      var contentAttrs = {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        translate: "no",
        contenteditable: !this.state.facet(editable) ? "false" : "true",
        "class": "cm-content",
        style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
        role: "textbox",
        "aria-multiline": "true"
      };
      if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
      attrsFromFacet(this, contentAttributes, contentAttrs);
      var changed = this.observer.ignore(function () {
        var changedContent = _updateAttrs(_this41.contentDOM, _this41.contentAttrs, contentAttrs);
        var changedEditor = _updateAttrs(_this41.dom, _this41.editorAttrs, editorAttrs);
        return changedContent || changedEditor;
      });
      this.editorAttrs = editorAttrs;
      this.contentAttrs = contentAttrs;
      return changed;
    }
  }, {
    key: "showAnnouncements",
    value: function showAnnouncements(trs) {
      var first = true;
      var _iterator51 = _createForOfIteratorHelper(trs),
        _step51;
      try {
        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
          var tr = _step51.value;
          var _iterator52 = _createForOfIteratorHelper(tr.effects),
            _step52;
          try {
            for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
              var effect = _step52.value;
              if (effect.is(EditorView.announce)) {
                if (first) this.announceDOM.textContent = "";
                first = false;
                var div = this.announceDOM.appendChild(document.createElement("div"));
                div.textContent = effect.value;
              }
            }
          } catch (err) {
            _iterator52.e(err);
          } finally {
            _iterator52.f();
          }
        }
      } catch (err) {
        _iterator51.e(err);
      } finally {
        _iterator51.f();
      }
    }
  }, {
    key: "mountStyles",
    value: function mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      _styleMod.StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());
    }
  }, {
    key: "readMeasured",
    value: function readMeasured() {
      if (this.updateState == 2 /* UpdateState.Updating */) throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1) this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
  }, {
    key: "requestMeasure",
    value: function requestMeasure(request) {
      var _this42 = this;
      if (this.measureScheduled < 0) this.measureScheduled = this.win.requestAnimationFrame(function () {
        return _this42.measure();
      });
      if (request) {
        if (this.measureRequests.indexOf(request) > -1) return;
        if (request.key != null) for (var i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request.key) {
            this.measureRequests[i] = request;
            return;
          }
        }
        this.measureRequests.push(request);
      }
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
  }, {
    key: "plugin",
    value: function plugin(_plugin3) {
      var known = this.pluginMap.get(_plugin3);
      if (known === undefined || known && known.spec != _plugin3) this.pluginMap.set(_plugin3, known = this.plugins.find(function (p) {
        return p.spec == _plugin3;
      }) || null);
      return known && known.update(this).value;
    }
    /**
    The top position of the document, in screen coordinates. This
    may be negative when the editor is scrolled down. Points
    directly to the top of the first line, not above the padding.
    */
  }, {
    key: "documentTop",
    get: function get() {
      return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    /**
    Reports the padding above and below the document.
    */
  }, {
    key: "documentPadding",
    get: function get() {
      return {
        top: this.viewState.paddingTop,
        bottom: this.viewState.paddingBottom
      };
    }
    /**
    Find the text line or block widget at the given vertical
    position (which is interpreted as relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
    */
  }, {
    key: "elementAtHeight",
    value: function elementAtHeight(height) {
      this.readMeasured();
      return this.viewState.elementAtHeight(height);
    }
    /**
    Find the line block (see
    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
    height, again interpreted relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
    */
  }, {
    key: "lineBlockAtHeight",
    value: function lineBlockAtHeight(height) {
      this.readMeasured();
      return this.viewState.lineBlockAtHeight(height);
    }
    /**
    Get the extent and vertical position of all [line
    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
    are relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
    */
  }, {
    key: "viewportLineBlocks",
    get: function get() {
      return this.viewState.viewportLines;
    }
    /**
    Find the line block around the given document position. A line
    block is a range delimited on both sides by either a
    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
    start/end of the document. It will usually just hold a line of
    text, but may be broken into multiple textblocks by block
    widgets.
    */
  }, {
    key: "lineBlockAt",
    value: function lineBlockAt(pos) {
      return this.viewState.lineBlockAt(pos);
    }
    /**
    The editor's total content height.
    */
  }, {
    key: "contentHeight",
    get: function get() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. In
    bidirectional text, the line is traversed in visual order, using
    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    When the start position was the last one on the line, the
    returned position will be across the line break. If there is no
    further line, the original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
  }, {
    key: "moveByChar",
    value: function moveByChar(start, forward, by) {
      return skipAtoms(this, start, _moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
  }, {
    key: "moveByGroup",
    value: function moveByGroup(start, forward) {
      var _this43 = this;
      return skipAtoms(this, start, _moveByChar(this, start, forward, function (initial) {
        return byGroup(_this43, start.head, initial);
      }));
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
  }, {
    key: "moveToLineBoundary",
    value: function moveToLineBoundary(start, forward) {
      var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return _moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
  }, {
    key: "moveVertically",
    value: function moveVertically(start, forward, distance) {
      return skipAtoms(this, start, _moveVertically(this, start, forward, distance));
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    
    Note that for positions that aren't currently in
    `visibleRanges`, the resulting DOM position isn't necessarily
    meaningful (it may just point before or after a placeholder
    element).
    */
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
  }, {
    key: "posAtDOM",
    value: function posAtDOM(node) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.docView.posFromDOM(node, offset);
    }
  }, {
    key: "posAtCoords",
    value: function posAtCoords(coords) {
      var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.readMeasured();
      return _posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
  }, {
    key: "coordsAtPos",
    value: function coordsAtPos(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.readMeasured();
      var rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right) return rect;
      var line = this.state.doc.lineAt(pos),
        order = this.bidiSpans(line);
      var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
  }, {
    key: "defaultCharacterWidth",
    get: function get() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
  }, {
    key: "defaultLineHeight",
    get: function get() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor's content element.
    */
  }, {
    key: "textDirection",
    get: function get() {
      return this.viewState.defaultTextDirection;
    }
    /**
    Find the text direction of the block at the given position, as
    assigned by CSS. If
    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
    isn't enabled, or the given position is outside of the viewport,
    this will always return the same as
    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
    this may trigger a DOM layout.
    */
  }, {
    key: "textDirectionAt",
    value: function textDirectionAt(pos) {
      var perLine = this.state.facet(perLineTextDirection);
      if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;
      this.readMeasured();
      return this.docView.textDirectionAt(pos);
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
  }, {
    key: "lineWrapping",
    get: function get() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
  }, {
    key: "bidiSpans",
    value: function bidiSpans(line) {
      if (line.length > MaxBidiLine) return trivialOrder(line.length);
      var dir = this.textDirectionAt(line.from);
      var _iterator53 = _createForOfIteratorHelper(this.bidiCache),
        _step53;
      try {
        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
          var entry = _step53.value;
          if (entry.from == line.from && entry.dir == dir) return entry.order;
        }
      } catch (err) {
        _iterator53.e(err);
      } finally {
        _iterator53.f();
      }
      var order = computeOrder(line.text, dir);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
      return order;
    }
    /**
    Check whether the editor has focus.
    */
  }, {
    key: "hasFocus",
    get: function get() {
      var _a;
      // Safari return false for hasFocus when the context menu is open
      // or closing, which leads us to ignore selection changes from the
      // context menu because it looks like the editor isn't focused.
      // This kludges around that.
      return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
  }, {
    key: "focus",
    value: function focus() {
      var _this44 = this;
      this.observer.ignore(function () {
        focusPreventScroll(_this44.contentDOM);
        _this44.docView.updateSelection();
      });
    }
    /**
    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
    necessary when moving the editor's existing DOM to a new window or shadow root.
    */
  }, {
    key: "setRoot",
    value: function setRoot(root) {
      if (this._root != root) {
        this._root = root;
        this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
        this.mountStyles();
      }
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator54 = _createForOfIteratorHelper(this.plugins),
        _step54;
      try {
        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
          var _plugin9 = _step54.value;
          _plugin9.destroy(this);
        }
      } catch (err) {
        _iterator54.e(err);
      } finally {
        _iterator54.f();
      }
      this.plugins = [];
      this.inputState.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
      this.destroyed = true;
    }
    /**
    Returns an effect that can be
    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
    cause it to scroll the given position or range into view.
    */
  }], [{
    key: "scrollIntoView",
    value: function scrollIntoView(pos) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _scrollIntoView2.of(new ScrollTarget(typeof pos == "number" ? _state.EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
    }
    /**
    Returns an extension that can be used to add DOM event handlers.
    The value should be an object mapping event names to handler
    functions. For any given event, such functions are ordered by
    extension precedence, and the first handler to return true will
    be assumed to have handled that event, and no other handlers or
    built-in behavior will be activated for it. These are registered
    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
    for `scroll` handlers, which will be called any time the
    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
    its parent nodes is scrolled.
    */
  }, {
    key: "domEventHandlers",
    value: function domEventHandlers(handlers) {
      return ViewPlugin.define(function () {
        return {};
      }, {
        eventHandlers: handlers
      });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
  }, {
    key: "theme",
    value: function theme(spec, options) {
      var prefix = _styleMod.StyleModule.newName();
      var result = [_theme.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
      if (options && options.dark) result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
  }, {
    key: "baseTheme",
    value: function baseTheme(spec) {
      return _state.Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
    /**
    Retrieve an editor view instance from the view's DOM
    representation.
    */
  }, {
    key: "findFromDOM",
    value: function findFromDOM(dom) {
      var _a;
      var content = dom.querySelector(".cm-content");
      var cView = content && ContentView.get(content) || ContentView.get(dom);
      return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
    }
  }]);
  return EditorView;
}();
/**
Facet to add a [style
module](https://github.com/marijnh/style-mod#documentation) to
an editor view. The view will ensure that the module is
mounted in its [document
root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
*/
exports.EditorView = EditorView;
EditorView.styleModule = styleModule;
/**
An input handler can override the way changes to the editable
DOM content are handled. Handlers are passed the document
positions between which the change was found, and the new
content. When one returns true, no further input handlers are
called and the default behavior is prevented.
*/
EditorView.inputHandler = inputHandler;
/**
This facet can be used to provide functions that create effects
to be dispatched when the editor's focus state changes.
*/
EditorView.focusChangeEffect = focusChangeEffect;
/**
By default, the editor assumes all its content has the same
[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
value to make it read the text direction of every (rendered)
line separately.
*/
EditorView.perLineTextDirection = perLineTextDirection;
/**
Allows you to provide a function that should be called when the
library catches an exception from an extension (mostly from view
plugins, but may be used by other extensions to route exceptions
from user-code-provided callbacks). This is mostly useful for
debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
*/
EditorView.exceptionSink = exceptionSink;
/**
A facet that can be used to register a function to be called
every time the view updates.
*/
EditorView.updateListener = updateListener;
/**
Facet that controls whether the editor content DOM is editable.
When its highest-precedence value is `false`, the element will
not have its `contenteditable` attribute set. (Note that this
doesn't affect API calls that change the editor content, even
when those are bound to keys or buttons. See the
[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
*/
EditorView.editable = editable;
/**
Allows you to influence the way mouse selection happens. The
functions in this facet will be called for a `mousedown` event
on the editor, and can return an object that overrides the way a
selection is computed from that mouse click or drag.
*/
EditorView.mouseSelectionStyle = mouseSelectionStyle;
/**
Facet used to configure whether a given selection drag event
should move or copy the selection. The given predicate will be
called with the `mousedown` event, and can return `true` when
the drag should move the content.
*/
EditorView.dragMovesSelection = dragMovesSelection$1;
/**
Facet used to configure whether a given selecting click adds a
new range to the existing selection or replaces it entirely. The
default behavior is to check `event.metaKey` on macOS, and
`event.ctrlKey` elsewhere.
*/
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
/**
A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
are shown in the view. Decorations can be provided in two
ways—directly, or via a function that takes an editor view.

Only decoration sets provided directly are allowed to influence
the editor's vertical layout structure. The ones provided as
functions are called _after_ the new viewport has been computed,
and thus **must not** introduce block widgets or replacing
decorations that cover line breaks.

If you want decorated ranges to behave like atomic units for
cursor motion and deletion purposes, also provide the range set
containing the decorations to
[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
*/
EditorView.decorations = decorations;
/**
Used to provide ranges that should be treated as atoms as far as
cursor motion is concerned. This causes methods like
[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
commands built on top of them) to skip across such regions when
a selection endpoint would enter them. This does _not_ prevent
direct programmatic [selection
updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
regions.
*/
EditorView.atomicRanges = atomicRanges;
/**
Facet that allows extensions to provide additional scroll
margins (space around the sides of the scrolling element that
should be considered invisible). This can be useful when the
plugin introduces elements that cover part of that element (for
example a horizontally fixed gutter).
*/
EditorView.scrollMargins = scrollMargins;
/**
This facet records whether a dark theme is active. The extension
returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
includes an instance of this when the `dark` option is set to
true.
*/
EditorView.darkTheme = darkTheme;
/**
Facet that provides additional DOM attributes for the editor's
editable DOM element.
*/
EditorView.contentAttributes = contentAttributes;
/**
Facet that provides DOM attributes for the editor's outer
element.
*/
EditorView.editorAttributes = editorAttributes;
/**
An extension that enables line wrapping in the editor (by
setting CSS `white-space` to `pre-wrap` in the content).
*/
EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
  "class": "cm-lineWrapping"
});
/**
State effect used to include screen reader announcements in a
transaction. These will be added to the DOM in a visually hidden
element with `aria-live="polite"` set, and should be used to
describe effects that are visually obvious but may not be
noticed by screen reader users (such as moving to the next
search match).
*/
EditorView.announce = /*@__PURE__*/_state.StateEffect.define();
// Maximum line length for which we compute accurate bidi info
var MaxBidiLine = 4096;
var BadMeasure = {};
var CachedOrder = /*#__PURE__*/function () {
  function CachedOrder(from, to, dir, order) {
    _classCallCheck(this, CachedOrder);
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.order = order;
  }
  _createClass(CachedOrder, null, [{
    key: "update",
    value: function update(cache, changes) {
      if (changes.empty) return cache;
      var result = [],
        lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
      for (var i = Math.max(0, cache.length - 10); i < cache.length; i++) {
        var entry = cache[i];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
      }
      return result;
    }
  }]);
  return CachedOrder;
}();
function attrsFromFacet(view, facet, base) {
  for (var sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    var source = sources[i],
      value = typeof source == "function" ? source(view) : source;
    if (value) combineAttrs(value, base);
  }
  return base;
}
var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
function normalizeKeyName(name, platform) {
  var parts = name.split(/-(?!$)/);
  var result = parts[parts.length - 1];
  if (result == "Space") result = " ";
  var alt, ctrl, shift, meta;
  for (var i = 0; i < parts.length - 1; ++i) {
    var mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
      if (platform == "mac") meta = true;else ctrl = true;
    } else throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt) result = "Alt-" + result;
  if (ctrl) result = "Ctrl-" + result;
  if (meta) result = "Meta-" + result;
  if (shift) result = "Shift-" + result;
  return result;
}
function modifiers(name, event, shift) {
  if (event.altKey) name = "Alt-" + name;
  if (event.ctrlKey) name = "Ctrl-" + name;
  if (event.metaKey) name = "Meta-" + name;
  if (shift !== false && event.shiftKey) name = "Shift-" + name;
  return name;
}
var handleKeyEvents = /*@__PURE__*/_state.Prec["default"]( /*@__PURE__*/EditorView.domEventHandlers({
  keydown: function keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
}));
/**
Facet used for registering keymaps.

You can add multiple keymaps to an editor. Their priorities
determine their precedence (the ones specified early or with high
priority get checked first). When a handler has returned `true`
for a given key, no further handlers are called.
*/
var keymap = /*@__PURE__*/_state.Facet.define({
  enables: handleKeyEvents
});
exports.keymap = keymap;
var Keymaps = /*@__PURE__*/new WeakMap();
// This is hidden behind an indirection, rather than directly computed
// by the facet, to keep internal types out of the facet's type.
function getKeymap(state) {
  var bindings = state.facet(keymap);
  var map = Keymaps.get(bindings);
  if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
    return a.concat(b);
  }, [])));
  return map;
}
/**
Run the key handlers registered for a given scope. The event
object should be a `"keydown"` event. Returns true if any of the
handlers handled it.
*/
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
var storedPrefix = null;
var PrefixTimeout = 4000;
function buildKeymap(bindings) {
  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
  var bound = Object.create(null);
  var isPrefix = Object.create(null);
  var checkPrefix = function checkPrefix(name, is) {
    var current = isPrefix[name];
    if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
  };
  var add = function add(scope, key, command, preventDefault) {
    var _a, _b;
    var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
    var parts = key.split(/ (?!$)/).map(function (k) {
      return normalizeKeyName(k, platform);
    });
    var _loop6 = function _loop6() {
      var prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix]) scopeObj[prefix] = {
        preventDefault: true,
        run: [function (view) {
          var ourObj = storedPrefix = {
            view: view,
            prefix: prefix,
            scope: scope
          };
          setTimeout(function () {
            if (storedPrefix == ourObj) storedPrefix = null;
          }, PrefixTimeout);
          return true;
        }]
      };
    };
    for (var i = 1; i < parts.length; i++) {
      _loop6();
    }
    var full = parts.join(" ");
    checkPrefix(full, false);
    var binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
    });
    if (command) binding.run.push(command);
    if (preventDefault) binding.preventDefault = true;
  };
  var _iterator55 = _createForOfIteratorHelper(bindings),
    _step55;
  try {
    for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
      var b = _step55.value;
      var scopes = b.scope ? b.scope.split(" ") : ["editor"];
      if (b.any) {
        var _iterator56 = _createForOfIteratorHelper(scopes),
          _step56;
        try {
          for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
            var scope = _step56.value;
            var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            if (!scopeObj._any) scopeObj._any = {
              preventDefault: false,
              run: []
            };
            for (var key in scopeObj) scopeObj[key].run.push(b.any);
          }
        } catch (err) {
          _iterator56.e(err);
        } finally {
          _iterator56.f();
        }
      }
      var name = b[platform] || b.key;
      if (!name) continue;
      var _iterator57 = _createForOfIteratorHelper(scopes),
        _step57;
      try {
        for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
          var _scope = _step57.value;
          add(_scope, name, b.run, b.preventDefault);
          if (b.shift) add(_scope, "Shift-" + name, b.shift, b.preventDefault);
        }
      } catch (err) {
        _iterator57.e(err);
      } finally {
        _iterator57.f();
      }
    }
  } catch (err) {
    _iterator55.e(err);
  } finally {
    _iterator55.f();
  }
  return bound;
}
function runHandlers(map, event, view, scope) {
  var name = (0, _w3cKeyname.keyName)(event);
  var charCode = (0, _state.codePointAt)(name, 0),
    isChar = (0, _state.codePointSize)(charCode) == name.length && name != " ";
  var prefix = "",
    fallthrough = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
  }
  var ran = new Set();
  var runFor = function runFor(binding) {
    if (binding) {
      var _iterator58 = _createForOfIteratorHelper(binding.run),
        _step58;
      try {
        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
          var cmd = _step58.value;
          if (!ran.has(cmd)) {
            ran.add(cmd);
            if (cmd(view, event)) return true;
          }
        }
      } catch (err) {
        _iterator58.e(err);
      } finally {
        _iterator58.f();
      }
      if (binding.preventDefault) fallthrough = true;
    }
    return false;
  };
  var scopeObj = map[scope],
    baseName,
    shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;
    if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
    // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && (baseName = _w3cKeyname.base[event.keyCode]) && baseName != name) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;else if (event.shiftKey && (shiftName = _w3cKeyname.shift[event.keyCode]) != name && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) return true;
    } else if (isChar && event.shiftKey) {
      if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
    }
    if (runFor(scopeObj._any)) return true;
  }
  return fallthrough;
}

/**
Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
a rectangle at a given set of coordinates.
*/
var RectangleMarker = /*#__PURE__*/function () {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  function RectangleMarker(className, left, top, width, height) {
    _classCallCheck(this, RectangleMarker);
    this.className = className;
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  _createClass(RectangleMarker, [{
    key: "draw",
    value: function draw() {
      var elt = document.createElement("div");
      elt.className = this.className;
      this.adjust(elt);
      return elt;
    }
  }, {
    key: "update",
    value: function update(elt, prev) {
      if (prev.className != this.className) return false;
      this.adjust(elt);
      return true;
    }
  }, {
    key: "adjust",
    value: function adjust(elt) {
      elt.style.left = this.left + "px";
      elt.style.top = this.top + "px";
      if (this.width != null) elt.style.width = this.width + "px";
      elt.style.height = this.height + "px";
    }
  }, {
    key: "eq",
    value: function eq(p) {
      return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
    }
    /**
    Create a set of rectangles for the given selection range,
    assigning them theclass`className`. Will create a single
    rectangle for empty ranges, and a set of selection-style
    rectangles covering the range's content (in a bidi-aware
    way) for non-empty ones.
    */
  }], [{
    key: "forRange",
    value: function forRange(view, className, range) {
      if (range.empty) {
        var pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (!pos) return [];
        var _base3 = getBase(view);
        return [new RectangleMarker(className, pos.left - _base3.left, pos.top - _base3.top, null, pos.bottom - pos.top)];
      } else {
        return rectanglesForRange(view, className, range);
      }
    }
  }]);
  return RectangleMarker;
}();
exports.RectangleMarker = RectangleMarker;
function getBase(view) {
  var rect = view.scrollDOM.getBoundingClientRect();
  var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
  return {
    left: left - view.scrollDOM.scrollLeft,
    top: rect.top - view.scrollDOM.scrollTop
  };
}
function wrappedLine(view, pos, inside) {
  var range = _state.EditorSelection.cursor(pos);
  return {
    from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
    to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
    type: BlockType.Text
  };
}
function blockAt(view, pos) {
  var line = view.lineBlockAt(pos);
  if (Array.isArray(line.type)) {
    var _iterator59 = _createForOfIteratorHelper(line.type),
      _step59;
    try {
      for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
        var _l2 = _step59.value;
        if (_l2.to > pos || _l2.to == pos && (_l2.to == line.to || _l2.type == BlockType.Text)) return _l2;
      }
    } catch (err) {
      _iterator59.e(err);
    } finally {
      _iterator59.f();
    }
  }
  return line;
}
function rectanglesForRange(view, className, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
  var from = Math.max(range.from, view.viewport.from),
    to = Math.min(range.to, view.viewport.to);
  var ltr = view.textDirection == Direction.LTR;
  var content = view.contentDOM,
    contentRect = content.getBoundingClientRect(),
    base = getBase(view);
  var lineElt = content.querySelector(".cm-line"),
    lineStyle = lineElt && window.getComputedStyle(lineElt);
  var leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
  var rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
  var startBlock = blockAt(view, from),
    endBlock = blockAt(view, to);
  var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (view.lineWrapping) {
    if (visualStart) visualStart = wrappedLine(view, from, visualStart);
    if (visualEnd) visualEnd = wrappedLine(view, to, visualEnd);
  }
  if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    var top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    var between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
    return pieces(top).concat(between).concat(pieces(bottom));
  }
  function piece(left, top, right, bottom) {
    return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);
  }

  function pieces(_ref10) {
    var top = _ref10.top,
      bottom = _ref10.bottom,
      horizontal = _ref10.horizontal;
    var pieces = [];
    for (var i = 0; i < horizontal.length; i += 2) pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
    return pieces;
  }
  // Gets passed from/to in line-local positions
  function drawForLine(from, to, line) {
    var top = 1e9,
      bottom = -1e9,
      horizontal = [];
    function addSpan(from, fromOpen, to, toOpen, dir) {
      // Passing 2/-2 is a kludge to force the view to return
      // coordinates on the proper side of block widgets, since
      // normalizing the side there, though appropriate for most
      // coordsAtPos queries, would break selection drawing.
      var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
      var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
      if (!fromCoords || !toCoords) return;
      top = Math.min(fromCoords.top, toCoords.top, top);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    var start = from !== null && from !== void 0 ? from : line.from,
      end = to !== null && to !== void 0 ? to : line.to;
    // Split the range by visible range and document line
    var _iterator60 = _createForOfIteratorHelper(view.visibleRanges),
      _step60;
    try {
      for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
        var _r = _step60.value;
        if (_r.to > start && _r.from < end) {
          for (var pos = Math.max(_r.from, start), endPos = Math.min(_r.to, end);;) {
            var docLine = view.state.doc.lineAt(pos);
            var _iterator61 = _createForOfIteratorHelper(view.bidiSpans(docLine)),
              _step61;
            try {
              for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                var span = _step61.value;
                var spanFrom = span.from + docLine.from,
                  spanTo = span.to + docLine.from;
                if (spanFrom >= endPos) break;
                if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
              }
            } catch (err) {
              _iterator61.e(err);
            } finally {
              _iterator61.f();
            }
            pos = docLine.to + 1;
            if (pos >= endPos) break;
          }
        }
      }
    } catch (err) {
      _iterator60.e(err);
    } finally {
      _iterator60.f();
    }
    if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
    return {
      top: top,
      bottom: bottom,
      horizontal: horizontal
    };
  }
  function drawForWidget(block, top) {
    var y = contentRect.top + (top ? block.top : block.bottom);
    return {
      top: y,
      bottom: y,
      horizontal: []
    };
  }
}
function sameMarker(a, b) {
  return a.constructor == b.constructor && a.eq(b);
}
var LayerView = /*#__PURE__*/function () {
  function LayerView(view, layer) {
    _classCallCheck(this, LayerView);
    this.view = view;
    this.layer = layer;
    this.drawn = [];
    this.measureReq = {
      read: this.measure.bind(this),
      write: this.draw.bind(this)
    };
    this.dom = view.scrollDOM.appendChild(document.createElement("div"));
    this.dom.classList.add("cm-layer");
    if (layer.above) this.dom.classList.add("cm-layer-above");
    if (layer["class"]) this.dom.classList.add(layer["class"]);
    this.dom.setAttribute("aria-hidden", "true");
    this.setOrder(view.state);
    view.requestMeasure(this.measureReq);
    if (layer.mount) layer.mount(this.dom, view);
  }
  _createClass(LayerView, [{
    key: "update",
    value: function update(_update6) {
      if (_update6.startState.facet(layerOrder) != _update6.state.facet(layerOrder)) this.setOrder(_update6.state);
      if (this.layer.update(_update6, this.dom) || _update6.geometryChanged) _update6.view.requestMeasure(this.measureReq);
    }
  }, {
    key: "setOrder",
    value: function setOrder(state) {
      var pos = 0,
        order = state.facet(layerOrder);
      while (pos < order.length && order[pos] != this.layer) pos++;
      this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
    }
  }, {
    key: "measure",
    value: function measure() {
      return this.layer.markers(this.view);
    }
  }, {
    key: "draw",
    value: function draw(markers) {
      var _this45 = this;
      if (markers.length != this.drawn.length || markers.some(function (p, i) {
        return !sameMarker(p, _this45.drawn[i]);
      })) {
        var old = this.dom.firstChild,
          oldI = 0;
        var _iterator62 = _createForOfIteratorHelper(markers),
          _step62;
        try {
          for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
            var marker = _step62.value;
            if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
              old = old.nextSibling;
              oldI++;
            } else {
              this.dom.insertBefore(marker.draw(), old);
            }
          }
        } catch (err) {
          _iterator62.e(err);
        } finally {
          _iterator62.f();
        }
        while (old) {
          var next = old.nextSibling;
          old.remove();
          old = next;
        }
        this.drawn = markers;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.layer.destroy) this.layer.destroy(this.dom, this.view);
      this.dom.remove();
    }
  }]);
  return LayerView;
}();
var layerOrder = /*@__PURE__*/_state.Facet.define();
/**
Define a layer.
*/
function layer(config) {
  return [ViewPlugin.define(function (v) {
    return new LayerView(v, config);
  }), layerOrder.of(config)];
}
var CanHidePrimary = !browser.ios; // FIXME test IE
var selectionConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(configs) {
    return (0, _state.combineConfig)(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: function cursorBlinkRate(a, b) {
        return Math.min(a, b);
      },
      drawRangeCursor: function drawRangeCursor(a, b) {
        return a || b;
      }
    });
  }
});
/**
Returns an extension that hides the browser's native selection and
cursor, replacing the selection with a background behind the text
(with the `cm-selectionBackground` class), and the
cursors with elements overlaid over the code (using
`cm-cursor-primary` and `cm-cursor-secondary`).

This allows the editor to display secondary selection ranges, and
tends to produce a type of selection more in line with that users
expect in a text editor (the native selection styling will often
leave gaps between lines and won't fill the horizontal space after
a line when the selection continues past it).

It does have a performance cost, in that it requires an extra DOM
layout cycle for many updates (the selection is drawn based on DOM
layout information that's only available after laying out the
content).
*/
function drawSelection() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [selectionConfig.of(config), cursorLayer, selectionLayer, hideNativeSelection, nativeSelectionHidden.of(true)];
}
function configChanged(update) {
  return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
}
var cursorLayer = /*@__PURE__*/layer({
  above: true,
  markers: function markers(view) {
    var state = view.state,
      conf = state.facet(selectionConfig);
    var cursors = [];
    var _iterator63 = _createForOfIteratorHelper(state.selection.ranges),
      _step63;
    try {
      for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
        var _r2 = _step63.value;
        var prim = _r2 == state.selection.main;
        if (_r2.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
          var className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
          var cursor = _r2.empty ? _r2 : _state.EditorSelection.cursor(_r2.head, _r2.head > _r2.anchor ? -1 : 1);
          var _iterator64 = _createForOfIteratorHelper(RectangleMarker.forRange(view, className, cursor)),
            _step64;
          try {
            for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
              var piece = _step64.value;
              cursors.push(piece);
            }
          } catch (err) {
            _iterator64.e(err);
          } finally {
            _iterator64.f();
          }
        }
      }
    } catch (err) {
      _iterator63.e(err);
    } finally {
      _iterator63.f();
    }
    return cursors;
  },
  update: function update(_update7, dom) {
    if (_update7.transactions.some(function (tr) {
      return tr.selection;
    })) dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
    var confChange = configChanged(_update7);
    if (confChange) setBlinkRate(_update7.state, dom);
    return _update7.docChanged || _update7.selectionSet || confChange;
  },
  mount: function mount(dom, view) {
    setBlinkRate(view.state, dom);
  },
  "class": "cm-cursorLayer"
});
function setBlinkRate(state, dom) {
  dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
}
var selectionLayer = /*@__PURE__*/layer({
  above: false,
  markers: function markers(view) {
    return view.state.selection.ranges.map(function (r) {
      return r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r);
    }).reduce(function (a, b) {
      return a.concat(b);
    });
  },
  update: function update(_update8, dom) {
    return _update8.docChanged || _update8.selectionSet || _update8.viewportChanged || configChanged(_update8);
  },
  "class": "cm-selectionLayer"
});
var themeSpec = {
  ".cm-line": {
    "& ::selection": {
      backgroundColor: "transparent !important"
    },
    "&::selection": {
      backgroundColor: "transparent !important"
    }
  }
};
if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";
var hideNativeSelection = /*@__PURE__*/_state.Prec.highest( /*@__PURE__*/EditorView.theme(themeSpec));
var setDropCursorPos = /*@__PURE__*/_state.StateEffect.define({
  map: function map(pos, mapping) {
    return pos == null ? null : mapping.mapPos(pos);
  }
});
var dropCursorPos = /*@__PURE__*/_state.StateField.define({
  create: function create() {
    return null;
  },
  update: function update(pos, tr) {
    if (pos != null) pos = tr.changes.mapPos(pos);
    return tr.effects.reduce(function (pos, e) {
      return e.is(setDropCursorPos) ? e.value : pos;
    }, pos);
  }
});
var drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.cursor = null;
    this.measureReq = {
      read: this.readPos.bind(this),
      write: this.drawCursor.bind(this)
    };
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update9) {
      var _a;
      var cursorPos = _update9.state.field(dropCursorPos);
      if (cursorPos == null) {
        if (this.cursor != null) {
          (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
          this.cursor = null;
        }
      } else {
        if (!this.cursor) {
          this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
          this.cursor.className = "cm-dropCursor";
        }
        if (_update9.startState.field(dropCursorPos) != cursorPos || _update9.docChanged || _update9.geometryChanged) this.view.requestMeasure(this.measureReq);
      }
    }
  }, {
    key: "readPos",
    value: function readPos() {
      var pos = this.view.state.field(dropCursorPos);
      var rect = pos != null && this.view.coordsAtPos(pos);
      if (!rect) return null;
      var outer = this.view.scrollDOM.getBoundingClientRect();
      return {
        left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
        top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
        height: rect.bottom - rect.top
      };
    }
  }, {
    key: "drawCursor",
    value: function drawCursor(pos) {
      if (this.cursor) {
        if (pos) {
          this.cursor.style.left = pos.left + "px";
          this.cursor.style.top = pos.top + "px";
          this.cursor.style.height = pos.height + "px";
        } else {
          this.cursor.style.left = "-100000px";
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.cursor) this.cursor.remove();
    }
  }, {
    key: "setDropPos",
    value: function setDropPos(pos) {
      if (this.view.state.field(dropCursorPos) != pos) this.view.dispatch({
        effects: setDropCursorPos.of(pos)
      });
    }
  }]);
  return _class;
}(), {
  eventHandlers: {
    dragover: function dragover(event) {
      this.setDropPos(this.view.posAtCoords({
        x: event.clientX,
        y: event.clientY
      }));
    },
    dragleave: function dragleave(event) {
      if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget)) this.setDropPos(null);
    },
    dragend: function dragend() {
      this.setDropPos(null);
    },
    drop: function drop() {
      this.setDropPos(null);
    }
  }
});
/**
Draws a cursor at the current drop position when something is
dragged over the editor.
*/
function dropCursor() {
  return [dropCursorPos, drawDropCursor];
}
function iterMatches(doc, re, from, to, f) {
  re.lastIndex = 0;
  for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak) while (m = re.exec(cursor.value)) f(pos + m.index, m);
  }
}
function matchRanges(view, maxLength) {
  var visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;
  var result = [];
  var _iterator65 = _createForOfIteratorHelper(visible),
    _step65;
  try {
    for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
      var _step65$value = _step65.value,
        from = _step65$value.from,
        to = _step65$value.to;
      from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
      to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
      if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;else result.push({
        from: from,
        to: to
      });
    }
  } catch (err) {
    _iterator65.e(err);
  } finally {
    _iterator65.f();
  }
  return result;
}
/**
Helper class used to make it easier to maintain decorations on
visible code that matches a given regular expression. To be used
in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
represent a matching configuration.
*/
var MatchDecorator = /*#__PURE__*/function () {
  /**
  Create a decorator.
  */
  function MatchDecorator(config) {
    _classCallCheck(this, MatchDecorator);
    var regexp = config.regexp,
      decoration = config.decoration,
      decorate = config.decorate,
      boundary = config.boundary,
      _config$maxLength = config.maxLength,
      maxLength = _config$maxLength === void 0 ? 1000 : _config$maxLength;
    if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    if (decorate) {
      this.addMatch = function (match, view, from, add) {
        return decorate(add, from, from + match[0].length, match, view);
      };
    } else if (typeof decoration == "function") {
      this.addMatch = function (match, view, from, add) {
        var deco = decoration(match, view, from);
        if (deco) add(from, from + match[0].length, deco);
      };
    } else if (decoration) {
      this.addMatch = function (match, _view, from, add) {
        return add(from, from + match[0].length, decoration);
      };
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }
    this.boundary = boundary;
    this.maxLength = maxLength;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  _createClass(MatchDecorator, [{
    key: "createDeco",
    value: function createDeco(view) {
      var _this46 = this;
      var build = new _state.RangeSetBuilder(),
        add = build.add.bind(build);
      var _iterator66 = _createForOfIteratorHelper(matchRanges(view, this.maxLength)),
        _step66;
      try {
        for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
          var _step66$value = _step66.value,
            from = _step66$value.from,
            to = _step66$value.to;
          iterMatches(view.state.doc, this.regexp, from, to, function (from, m) {
            return _this46.addMatch(m, view, from, add);
          });
        }
      } catch (err) {
        _iterator66.e(err);
      } finally {
        _iterator66.f();
      }
      return build.finish();
    }
    /**
    Update a set of decorations for a view update. `deco` _must_ be
    the set of decorations produced by _this_ `MatchDecorator` for
    the view state before the update.
    */
  }, {
    key: "updateDeco",
    value: function updateDeco(update, deco) {
      var changeFrom = 1e9,
        changeTo = -1;
      if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
        if (to > update.view.viewport.from && from < update.view.viewport.to) {
          changeFrom = Math.min(from, changeFrom);
          changeTo = Math.max(to, changeTo);
        }
      });
      if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);
      if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
      return deco;
    }
  }, {
    key: "updateRange",
    value: function updateRange(view, deco, updateFrom, updateTo) {
      var _this47 = this;
      var _iterator67 = _createForOfIteratorHelper(view.visibleRanges),
        _step67;
      try {
        var _loop7 = function _loop7() {
          var r = _step67.value;
          var from = Math.max(r.from, updateFrom),
            to = Math.min(r.to, updateTo);
          if (to > from) {
            var fromLine = view.state.doc.lineAt(from),
              toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
            var start = Math.max(r.from, fromLine.from),
              end = Math.min(r.to, toLine.to);
            if (_this47.boundary) {
              for (; from > fromLine.from; from--) if (_this47.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                start = from;
                break;
              }
              for (; to < toLine.to; to++) if (_this47.boundary.test(toLine.text[to - toLine.from])) {
                end = to;
                break;
              }
            }
            var ranges = [],
              m;
            var add = function add(from, to, deco) {
              return ranges.push(deco.range(from, to));
            };
            if (fromLine == toLine) {
              _this47.regexp.lastIndex = start - fromLine.from;
              while ((m = _this47.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) _this47.addMatch(m, view, m.index + fromLine.from, add);
            } else {
              iterMatches(view.state.doc, _this47.regexp, start, end, function (from, m) {
                return _this47.addMatch(m, view, from, add);
              });
            }
            deco = deco.update({
              filterFrom: start,
              filterTo: end,
              filter: function filter(from, to) {
                return from < start || to > end;
              },
              add: ranges
            });
          }
        };
        for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
          _loop7();
        }
      } catch (err) {
        _iterator67.e(err);
      } finally {
        _iterator67.f();
      }
      return deco;
    }
  }]);
  return MatchDecorator;
}();
exports.MatchDecorator = MatchDecorator;
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
var Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
var _supportsTabSize = null;
function supportsTabSize() {
  var _a;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    var styles = document.body.style;
    _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
var specialCharConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(configs) {
    var config = (0, _state.combineConfig)(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
    if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
    return config;
  }
});
/**
Returns an extension that installs highlighting of special
characters.
*/
function highlightSpecialChars() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [specialCharConfig.of(config), specialCharPlugin()];
}
var _plugin = null;
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class2(view) {
      _classCallCheck(this, _class2);
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    _createClass(_class2, [{
      key: "makeDecorator",
      value: function makeDecorator(conf) {
        var _this48 = this;
        return new MatchDecorator({
          regexp: conf.specialChars,
          decoration: function decoration(m, view, pos) {
            var doc = view.state.doc;
            var code = (0, _state.codePointAt)(m[0], 0);
            if (code == 9) {
              var line = doc.lineAt(pos);
              var size = view.state.tabSize,
                col = (0, _state.countColumn)(line.text, size, pos - line.from);
              return Decoration.replace({
                widget: new TabWidget((size - col % size) * _this48.view.defaultCharacterWidth)
              });
            }
            return _this48.decorationCache[code] || (_this48.decorationCache[code] = Decoration.replace({
              widget: new SpecialCharWidget(conf, code)
            }));
          },
          boundary: conf.replaceTabs ? undefined : /[^]/
        });
      }
    }, {
      key: "update",
      value: function update(_update10) {
        var conf = _update10.state.facet(specialCharConfig);
        if (_update10.startState.facet(specialCharConfig) != conf) {
          this.decorator = this.makeDecorator(conf);
          this.decorations = this.decorator.createDeco(_update10.view);
        } else {
          this.decorations = this.decorator.updateDeco(_update10, this.decorations);
        }
      }
    }]);
    return _class2;
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  }));
}
var DefaultPlaceholder = "\u2022";
// Assigns placeholder characters from the Control Pictures block to
// ASCII control characters
function placeholder$1(code) {
  if (code >= 32) return DefaultPlaceholder;
  if (code == 10) return "\u2424";
  return String.fromCharCode(9216 + code);
}
var SpecialCharWidget = /*#__PURE__*/function (_WidgetType5) {
  _inherits(SpecialCharWidget, _WidgetType5);
  var _super21 = _createSuper(SpecialCharWidget);
  function SpecialCharWidget(options, code) {
    var _this49;
    _classCallCheck(this, SpecialCharWidget);
    _this49 = _super21.call(this);
    _this49.options = options;
    _this49.code = code;
    return _this49;
  }
  _createClass(SpecialCharWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.code == this.code;
    }
  }, {
    key: "toDOM",
    value: function toDOM(view) {
      var ph = placeholder$1(this.code);
      var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
      var custom = this.options.render && this.options.render(this.code, desc, ph);
      if (custom) return custom;
      var span = document.createElement("span");
      span.textContent = ph;
      span.title = desc;
      span.setAttribute("aria-label", desc);
      span.className = "cm-specialChar";
      return span;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return SpecialCharWidget;
}(WidgetType);
var TabWidget = /*#__PURE__*/function (_WidgetType6) {
  _inherits(TabWidget, _WidgetType6);
  var _super22 = _createSuper(TabWidget);
  function TabWidget(width) {
    var _this50;
    _classCallCheck(this, TabWidget);
    _this50 = _super22.call(this);
    _this50.width = width;
    return _this50;
  }
  _createClass(TabWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.width == this.width;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      var span = document.createElement("span");
      span.textContent = "\t";
      span.className = "cm-tab";
      span.style.width = this.width + "px";
      return span;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return TabWidget;
}(WidgetType);
var plugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class3() {
    _classCallCheck(this, _class3);
    this.height = 1000;
    this.attrs = {
      style: "padding-bottom: 1000px"
    };
  }
  _createClass(_class3, [{
    key: "update",
    value: function update(_update11) {
      var view = _update11.view;
      var height = view.viewState.editorHeight - view.defaultLineHeight - view.documentPadding.top - 0.5;
      if (height != this.height) {
        this.height = height;
        this.attrs = {
          style: "padding-bottom: ".concat(height, "px")
        };
      }
    }
  }]);
  return _class3;
}());
/**
Returns an extension that makes sure the content has a bottom
margin equivalent to the height of the editor, minus one line
height, so that every line in the document can be scrolled to the
top of the editor.

This is only meaningful when the editor is scrollable, and should
not be enabled in editors that take the size of their content.
*/
function scrollPastEnd() {
  return [plugin, contentAttributes.of(function (view) {
    var _a;
    return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null;
  })];
}

/**
Mark lines that have a cursor on them with the `"cm-activeLine"`
DOM class.
*/
function highlightActiveLine() {
  return activeLineHighlighter;
}
var lineDeco = /*@__PURE__*/Decoration.line({
  "class": "cm-activeLine"
});
var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class4(view) {
    _classCallCheck(this, _class4);
    this.decorations = this.getDeco(view);
  }
  _createClass(_class4, [{
    key: "update",
    value: function update(_update12) {
      if (_update12.docChanged || _update12.selectionSet) this.decorations = this.getDeco(_update12.view);
    }
  }, {
    key: "getDeco",
    value: function getDeco(view) {
      var lastLineStart = -1,
        deco = [];
      var _iterator68 = _createForOfIteratorHelper(view.state.selection.ranges),
        _step68;
      try {
        for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
          var _r3 = _step68.value;
          var line = view.lineBlockAt(_r3.head);
          if (line.from > lastLineStart) {
            deco.push(lineDeco.range(line.from));
            lastLineStart = line.from;
          }
        }
      } catch (err) {
        _iterator68.e(err);
      } finally {
        _iterator68.f();
      }
      return Decoration.set(deco);
    }
  }]);
  return _class4;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});
var Placeholder = /*#__PURE__*/function (_WidgetType7) {
  _inherits(Placeholder, _WidgetType7);
  var _super23 = _createSuper(Placeholder);
  function Placeholder(content) {
    var _this51;
    _classCallCheck(this, Placeholder);
    _this51 = _super23.call(this);
    _this51.content = content;
    return _this51;
  }
  _createClass(Placeholder, [{
    key: "toDOM",
    value: function toDOM() {
      var wrap = document.createElement("span");
      wrap.className = "cm-placeholder";
      wrap.style.pointerEvents = "none";
      wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
      if (typeof this.content == "string") wrap.setAttribute("aria-label", "placeholder " + this.content);else wrap.setAttribute("aria-hidden", "true");
      return wrap;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(dom) {
      var rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];
      return rects.length ? flattenRect(rects[0], window.getComputedStyle(dom).direction != "rtl") : null;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return Placeholder;
}(WidgetType);
/**
Extension that enables a placeholder—a piece of example content
to show when the editor is empty.
*/
function placeholder(content) {
  return ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class5(view) {
      _classCallCheck(this, _class5);
      this.view = view;
      this.placeholder = Decoration.set([Decoration.widget({
        widget: new Placeholder(content),
        side: 1
      }).range(0)]);
    }
    _createClass(_class5, [{
      key: "decorations",
      get: function get() {
        return this.view.state.doc.length ? Decoration.none : this.placeholder;
      }
    }]);
    return _class5;
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });
}

// Don't compute precise column positions for line offsets above this
// (since it could get expensive). Assume offset==column for them.
var MaxOff = 2000;
function rectangleFor(state, a, b) {
  var startLine = Math.min(a.line, b.line),
    endLine = Math.max(a.line, b.line);
  var ranges = [];
  if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
    var startOff = Math.min(a.off, b.off),
      endOff = Math.max(a.off, b.off);
    for (var i = startLine; i <= endLine; i++) {
      var line = state.doc.line(i);
      if (line.length <= endOff) ranges.push(_state.EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    var startCol = Math.min(a.col, b.col),
      endCol = Math.max(a.col, b.col);
    for (var _i11 = startLine; _i11 <= endLine; _i11++) {
      var _line2 = state.doc.line(_i11);
      var start = (0, _state.findColumn)(_line2.text, startCol, state.tabSize, true);
      if (start < 0) {
        ranges.push(_state.EditorSelection.cursor(_line2.to));
      } else {
        var end = (0, _state.findColumn)(_line2.text, endCol, state.tabSize);
        ranges.push(_state.EditorSelection.range(_line2.from + start, _line2.from + end));
      }
    }
  }
  return ranges;
}
function absoluteColumn(view, x) {
  var ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  var offset = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  var line = view.state.doc.lineAt(offset),
    off = offset - line.from;
  var col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : (0, _state.countColumn)(line.text, view.state.tabSize, offset - line.from);
  return {
    line: line.number,
    col: col,
    off: off
  };
}
function rectangleSelectionStyle(view, event) {
  var start = getPos(view, event),
    startSel = view.state.selection;
  if (!start) return null;
  return {
    update: function update(_update13) {
      if (_update13.docChanged) {
        var newStart = _update13.changes.mapPos(_update13.startState.doc.line(start.line).from);
        var newLine = _update13.state.doc.lineAt(newStart);
        start = {
          line: newLine.number,
          col: start.col,
          off: Math.min(start.off, newLine.length)
        };
        startSel = startSel.map(_update13.changes);
      }
    },
    get: function get(event, _extend, multiple) {
      var cur = getPos(view, event);
      if (!cur) return startSel;
      var ranges = rectangleFor(view.state, start, cur);
      if (!ranges.length) return startSel;
      if (multiple) return _state.EditorSelection.create(ranges.concat(startSel.ranges));else return _state.EditorSelection.create(ranges);
    }
  };
}
/**
Create an extension that enables rectangular selections. By
default, it will react to left mouse drag with the Alt key held
down. When such a selection occurs, the text within the rectangle
that was dragged over will be selected, as one selection
[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
*/
function rectangularSelection(options) {
  var filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || function (e) {
    return e.altKey && e.button == 0;
  };
  return EditorView.mouseSelectionStyle.of(function (view, event) {
    return filter(event) ? rectangleSelectionStyle(view, event) : null;
  });
}
var keys = {
  Alt: [18, function (e) {
    return e.altKey;
  }],
  Control: [17, function (e) {
    return e.ctrlKey;
  }],
  Shift: [16, function (e) {
    return e.shiftKey;
  }],
  Meta: [91, function (e) {
    return e.metaKey;
  }]
};
var showCrosshair = {
  style: "cursor: crosshair"
};
/**
Returns an extension that turns the pointer cursor into a
crosshair when a given modifier key, defaulting to Alt, is held
down. Can serve as a visual hint that rectangular selection is
going to happen when paired with
[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
*/
function crosshairCursor() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _keys = _slicedToArray(keys[options.key || "Alt"], 2),
    code = _keys[0],
    getter = _keys[1];
  var plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class6(view) {
      _classCallCheck(this, _class6);
      this.view = view;
      this.isDown = false;
    }
    _createClass(_class6, [{
      key: "set",
      value: function set(isDown) {
        if (this.isDown != isDown) {
          this.isDown = isDown;
          this.view.update([]);
        }
      }
    }]);
    return _class6;
  }(), {
    eventHandlers: {
      keydown: function keydown(e) {
        this.set(e.keyCode == code || getter(e));
      },
      keyup: function keyup(e) {
        if (e.keyCode == code || !getter(e)) this.set(false);
      },
      mousemove: function mousemove(e) {
        this.set(getter(e));
      }
    }
  });
  return [plugin, EditorView.contentAttributes.of(function (view) {
    var _a;
    return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null;
  })];
}
var Outside = "-10000px";
var TooltipViewManager = /*#__PURE__*/function () {
  function TooltipViewManager(view, facet, createTooltipView) {
    _classCallCheck(this, TooltipViewManager);
    this.facet = facet;
    this.createTooltipView = createTooltipView;
    this.input = view.state.facet(facet);
    this.tooltips = this.input.filter(function (t) {
      return t;
    });
    this.tooltipViews = this.tooltips.map(createTooltipView);
  }
  _createClass(TooltipViewManager, [{
    key: "update",
    value: function update(_update14) {
      var _a;
      var input = _update14.state.facet(this.facet);
      var tooltips = input.filter(function (x) {
        return x;
      });
      if (input === this.input) {
        var _iterator69 = _createForOfIteratorHelper(this.tooltipViews),
          _step69;
        try {
          for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
            var t = _step69.value;
            if (t.update) t.update(_update14);
          }
        } catch (err) {
          _iterator69.e(err);
        } finally {
          _iterator69.f();
        }
        return false;
      }
      var tooltipViews = [];
      for (var i = 0; i < tooltips.length; i++) {
        var tip = tooltips[i],
          known = -1;
        if (!tip) continue;
        for (var _i12 = 0; _i12 < this.tooltips.length; _i12++) {
          var other = this.tooltips[_i12];
          if (other && other.create == tip.create) known = _i12;
        }
        if (known < 0) {
          tooltipViews[i] = this.createTooltipView(tip);
        } else {
          var tooltipView = tooltipViews[i] = this.tooltipViews[known];
          if (tooltipView.update) tooltipView.update(_update14);
        }
      }
      var _iterator70 = _createForOfIteratorHelper(this.tooltipViews),
        _step70;
      try {
        for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
          var _t2 = _step70.value;
          if (tooltipViews.indexOf(_t2) < 0) {
            _t2.dom.remove();
            (_a = _t2.destroy) === null || _a === void 0 ? void 0 : _a.call(_t2);
          }
        }
      } catch (err) {
        _iterator70.e(err);
      } finally {
        _iterator70.f();
      }
      this.input = input;
      this.tooltips = tooltips;
      this.tooltipViews = tooltipViews;
      return true;
    }
  }]);
  return TooltipViewManager;
}();
/**
Creates an extension that configures tooltip behavior.
*/
function tooltips() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return tooltipConfig.of(config);
}
function windowSpace(view) {
  var win = view.win;
  return {
    top: 0,
    left: 0,
    bottom: win.innerHeight,
    right: win.innerWidth
  };
}
var tooltipConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    var _a, _b, _c;
    return {
      position: browser.ios ? "absolute" : ((_a = values.find(function (conf) {
        return conf.position;
      })) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
      parent: ((_b = values.find(function (conf) {
        return conf.parent;
      })) === null || _b === void 0 ? void 0 : _b.parent) || null,
      tooltipSpace: ((_c = values.find(function (conf) {
        return conf.tooltipSpace;
      })) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
    };
  }
});
var knownHeight = /*@__PURE__*/new WeakMap();
var tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class7(view) {
    var _this52 = this;
    _classCallCheck(this, _class7);
    this.view = view;
    this.inView = true;
    this.lastTransaction = 0;
    this.measureTimeout = -1;
    var config = view.state.facet(tooltipConfig);
    this.position = config.position;
    this.parent = config.parent;
    this.classes = view.themeClasses;
    this.createContainer();
    this.measureReq = {
      read: this.readMeasure.bind(this),
      write: this.writeMeasure.bind(this),
      key: this
    };
    this.manager = new TooltipViewManager(view, showTooltip, function (t) {
      return _this52.createTooltip(t);
    });
    this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(function (entries) {
      if (Date.now() > _this52.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) _this52.measureSoon();
    }, {
      threshold: [1]
    }) : null;
    this.observeIntersection();
    view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
    this.maybeMeasure();
  }
  _createClass(_class7, [{
    key: "createContainer",
    value: function createContainer() {
      if (this.parent) {
        this.container = document.createElement("div");
        this.container.style.position = "relative";
        this.container.className = this.view.themeClasses;
        this.parent.appendChild(this.container);
      } else {
        this.container = this.view.dom;
      }
    }
  }, {
    key: "observeIntersection",
    value: function observeIntersection() {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
        var _iterator71 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step71;
        try {
          for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
            var tooltip = _step71.value;
            this.intersectionObserver.observe(tooltip.dom);
          }
        } catch (err) {
          _iterator71.e(err);
        } finally {
          _iterator71.f();
        }
      }
    }
  }, {
    key: "measureSoon",
    value: function measureSoon() {
      var _this53 = this;
      if (this.measureTimeout < 0) this.measureTimeout = setTimeout(function () {
        _this53.measureTimeout = -1;
        _this53.maybeMeasure();
      }, 50);
    }
  }, {
    key: "update",
    value: function update(_update15) {
      if (_update15.transactions.length) this.lastTransaction = Date.now();
      var updated = this.manager.update(_update15);
      if (updated) this.observeIntersection();
      var shouldMeasure = updated || _update15.geometryChanged;
      var newConfig = _update15.state.facet(tooltipConfig);
      if (newConfig.position != this.position) {
        this.position = newConfig.position;
        var _iterator72 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step72;
        try {
          for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
            var t = _step72.value;
            t.dom.style.position = this.position;
          }
        } catch (err) {
          _iterator72.e(err);
        } finally {
          _iterator72.f();
        }
        shouldMeasure = true;
      }
      if (newConfig.parent != this.parent) {
        if (this.parent) this.container.remove();
        this.parent = newConfig.parent;
        this.createContainer();
        var _iterator73 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step73;
        try {
          for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
            var _t3 = _step73.value;
            this.container.appendChild(_t3.dom);
          }
        } catch (err) {
          _iterator73.e(err);
        } finally {
          _iterator73.f();
        }
        shouldMeasure = true;
      } else if (this.parent && this.view.themeClasses != this.classes) {
        this.classes = this.container.className = this.view.themeClasses;
      }
      if (shouldMeasure) this.maybeMeasure();
    }
  }, {
    key: "createTooltip",
    value: function createTooltip(tooltip) {
      var tooltipView = tooltip.create(this.view);
      tooltipView.dom.classList.add("cm-tooltip");
      if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
        var arrow = document.createElement("div");
        arrow.className = "cm-tooltip-arrow";
        tooltipView.dom.appendChild(arrow);
      }
      tooltipView.dom.style.position = this.position;
      tooltipView.dom.style.top = Outside;
      this.container.appendChild(tooltipView.dom);
      if (tooltipView.mount) tooltipView.mount(this.view);
      return tooltipView;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a, _b;
      this.view.win.removeEventListener("resize", this.measureSoon);
      var _iterator74 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step74;
      try {
        for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
          var tooltipView = _step74.value;
          tooltipView.dom.remove();
          (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
        }
      } catch (err) {
        _iterator74.e(err);
      } finally {
        _iterator74.f();
      }
      (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
      clearTimeout(this.measureTimeout);
    }
  }, {
    key: "readMeasure",
    value: function readMeasure() {
      var _this54 = this;
      var editor = this.view.dom.getBoundingClientRect();
      return {
        editor: editor,
        parent: this.parent ? this.container.getBoundingClientRect() : editor,
        pos: this.manager.tooltips.map(function (t, i) {
          var tv = _this54.manager.tooltipViews[i];
          return tv.getCoords ? tv.getCoords(t.pos) : _this54.view.coordsAtPos(t.pos);
        }),
        size: this.manager.tooltipViews.map(function (_ref11) {
          var dom = _ref11.dom;
          return dom.getBoundingClientRect();
        }),
        space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view)
      };
    }
  }, {
    key: "writeMeasure",
    value: function writeMeasure(measured) {
      var _a;
      var editor = measured.editor,
        space = measured.space;
      var others = [];
      for (var i = 0; i < this.manager.tooltips.length; i++) {
        var tooltip = this.manager.tooltips[i],
          tView = this.manager.tooltipViews[i],
          dom = tView.dom;
        var pos = measured.pos[i],
          size = measured.size[i];
        // Hide tooltips that are outside of the editor.
        if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right < Math.max(editor.left, space.left) - .1 || pos.left > Math.min(editor.right, space.right) + .1) {
          dom.style.top = Outside;
          continue;
        }
        var arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
        var arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
        var width = size.right - size.left,
          height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
        var offset = tView.offset || noOffset,
          ltr = this.view.textDirection == Direction.LTR;
        var left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);
        var above = !!tooltip.above;
        if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = !above;
        var spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
        if (spaceVert < height && tView.resize !== false) {
          if (spaceVert < this.view.defaultLineHeight) {
            dom.style.top = Outside;
            continue;
          }
          knownHeight.set(tView, height);
          dom.style.height = (height = spaceVert) + "px";
        } else if (dom.style.height) {
          dom.style.height = "";
        }
        var top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
        var right = left + width;
        if (tView.overlap !== true) {
          var _iterator75 = _createForOfIteratorHelper(others),
            _step75;
          try {
            for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
              var _r4 = _step75.value;
              if (_r4.left < right && _r4.right > left && _r4.top < top + height && _r4.bottom > top) top = above ? _r4.top - height - 2 - arrowHeight : _r4.bottom + arrowHeight + 2;
            }
          } catch (err) {
            _iterator75.e(err);
          } finally {
            _iterator75.f();
          }
        }
        if (this.position == "absolute") {
          dom.style.top = top - measured.parent.top + "px";
          dom.style.left = left - measured.parent.left + "px";
        } else {
          dom.style.top = top + "px";
          dom.style.left = left + "px";
        }
        if (arrow) arrow.style.left = "".concat(pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */), "px");
        if (tView.overlap !== true) others.push({
          left: left,
          top: top,
          right: right,
          bottom: top + height
        });
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned) tView.positioned(measured.space);
      }
    }
  }, {
    key: "maybeMeasure",
    value: function maybeMeasure() {
      if (this.manager.tooltips.length) {
        if (this.view.inView) this.view.requestMeasure(this.measureReq);
        if (this.inView != this.view.inView) {
          this.inView = this.view.inView;
          if (!this.inView) {
            var _iterator76 = _createForOfIteratorHelper(this.manager.tooltipViews),
              _step76;
            try {
              for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                var tv = _step76.value;
                tv.dom.style.top = Outside;
              }
            } catch (err) {
              _iterator76.e(err);
            } finally {
              _iterator76.f();
            }
          }
        }
      }
    }
  }]);
  return _class7;
}(), {
  eventHandlers: {
    scroll: function scroll() {
      this.maybeMeasure();
    }
  }
});
var baseTheme = /*@__PURE__*/EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "".concat(7 /* Arrow.Size */, "px"),
    width: "".concat(7 /* Arrow.Size */ * 2, "px"),
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "".concat(7 /* Arrow.Size */, "px solid transparent"),
      borderRight: "".concat(7 /* Arrow.Size */, "px solid transparent")
    },
    ".cm-tooltip-above &": {
      bottom: "-".concat(7 /* Arrow.Size */, "px"),
      "&:before": {
        borderTop: "".concat(7 /* Arrow.Size */, "px solid #bbb")
      },
      "&:after": {
        borderTop: "".concat(7 /* Arrow.Size */, "px solid #f5f5f5"),
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-".concat(7 /* Arrow.Size */, "px"),
      "&:before": {
        borderBottom: "".concat(7 /* Arrow.Size */, "px solid #bbb")
      },
      "&:after": {
        borderBottom: "".concat(7 /* Arrow.Size */, "px solid #f5f5f5"),
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
var noOffset = {
  x: 0,
  y: 0
};
/**
Facet to which an extension can add a value to show a tooltip.
*/
var showTooltip = /*@__PURE__*/_state.Facet.define({
  enables: [tooltipPlugin, baseTheme]
});
exports.showTooltip = showTooltip;
var showHoverTooltip = /*@__PURE__*/_state.Facet.define();
var HoverTooltipHost = /*#__PURE__*/function () {
  function HoverTooltipHost(view) {
    var _this55 = this;
    _classCallCheck(this, HoverTooltipHost);
    this.view = view;
    this.mounted = false;
    this.dom = document.createElement("div");
    this.dom.classList.add("cm-tooltip-hover");
    this.manager = new TooltipViewManager(view, showHoverTooltip, function (t) {
      return _this55.createHostedView(t);
    });
  }
  // Needs to be static so that host tooltip instances always match
  _createClass(HoverTooltipHost, [{
    key: "createHostedView",
    value: function createHostedView(tooltip) {
      var hostedView = tooltip.create(this.view);
      hostedView.dom.classList.add("cm-tooltip-section");
      this.dom.appendChild(hostedView.dom);
      if (this.mounted && hostedView.mount) hostedView.mount(this.view);
      return hostedView;
    }
  }, {
    key: "mount",
    value: function mount(view) {
      var _iterator77 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step77;
      try {
        for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
          var hostedView = _step77.value;
          if (hostedView.mount) hostedView.mount(view);
        }
      } catch (err) {
        _iterator77.e(err);
      } finally {
        _iterator77.f();
      }
      this.mounted = true;
    }
  }, {
    key: "positioned",
    value: function positioned(space) {
      var _iterator78 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step78;
      try {
        for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
          var hostedView = _step78.value;
          if (hostedView.positioned) hostedView.positioned(space);
        }
      } catch (err) {
        _iterator78.e(err);
      } finally {
        _iterator78.f();
      }
    }
  }, {
    key: "update",
    value: function update(_update16) {
      this.manager.update(_update16);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a;
      var _iterator79 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step79;
      try {
        for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
          var t = _step79.value;
          (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
        }
      } catch (err) {
        _iterator79.e(err);
      } finally {
        _iterator79.f();
      }
    }
  }], [{
    key: "create",
    value: function create(view) {
      return new HoverTooltipHost(view);
    }
  }]);
  return HoverTooltipHost;
}();
var showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], function (state) {
  var tooltips = state.facet(showHoverTooltip).filter(function (t) {
    return t;
  });
  if (tooltips.length === 0) return null;
  return {
    pos: Math.min.apply(Math, _toConsumableArray(tooltips.map(function (t) {
      return t.pos;
    }))),
    end: Math.max.apply(Math, _toConsumableArray(tooltips.filter(function (t) {
      return t.end != null;
    }).map(function (t) {
      return t.end;
    }))),
    create: HoverTooltipHost.create,
    above: tooltips[0].above,
    arrow: tooltips.some(function (t) {
      return t.arrow;
    })
  };
});
var HoverPlugin = /*#__PURE__*/function () {
  function HoverPlugin(view, source, field, setHover, hoverTime) {
    _classCallCheck(this, HoverPlugin);
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.hoverTime = hoverTime;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.lastMove = {
      x: 0,
      y: 0,
      target: view.dom,
      time: 0
    };
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  _createClass(HoverPlugin, [{
    key: "update",
    value: function update() {
      var _this56 = this;
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(function () {
          return _this56.startHover();
        }, 20);
      }
    }
  }, {
    key: "active",
    get: function get() {
      return this.view.state.field(this.field);
    }
  }, {
    key: "checkHover",
    value: function checkHover() {
      this.hoverTimeout = -1;
      if (this.active) return;
      var hovered = Date.now() - this.lastMove.time;
      if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);else this.startHover();
    }
  }, {
    key: "startHover",
    value: function startHover() {
      var _this57 = this;
      clearTimeout(this.restartTimeout);
      var lastMove = this.lastMove;
      var pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
      if (pos == null) return;
      var posCoords = this.view.coordsAtPos(pos);
      if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth) return;
      var bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(function (s) {
        return s.from <= pos && s.to >= pos;
      });
      var rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
      var open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);
      if (open === null || open === void 0 ? void 0 : open.then) {
        var pending = this.pending = {
          pos: pos
        };
        open.then(function (result) {
          if (_this57.pending == pending) {
            _this57.pending = null;
            if (result) _this57.view.dispatch({
              effects: _this57.setHover.of(result)
            });
          }
        }, function (e) {
          return logException(_this57.view.state, e, "hover tooltip");
        });
      } else if (open) {
        this.view.dispatch({
          effects: this.setHover.of(open)
        });
      }
    }
  }, {
    key: "mousemove",
    value: function mousemove(event) {
      var _a;
      this.lastMove = {
        x: event.clientX,
        y: event.clientY,
        target: event.target,
        time: Date.now()
      };
      if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
      var tooltip = this.active;
      if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
        var _ref12 = tooltip || this.pending,
          pos = _ref12.pos,
          end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
        if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* Hover.MaxDist */)) {
          this.view.dispatch({
            effects: this.setHover.of(null)
          });
          this.pending = null;
        }
      }
    }
  }, {
    key: "mouseleave",
    value: function mouseleave(e) {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      if (this.active && !isInTooltip(e.relatedTarget)) this.view.dispatch({
        effects: this.setHover.of(null)
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  }]);
  return HoverPlugin;
}();
function isInTooltip(elt) {
  for (var cur = elt; cur; cur = cur.parentNode) if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip")) return true;
  return false;
}
function isOverRange(view, from, to, x, y, margin) {
  var range = document.createRange();
  var fromDOM = view.domAtPos(from),
    toDOM = view.domAtPos(to);
  range.setEnd(toDOM.node, toDOM.offset);
  range.setStart(fromDOM.node, fromDOM.offset);
  var rects = range.getClientRects();
  range.detach();
  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    var dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
    if (dist <= margin) return true;
  }
  return false;
}
/**
Set up a hover tooltip, which shows up when the pointer hovers
over ranges of text. The callback is called when the mouse hovers
over the document text. It should, if there is a tooltip
associated with position `pos`, return the tooltip description
(either directly or in a promise). The `side` argument indicates
on which side of the position the pointer is—it will be -1 if the
pointer is before the position, 1 if after the position.

Note that all hover tooltips are hosted within a single tooltip
container element. This allows multiple tooltips over the same
range to be "merged" together without overlapping.
*/
function hoverTooltip(source) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var setHover = _state.StateEffect.define();
  var hoverState = _state.StateField.define({
    create: function create() {
      return null;
    },
    update: function update(value, tr) {
      if (value && (options.hideOnChange && (tr.docChanged || tr.selection) || options.hideOn && options.hideOn(tr, value))) return null;
      if (value && tr.docChanged) {
        var newPos = tr.changes.mapPos(value.pos, -1, _state.MapMode.TrackDel);
        if (newPos == null) return null;
        var copy = Object.assign(Object.create(null), value);
        copy.pos = newPos;
        if (value.end != null) copy.end = tr.changes.mapPos(value.end);
        value = copy;
      }
      var _iterator80 = _createForOfIteratorHelper(tr.effects),
        _step80;
      try {
        for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
          var effect = _step80.value;
          if (effect.is(setHover)) value = effect.value;
          if (effect.is(closeHoverTooltipEffect)) value = null;
        }
      } catch (err) {
        _iterator80.e(err);
      } finally {
        _iterator80.f();
      }
      return value;
    },
    provide: function provide(f) {
      return showHoverTooltip.from(f);
    }
  });
  return [hoverState, ViewPlugin.define(function (view) {
    return new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */);
  }), showHoverTooltipHost];
}
/**
Get the active tooltip view for a given tooltip, if available.
*/
function getTooltip(view, tooltip) {
  var plugin = view.plugin(tooltipPlugin);
  if (!plugin) return null;
  var found = plugin.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin.manager.tooltipViews[found];
}
/**
Returns true if any hover tooltips are currently active.
*/
function hasHoverTooltips(state) {
  return state.facet(showHoverTooltip).some(function (x) {
    return x;
  });
}
var closeHoverTooltipEffect = /*@__PURE__*/_state.StateEffect.define();
/**
Transaction effect that closes all hover tooltips.
*/
var closeHoverTooltips = /*@__PURE__*/closeHoverTooltipEffect.of(null);
/**
Tell the tooltip extension to recompute the position of the active
tooltips. This can be useful when something happens (such as a
re-positioning or CSS change affecting the editor) that could
invalidate the existing tooltip positions.
*/
exports.closeHoverTooltips = closeHoverTooltips;
function repositionTooltips(view) {
  var _a;
  (_a = view.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();
}
var panelConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(configs) {
    var topContainer, bottomContainer;
    var _iterator81 = _createForOfIteratorHelper(configs),
      _step81;
    try {
      for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
        var c = _step81.value;
        topContainer = topContainer || c.topContainer;
        bottomContainer = bottomContainer || c.bottomContainer;
      }
    } catch (err) {
      _iterator81.e(err);
    } finally {
      _iterator81.f();
    }
    return {
      topContainer: topContainer,
      bottomContainer: bottomContainer
    };
  }
});
/**
Configures the panel-managing extension.
*/
function panels(config) {
  return config ? [panelConfig.of(config)] : [];
}
/**
Get the active panel created by the given constructor, if any.
This can be useful when you need access to your panels' DOM
structure.
*/
function getPanel(view, panel) {
  var plugin = view.plugin(panelPlugin);
  var index = plugin ? plugin.specs.indexOf(panel) : -1;
  return index > -1 ? plugin.panels[index] : null;
}
var panelPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class8(view) {
    _classCallCheck(this, _class8);
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter(function (s) {
      return s;
    });
    this.panels = this.specs.map(function (spec) {
      return spec(view);
    });
    var conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter(function (p) {
      return p.top;
    }));
    this.bottom.sync(this.panels.filter(function (p) {
      return !p.top;
    }));
    var _iterator82 = _createForOfIteratorHelper(this.panels),
      _step82;
    try {
      for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
        var _p2 = _step82.value;
        _p2.dom.classList.add("cm-panel");
        if (_p2.mount) _p2.mount();
      }
    } catch (err) {
      _iterator82.e(err);
    } finally {
      _iterator82.f();
    }
  }
  _createClass(_class8, [{
    key: "update",
    value: function update(_update17) {
      var conf = _update17.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(_update17.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(_update17.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      var input = _update17.state.facet(showPanel);
      if (input != this.input) {
        var specs = input.filter(function (x) {
          return x;
        });
        var _panels = [],
          top = [],
          bottom = [],
          mount = [];
        var _iterator83 = _createForOfIteratorHelper(specs),
          _step83;
        try {
          for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
            var spec = _step83.value;
            var known = this.specs.indexOf(spec),
              panel = void 0;
            if (known < 0) {
              panel = spec(_update17.view);
              mount.push(panel);
            } else {
              panel = this.panels[known];
              if (panel.update) panel.update(_update17);
            }
            _panels.push(panel);
            (panel.top ? top : bottom).push(panel);
          }
        } catch (err) {
          _iterator83.e(err);
        } finally {
          _iterator83.f();
        }
        this.specs = specs;
        this.panels = _panels;
        this.top.sync(top);
        this.bottom.sync(bottom);
        for (var _i13 = 0, _mount = mount; _i13 < _mount.length; _i13++) {
          var _p3 = _mount[_i13];
          _p3.dom.classList.add("cm-panel");
          if (_p3.mount) _p3.mount();
        }
      } else {
        var _iterator84 = _createForOfIteratorHelper(this.panels),
          _step84;
        try {
          for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
            var _p4 = _step84.value;
            if (_p4.update) _p4.update(_update17);
          }
        } catch (err) {
          _iterator84.e(err);
        } finally {
          _iterator84.f();
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }]);
  return _class8;
}(), {
  provide: function provide(plugin) {
    return EditorView.scrollMargins.of(function (view) {
      var value = view.plugin(plugin);
      return value && {
        top: value.top.scrollMargin(),
        bottom: value.bottom.scrollMargin()
      };
    });
  }
});
var PanelGroup = /*#__PURE__*/function () {
  function PanelGroup(view, top, container) {
    _classCallCheck(this, PanelGroup);
    this.view = view;
    this.top = top;
    this.container = container;
    this.dom = undefined;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }
  _createClass(PanelGroup, [{
    key: "sync",
    value: function sync(panels) {
      var _iterator85 = _createForOfIteratorHelper(this.panels),
        _step85;
      try {
        for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
          var _p5 = _step85.value;
          if (_p5.destroy && panels.indexOf(_p5) < 0) _p5.destroy();
        }
      } catch (err) {
        _iterator85.e(err);
      } finally {
        _iterator85.f();
      }
      this.panels = panels;
      this.syncDOM();
    }
  }, {
    key: "syncDOM",
    value: function syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = undefined;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        var parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      var curDOM = this.dom.firstChild;
      var _iterator86 = _createForOfIteratorHelper(this.panels),
        _step86;
      try {
        for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
          var panel = _step86.value;
          if (panel.dom.parentNode == this.dom) {
            while (curDOM != panel.dom) curDOM = rm(curDOM);
            curDOM = curDOM.nextSibling;
          } else {
            this.dom.insertBefore(panel.dom, curDOM);
          }
        }
      } catch (err) {
        _iterator86.e(err);
      } finally {
        _iterator86.f();
      }
      while (curDOM) curDOM = rm(curDOM);
    }
  }, {
    key: "scrollMargin",
    value: function scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
  }, {
    key: "syncClasses",
    value: function syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses) return;
      var _iterator87 = _createForOfIteratorHelper(this.classes.split(" ")),
        _step87;
      try {
        for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
          var cls = _step87.value;
          if (cls) this.container.classList.remove(cls);
        }
      } catch (err) {
        _iterator87.e(err);
      } finally {
        _iterator87.f();
      }
      var _iterator88 = _createForOfIteratorHelper((this.classes = this.view.themeClasses).split(" ")),
        _step88;
      try {
        for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
          var _cls = _step88.value;
          if (_cls) this.container.classList.add(_cls);
        }
      } catch (err) {
        _iterator88.e(err);
      } finally {
        _iterator88.f();
      }
    }
  }]);
  return PanelGroup;
}();
function rm(node) {
  var next = node.nextSibling;
  node.remove();
  return next;
}
/**
Opening a panel is done by providing a constructor function for
the panel through this facet. (The panel is closed again when its
constructor is no longer provided.) Values of `null` are ignored.
*/
var showPanel = /*@__PURE__*/_state.Facet.define({
  enables: panelPlugin
});

/**
A gutter marker represents a bit of information attached to a line
in a specific gutter. Your own custom markers have to extend this
class.
*/
exports.showPanel = showPanel;
var GutterMarker = /*#__PURE__*/function (_RangeValue2) {
  _inherits(GutterMarker, _RangeValue2);
  var _super24 = _createSuper(GutterMarker);
  function GutterMarker() {
    _classCallCheck(this, GutterMarker);
    return _super24.apply(this, arguments);
  }
  _createClass(GutterMarker, [{
    key: "compare",
    value:
    /**
    @internal
    */
    function compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return false;
    }
    /**
    Called if the marker has a `toDOM` method and its representation
    was removed from a gutter.
    */
  }, {
    key: "destroy",
    value: function destroy(dom) {}
  }]);
  return GutterMarker;
}(_state.RangeValue);
exports.GutterMarker = GutterMarker;
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = undefined;
GutterMarker.prototype.mapMode = _state.MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
/**
Facet used to add a class to all gutter elements for a given line.
Markers given to this facet should _only_ define an
[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
in all gutters for the line).
*/
var gutterLineClass = /*@__PURE__*/_state.Facet.define();
exports.gutterLineClass = gutterLineClass;
var defaults = {
  "class": "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: function markers() {
    return _state.RangeSet.empty;
  },
  lineMarker: function lineMarker() {
    return null;
  },
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};
var activeGutters = /*@__PURE__*/_state.Facet.define();
/**
Define an editor gutter. The order in which the gutters appear is
determined by their extension priority.
*/
function gutter(config) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
}
var unfixGutters = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
/**
The gutter-drawing plugin is automatically enabled when you add a
gutter, but you can use this function to explicitly configure it.

Unless `fixed` is explicitly set to `false`, the gutters are
fixed, meaning they don't scroll along with the content
horizontally (except on Internet Explorer, which doesn't support
CSS [`position:
sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
*/
function gutters(config) {
  var result = [gutterView];
  if (config && config.fixed === false) result.push(unfixGutters.of(true));
  return result;
}
var gutterView = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class9(view) {
    _classCallCheck(this, _class9);
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight + "px";
    this.gutters = view.state.facet(activeGutters).map(function (conf) {
      return new SingleGutterView(view, conf);
    });
    var _iterator89 = _createForOfIteratorHelper(this.gutters),
      _step89;
    try {
      for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
        var _gutter = _step89.value;
        this.dom.appendChild(_gutter.dom);
      }
    } catch (err) {
      _iterator89.e(err);
    } finally {
      _iterator89.f();
    }
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      // FIXME IE11 fallback, which doesn't support position: sticky,
      // by using position: relative + event handlers that realign the
      // gutter (or just force fixed=false on IE11?)
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }
  _createClass(_class9, [{
    key: "update",
    value: function update(_update18) {
      if (this.updateGutters(_update18)) {
        // Detach during sync when the viewport changed significantly
        // (such as during scrolling), since for large updates that is
        // faster.
        var vpA = this.prevViewport,
          vpB = _update18.view.viewport;
        var vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
        this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
      }
      if (_update18.geometryChanged) this.dom.style.minHeight = this.view.contentHeight + "px";
      if (this.view.state.facet(unfixGutters) != !this.fixed) {
        this.fixed = !this.fixed;
        this.dom.style.position = this.fixed ? "sticky" : "";
      }
      this.prevViewport = _update18.view.viewport;
    }
  }, {
    key: "syncGutters",
    value: function syncGutters(detach) {
      var _this58 = this;
      var after = this.dom.nextSibling;
      if (detach) this.dom.remove();
      var lineClasses = _state.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
      var classSet = [];
      var contexts = this.gutters.map(function (gutter) {
        return new UpdateContext(gutter, _this58.view.viewport, -_this58.view.documentPadding.top);
      });
      var _iterator90 = _createForOfIteratorHelper(this.view.viewportLineBlocks),
        _step90;
      try {
        for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
          var line = _step90.value;
          var text = void 0;
          if (Array.isArray(line.type)) {
            var _iterator92 = _createForOfIteratorHelper(line.type),
              _step92;
            try {
              for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                var b = _step92.value;
                if (b.type == BlockType.Text) {
                  text = b;
                  break;
                }
              }
            } catch (err) {
              _iterator92.e(err);
            } finally {
              _iterator92.f();
            }
          } else {
            text = line.type == BlockType.Text ? line : undefined;
          }
          if (!text) continue;
          if (classSet.length) classSet = [];
          advanceCursor(lineClasses, classSet, line.from);
          var _iterator93 = _createForOfIteratorHelper(contexts),
            _step93;
          try {
            for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
              var cx = _step93.value;
              cx.line(this.view, text, classSet);
            }
          } catch (err) {
            _iterator93.e(err);
          } finally {
            _iterator93.f();
          }
        }
      } catch (err) {
        _iterator90.e(err);
      } finally {
        _iterator90.f();
      }
      var _iterator91 = _createForOfIteratorHelper(contexts),
        _step91;
      try {
        for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
          var _cx = _step91.value;
          _cx.finish();
        }
      } catch (err) {
        _iterator91.e(err);
      } finally {
        _iterator91.f();
      }
      if (detach) this.view.scrollDOM.insertBefore(this.dom, after);
    }
  }, {
    key: "updateGutters",
    value: function updateGutters(update) {
      var prev = update.startState.facet(activeGutters),
        cur = update.state.facet(activeGutters);
      var change = update.docChanged || update.heightChanged || update.viewportChanged || !_state.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
      if (prev == cur) {
        var _iterator94 = _createForOfIteratorHelper(this.gutters),
          _step94;
        try {
          for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
            var _gutter2 = _step94.value;
            if (_gutter2.update(update)) change = true;
          }
        } catch (err) {
          _iterator94.e(err);
        } finally {
          _iterator94.f();
        }
      } else {
        change = true;
        var _gutters = [];
        var _iterator95 = _createForOfIteratorHelper(cur),
          _step95;
        try {
          for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
            var conf = _step95.value;
            var known = prev.indexOf(conf);
            if (known < 0) {
              _gutters.push(new SingleGutterView(this.view, conf));
            } else {
              this.gutters[known].update(update);
              _gutters.push(this.gutters[known]);
            }
          }
        } catch (err) {
          _iterator95.e(err);
        } finally {
          _iterator95.f();
        }
        var _iterator96 = _createForOfIteratorHelper(this.gutters),
          _step96;
        try {
          for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
            var _g = _step96.value;
            _g.dom.remove();
            if (_gutters.indexOf(_g) < 0) _g.destroy();
          }
        } catch (err) {
          _iterator96.e(err);
        } finally {
          _iterator96.f();
        }
        for (var _i14 = 0, _gutters2 = _gutters; _i14 < _gutters2.length; _i14++) {
          var g = _gutters2[_i14];
          this.dom.appendChild(g.dom);
        }
        this.gutters = _gutters;
      }
      return change;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator97 = _createForOfIteratorHelper(this.gutters),
        _step97;
      try {
        for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
          var view = _step97.value;
          view.destroy();
        }
      } catch (err) {
        _iterator97.e(err);
      } finally {
        _iterator97.f();
      }
      this.dom.remove();
    }
  }]);
  return _class9;
}(), {
  provide: function provide(plugin) {
    return EditorView.scrollMargins.of(function (view) {
      var value = view.plugin(plugin);
      if (!value || value.gutters.length == 0 || !value.fixed) return null;
      return view.textDirection == Direction.LTR ? {
        left: value.dom.offsetWidth
      } : {
        right: value.dom.offsetWidth
      };
    });
  }
});
function asArray(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos) collect.push(cursor.value);
    cursor.next();
  }
}
var UpdateContext = /*#__PURE__*/function () {
  function UpdateContext(gutter, viewport, height) {
    _classCallCheck(this, UpdateContext);
    this.gutter = gutter;
    this.height = height;
    this.i = 0;
    this.cursor = _state.RangeSet.iter(gutter.markers, viewport.from);
  }
  _createClass(UpdateContext, [{
    key: "line",
    value: function line(view, _line3, extraMarkers) {
      var localMarkers = [];
      advanceCursor(this.cursor, localMarkers, _line3.from);
      if (extraMarkers.length) localMarkers = localMarkers.concat(extraMarkers);
      var forLine = this.gutter.config.lineMarker(view, _line3, localMarkers);
      if (forLine) localMarkers.unshift(forLine);
      var gutter = this.gutter;
      if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
      var above = _line3.top - this.height;
      if (this.i == gutter.elements.length) {
        var newElt = new GutterElement(view, _line3.height, above, localMarkers);
        gutter.elements.push(newElt);
        gutter.dom.appendChild(newElt.dom);
      } else {
        gutter.elements[this.i].update(view, _line3.height, above, localMarkers);
      }
      this.height = _line3.bottom;
      this.i++;
    }
  }, {
    key: "finish",
    value: function finish() {
      var gutter = this.gutter;
      while (gutter.elements.length > this.i) {
        var last = gutter.elements.pop();
        gutter.dom.removeChild(last.dom);
        last.destroy();
      }
    }
  }]);
  return UpdateContext;
}();
var SingleGutterView = /*#__PURE__*/function () {
  function SingleGutterView(view, config) {
    var _this59 = this;
    _classCallCheck(this, SingleGutterView);
    this.view = view;
    this.config = config;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config["class"] ? " " + this.config["class"] : "");
    var _loop8 = function _loop8(prop) {
      _this59.dom.addEventListener(prop, function (event) {
        var target = event.target,
          y;
        if (target != _this59.dom && _this59.dom.contains(target)) {
          while (target.parentNode != _this59.dom) target = target.parentNode;
          var rect = target.getBoundingClientRect();
          y = (rect.top + rect.bottom) / 2;
        } else {
          y = event.clientY;
        }
        var line = view.lineBlockAtHeight(y - view.documentTop);
        if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
      });
    };
    for (var prop in config.domEventHandlers) {
      _loop8(prop);
    }
    this.markers = asArray(config.markers(view));
    if (config.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  _createClass(SingleGutterView, [{
    key: "update",
    value: function update(_update19) {
      var prevMarkers = this.markers;
      this.markers = asArray(this.config.markers(_update19.view));
      if (this.spacer && this.config.updateSpacer) {
        var updated = this.config.updateSpacer(this.spacer.markers[0], _update19);
        if (updated != this.spacer.markers[0]) this.spacer.update(_update19.view, 0, 0, [updated]);
      }
      var vp = _update19.view.viewport;
      return !_state.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(_update19) : false);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator98 = _createForOfIteratorHelper(this.elements),
        _step98;
      try {
        for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
          var elt = _step98.value;
          elt.destroy();
        }
      } catch (err) {
        _iterator98.e(err);
      } finally {
        _iterator98.f();
      }
    }
  }]);
  return SingleGutterView;
}();
var GutterElement = /*#__PURE__*/function () {
  function GutterElement(view, height, above, markers) {
    _classCallCheck(this, GutterElement);
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }
  _createClass(GutterElement, [{
    key: "update",
    value: function update(view, height, above, markers) {
      if (this.height != height) this.dom.style.height = (this.height = height) + "px";
      if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
      if (!sameMarkers(this.markers, markers)) this.setMarkers(view, markers);
    }
  }, {
    key: "setMarkers",
    value: function setMarkers(view, markers) {
      var cls = "cm-gutterElement",
        domPos = this.dom.firstChild;
      for (var iNew = 0, iOld = 0;;) {
        var skipTo = iOld,
          marker = iNew < markers.length ? markers[iNew++] : null,
          matched = false;
        if (marker) {
          var c = marker.elementClass;
          if (c) cls += " " + c;
          for (var i = iOld; i < this.markers.length; i++) if (this.markers[i].compare(marker)) {
            skipTo = i;
            matched = true;
            break;
          }
        } else {
          skipTo = this.markers.length;
        }
        while (iOld < skipTo) {
          var next = this.markers[iOld++];
          if (next.toDOM) {
            next.destroy(domPos);
            var after = domPos.nextSibling;
            domPos.remove();
            domPos = after;
          }
        }
        if (!marker) break;
        if (marker.toDOM) {
          if (matched) domPos = domPos.nextSibling;else this.dom.insertBefore(marker.toDOM(view), domPos);
        }
        if (matched) iOld++;
      }
      this.dom.className = cls;
      this.markers = markers;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.setMarkers(null, []); // First argument not used unless creating markers
    }
  }]);
  return GutterElement;
}();
function sameMarkers(a, b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) if (!a[i].compare(b[i])) return false;
  return true;
}
/**
Facet used to provide markers to the line number gutter.
*/
var lineNumberMarkers = /*@__PURE__*/_state.Facet.define();
exports.lineNumberMarkers = lineNumberMarkers;
var lineNumberConfig = /*@__PURE__*/_state.Facet.define({
  combine: function combine(values) {
    return (0, _state.combineConfig)(values, {
      formatNumber: String,
      domEventHandlers: {}
    }, {
      domEventHandlers: function domEventHandlers(a, b) {
        var result = Object.assign({}, a);
        var _loop9 = function _loop9() {
          var exists = result[event],
            add = b[event];
          result[event] = exists ? function (view, line, event) {
            return exists(view, line, event) || add(view, line, event);
          } : add;
        };
        for (var event in b) {
          _loop9();
        }
        return result;
      }
    });
  }
});
var NumberMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(NumberMarker, _GutterMarker);
  var _super25 = _createSuper(NumberMarker);
  function NumberMarker(number) {
    var _this60;
    _classCallCheck(this, NumberMarker);
    _this60 = _super25.call(this);
    _this60.number = number;
    return _this60;
  }
  _createClass(NumberMarker, [{
    key: "eq",
    value: function eq(other) {
      return this.number == other.number;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return document.createTextNode(this.number);
    }
  }]);
  return NumberMarker;
}(GutterMarker);
function formatNumber(view, number) {
  return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
}
var lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], function (state) {
  return {
    "class": "cm-lineNumbers",
    renderEmptyElements: false,
    markers: function markers(view) {
      return view.state.facet(lineNumberMarkers);
    },
    lineMarker: function lineMarker(view, line, others) {
      if (others.some(function (m) {
        return m.toDOM;
      })) return null;
      return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
    },
    lineMarkerChange: function lineMarkerChange(update) {
      return update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig);
    },
    initialSpacer: function initialSpacer(view) {
      return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
    },
    updateSpacer: function updateSpacer(spacer, update) {
      var max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
      return max == spacer.number ? spacer : new NumberMarker(max);
    },
    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  };
});
/**
Create a line number gutter extension.
*/
function lineNumbers() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [lineNumberConfig.of(config), gutters(), lineNumberGutter];
}
function maxLineNumber(lines) {
  var last = 9;
  while (last < lines) last = last * 10 + 9;
  return last;
}
var activeLineGutterMarker = /*@__PURE__*/new ( /*#__PURE__*/function (_GutterMarker2) {
  _inherits(_class10, _GutterMarker2);
  var _super26 = _createSuper(_class10);
  function _class10() {
    var _this61;
    _classCallCheck(this, _class10);
    _this61 = _super26.apply(this, arguments);
    _this61.elementClass = "cm-activeLineGutter";
    return _this61;
  }
  return _createClass(_class10);
}(GutterMarker))();
var activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], function (state) {
  var marks = [],
    last = -1;
  var _iterator99 = _createForOfIteratorHelper(state.selection.ranges),
    _step99;
  try {
    for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
      var range = _step99.value;
      var linePos = state.doc.lineAt(range.head).from;
      if (linePos > last) {
        last = linePos;
        marks.push(activeLineGutterMarker.range(linePos));
      }
    }
  } catch (err) {
    _iterator99.e(err);
  } finally {
    _iterator99.f();
  }
  return _state.RangeSet.of(marks);
});
/**
Returns an extension that adds a `cm-activeLineGutter` class to
all gutter elements on the [active
line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
*/
function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}
var WhitespaceDeco = /*@__PURE__*/new Map();
function getWhitespaceDeco(space) {
  var deco = WhitespaceDeco.get(space);
  if (!deco) WhitespaceDeco.set(space, deco = Decoration.mark({
    attributes: space === "\t" ? {
      "class": "cm-highlightTab"
    } : {
      "class": "cm-highlightSpace",
      "data-display": space.replace(/ /g, "·")
    }
  }));
  return deco;
}
function matcher(decorator) {
  return ViewPlugin.define(function (view) {
    return {
      decorations: decorator.createDeco(view),
      update: function update(u) {
        this.decorations = decorator.updateDeco(u, this.decorations);
      }
    };
  }, {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });
}
var whitespaceHighlighter = /*@__PURE__*/matcher( /*@__PURE__*/new MatchDecorator({
  regexp: /\t| +/g,
  decoration: function decoration(match) {
    return getWhitespaceDeco(match[0]);
  },
  boundary: /\S/
}));
/**
Returns an extension that highlights whitespace, adding a
`cm-highlightSpace` class to stretches of spaces, and a
`cm-highlightTab` class to individual tab characters. By default,
the former are shown as faint dots, and the latter as arrows.
*/
function highlightWhitespace() {
  return whitespaceHighlighter;
}
var trailingHighlighter = /*@__PURE__*/matcher( /*@__PURE__*/new MatchDecorator({
  regexp: /\s+$/g,
  decoration: /*@__PURE__*/Decoration.mark({
    "class": "cm-trailingSpace"
  }),
  boundary: /\S/
}));
/**
Returns an extension that adds a `cm-trailingSpace` class to all
trailing whitespace.
*/
function highlightTrailingWhitespace() {
  return trailingHighlighter;
}

/**
@internal
*/
var __test = {
  HeightMap: HeightMap,
  HeightOracle: HeightOracle,
  MeasuredHeights: MeasuredHeights,
  QueryType: QueryType,
  ChangedRange: ChangedRange,
  computeOrder: computeOrder,
  moveVisually: moveVisually
};
exports.__test = __test;

},{"@codemirror/state":20,"style-mod":52,"w3c-keyname":69}],22:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeFragment = exports.TreeCursor = exports.TreeBuffer = exports.Tree = exports.Parser = exports.NodeWeakMap = exports.NodeType = exports.NodeSet = exports.NodeProp = exports.MountedTree = exports.IterMode = exports.DefaultBufferLength = void 0;
exports.parseMixed = parseMixed;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
// FIXME profile adding a per-Tree TreeNode cache, validating it by
// parent pointer
/// The default maximum length of a `TreeBuffer` node.
var DefaultBufferLength = 1024;
exports.DefaultBufferLength = DefaultBufferLength;
var nextPropID = 0;
var Range = /*#__PURE__*/_createClass(function Range(from, to) {
  _classCallCheck(this, Range);
  this.from = from;
  this.to = to;
}); /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
/// can have metadata associated with it in props. Instances of this
/// class represent prop names.
var NodeProp = /*#__PURE__*/function () {
  /// Create a new node prop type.
  function NodeProp() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, NodeProp);
    this.id = nextPropID++;
    this.perNode = !!config.perNode;
    this.deserialize = config.deserialize || function () {
      throw new Error("This node type doesn't define a deserialize function");
    };
  }
  /// This is meant to be used with
  /// [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
  /// prop values for each node type in the set. Takes a [match
  /// object](#common.NodeType^match) or function that returns undefined
  /// if the node type doesn't get this prop, and the prop's value if
  /// it does.
  _createClass(NodeProp, [{
    key: "add",
    value: function add(match) {
      var _this = this;
      if (this.perNode) throw new RangeError("Can't add per-node props to node types");
      if (typeof match != "function") match = NodeType.match(match);
      return function (type) {
        var result = match(type);
        return result === undefined ? null : [_this, result];
      };
    }
  }]);
  return NodeProp;
}(); /// Prop that is used to describe matching delimiters. For opening
/// delimiters, this holds an array of node names (written as a
/// space-separated string when declaring this prop in a grammar)
/// for the node types of closing delimiters that match it.
exports.NodeProp = NodeProp;
NodeProp.closedBy = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
/// attached to closing delimiters, holding an array of node names
/// of types of matching opening delimiters.
NodeProp.openedBy = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// Used to assign node types to groups (for example, all node
/// types that represent an expression could be tagged with an
/// `"Expression"` group).
NodeProp.group = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// The hash of the [context](#lr.ContextTracker.constructor)
/// that the node was parsed in, if any. Used to limit reuse of
/// contextual nodes.
NodeProp.contextHash = new NodeProp({
  perNode: true
});
/// The distance beyond the end of the node that the tokenizer
/// looked ahead for any of the tokens inside the node. (The LR
/// parser only stores this when it is larger than 25, for
/// efficiency reasons.)
NodeProp.lookAhead = new NodeProp({
  perNode: true
});
/// This per-node prop is used to replace a given node, or part of a
/// node, with another tree. This is useful to include trees from
/// different languages in mixed-language parsers.
NodeProp.mounted = new NodeProp({
  perNode: true
});
/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
/// a tree node to indicate that parts of its content are
/// represented by another tree.
var MountedTree = /*#__PURE__*/_createClass(function MountedTree(
/// The inner tree.
tree,
/// If this is null, this tree replaces the entire node (it will
/// be included in the regular iteration instead of its host
/// node). If not, only the given ranges are considered to be
/// covered by this tree. This is used for trees that are mixed in
/// a way that isn't strictly hierarchical. Such mounted trees are
/// only entered by [`resolveInner`](#common.Tree.resolveInner)
/// and [`enter`](#common.SyntaxNode.enter).
overlay,
/// The parser used to create this subtree.
parser) {
  _classCallCheck(this, MountedTree);
  this.tree = tree;
  this.overlay = overlay;
  this.parser = parser;
});
exports.MountedTree = MountedTree;
var noProps = Object.create(null);
/// Each node in a syntax tree has a node type associated with it.
var NodeType = /*#__PURE__*/function () {
  /// @internal
  function NodeType(
  /// The name of the node type. Not necessarily unique, but if the
  /// grammar was written properly, different node types with the
  /// same name within a node set should play the same semantic
  /// role.
  name,
  /// @internal
  props,
  /// The id of this node in its set. Corresponds to the term ids
  /// used in the parser.
  id) {
    var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, NodeType);
    this.name = name;
    this.props = props;
    this.id = id;
    this.flags = flags;
  }
  /// Define a node type.
  _createClass(NodeType, [{
    key: "prop",
    value:
    /// Retrieves a node prop for this type. Will return `undefined` if
    /// the prop isn't present on this node.
    function prop(_prop) {
      return this.props[_prop.id];
    }
    /// True when this is the top node of a grammar.
  }, {
    key: "isTop",
    get: function get() {
      return (this.flags & 1 /* NodeFlag.Top */) > 0;
    }
    /// True when this node is produced by a skip rule.
  }, {
    key: "isSkipped",
    get: function get() {
      return (this.flags & 2 /* NodeFlag.Skipped */) > 0;
    }
    /// Indicates whether this is an error node.
  }, {
    key: "isError",
    get: function get() {
      return (this.flags & 4 /* NodeFlag.Error */) > 0;
    }
    /// When true, this node type doesn't correspond to a user-declared
    /// named node, for example because it is used to cache repetition.
  }, {
    key: "isAnonymous",
    get: function get() {
      return (this.flags & 8 /* NodeFlag.Anonymous */) > 0;
    }
    /// Returns true when this node's name or one of its
    /// [groups](#common.NodeProp^group) matches the given string.
  }, {
    key: "is",
    value: function is(name) {
      if (typeof name == 'string') {
        if (this.name == name) return true;
        var group = this.prop(NodeProp.group);
        return group ? group.indexOf(name) > -1 : false;
      }
      return this.id == name;
    }
    /// Create a function from node types to arbitrary values by
    /// specifying an object whose property names are node or
    /// [group](#common.NodeProp^group) names. Often useful with
    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
    /// names, separated by spaces, in a single property name to map
    /// multiple node names to a single value.
  }], [{
    key: "define",
    value: function define(spec) {
      var props = spec.props && spec.props.length ? Object.create(null) : noProps;
      var flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) | (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
      var type = new NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props) {
        var _iterator = _createForOfIteratorHelper(spec.props),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var src = _step.value;
            if (!Array.isArray(src)) src = src(type);
            if (src) {
              if (src[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
              props[src[0].id] = src[1];
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return type;
    }
  }, {
    key: "match",
    value: function match(map) {
      var direct = Object.create(null);
      for (var prop in map) {
        var _iterator2 = _createForOfIteratorHelper(prop.split(" ")),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var name = _step2.value;
            direct[name] = map[prop];
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return function (node) {
        for (var groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
          var found = direct[i < 0 ? node.name : groups[i]];
          if (found) return found;
        }
      };
    }
  }]);
  return NodeType;
}(); /// An empty dummy node type to use when no actual type is available.
exports.NodeType = NodeType;
NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
/// A node set holds a collection of node types. It is used to
/// compactly represent trees by storing their type ids, rather than a
/// full pointer to the type object, in a numeric array. Each parser
/// [has](#lr.LRParser.nodeSet) a node set, and [tree
/// buffers](#common.TreeBuffer) can only store collections of nodes
/// from the same set. A set can have a maximum of 2**16 (65536) node
/// types in it, so that the ids fit into 16-bit typed array slots.
var NodeSet = /*#__PURE__*/function () {
  /// Create a set with the given types. The `id` property of each
  /// type should correspond to its position within the array.
  function NodeSet(
  /// The node types in this set, by id.
  types) {
    _classCallCheck(this, NodeSet);
    this.types = types;
    for (var i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /// Create a copy of this set with some node properties added. The
  /// arguments to this method can be created with
  /// [`NodeProp.add`](#common.NodeProp.add).
  _createClass(NodeSet, [{
    key: "extend",
    value: function extend() {
      var newTypes = [];
      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }
      var _iterator3 = _createForOfIteratorHelper(this.types),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var type = _step3.value;
          var newProps = null;
          var _iterator4 = _createForOfIteratorHelper(props),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var source = _step4.value;
              var add = source(type);
              if (add) {
                if (!newProps) newProps = Object.assign({}, type.props);
                newProps[add[0].id] = add[1];
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return new NodeSet(newTypes);
    }
  }]);
  return NodeSet;
}();
exports.NodeSet = NodeSet;
var CachedNode = new WeakMap(),
  CachedInnerNode = new WeakMap();
/// Options that control iteration. Can be combined with the `|`
/// operator to enable multiple ones.
var IterMode;
exports.IterMode = IterMode;
(function (IterMode) {
  /// When enabled, iteration will only visit [`Tree`](#common.Tree)
  /// objects, not nodes packed into
  /// [`TreeBuffer`](#common.TreeBuffer)s.
  IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  /// Enable this to make iteration include anonymous nodes (such as
  /// the nodes that wrap repeated grammar constructs into a balanced
  /// tree).
  IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  /// By default, regular [mounted](#common.NodeProp^mounted) nodes
  /// replace their base node in iteration. Enable this to ignore them
  /// instead.
  IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
  /// This option only applies in
  /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
  /// library to not enter mounted overlays if one covers the given
  /// position.
  IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (exports.IterMode = IterMode = {}));
/// A piece of syntax tree. There are two ways to approach these
/// trees: the way they are actually stored in memory, and the
/// convenient way.
///
/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
/// objects. By packing detail information into `TreeBuffer` leaf
/// nodes, the representation is made a lot more memory-efficient.
///
/// However, when you want to actually work with tree nodes, this
/// representation is very awkward, so most client code will want to
/// use the [`TreeCursor`](#common.TreeCursor) or
/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
/// a view on some part of this data structure, and can be used to
/// move around to adjacent nodes.
var Tree = /*#__PURE__*/function () {
  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  function Tree(
  /// The type of the top node.
  type,
  /// This node's child nodes.
  children,
  /// The positions (offsets relative to the start of this tree) of
  /// the children.
  positions,
  /// The total length of this tree
  length,
  /// Per-node [node props](#common.NodeProp) to associate with this node.
  props) {
    _classCallCheck(this, Tree);
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length;
    /// @internal
    this.props = null;
    if (props && props.length) {
      this.props = Object.create(null);
      var _iterator5 = _createForOfIteratorHelper(props),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
            prop = _step5$value[0],
            value = _step5$value[1];
          this.props[typeof prop == "number" ? prop : prop.id] = value;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }
  /// @internal
  _createClass(Tree, [{
    key: "toString",
    value: function toString() {
      var mounted = this.prop(NodeProp.mounted);
      if (mounted && !mounted.overlay) return mounted.tree.toString();
      var children = "";
      var _iterator6 = _createForOfIteratorHelper(this.children),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var ch = _step6.value;
          var str = ch.toString();
          if (str) {
            if (children) children += ",";
            children += str;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
    /// the tree. Mode can be used to [control](#common.IterMode) which
    /// nodes the cursor visits.
  }, {
    key: "cursor",
    value: function cursor() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new TreeCursor(this.topNode, mode);
    }
    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
    /// at the given position and side (see
    /// [`moveTo`](#common.TreeCursor.moveTo).
  }, {
    key: "cursorAt",
    value: function cursorAt(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var scope = CachedNode.get(this) || this.topNode;
      var cursor = new TreeCursor(scope);
      cursor.moveTo(pos, side);
      CachedNode.set(this, cursor._tree);
      return cursor;
    }
    /// Get a [syntax node](#common.SyntaxNode) object for the top of the
    /// tree.
  }, {
    key: "topNode",
    get: function get() {
      return new TreeNode(this, 0, 0, null);
    }
    /// Get the [syntax node](#common.SyntaxNode) at the given position.
    /// If `side` is -1, this will move into nodes that end at the
    /// position. If 1, it'll move into nodes that start at the
    /// position. With 0, it'll only enter nodes that cover the position
    /// from both sides.
    ///
    /// Note that this will not enter
    /// [overlays](#common.MountedTree.overlay), and you often want
    /// [`resolveInner`](#common.Tree.resolveInner) instead.
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
      CachedNode.set(this, node);
      return node;
    }
    /// Like [`resolve`](#common.Tree.resolve), but will enter
    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
    /// pointing into the innermost overlaid tree at the given position
    /// (with parent links going through all parent structure, including
    /// the host trees).
  }, {
    key: "resolveInner",
    value: function resolveInner(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
      CachedInnerNode.set(this, node);
      return node;
    }
    /// Iterate over the tree and its children, calling `enter` for any
    /// node that touches the `from`/`to` region (if given) before
    /// running over such a node's children, and `leave` (if given) when
    /// leaving the node. When `enter` returns `false`, that node will
    /// not have its children iterated over (or `leave` called).
  }, {
    key: "iterate",
    value: function iterate(spec) {
      var enter = spec.enter,
        leave = spec.leave,
        _spec$from = spec.from,
        from = _spec$from === void 0 ? 0 : _spec$from,
        _spec$to = spec.to,
        to = _spec$to === void 0 ? this.length : _spec$to;
      for (var c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
        var entered = false;
        if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
          if (c.firstChild()) continue;
          entered = true;
        }
        for (;;) {
          if (entered && leave && !c.type.isAnonymous) leave(c);
          if (c.nextSibling()) break;
          if (!c.parent()) return;
          entered = true;
        }
      }
    }
    /// Get the value of the given [node prop](#common.NodeProp) for this
    /// node. Works with both per-node and per-type props.
  }, {
    key: "prop",
    value: function prop(_prop2) {
      return !_prop2.perNode ? this.type.prop(_prop2) : this.props ? this.props[_prop2.id] : undefined;
    }
    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
    /// format that can be passed to the [`Tree`](#common.Tree)
    /// constructor.
  }, {
    key: "propValues",
    get: function get() {
      var result = [];
      if (this.props) for (var id in this.props) result.push([+id, this.props[id]]);
      return result;
    }
    /// Balance the direct children of this tree, producing a copy of
    /// which may have children grouped into subtrees with type
    /// [`NodeType.none`](#common.NodeType^none).
  }, {
    key: "balance",
    value: function balance() {
      var _this2 = this;
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.children.length <= 8 /* Balance.BranchFactor */ ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, function (children, positions, length) {
        return new Tree(_this2.type, children, positions, length, _this2.propValues);
      }, config.makeTree || function (children, positions, length) {
        return new Tree(NodeType.none, children, positions, length);
      });
    }
    /// Build a tree from a postfix-ordered buffer of node information,
    /// or a cursor over such a buffer.
  }], [{
    key: "build",
    value: function build(data) {
      return buildTree(data);
    }
  }]);
  return Tree;
}(); /// The empty tree
exports.Tree = Tree;
Tree.empty = new Tree(NodeType.none, [], [], 0);
var FlatBufferCursor = /*#__PURE__*/function () {
  function FlatBufferCursor(buffer, index) {
    _classCallCheck(this, FlatBufferCursor);
    this.buffer = buffer;
    this.index = index;
  }
  _createClass(FlatBufferCursor, [{
    key: "id",
    get: function get() {
      return this.buffer[this.index - 4];
    }
  }, {
    key: "start",
    get: function get() {
      return this.buffer[this.index - 3];
    }
  }, {
    key: "end",
    get: function get() {
      return this.buffer[this.index - 2];
    }
  }, {
    key: "size",
    get: function get() {
      return this.buffer[this.index - 1];
    }
  }, {
    key: "pos",
    get: function get() {
      return this.index;
    }
  }, {
    key: "next",
    value: function next() {
      this.index -= 4;
    }
  }, {
    key: "fork",
    value: function fork() {
      return new FlatBufferCursor(this.buffer, this.index);
    }
  }]);
  return FlatBufferCursor;
}(); /// Tree buffers contain (type, start, end, endIndex) quads for each
/// node. In such a buffer, nodes are stored in prefix order (parents
/// before children, with the endIndex of the parent indicating which
/// children belong to it).
var TreeBuffer = /*#__PURE__*/function () {
  /// Create a tree buffer.
  function TreeBuffer(
  /// The buffer's content.
  buffer,
  /// The total length of the group of nodes in the buffer.
  length,
  /// The node set used in this buffer.
  set) {
    _classCallCheck(this, TreeBuffer);
    this.buffer = buffer;
    this.length = length;
    this.set = set;
  }
  /// @internal
  _createClass(TreeBuffer, [{
    key: "type",
    get: function get() {
      return NodeType.none;
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      var result = [];
      for (var index = 0; index < this.buffer.length;) {
        result.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result.join(",");
    }
    /// @internal
  }, {
    key: "childString",
    value: function childString(index) {
      var id = this.buffer[index],
        endIndex = this.buffer[index + 3];
      var type = this.set.types[id],
        result = type.name;
      if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
      index += 4;
      if (endIndex == index) return result;
      var children = [];
      while (index < endIndex) {
        children.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /// @internal
  }, {
    key: "findChild",
    value: function findChild(startIndex, endIndex, dir, pos, side) {
      var buffer = this.buffer,
        pick = -1;
      for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {
        if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
          pick = i;
          if (dir > 0) break;
        }
      }
      return pick;
    }
    /// @internal
  }, {
    key: "slice",
    value: function slice(startI, endI, from) {
      var b = this.buffer;
      var copy = new Uint16Array(endI - startI),
        len = 0;
      for (var i = startI, j = 0; i < endI;) {
        copy[j++] = b[i++];
        copy[j++] = b[i++] - from;
        var to = copy[j++] = b[i++] - from;
        copy[j++] = b[i++] - startI;
        len = Math.max(len, to);
      }
      return new TreeBuffer(copy, len, this.set);
    }
  }]);
  return TreeBuffer;
}();
exports.TreeBuffer = TreeBuffer;
function checkSide(side, pos, from, to) {
  switch (side) {
    case -2 /* Side.Before */:
      return from < pos;
    case -1 /* Side.AtOrBefore */:
      return to >= pos && from < pos;
    case 0 /* Side.Around */:
      return from < pos && to > pos;
    case 1 /* Side.AtOrAfter */:
      return from <= pos && to > pos;
    case 2 /* Side.After */:
      return to > pos;
    case 4 /* Side.DontCare */:
      return true;
  }
}
function _enterUnfinishedNodesBefore(node, pos) {
  var scan = node.childBefore(pos);
  while (scan) {
    var last = scan.lastChild;
    if (!last || last.to != scan.to) break;
    if (last.type.isError && last.from == last.to) {
      node = scan;
      scan = last.prevSibling;
    } else {
      scan = last;
    }
  }
  return node;
}
function resolveNode(node, pos, side, overlays) {
  var _a;
  // Move up to a node that actually holds the position, if possible
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    var parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent) return node;
    node = parent;
  }
  var mode = overlays ? 0 : IterMode.IgnoreOverlays;
  // Must go up out of overlays when those do not overlap with pos
  if (overlays) for (var scan = node, _parent2 = scan.parent; _parent2; scan = _parent2, _parent2 = scan.parent) {
    if (scan instanceof TreeNode && scan.index < 0 && ((_a = _parent2.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = _parent2;
  }
  for (;;) {
    var inner = node.enter(pos, side, mode);
    if (!inner) return node;
    node = inner;
  }
}
var TreeNode = /*#__PURE__*/function () {
  function TreeNode(_tree, from,
  // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
  index, _parent) {
    _classCallCheck(this, TreeNode);
    this._tree = _tree;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }
  _createClass(TreeNode, [{
    key: "type",
    get: function get() {
      return this._tree.type;
    }
  }, {
    key: "name",
    get: function get() {
      return this._tree.type.name;
    }
  }, {
    key: "to",
    get: function get() {
      return this.from + this._tree.length;
    }
  }, {
    key: "nextChild",
    value: function nextChild(i, dir, pos, side) {
      var mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      for (var parent = this;;) {
        for (var _parent$_tree = parent._tree, children = _parent$_tree.children, positions = _parent$_tree.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
          var next = children[i],
            start = positions[i] + parent.from;
          if (!checkSide(side, pos, start, start + next.length)) continue;
          if (next instanceof TreeBuffer) {
            if (mode & IterMode.ExcludeBuffers) continue;
            var index = next.findChild(0, next.buffer.length, dir, pos - start, side);
            if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
          } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {
            var mounted = void 0;
            if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);
            var inner = new TreeNode(next, start, i, parent);
            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
          }
        }
        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;
        if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;
        parent = parent._parent;
        if (!parent) return null;
      }
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.nextChild(0, 1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "lastChild",
    get: function get() {
      return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.nextChild(0, 1, pos, 2 /* Side.After */);
    }
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */);
    }
  }, {
    key: "enter",
    value: function enter(pos, side) {
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var mounted;
      if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
        var rPos = pos - this.from;
        var _iterator7 = _createForOfIteratorHelper(mounted.overlay),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _step7$value = _step7.value,
              from = _step7$value.from,
              to = _step7$value.to;
            if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
      return this.nextChild(0, 1, pos, side, mode);
    }
  }, {
    key: "nextSignificantParent",
    value: function nextSignificantParent() {
      var val = this;
      while (val.type.isAnonymous && val._parent) val = val._parent;
      return val;
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
  }, {
    key: "nextSibling",
    get: function get() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
    }
  }, {
    key: "prevSibling",
    get: function get() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
    }
  }, {
    key: "cursor",
    value: function cursor() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new TreeCursor(this, mode);
    }
  }, {
    key: "tree",
    get: function get() {
      return this._tree;
    }
  }, {
    key: "toTree",
    value: function toTree() {
      return this._tree;
    }
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, false);
    }
  }, {
    key: "resolveInner",
    value: function resolveInner(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, true);
    }
  }, {
    key: "enterUnfinishedNodesBefore",
    value: function enterUnfinishedNodesBefore(pos) {
      return _enterUnfinishedNodesBefore(this, pos);
    }
  }, {
    key: "getChild",
    value: function getChild(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var r = _getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
  }, {
    key: "getChildren",
    value: function getChildren(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return _getChildren(this, type, before, after);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this._tree.toString();
    }
  }, {
    key: "node",
    get: function get() {
      return this;
    }
  }, {
    key: "matchContext",
    value: function matchContext(context) {
      return matchNodeContext(this, context);
    }
  }]);
  return TreeNode;
}();
function _getChildren(node, type, before, after) {
  var cur = node.cursor(),
    result = [];
  if (!cur.firstChild()) return result;
  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;
  for (;;) {
    if (after != null && cur.type.is(after)) return result;
    if (cur.type.is(type)) result.push(cur.node);
    if (!cur.nextSibling()) return after == null ? result : [];
  }
}
function matchNodeContext(node, context) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : context.length - 1;
  for (var p = node.parent; i >= 0; p = p.parent) {
    if (!p) return false;
    if (!p.type.isAnonymous) {
      if (context[i] && context[i] != p.name) return false;
      i--;
    }
  }
  return true;
}
var BufferContext = /*#__PURE__*/_createClass(function BufferContext(parent, buffer, index, start) {
  _classCallCheck(this, BufferContext);
  this.parent = parent;
  this.buffer = buffer;
  this.index = index;
  this.start = start;
});
var BufferNode = /*#__PURE__*/function () {
  function BufferNode(context, _parent, index) {
    _classCallCheck(this, BufferNode);
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  _createClass(BufferNode, [{
    key: "name",
    get: function get() {
      return this.type.name;
    }
  }, {
    key: "from",
    get: function get() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
  }, {
    key: "to",
    get: function get() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
  }, {
    key: "child",
    value: function child(dir, pos, side) {
      var buffer = this.context.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.child(1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "lastChild",
    get: function get() {
      return this.child(-1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.child(1, pos, 2 /* Side.After */);
    }
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.child(-1, pos, -2 /* Side.Before */);
    }
  }, {
    key: "enter",
    value: function enter(pos, side) {
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      if (mode & IterMode.ExcludeBuffers) return null;
      var buffer = this.context.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
  }, {
    key: "externalSibling",
    value: function externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "nextSibling",
    get: function get() {
      var buffer = this.context.buffer;
      var after = buffer.buffer[this.index + 3];
      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
  }, {
    key: "prevSibling",
    get: function get() {
      var buffer = this.context.buffer;
      var parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart) return this.externalSibling(-1);
      return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
    }
  }, {
    key: "cursor",
    value: function cursor() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new TreeCursor(this, mode);
    }
  }, {
    key: "tree",
    get: function get() {
      return null;
    }
  }, {
    key: "toTree",
    value: function toTree() {
      var children = [],
        positions = [];
      var buffer = this.context.buffer;
      var startI = this.index + 4,
        endI = buffer.buffer[this.index + 3];
      if (endI > startI) {
        var from = buffer.buffer[this.index + 1];
        children.push(buffer.slice(startI, endI, from));
        positions.push(0);
      }
      return new Tree(this.type, children, positions, this.to - this.from);
    }
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, false);
    }
  }, {
    key: "resolveInner",
    value: function resolveInner(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, true);
    }
  }, {
    key: "enterUnfinishedNodesBefore",
    value: function enterUnfinishedNodesBefore(pos) {
      return _enterUnfinishedNodesBefore(this, pos);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.context.buffer.childString(this.index);
    }
  }, {
    key: "getChild",
    value: function getChild(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var r = _getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
  }, {
    key: "getChildren",
    value: function getChildren(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return _getChildren(this, type, before, after);
    }
  }, {
    key: "node",
    get: function get() {
      return this;
    }
  }, {
    key: "matchContext",
    value: function matchContext(context) {
      return matchNodeContext(this, context);
    }
  }]);
  return BufferNode;
}(); /// A tree cursor object focuses on a given node in a syntax tree, and
/// allows you to move to adjacent nodes.
var TreeCursor = /*#__PURE__*/function () {
  /// @internal
  function TreeCursor(node) {
    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    _classCallCheck(this, TreeCursor);
    this.mode = mode;
    /// @internal
    this.buffer = null;
    this.stack = [];
    /// @internal
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (var n = node._parent; n; n = n._parent) this.stack.unshift(n.index);
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  _createClass(TreeCursor, [{
    key: "name",
    get:
    /// Shorthand for `.type.name`.
    function get() {
      return this.type.name;
    }
  }, {
    key: "yieldNode",
    value: function yieldNode(node) {
      if (!node) return false;
      this._tree = node;
      this.type = node.type;
      this.from = node.from;
      this.to = node.to;
      return true;
    }
  }, {
    key: "yieldBuf",
    value: function yieldBuf(index, type) {
      this.index = index;
      var _this$buffer = this.buffer,
        start = _this$buffer.start,
        buffer = _this$buffer.buffer;
      this.type = type || buffer.set.types[buffer.buffer[index]];
      this.from = start + buffer.buffer[index + 1];
      this.to = start + buffer.buffer[index + 2];
      return true;
    }
  }, {
    key: "yield",
    value: function _yield(node) {
      if (!node) return false;
      if (node instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node);
      }
      this.buffer = node.context;
      return this.yieldBuf(node.index, node.type);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /// @internal
  }, {
    key: "enterChild",
    value: function enterChild(dir, pos, side) {
      if (!this.buffer) return this["yield"](this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
      var buffer = this.buffer.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
      if (index < 0) return false;
      this.stack.push(this.index);
      return this.yieldBuf(index);
    }
    /// Move the cursor to this node's first child. When this returns
    /// false, the node has no child, and the cursor has not been moved.
  }, {
    key: "firstChild",
    value: function firstChild() {
      return this.enterChild(1, 0, 4 /* Side.DontCare */);
    }
    /// Move the cursor to this node's last child.
  }, {
    key: "lastChild",
    value: function lastChild() {
      return this.enterChild(-1, 0, 4 /* Side.DontCare */);
    }
    /// Move the cursor to the first child that ends after `pos`.
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.enterChild(1, pos, 2 /* Side.After */);
    }
    /// Move to the last child that starts before `pos`.
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.enterChild(-1, pos, -2 /* Side.Before */);
    }
    /// Move the cursor to the child around `pos`. If side is -1 the
    /// child may end at that position, when 1 it may start there. This
    /// will also enter [overlaid](#common.MountedTree.overlay)
    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
    /// set to false.
  }, {
    key: "enter",
    value: function enter(pos, side) {
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mode;
      if (!this.buffer) return this["yield"](this._tree.enter(pos, side, mode));
      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
    }
    /// Move to the node's parent node, if this isn't the top node.
  }, {
    key: "parent",
    value: function parent() {
      if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
      if (this.stack.length) return this.yieldBuf(this.stack.pop());
      var parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /// @internal
  }, {
    key: "sibling",
    value: function sibling(dir) {
      if (!this.buffer) return !this._tree._parent ? false : this["yield"](this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
      var buffer = this.buffer.buffer,
        d = this.stack.length - 1;
      if (dir < 0) {
        var parentStart = d < 0 ? 0 : this.stack[d] + 4;
        if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      } else {
        var after = buffer.buffer[this.index + 3];
        if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
      }
      return d < 0 ? this["yield"](this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
    }
    /// Move to this node's next sibling, if any.
  }, {
    key: "nextSibling",
    value: function nextSibling() {
      return this.sibling(1);
    }
    /// Move to this node's previous sibling, if any.
  }, {
    key: "prevSibling",
    value: function prevSibling() {
      return this.sibling(-1);
    }
  }, {
    key: "atLastNode",
    value: function atLastNode(dir) {
      var index,
        parent,
        buffer = this.buffer;
      if (buffer) {
        if (dir > 0) {
          if (this.index < buffer.buffer.buffer.length) return false;
        } else {
          for (var i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;
        }
        index = buffer.index;
        parent = buffer.parent;
      } else {
        var _this$_tree = this._tree;
        index = _this$_tree.index;
        parent = _this$_tree._parent;
      }
      for (; parent; _parent3 = parent, index = _parent3.index, parent = _parent3._parent, _parent3) {
        var _parent3;
        if (index > -1) for (var _i2 = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; _i2 != e; _i2 += dir) {
          var child = parent._tree.children[_i2];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;
        }
      }
      return true;
    }
  }, {
    key: "move",
    value: function move(dir, enter) {
      if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */)) return true;
      for (;;) {
        if (this.sibling(dir)) return true;
        if (this.atLastNode(dir) || !this.parent()) return false;
      }
    }
    /// Move to the next node in a
    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
    /// traversal, going from a node to its first child or, if the
    /// current node is empty or `enter` is false, its next sibling or
    /// the next sibling of the first parent node that has one.
  }, {
    key: "next",
    value: function next() {
      var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return this.move(1, enter);
    }
    /// Move to the next node in a last-to-first pre-order traveral. A
    /// node is followed by its last child or, if it has none, its
    /// previous sibling or the previous sibling of the first parent
    /// node that has one.
  }, {
    key: "prev",
    value: function prev() {
      var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return this.move(-1, enter);
    }
    /// Move the cursor to the innermost node that covers `pos`. If
    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    /// it will enter nodes that start at `pos`.
  }, {
    key: "moveTo",
    value: function moveTo(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Move up to a node that actually holds the position, if possible
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break;
      // Then scan down into child nodes as far as possible
      while (this.enterChild(1, pos, side)) {}
      return this;
    }
    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
    /// position.
  }, {
    key: "node",
    get: function get() {
      if (!this.buffer) return this._tree;
      var cache = this.bufferNode,
        result = null,
        depth = 0;
      if (cache && cache.context == this.buffer) {
        scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
          for (var c = cache; c; c = c._parent) if (c.index == index) {
            if (index == this.index) return c;
            result = c;
            depth = d + 1;
            break scan;
          }
          index = this.stack[--d];
        }
      }
      for (var i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /// Get the [tree](#common.Tree) that represents the current node, if
    /// any. Will return null when the node is in a [tree
    /// buffer](#common.TreeBuffer).
  }, {
    key: "tree",
    get: function get() {
      return this.buffer ? null : this._tree._tree;
    }
    /// Iterate over the current node and all its descendants, calling
    /// `enter` when entering a node and `leave`, if given, when leaving
    /// one. When `enter` returns `false`, any children of that node are
    /// skipped, and `leave` isn't called for it.
  }, {
    key: "iterate",
    value: function iterate(enter, leave) {
      for (var depth = 0;;) {
        var mustLeave = false;
        if (this.type.isAnonymous || enter(this) !== false) {
          if (this.firstChild()) {
            depth++;
            continue;
          }
          if (!this.type.isAnonymous) mustLeave = true;
        }
        for (;;) {
          if (mustLeave && leave) leave(this);
          mustLeave = this.type.isAnonymous;
          if (this.nextSibling()) break;
          if (!depth) return;
          this.parent();
          depth--;
          mustLeave = true;
        }
      }
    }
    /// Test whether the current node matches a given context—a sequence
    /// of direct parent node names. Empty strings in the context array
    /// are treated as wildcards.
  }, {
    key: "matchContext",
    value: function matchContext(context) {
      if (!this.buffer) return matchNodeContext(this.node, context);
      var buffer = this.buffer.buffer,
        types = buffer.set.types;
      for (var i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
        if (d < 0) return matchNodeContext(this.node, context, i);
        var type = types[buffer.buffer[this.stack[d]]];
        if (!type.isAnonymous) {
          if (context[i] && context[i] != type.name) return false;
          i--;
        }
      }
      return true;
    }
  }]);
  return TreeCursor;
}();
exports.TreeCursor = TreeCursor;
function hasChild(tree) {
  return tree.children.some(function (ch) {
    return ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch);
  });
}
function buildTree(data) {
  var _a;
  var buffer = data.buffer,
    nodeSet = data.nodeSet,
    _data$maxBufferLength = data.maxBufferLength,
    maxBufferLength = _data$maxBufferLength === void 0 ? DefaultBufferLength : _data$maxBufferLength,
    _data$reused = data.reused,
    reused = _data$reused === void 0 ? [] : _data$reused,
    _data$minRepeatType = data.minRepeatType,
    minRepeatType = _data$minRepeatType === void 0 ? nodeSet.types.length : _data$minRepeatType;
  var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  var types = nodeSet.types;
  var contextHash = 0,
    lookAhead = 0;
  function takeNode(parentStart, minPos, children, positions, inRepeat) {
    var id = cursor.id,
      start = cursor.start,
      end = cursor.end,
      size = cursor.size;
    var lookAheadAtStart = lookAhead;
    while (size < 0) {
      cursor.next();
      if (size == -1 /* SpecialRecord.Reuse */) {
        var _node = reused[id];
        children.push(_node);
        positions.push(start - parentStart);
        return;
      } else if (size == -3 /* SpecialRecord.ContextChange */) {
        // Context change
        contextHash = id;
        return;
      } else if (size == -4 /* SpecialRecord.LookAhead */) {
        lookAhead = id;
        return;
      } else {
        throw new RangeError("Unrecognized record size: ".concat(size));
      }
    }
    var type = types[id],
      node,
      buffer;
    var startPos = start - parentStart;
    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
      // Small enough for a buffer, and no reused nodes inside
      var _data = new Uint16Array(buffer.size - buffer.skip);
      var endPos = cursor.pos - buffer.size,
        index = _data.length;
      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, _data, index);
      node = new TreeBuffer(_data, end - buffer.start, nodeSet);
      startPos = buffer.start - parentStart;
    } else {
      // Make it a node
      var _endPos = cursor.pos - size;
      cursor.next();
      var localChildren = [],
        localPositions = [];
      var localInRepeat = id >= minRepeatType ? id : -1;
      var lastGroup = 0,
        lastEnd = end;
      while (cursor.pos > _endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }
          cursor.next();
        } else {
          takeNode(start, _endPos, localChildren, localPositions, localInRepeat);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        var make = makeBalanced(type);
        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
      }
    }
    children.push(node);
    positions.push(startPos);
  }
  function makeBalanced(type) {
    return function (children, positions, length) {
      var lookAhead = 0,
        lastI = children.length - 1,
        last,
        lookAheadProp;
      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
        if (!lastI && last.type == type && last.length == length) return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;
      }
      return makeTree(type, children, positions, length, lookAhead);
    };
  }
  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
    var localChildren = [],
      localPositions = [];
    while (children.length > i) {
      localChildren.push(children.pop());
      localPositions.push(positions.pop() + base - from);
    }
    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
    positions.push(from - base);
  }
  function makeTree(type, children, positions, length) {
    var lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var props = arguments.length > 5 ? arguments[5] : undefined;
    if (contextHash) {
      var pair = [NodeProp.contextHash, contextHash];
      props = props ? [pair].concat(props) : [pair];
    }
    if (lookAhead > 25) {
      var _pair = [NodeProp.lookAhead, lookAhead];
      props = props ? [_pair].concat(props) : [_pair];
    }
    return new Tree(type, children, positions, length, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    // Scan through the buffer to find previous siblings that fit
    // together in a TreeBuffer, and don't contain any reused nodes
    // (which can't be stored in a buffer).
    // If `inRepeat` is > -1, ignore node boundaries of that type for
    // nesting, but make sure the end falls either at the start
    // (`maxSize`) or before such a node.
    var fork = cursor.fork();
    var size = 0,
      start = 0,
      skip = 0,
      minStart = fork.end - maxBufferLength;
    var result = {
      size: 0,
      start: 0,
      skip: 0
    };
    scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
      var _nodeSize = fork.size;
      // Pretend nested repeat nodes of the same type don't exist
      if (fork.id == inRepeat && _nodeSize >= 0) {
        // Except that we store the current state as a valid return
        // value.
        result.size = size;
        result.start = start;
        result.skip = skip;
        skip += 4;
        size += 4;
        fork.next();
        continue;
      }
      var startPos = fork.pos - _nodeSize;
      if (_nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
      var localSkipped = fork.id >= minRepeatType ? 4 : 0;
      var nodeStart = fork.start;
      fork.next();
      while (fork.pos > startPos) {
        if (fork.size < 0) {
          if (fork.size == -3 /* SpecialRecord.ContextChange */) localSkipped += 4;else break scan;
        } else if (fork.id >= minRepeatType) {
          localSkipped += 4;
        }
        fork.next();
      }
      start = nodeStart;
      size += _nodeSize;
      skip += localSkipped;
    }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : undefined;
  }
  function copyToBuffer(bufferStart, buffer, index) {
    var id = cursor.id,
      start = cursor.start,
      end = cursor.end,
      size = cursor.size;
    cursor.next();
    if (size >= 0 && id < minRepeatType) {
      var startIndex = index;
      if (size > 4) {
        var endPos = cursor.pos - (size - 4);
        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);
      }
      buffer[--index] = startIndex;
      buffer[--index] = end - bufferStart;
      buffer[--index] = start - bufferStart;
      buffer[--index] = id;
    } else if (size == -3 /* SpecialRecord.ContextChange */) {
      contextHash = id;
    } else if (size == -4 /* SpecialRecord.LookAhead */) {
      lookAhead = id;
    }
    return index;
  }
  var children = [],
    positions = [];
  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
  var length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
}
var nodeSizeCache = new WeakMap();
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;
  var size = nodeSizeCache.get(node);
  if (size == null) {
    size = 1;
    var _iterator8 = _createForOfIteratorHelper(node.children),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var child = _step8.value;
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
    nodeSizeCache.set(node, size);
  }
  return size;
}
function balanceRange(
// The type the balanced tree's inner nodes.
balanceType,
// The direct children and their positions
children, positions,
// The index range in children/positions to use
from, to,
// The start position of the nodes, relative to their parent.
start,
// Length of the outer node
length,
// Function to build the top node of the balanced tree
mkTop,
// Function to build internal nodes for the balanced tree
mkTree) {
  var total = 0;
  for (var i = from; i < to; i++) total += nodeSize(balanceType, children[i]);
  var maxChild = Math.ceil(total * 1.5 / 8 /* Balance.BranchFactor */);
  var localChildren = [],
    localPositions = [];
  function divide(children, positions, from, to, offset) {
    for (var _i3 = from; _i3 < to;) {
      var groupFrom = _i3,
        groupStart = positions[_i3],
        groupSize = nodeSize(balanceType, children[_i3]);
      _i3++;
      for (; _i3 < to; _i3++) {
        var nextSize = nodeSize(balanceType, children[_i3]);
        if (groupSize + nextSize >= maxChild) break;
        groupSize += nextSize;
      }
      if (_i3 == groupFrom + 1) {
        if (groupSize > maxChild) {
          var only = children[groupFrom]; // Only trees can have a size > 1
          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
          continue;
        }
        localChildren.push(children[groupFrom]);
      } else {
        var _length = positions[_i3 - 1] + children[_i3 - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, _i3, groupStart, _length, null, mkTree));
      }
      localPositions.push(groupStart + offset - start);
    }
  }
  divide(children, positions, from, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
}
/// Provides a way to associate values with pieces of trees. As long
/// as that part of the tree is reused, the associated values can be
/// retrieved from an updated tree.
var NodeWeakMap = /*#__PURE__*/function () {
  function NodeWeakMap() {
    _classCallCheck(this, NodeWeakMap);
    this.map = new WeakMap();
  }
  _createClass(NodeWeakMap, [{
    key: "setBuffer",
    value: function setBuffer(buffer, index, value) {
      var inner = this.map.get(buffer);
      if (!inner) this.map.set(buffer, inner = new Map());
      inner.set(index, value);
    }
  }, {
    key: "getBuffer",
    value: function getBuffer(buffer, index) {
      var inner = this.map.get(buffer);
      return inner && inner.get(index);
    }
    /// Set the value for this syntax node.
  }, {
    key: "set",
    value: function set(node, value) {
      if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);
    }
    /// Retrieve value for this syntax node, if it exists in the map.
  }, {
    key: "get",
    value: function get(node) {
      return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
    }
    /// Set the value for the node that a cursor currently points to.
  }, {
    key: "cursorSet",
    value: function cursorSet(cursor, value) {
      if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);
    }
    /// Retrieve the value for the node that a cursor currently points
    /// to.
  }, {
    key: "cursorGet",
    value: function cursorGet(cursor) {
      return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
    }
  }]);
  return NodeWeakMap;
}(); /// Tree fragments are used during [incremental
/// parsing](#common.Parser.startParse) to track parts of old trees
/// that can be reused in a new parse. An array of fragments is used
/// to track regions of an old tree whose nodes might be reused in new
/// parses. Use the static
/// [`applyChanges`](#common.TreeFragment^applyChanges) method to
/// update fragments for document changes.
exports.NodeWeakMap = NodeWeakMap;
var TreeFragment = /*#__PURE__*/function () {
  /// Construct a tree fragment. You'll usually want to use
  /// [`addTree`](#common.TreeFragment^addTree) and
  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  /// calling this directly.
  function TreeFragment(
  /// The start of the unchanged range pointed to by this fragment.
  /// This refers to an offset in the _updated_ document (as opposed
  /// to the original tree).
  from,
  /// The end of the unchanged range.
  to,
  /// The tree that this fragment is based on.
  tree,
  /// The offset between the fragment's tree and the document that
  /// this fragment can be used against. Add this when going from
  /// document to tree positions, subtract it to go from tree to
  /// document positions.
  offset) {
    var openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    _classCallCheck(this, TreeFragment);
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
  }
  /// Whether the start of the fragment represents the start of a
  /// parse, or the end of a change. (In the second case, it may not
  /// be safe to reuse some nodes at the start, depending on the
  /// parsing algorithm.)
  _createClass(TreeFragment, [{
    key: "openStart",
    get: function get() {
      return (this.open & 1 /* Open.Start */) > 0;
    }
    /// Whether the end of the fragment represents the end of a
    /// full-document parse, or the start of a change.
  }, {
    key: "openEnd",
    get: function get() {
      return (this.open & 2 /* Open.End */) > 0;
    }
    /// Create a set of fragments from a freshly parsed tree, or update
    /// an existing set of fragments by replacing the ones that overlap
    /// with a tree with content from the new tree. When `partial` is
    /// true, the parse is treated as incomplete, and the resulting
    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
    /// true.
  }], [{
    key: "addTree",
    value: function addTree(tree) {
      var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
      var _iterator9 = _createForOfIteratorHelper(fragments),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var f = _step9.value;
          if (f.to > tree.length) result.push(f);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return result;
    }
    /// Apply a set of edits to an array of fragments, removing or
    /// splitting fragments as necessary to remove edited ranges, and
    /// adjusting offsets for fragments that moved.
  }, {
    key: "applyChanges",
    value: function applyChanges(fragments, changes) {
      var minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;
      if (!changes.length) return fragments;
      var result = [];
      var fI = 1,
        nextF = fragments.length ? fragments[0] : null;
      for (var cI = 0, pos = 0, off = 0;; cI++) {
        var nextC = cI < changes.length ? changes[cI] : null;
        var nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
          var cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            var fFrom = Math.max(cut.from, pos) - off,
              fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut) result.push(cut);
          if (nextF.to > nextPos) break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
        if (!nextC) break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
  }]);
  return TreeFragment;
}(); /// A superclass that parsers should extend.
exports.TreeFragment = TreeFragment;
var Parser = /*#__PURE__*/function () {
  function Parser() {
    _classCallCheck(this, Parser);
  }
  _createClass(Parser, [{
    key: "startParse",
    value:
    /// Start a parse, returning a [partial parse](#common.PartialParse)
    /// object. [`fragments`](#common.TreeFragment) can be passed in to
    /// make the parse incremental.
    ///
    /// By default, the entire input is parsed. You can pass `ranges`,
    /// which should be a sorted array of non-empty, non-overlapping
    /// ranges, to parse only those ranges. The tree returned in that
    /// case will start at `ranges[0].from`.
    function startParse(input, fragments, ranges) {
      if (typeof input == "string") input = new StringInput(input);
      ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(function (r) {
        return new Range(r.from, r.to);
      }) : [new Range(0, 0)];
      return this.createParse(input, fragments || [], ranges);
    }
    /// Run a full parse, returning the resulting tree.
  }, {
    key: "parse",
    value: function parse(input, fragments, ranges) {
      var parse = this.startParse(input, fragments, ranges);
      for (;;) {
        var done = parse.advance();
        if (done) return done;
      }
    }
  }]);
  return Parser;
}();
exports.Parser = Parser;
var StringInput = /*#__PURE__*/function () {
  function StringInput(string) {
    _classCallCheck(this, StringInput);
    this.string = string;
  }
  _createClass(StringInput, [{
    key: "length",
    get: function get() {
      return this.string.length;
    }
  }, {
    key: "chunk",
    value: function chunk(from) {
      return this.string.slice(from);
    }
  }, {
    key: "lineChunks",
    get: function get() {
      return false;
    }
  }, {
    key: "read",
    value: function read(from, to) {
      return this.string.slice(from, to);
    }
  }]);
  return StringInput;
}(); /// Create a parse wrapper that, after the inner parse completes,
/// scans its tree for mixed language regions with the `nest`
/// function, runs the resulting [inner parses](#common.NestedParse),
/// and then [mounts](#common.NodeProp^mounted) their results onto the
/// tree.
function parseMixed(nest) {
  return function (parse, input, fragments, ranges) {
    return new MixedParse(parse, nest, input, fragments, ranges);
  };
}
var InnerParse = /*#__PURE__*/_createClass(function InnerParse(parser, parse, overlay, target, ranges) {
  _classCallCheck(this, InnerParse);
  this.parser = parser;
  this.parse = parse;
  this.overlay = overlay;
  this.target = target;
  this.ranges = ranges;
});
var ActiveOverlay = /*#__PURE__*/_createClass(function ActiveOverlay(parser, predicate, mounts, index, start, target, prev) {
  _classCallCheck(this, ActiveOverlay);
  this.parser = parser;
  this.predicate = predicate;
  this.mounts = mounts;
  this.index = index;
  this.start = start;
  this.target = target;
  this.prev = prev;
  this.depth = 0;
  this.ranges = [];
});
var stoppedInner = new NodeProp({
  perNode: true
});
var MixedParse = /*#__PURE__*/function () {
  function MixedParse(base, nest, input, fragments, ranges) {
    _classCallCheck(this, MixedParse);
    this.nest = nest;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.inner = [];
    this.innerDone = 0;
    this.baseTree = null;
    this.stoppedAt = null;
    this.baseParse = base;
  }
  _createClass(MixedParse, [{
    key: "advance",
    value: function advance() {
      if (this.baseParse) {
        var _done = this.baseParse.advance();
        if (!_done) return null;
        this.baseParse = null;
        this.baseTree = _done;
        this.startInner();
        if (this.stoppedAt != null) {
          var _iterator10 = _createForOfIteratorHelper(this.inner),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var _inner = _step10.value;
              _inner.parse.stopAt(this.stoppedAt);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
      }
      if (this.innerDone == this.inner.length) {
        var result = this.baseTree;
        if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
        return result;
      }
      var inner = this.inner[this.innerDone],
        done = inner.parse.advance();
      if (done) {
        this.innerDone++;
        // This is a somewhat dodgy but super helpful hack where we
        // patch up nodes created by the inner parse (and thus
        // presumably not aliased anywhere else) to hold the information
        // about the inner parse.
        var props = Object.assign(Object.create(null), inner.target.props);
        props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
        inner.target.props = props;
      }
      return null;
    }
  }, {
    key: "parsedPos",
    get: function get() {
      if (this.baseParse) return 0;
      var pos = this.input.length;
      for (var i = this.innerDone; i < this.inner.length; i++) {
        if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);
      }
      return pos;
    }
  }, {
    key: "stopAt",
    value: function stopAt(pos) {
      this.stoppedAt = pos;
      if (this.baseParse) this.baseParse.stopAt(pos);else for (var i = this.innerDone; i < this.inner.length; i++) this.inner[i].parse.stopAt(pos);
    }
  }, {
    key: "startInner",
    value: function startInner() {
      var fragmentCursor = new FragmentCursor(this.fragments);
      var overlay = null;
      var covered = null;
      var cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
      scan: for (var nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {
        var enter = true,
          range = void 0;
        if (fragmentCursor.hasNode(cursor)) {
          if (overlay) {
            var match = overlay.mounts.find(function (m) {
              return m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay;
            });
            if (match) {
              var _iterator11 = _createForOfIteratorHelper(match.mount.overlay),
                _step11;
              try {
                var _loop = function _loop() {
                  var r = _step11.value;
                  var from = r.from + match.pos,
                    to = r.to + match.pos;
                  if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(function (r) {
                    return r.from < to && r.to > from;
                  })) overlay.ranges.push({
                    from: from,
                    to: to
                  });
                };
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  _loop();
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }
            }
          }
          enter = false;
        } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
          enter = isCovered != 2 /* Cover.Full */;
        } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
          if (!cursor.tree) materialize(cursor);
          var oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
          if (typeof nest.overlay == "function") {
            overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
          } else {
            var ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
            if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(function (r) {
              return new Range(r.from - cursor.from, r.to - cursor.from);
            }) : null, cursor.tree, ranges));
            if (!nest.overlay) enter = false;else if (ranges.length) covered = {
              ranges: ranges,
              depth: 0,
              prev: covered
            };
          }
        } else if (overlay && (range = overlay.predicate(cursor))) {
          if (range === true) range = new Range(cursor.from, cursor.to);
          if (range.from < range.to) overlay.ranges.push(range);
        }
        if (enter && cursor.firstChild()) {
          if (overlay) overlay.depth++;
          if (covered) covered.depth++;
        } else {
          for (;;) {
            if (cursor.nextSibling()) break;
            if (!cursor.parent()) break scan;
            if (overlay && ! --overlay.depth) {
              var _ranges = punchRanges(this.ranges, overlay.ranges);
              if (_ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, _ranges), _ranges), overlay.ranges.map(function (r) {
                return new Range(r.from - overlay.start, r.to - overlay.start);
              }), overlay.target, _ranges));
              overlay = overlay.prev;
            }
            if (covered && ! --covered.depth) covered = covered.prev;
          }
        }
      }
    }
  }]);
  return MixedParse;
}();
function checkCover(covered, from, to) {
  var _iterator12 = _createForOfIteratorHelper(covered),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var range = _step12.value;
      if (range.from >= to) break;
      if (range.to > from) return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  return 0 /* Cover.None */;
}
// Take a piece of buffer and convert it into a stand-alone
// TreeBuffer.
function sliceBuf(buf, startI, endI, nodes, positions, off) {
  if (startI < endI) {
    var from = buf.buffer[startI + 1];
    nodes.push(buf.slice(startI, endI, from));
    positions.push(from - off);
  }
}
// This function takes a node that's in a buffer, and converts it, and
// its parent buffer nodes, into a Tree. This is again acting on the
// assumption that the trees and buffers have been constructed by the
// parse that was ran via the mix parser, and thus aren't shared with
// any other code, making violations of the immutability safe.
function materialize(cursor) {
  var node = cursor.node,
    depth = 0;
  // Scan up to the nearest tree
  do {
    cursor.parent();
    depth++;
  } while (!cursor.tree);
  // Find the index of the buffer in that tree
  var i = 0,
    base = cursor.tree,
    off = 0;
  for (;; i++) {
    off = base.positions[i] + cursor.from;
    if (off <= node.from && off + base.children[i].length >= node.to) break;
  }
  var buf = base.children[i],
    b = buf.buffer;
  // Split a level in the buffer, putting the nodes before and after
  // the child that contains `node` into new buffers.
  function split(startI, endI, type, innerOffset, length) {
    var i = startI;
    while (b[i + 2] + off <= node.from) i = b[i + 3];
    var children = [],
      positions = [];
    sliceBuf(buf, startI, i, children, positions, innerOffset);
    var from = b[i + 1],
      to = b[i + 2];
    var isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;
    children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));
    positions.push(from - innerOffset);
    sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
    return new Tree(type, children, positions, length);
  }
  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);
  // Move the cursor back to the target node
  for (var d = 0; d <= depth; d++) cursor.childAfter(node.from);
}
var StructureCursor = /*#__PURE__*/function () {
  function StructureCursor(root, offset) {
    _classCallCheck(this, StructureCursor);
    this.offset = offset;
    this.done = false;
    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  _createClass(StructureCursor, [{
    key: "moveTo",
    value: function moveTo(pos) {
      var cursor = this.cursor,
        p = pos - this.offset;
      while (!this.done && cursor.from < p) {
        if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;else if (!cursor.next(false)) this.done = true;
      }
    }
  }, {
    key: "hasNode",
    value: function hasNode(cursor) {
      this.moveTo(cursor.from);
      if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
        for (var tree = this.cursor.tree;;) {
          if (tree == cursor.tree) return true;
          if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;
        }
      }
      return false;
    }
  }]);
  return StructureCursor;
}();
var FragmentCursor = /*#__PURE__*/function () {
  function FragmentCursor(fragments) {
    _classCallCheck(this, FragmentCursor);
    var _a;
    this.fragments = fragments;
    this.curTo = 0;
    this.fragI = 0;
    if (fragments.length) {
      var first = this.curFrag = fragments[0];
      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
      this.inner = new StructureCursor(first.tree, -first.offset);
    } else {
      this.curFrag = this.inner = null;
    }
  }
  _createClass(FragmentCursor, [{
    key: "hasNode",
    value: function hasNode(node) {
      while (this.curFrag && node.from >= this.curTo) this.nextFrag();
      return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
    }
  }, {
    key: "nextFrag",
    value: function nextFrag() {
      var _a;
      this.fragI++;
      if (this.fragI == this.fragments.length) {
        this.curFrag = this.inner = null;
      } else {
        var frag = this.curFrag = this.fragments[this.fragI];
        this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
        this.inner = new StructureCursor(frag.tree, -frag.offset);
      }
    }
  }, {
    key: "findMounts",
    value: function findMounts(pos, parser) {
      var _a;
      var result = [];
      if (this.inner) {
        this.inner.cursor.moveTo(pos, 1);
        for (var _pos = this.inner.cursor.node; _pos; _pos = _pos.parent) {
          var mount = (_a = _pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
          if (mount && mount.parser == parser) {
            for (var i = this.fragI; i < this.fragments.length; i++) {
              var frag = this.fragments[i];
              if (frag.from >= _pos.to) break;
              if (frag.tree == this.curFrag.tree) result.push({
                frag: frag,
                pos: _pos.from - frag.offset,
                mount: mount
              });
            }
          }
        }
      }
      return result;
    }
  }]);
  return FragmentCursor;
}();
function punchRanges(outer, ranges) {
  var copy = null,
    current = ranges;
  for (var i = 1, j = 0; i < outer.length; i++) {
    var gapFrom = outer[i - 1].to,
      gapTo = outer[i].from;
    for (; j < current.length; j++) {
      var r = current[j];
      if (r.from >= gapTo) break;
      if (r.to <= gapFrom) continue;
      if (!copy) current = copy = ranges.slice();
      if (r.from < gapFrom) {
        copy[j] = new Range(r.from, gapFrom);
        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));
      } else if (r.to > gapTo) {
        copy[j--] = new Range(gapTo, r.to);
      } else {
        copy.splice(j--, 1);
      }
    }
  }
  return current;
}
function findCoverChanges(a, b, from, to) {
  var iA = 0,
    iB = 0,
    inA = false,
    inB = false,
    pos = -1e9;
  var result = [];
  for (;;) {
    var nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
    var nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
    if (inA != inB) {
      var start = Math.max(pos, from),
        end = Math.min(nextA, nextB, to);
      if (start < end) result.push(new Range(start, end));
    }
    pos = Math.min(nextA, nextB);
    if (pos == 1e9) break;
    if (nextA == pos) {
      if (!inA) inA = true;else {
        inA = false;
        iA++;
      }
    }
    if (nextB == pos) {
      if (!inB) inB = true;else {
        inB = false;
        iB++;
      }
    }
  }
  return result;
}
// Given a number of fragments for the outer tree, and a set of ranges
// to parse, find fragments for inner trees mounted around those
// ranges, if any.
function enterFragments(mounts, ranges) {
  var result = [];
  var _iterator13 = _createForOfIteratorHelper(mounts),
    _step13;
  try {
    var _loop2 = function _loop2() {
      var _step13$value = _step13.value,
        pos = _step13$value.pos,
        mount = _step13$value.mount,
        frag = _step13$value.frag;
      var startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),
        endPos = startPos + mount.tree.length;
      var from = Math.max(frag.from, startPos),
        to = Math.min(frag.to, endPos);
      if (mount.overlay) {
        var overlay = mount.overlay.map(function (r) {
          return new Range(r.from + pos, r.to + pos);
        });
        var changes = findCoverChanges(ranges, overlay, from, to);
        for (var i = 0, _pos2 = from;; i++) {
          var last = i == changes.length,
            end = last ? to : changes[i].from;
          if (end > _pos2) result.push(new TreeFragment(_pos2, end, mount.tree, -startPos, frag.from >= _pos2 || frag.openStart, frag.to <= end || frag.openEnd));
          if (last) break;
          _pos2 = changes[i].to;
        }
      } else {
        result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
      }
    };
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return result;
}

},{}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classHighlighter = exports.Tag = void 0;
exports.getStyleTags = getStyleTags;
exports.highlightTree = highlightTree;
exports.styleTags = styleTags;
exports.tagHighlighter = tagHighlighter;
exports.tags = void 0;
var _common = require("@lezer/common");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var nextTagID = 0;
/**
Highlighting tags are markers that denote a highlighting category.
They are [associated](#highlight.styleTags) with parts of a syntax
tree by a language mode, and then mapped to an actual CSS style by
a [highlighter](#highlight.Highlighter).

Because syntax tree node types and highlight styles have to be
able to talk the same language, CodeMirror uses a mostly _closed_
[vocabulary](#highlight.tags) of syntax tags (as opposed to
traditional open string-based systems, which make it hard for
highlighting themes to cover all the tokens produced by the
various languages).

It _is_ possible to [define](#highlight.Tag^define) your own
highlighting tags for system-internal use (where you control both
the language package and the highlighter), but such tags will not
be picked up by regular highlighters (though you can derive them
from standard tags to allow highlighters to fall back to those).
*/
var Tag = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Tag(
  /**
  The set of this tag and all its parent tags, starting with
  this one itself and sorted in order of decreasing specificity.
  */
  set,
  /**
  The base unmodified tag that this one is based on, if it's
  modified @internal
  */
  base,
  /**
  The modifiers applied to this.base @internal
  */
  modified) {
    _classCallCheck(this, Tag);
    this.set = set;
    this.base = base;
    this.modified = modified;
    /**
    @internal
    */
    this.id = nextTagID++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  _createClass(Tag, null, [{
    key: "define",
    value: function define(parent) {
      if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
      var tag = new Tag([], null, []);
      tag.set.push(tag);
      if (parent) {
        var _iterator = _createForOfIteratorHelper(parent.set),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _t = _step.value;
            tag.set.push(_t);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return tag;
    }
    /**
    Define a tag _modifier_, which is a function that, given a tag,
    will return a tag that is a subtag of the original. Applying the
    same modifier to a twice tag will return the same value (`m1(t1)
    == m1(t1)`) and applying multiple modifiers will, regardless or
    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    
    When multiple modifiers are applied to a given base tag, each
    smaller set of modifiers is registered as a parent, so that for
    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    `m1(m3(t1)`, and so on.
    */
  }, {
    key: "defineModifier",
    value: function defineModifier() {
      var mod = new Modifier();
      return function (tag) {
        if (tag.modified.indexOf(mod) > -1) return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort(function (a, b) {
          return a.id - b.id;
        }));
      };
    }
  }]);
  return Tag;
}();
exports.Tag = Tag;
var nextModifierID = 0;
var Modifier = /*#__PURE__*/function () {
  function Modifier() {
    _classCallCheck(this, Modifier);
    this.instances = [];
    this.id = nextModifierID++;
  }
  _createClass(Modifier, null, [{
    key: "get",
    value: function get(base, mods) {
      if (!mods.length) return base;
      var exists = mods[0].instances.find(function (t) {
        return t.base == base && sameArray(mods, t.modified);
      });
      if (exists) return exists;
      var set = [],
        tag = new Tag(set, base, mods);
      var _iterator2 = _createForOfIteratorHelper(mods),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var m = _step2.value;
          m.instances.push(tag);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var configs = powerSet(mods);
      var _iterator3 = _createForOfIteratorHelper(base.set),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var parent = _step3.value;
          if (!parent.modified.length) {
            var _iterator4 = _createForOfIteratorHelper(configs),
              _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var config = _step4.value;
                set.push(Modifier.get(parent, config));
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return tag;
    }
  }]);
  return Modifier;
}();
function sameArray(a, b) {
  return a.length == b.length && a.every(function (x, i) {
    return x == b[i];
  });
}
function powerSet(array) {
  var sets = [[]];
  for (var i = 0; i < array.length; i++) {
    for (var j = 0, e = sets.length; j < e; j++) {
      sets.push(sets[j].concat(array[i]));
    }
  }
  return sets.sort(function (a, b) {
    return b.length - a.length;
  });
}
/**
This function is used to add a set of tags to a language syntax
via [`NodeSet.extend`](#common.NodeSet.extend) or
[`LRParser.configure`](#lr.LRParser.configure).

The argument object maps node selectors to [highlighting
tags](#highlight.Tag) or arrays of tags.

Node selectors may hold one or more (space-separated) node paths.
Such a path can be a [node name](#common.NodeType.name), or
multiple node names (or `*` wildcards) separated by slash
characters, as in `"Block/Declaration/VariableName"`. Such a path
matches the final node but only if its direct parent nodes are the
other nodes mentioned. A `*` in such a path matches any parent,
but only a single level—wildcards that match multiple parents
aren't supported, both for efficiency reasons and because Lezer
trees make it rather hard to reason about what they would match.)

A path can be ended with `/...` to indicate that the tag assigned
to the node should also apply to all child nodes, even if they
match their own style (by default, only the innermost style is
used).

When a path ends in `!`, as in `Attribute!`, no further matching
happens for the node's child nodes, and the entire node gets the
given style.

In this notation, node names that contain `/`, `!`, `*`, or `...`
must be quoted as JSON strings.

For example:

```javascript
parser.withProps(
  styleTags({
    // Style Number and BigNumber nodes
    "Number BigNumber": tags.number,
    // Style Escape nodes whose parent is String
    "String/Escape": tags.escape,
    // Style anything inside Attributes nodes
    "Attributes!": tags.meta,
    // Add a style to all content inside Italic nodes
    "Italic/...": tags.emphasis,
    // Style InvalidString nodes as both `string` and `invalid`
    "InvalidString": [tags.string, tags.invalid],
    // Style the node named "/" as punctuation
    '"/"': tags.punctuation
  })
)
```
*/
function styleTags(spec) {
  var byName = Object.create(null);
  for (var prop in spec) {
    var _tags = spec[prop];
    if (!Array.isArray(_tags)) _tags = [_tags];
    var _iterator5 = _createForOfIteratorHelper(prop.split(" ")),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var part = _step5.value;
        if (part) {
          var pieces = [],
            mode = 2 /* Normal */,
            rest = part;
          for (var pos = 0;;) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1 /* Inherit */;
              break;
            }
            var m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m) throw new RangeError("Invalid path: " + part);
            pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
            pos += m[0].length;
            if (pos == part.length) break;
            var next = part[pos++];
            if (pos == part.length && next == "!") {
              mode = 0 /* Opaque */;
              break;
            }
            if (next != "/") throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          var last = pieces.length - 1,
            inner = pieces[last];
          if (!inner) throw new RangeError("Invalid path: " + part);
          var rule = new Rule(_tags, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = new _common.NodeProp();
var Rule = /*#__PURE__*/function () {
  function Rule(tags, mode, context, next) {
    _classCallCheck(this, Rule);
    this.tags = tags;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }
  _createClass(Rule, [{
    key: "opaque",
    get: function get() {
      return this.mode == 0 /* Opaque */;
    }
  }, {
    key: "inherit",
    get: function get() {
      return this.mode == 1 /* Inherit */;
    }
  }, {
    key: "sort",
    value: function sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
  }, {
    key: "depth",
    get: function get() {
      return this.context ? this.context.length : 0;
    }
  }]);
  return Rule;
}();
Rule.empty = new Rule([], 2 /* Normal */, null);
/**
Define a [highlighter](#highlight.Highlighter) from an array of
tag/class pairs. Classes associated with more specific tags will
take precedence.
*/
function tagHighlighter(tags, options) {
  var map = Object.create(null);
  var _iterator6 = _createForOfIteratorHelper(tags),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var style = _step6.value;
      if (!Array.isArray(style.tag)) map[style.tag.id] = style["class"];else {
        var _iterator9 = _createForOfIteratorHelper(style.tag),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var tag = _step9.value;
            map[tag.id] = style["class"];
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  var _ref = options || {},
    scope = _ref.scope,
    _ref$all = _ref.all,
    all = _ref$all === void 0 ? null : _ref$all;
  return {
    style: function style(tags) {
      var cls = all;
      var _iterator7 = _createForOfIteratorHelper(tags),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var tag = _step7.value;
          var _iterator8 = _createForOfIteratorHelper(tag.set),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var sub = _step8.value;
              var tagClass = map[sub.id];
              if (tagClass) {
                cls = cls ? cls + " " + tagClass : tagClass;
                break;
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return cls;
    },
    scope: scope
  };
}
function highlightTags(highlighters, tags) {
  var result = null;
  var _iterator10 = _createForOfIteratorHelper(highlighters),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var highlighter = _step10.value;
      var value = highlighter.style(tags);
      if (value) result = result ? result + " " + value : value;
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
  return result;
}
/**
Highlight the given [tree](#common.Tree) with the given
[highlighter](#highlight.Highlighter).
*/
function highlightTree(tree, highlighter,
/**
Assign styling to a region of the text. Will be called, in order
of position, for any ranges where more than zero classes apply.
`classes` is a space separated string of CSS classes.
*/
putStyle) {
  var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tree.length;
  var builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
  builder.flush(to);
}
var HighlightBuilder = /*#__PURE__*/function () {
  function HighlightBuilder(at, highlighters, span) {
    _classCallCheck(this, HighlightBuilder);
    this.at = at;
    this.highlighters = highlighters;
    this.span = span;
    this["class"] = "";
  }
  _createClass(HighlightBuilder, [{
    key: "startSpan",
    value: function startSpan(at, cls) {
      if (cls != this["class"]) {
        this.flush(at);
        if (at > this.at) this.at = at;
        this["class"] = cls;
      }
    }
  }, {
    key: "flush",
    value: function flush(to) {
      if (to > this.at && this["class"]) this.span(this.at, to, this["class"]);
    }
  }, {
    key: "highlightRange",
    value: function highlightRange(cursor, from, to, inheritedClass, highlighters) {
      var type = cursor.type,
        start = cursor.from,
        end = cursor.to;
      if (start >= to || end <= from) return;
      if (type.isTop) highlighters = this.highlighters.filter(function (h) {
        return !h.scope || h.scope(type);
      });
      var cls = inheritedClass;
      var rule = getStyleTags(cursor) || Rule.empty;
      var tagCls = highlightTags(highlighters, rule.tags);
      if (tagCls) {
        if (cls) cls += " ";
        cls += tagCls;
        if (rule.mode == 1 /* Inherit */) inheritedClass += (inheritedClass ? " " : "") + tagCls;
      }
      this.startSpan(cursor.from, cls);
      if (rule.opaque) return;
      var mounted = cursor.tree && cursor.tree.prop(_common.NodeProp.mounted);
      if (mounted && mounted.overlay) {
        var inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
        var innerHighlighters = this.highlighters.filter(function (h) {
          return !h.scope || h.scope(mounted.tree.type);
        });
        var hasChild = cursor.firstChild();
        for (var i = 0, pos = start;; i++) {
          var next = i < mounted.overlay.length ? mounted.overlay[i] : null;
          var nextPos = next ? next.from + start : end;
          var rangeFrom = Math.max(from, pos),
            rangeTo = Math.min(to, nextPos);
          if (rangeFrom < rangeTo && hasChild) {
            while (cursor.from < rangeTo) {
              this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
              this.startSpan(Math.min(rangeTo, cursor.to), cls);
              if (cursor.to >= nextPos || !cursor.nextSibling()) break;
            }
          }
          if (!next || nextPos > to) break;
          pos = next.to + start;
          if (pos > from) {
            this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
            this.startSpan(pos, cls);
          }
        }
        if (hasChild) cursor.parent();
      } else if (cursor.firstChild()) {
        do {
          if (cursor.to <= from) continue;
          if (cursor.from >= to) break;
          this.highlightRange(cursor, from, to, inheritedClass, highlighters);
          this.startSpan(Math.min(to, cursor.to), cls);
        } while (cursor.nextSibling());
        cursor.parent();
      }
    }
  }]);
  return HighlightBuilder;
}();
/**
Match a syntax node's [highlight rules](#highlight.styleTags). If
there's a match, return its set of tags, and whether it is
opaque (uses a `!`) or applies to all child nodes (`/...`).
*/
function getStyleTags(node) {
  var rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context)) rule = rule.next;
  return rule || null;
}
var t = Tag.define;
var comment = t(),
  name = t(),
  typeName = t(name),
  propertyName = t(name),
  literal = t(),
  string = t(literal),
  number = t(literal),
  content = t(),
  heading = t(content),
  keyword = t(),
  operator = t(),
  punctuation = t(),
  bracket = t(punctuation),
  meta = t();
/**
The default set of highlighting [tags](#highlight.Tag).

This collection is heavily biased towards programming languages,
and necessarily incomplete. A full ontology of syntactic
constructs would fill a stack of books, and be impractical to
write themes for. So try to make do with this set. If all else
fails, [open an
issue](https://github.com/codemirror/codemirror.next) to propose a
new tag, or [define](#highlight.Tag^define) a local custom tag for
your use case.

Note that it is not obligatory to always attach the most specific
tag possible to an element—if your grammar can't easily
distinguish a certain type of element (such as a local variable),
it is okay to style it as its more general variant (a variable).

For tags that extend some parent tag, the documentation links to
the parent.
*/
var tags = {
  /**
  A comment.
  */
  comment: comment,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment),
  /**
  Any kind of identifier.
  */
  name: name,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name),
  /**
  A literal value.
  */
  literal: literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: number,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  "float": t(number),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword: keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  "null": t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator: operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation: punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta: meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  "function": Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier()
};
/**
This is a highlighter that adds stable, predictable classes to
tokens, for styling with external CSS.

The following tags are mapped to their name prefixed with `"tok-"`
(for example `"tok-comment"`):

* [`link`](#highlight.tags.link)
* [`heading`](#highlight.tags.heading)
* [`emphasis`](#highlight.tags.emphasis)
* [`strong`](#highlight.tags.strong)
* [`keyword`](#highlight.tags.keyword)
* [`atom`](#highlight.tags.atom)
* [`bool`](#highlight.tags.bool)
* [`url`](#highlight.tags.url)
* [`labelName`](#highlight.tags.labelName)
* [`inserted`](#highlight.tags.inserted)
* [`deleted`](#highlight.tags.deleted)
* [`literal`](#highlight.tags.literal)
* [`string`](#highlight.tags.string)
* [`number`](#highlight.tags.number)
* [`variableName`](#highlight.tags.variableName)
* [`typeName`](#highlight.tags.typeName)
* [`namespace`](#highlight.tags.namespace)
* [`className`](#highlight.tags.className)
* [`macroName`](#highlight.tags.macroName)
* [`propertyName`](#highlight.tags.propertyName)
* [`operator`](#highlight.tags.operator)
* [`comment`](#highlight.tags.comment)
* [`meta`](#highlight.tags.meta)
* [`punctuation`](#highlight.tags.punctuation)
* [`invalid`](#highlight.tags.invalid)

In addition, these mappings are provided:

* [`regexp`](#highlight.tags.regexp),
  [`escape`](#highlight.tags.escape), and
  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
  are mapped to `"tok-string2"`
* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
  to `"tok-variableName2"`
* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
  to `"tok-variableName tok-local"`
* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
  to `"tok-variableName tok-definition"`
* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
  to `"tok-propertyName tok-definition"`
*/
exports.tags = tags;
var classHighlighter = tagHighlighter([{
  tag: tags.link,
  "class": "tok-link"
}, {
  tag: tags.heading,
  "class": "tok-heading"
}, {
  tag: tags.emphasis,
  "class": "tok-emphasis"
}, {
  tag: tags.strong,
  "class": "tok-strong"
}, {
  tag: tags.keyword,
  "class": "tok-keyword"
}, {
  tag: tags.atom,
  "class": "tok-atom"
}, {
  tag: tags.bool,
  "class": "tok-bool"
}, {
  tag: tags.url,
  "class": "tok-url"
}, {
  tag: tags.labelName,
  "class": "tok-labelName"
}, {
  tag: tags.inserted,
  "class": "tok-inserted"
}, {
  tag: tags.deleted,
  "class": "tok-deleted"
}, {
  tag: tags.literal,
  "class": "tok-literal"
}, {
  tag: tags.string,
  "class": "tok-string"
}, {
  tag: tags.number,
  "class": "tok-number"
}, {
  tag: [tags.regexp, tags.escape, tags.special(tags.string)],
  "class": "tok-string2"
}, {
  tag: tags.variableName,
  "class": "tok-variableName"
}, {
  tag: tags.local(tags.variableName),
  "class": "tok-variableName tok-local"
}, {
  tag: tags.definition(tags.variableName),
  "class": "tok-variableName tok-definition"
}, {
  tag: tags.special(tags.variableName),
  "class": "tok-variableName2"
}, {
  tag: tags.definition(tags.propertyName),
  "class": "tok-propertyName tok-definition"
}, {
  tag: tags.typeName,
  "class": "tok-typeName"
}, {
  tag: tags.namespace,
  "class": "tok-namespace"
}, {
  tag: tags.className,
  "class": "tok-className"
}, {
  tag: tags.macroName,
  "class": "tok-macroName"
}, {
  tag: tags.propertyName,
  "class": "tok-propertyName"
}, {
  tag: tags.operator,
  "class": "tok-operator"
}, {
  tag: tags.comment,
  "class": "tok-comment"
}, {
  tag: tags.meta,
  "class": "tok-meta"
}, {
  tag: tags.invalid,
  "class": "tok-invalid"
}, {
  tag: tags.punctuation,
  "class": "tok-punctuation"
}]);
exports.classHighlighter = classHighlighter;

},{"@lezer/common":22}],24:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Stack = exports.LocalTokenGroup = exports.LRParser = exports.InputStream = exports.ExternalTokenizer = exports.ContextTracker = void 0;
var _common = require("@lezer/common");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/// A parse stack. These are used internally by the parser to track
/// parsing progress. They also provide some properties and methods
/// that external code such as a tokenizer can use to get information
/// about the parse state.
var Stack = /*#__PURE__*/function () {
  /// @internal
  function Stack(
  /// The parse that this stack is part of @internal
  p,
  /// Holds state, input pos, buffer index triplets for all but the
  /// top state @internal
  stack,
  /// The current parse state @internal
  state,
  // The position at which the next reduce should take place. This
  // can be less than `this.pos` when skipped expressions have been
  // added to the stack (which should be moved outside of the next
  // reduction)
  /// @internal
  reducePos,
  /// The input position up to which this stack has parsed.
  pos,
  /// The dynamic score of the stack, including dynamic precedence
  /// and error-recovery penalties
  /// @internal
  score,
  // The output buffer. Holds (type, start, end, size) quads
  // representing nodes created by the parser, where `size` is
  // amount of buffer array entries covered by this node.
  /// @internal
  buffer,
  // The base offset of the buffer. When stacks are split, the split
  // instance shared the buffer history with its parent up to
  // `bufferBase`, which is the absolute offset (including the
  // offset of previous splits) into the buffer at which this stack
  // starts writing.
  /// @internal
  bufferBase,
  /// @internal
  curContext) {
    var lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
    var
    // A parent stack from which this was split off, if any. This is
    // set up so that it always points to a stack that has some
    // additional buffer content, never to a stack with an equal
    // `bufferBase`.
    /// @internal
    parent = arguments.length > 10 ? arguments[10] : undefined;
    _classCallCheck(this, Stack);
    this.p = p;
    this.stack = stack;
    this.state = state;
    this.reducePos = reducePos;
    this.pos = pos;
    this.score = score;
    this.buffer = buffer;
    this.bufferBase = bufferBase;
    this.curContext = curContext;
    this.lookAhead = lookAhead;
    this.parent = parent;
  }
  /// @internal
  _createClass(Stack, [{
    key: "toString",
    value: function toString() {
      return "[".concat(this.stack.filter(function (_, i) {
        return i % 3 == 0;
      }).concat(this.state), "]@").concat(this.pos).concat(this.score ? "!" + this.score : "");
    }
    // Start an empty stack
    /// @internal
  }, {
    key: "context",
    get:
    /// The stack's current [context](#lr.ContextTracker) value, if
    /// any. Its type will depend on the context tracker's type
    /// parameter, or it will be `null` if there is no context
    /// tracker.
    function get() {
      return this.curContext ? this.curContext.context : null;
    }
    // Push a state onto the stack, tracking its start position as well
    // as the buffer base at that point.
    /// @internal
  }, {
    key: "pushState",
    value: function pushState(state, start) {
      this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
      this.state = state;
    }
    // Apply a reduce action
    /// @internal
  }, {
    key: "reduce",
    value: function reduce(action) {
      var _a;
      var depth = action >> 19 /* Action.ReduceDepthShift */,
        type = action & 65535 /* Action.ValueMask */;
      var parser = this.p.parser;
      var dPrec = parser.dynamicPrecedence(type);
      if (dPrec) this.score += dPrec;
      if (depth == 0) {
        this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
        // Zero-depth reductions are a special case—they add stuff to
        // the stack without popping anything off.
        if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);
        this.reduceContext(type, this.reducePos);
        return;
      }
      // Find the base index into `this.stack`, content after which will
      // be dropped. Note that with `StayFlag` reductions we need to
      // consume two extra frames (the dummy parent node for the skipped
      // expression and the state that we'll be staying in, which should
      // be moved to `this.state`).
      var base = this.stack.length - (depth - 1) * 3 - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
      var start = base ? this.stack[base - 2] : this.p.ranges[0].from,
        size = this.reducePos - start;
      // This is a kludge to try and detect overly deep left-associative
      // trees, which will not increase the parse stack depth and thus
      // won't be caught by the regular stack-depth limit check.
      if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
        if (start == this.p.lastBigReductionStart) {
          this.p.bigReductionCount++;
          this.p.lastBigReductionSize = size;
        } else if (this.p.lastBigReductionSize < size) {
          this.p.bigReductionCount = 1;
          this.p.lastBigReductionStart = start;
          this.p.lastBigReductionSize = size;
        }
      }
      var bufferBase = base ? this.stack[base - 1] : 0,
        count = this.bufferBase + this.buffer.length - bufferBase;
      // Store normal terms or `R -> R R` repeat reductions
      if (type < parser.minRepeatTerm || action & 131072 /* Action.RepeatFlag */) {
        var pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
        this.storeNode(type, start, pos, count + 4, true);
      }
      if (action & 262144 /* Action.StayFlag */) {
        this.state = this.stack[base];
      } else {
        var baseStateID = this.stack[base - 3];
        this.state = parser.getGoto(baseStateID, type, true);
      }
      while (this.stack.length > base) this.stack.pop();
      this.reduceContext(type, start);
    }
    // Shift a value into the buffer
    /// @internal
  }, {
    key: "storeNode",
    value: function storeNode(term, start, end) {
      var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
      var isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      if (term == 0 /* Term.Err */ && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
        // Try to omit/merge adjacent error nodes
        var cur = this,
          top = this.buffer.length;
        if (top == 0 && cur.parent) {
          top = cur.bufferBase - cur.parent.bufferBase;
          cur = cur.parent;
        }
        if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
          if (start == end) return;
          if (cur.buffer[top - 2] >= start) {
            cur.buffer[top - 2] = end;
            return;
          }
        }
      }
      if (!isReduce || this.pos == end) {
        // Simple case, just append
        this.buffer.push(term, start, end, size);
      } else {
        // There may be skipped nodes that have to be moved forward
        var index = this.buffer.length;
        if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) while (index > 0 && this.buffer[index - 2] > end) {
          // Move this record forward
          this.buffer[index] = this.buffer[index - 4];
          this.buffer[index + 1] = this.buffer[index - 3];
          this.buffer[index + 2] = this.buffer[index - 2];
          this.buffer[index + 3] = this.buffer[index - 1];
          index -= 4;
          if (size > 4) size -= 4;
        }
        this.buffer[index] = term;
        this.buffer[index + 1] = start;
        this.buffer[index + 2] = end;
        this.buffer[index + 3] = size;
      }
    }
    // Apply a shift action
    /// @internal
  }, {
    key: "shift",
    value: function shift(action, next, nextEnd) {
      var start = this.pos;
      if (action & 131072 /* Action.GotoFlag */) {
        this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
      } else if ((action & 262144 /* Action.StayFlag */) == 0) {
        // Regular shift
        var nextState = action,
          parser = this.p.parser;
        if (nextEnd > this.pos || next <= parser.maxNode) {
          this.pos = nextEnd;
          if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */)) this.reducePos = nextEnd;
        }
        this.pushState(nextState, start);
        this.shiftContext(next, start);
        if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
      } else {
        // Shift-and-stay, which means this is a skipped token
        this.pos = nextEnd;
        this.shiftContext(next, start);
        if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
      }
    }
    // Apply an action
    /// @internal
  }, {
    key: "apply",
    value: function apply(action, next, nextEnd) {
      if (action & 65536 /* Action.ReduceFlag */) this.reduce(action);else this.shift(action, next, nextEnd);
    }
    // Add a prebuilt (reused) node into the buffer.
    /// @internal
  }, {
    key: "useNode",
    value: function useNode(value, next) {
      var index = this.p.reused.length - 1;
      if (index < 0 || this.p.reused[index] != value) {
        this.p.reused.push(value);
        index++;
      }
      var start = this.pos;
      this.reducePos = this.pos = start + value.length;
      this.pushState(next, start);
      this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
      if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
    }
    // Split the stack. Due to the buffer sharing and the fact
    // that `this.stack` tends to stay quite shallow, this isn't very
    // expensive.
    /// @internal
  }, {
    key: "split",
    value: function split() {
      var parent = this;
      var off = parent.buffer.length;
      // Because the top of the buffer (after this.pos) may be mutated
      // to reorder reductions and skipped tokens, and shared buffers
      // should be immutable, this copies any outstanding skipped tokens
      // to the new buffer, and puts the base pointer before them.
      while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;
      var buffer = parent.buffer.slice(off),
        base = parent.bufferBase + off;
      // Make sure parent points to an actual parent with content, if there is such a parent.
      while (parent && base == parent.bufferBase) parent = parent.parent;
      return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
    }
    // Try to recover from an error by 'deleting' (ignoring) one token.
    /// @internal
  }, {
    key: "recoverByDelete",
    value: function recoverByDelete(next, nextEnd) {
      var isNode = next <= this.p.parser.maxNode;
      if (isNode) this.storeNode(next, this.pos, nextEnd, 4);
      this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
      this.pos = this.reducePos = nextEnd;
      this.score -= 190 /* Recover.Delete */;
    }
    /// Check if the given term would be able to be shifted (optionally
    /// after some reductions) on this stack. This can be useful for
    /// external tokenizers that want to make sure they only provide a
    /// given token when it applies.
  }, {
    key: "canShift",
    value: function canShift(term) {
      for (var sim = new SimulatedStack(this);;) {
        var action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
        if (action == 0) return false;
        if ((action & 65536 /* Action.ReduceFlag */) == 0) return true;
        sim.reduce(action);
      }
    }
    // Apply up to Recover.MaxNext recovery actions that conceptually
    // inserts some missing token or rule.
    /// @internal
  }, {
    key: "recoverByInsert",
    value: function recoverByInsert(next) {
      if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */) return [];
      var nextStates = this.p.parser.nextStates(this.state);
      if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
        var best = [];
        for (var i = 0, s; i < nextStates.length; i += 2) {
          if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);
        }
        if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */) {
          var _loop = function _loop() {
            var s = nextStates[_i + 1];
            if (!best.some(function (v, i) {
              return i & 1 && v == s;
            })) best.push(nextStates[_i], s);
          };
          for (var _i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && _i < nextStates.length; _i += 2) {
            _loop();
          }
        }
        nextStates = best;
      }
      var result = [];
      for (var _i2 = 0; _i2 < nextStates.length && result.length < 4 /* Recover.MaxNext */; _i2 += 2) {
        var _s = nextStates[_i2 + 1];
        if (_s == this.state) continue;
        var stack = this.split();
        stack.pushState(_s, this.pos);
        stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
        stack.shiftContext(nextStates[_i2], this.pos);
        stack.score -= 200 /* Recover.Insert */;
        result.push(stack);
      }
      return result;
    }
    // Force a reduce, if possible. Return false if that can't
    // be done.
    /// @internal
  }, {
    key: "forceReduce",
    value: function forceReduce() {
      var reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
      if ((reduce & 65536 /* Action.ReduceFlag */) == 0) return false;
      var parser = this.p.parser;
      if (!parser.validAction(this.state, reduce)) {
        var depth = reduce >> 19 /* Action.ReduceDepthShift */,
          term = reduce & 65535 /* Action.ValueMask */;
        var target = this.stack.length - depth * 3;
        if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;
        this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);
        this.score -= 100 /* Recover.Reduce */;
      }

      this.reducePos = this.pos;
      this.reduce(reduce);
      return true;
    }
    /// @internal
  }, {
    key: "forceAll",
    value: function forceAll() {
      while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
        if (!this.forceReduce()) {
          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
          break;
        }
      }
      return this;
    }
    /// Check whether this state has no further actions (assumed to be a direct descendant of the
    /// top state, since any other states must be able to continue
    /// somehow). @internal
  }, {
    key: "deadEnd",
    get: function get() {
      if (this.stack.length != 3) return false;
      var parser = this.p.parser;
      return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ && !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
    }
    /// Restart the stack (put it back in its start state). Only safe
    /// when this.stack.length == 3 (state is directly below the top
    /// state). @internal
  }, {
    key: "restart",
    value: function restart() {
      this.state = this.stack[0];
      this.stack.length = 0;
    }
    /// @internal
  }, {
    key: "sameState",
    value: function sameState(other) {
      if (this.state != other.state || this.stack.length != other.stack.length) return false;
      for (var i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;
      return true;
    }
    /// Get the parser used by this stack.
  }, {
    key: "parser",
    get: function get() {
      return this.p.parser;
    }
    /// Test whether a given dialect (by numeric ID, as exported from
    /// the terms file) is enabled.
  }, {
    key: "dialectEnabled",
    value: function dialectEnabled(dialectID) {
      return this.p.parser.dialect.flags[dialectID];
    }
  }, {
    key: "shiftContext",
    value: function shiftContext(term, start) {
      if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
  }, {
    key: "reduceContext",
    value: function reduceContext(term, start) {
      if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    /// @internal
  }, {
    key: "emitContext",
    value: function emitContext() {
      var last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
    }
    /// @internal
  }, {
    key: "emitLookAhead",
    value: function emitLookAhead() {
      var last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
    }
  }, {
    key: "updateContext",
    value: function updateContext(context) {
      if (context != this.curContext.context) {
        var newCx = new StackContext(this.curContext.tracker, context);
        if (newCx.hash != this.curContext.hash) this.emitContext();
        this.curContext = newCx;
      }
    }
    /// @internal
  }, {
    key: "setLookAhead",
    value: function setLookAhead(lookAhead) {
      if (lookAhead > this.lookAhead) {
        this.emitLookAhead();
        this.lookAhead = lookAhead;
      }
    }
    /// @internal
  }, {
    key: "close",
    value: function close() {
      if (this.curContext && this.curContext.tracker.strict) this.emitContext();
      if (this.lookAhead > 0) this.emitLookAhead();
    }
  }], [{
    key: "start",
    value: function start(p, state) {
      var pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var cx = p.parser.context;
      return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
    }
  }]);
  return Stack;
}();
exports.Stack = Stack;
var StackContext = /*#__PURE__*/_createClass(function StackContext(tracker, context) {
  _classCallCheck(this, StackContext);
  this.tracker = tracker;
  this.context = context;
  this.hash = tracker.strict ? tracker.hash(context) : 0;
});
var Recover;
(function (Recover) {
  Recover[Recover["Insert"] = 200] = "Insert";
  Recover[Recover["Delete"] = 190] = "Delete";
  Recover[Recover["Reduce"] = 100] = "Reduce";
  Recover[Recover["MaxNext"] = 4] = "MaxNext";
  Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
  Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
  Recover[Recover["MinBigReduction"] = 2000] = "MinBigReduction";
})(Recover || (Recover = {}));
// Used to cheaply run some reductions to scan ahead without mutating
// an entire stack
var SimulatedStack = /*#__PURE__*/function () {
  function SimulatedStack(start) {
    _classCallCheck(this, SimulatedStack);
    this.start = start;
    this.state = start.state;
    this.stack = start.stack;
    this.base = this.stack.length;
  }
  _createClass(SimulatedStack, [{
    key: "reduce",
    value: function reduce(action) {
      var term = action & 65535 /* Action.ValueMask */,
        depth = action >> 19 /* Action.ReduceDepthShift */;
      if (depth == 0) {
        if (this.stack == this.start.stack) this.stack = this.stack.slice();
        this.stack.push(this.state, 0, 0);
        this.base += 3;
      } else {
        this.base -= (depth - 1) * 3;
      }
      var _goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
      this.state = _goto;
    }
  }]);
  return SimulatedStack;
}(); // This is given to `Tree.build` to build a buffer, and encapsulates
// the parent-stack-walking necessary to read the nodes.
var StackBufferCursor = /*#__PURE__*/function () {
  function StackBufferCursor(stack, pos, index) {
    _classCallCheck(this, StackBufferCursor);
    this.stack = stack;
    this.pos = pos;
    this.index = index;
    this.buffer = stack.buffer;
    if (this.index == 0) this.maybeNext();
  }
  _createClass(StackBufferCursor, [{
    key: "maybeNext",
    value: function maybeNext() {
      var next = this.stack.parent;
      if (next != null) {
        this.index = this.stack.bufferBase - next.bufferBase;
        this.stack = next;
        this.buffer = next.buffer;
      }
    }
  }, {
    key: "id",
    get: function get() {
      return this.buffer[this.index - 4];
    }
  }, {
    key: "start",
    get: function get() {
      return this.buffer[this.index - 3];
    }
  }, {
    key: "end",
    get: function get() {
      return this.buffer[this.index - 2];
    }
  }, {
    key: "size",
    get: function get() {
      return this.buffer[this.index - 1];
    }
  }, {
    key: "next",
    value: function next() {
      this.index -= 4;
      this.pos -= 4;
      if (this.index == 0) this.maybeNext();
    }
  }, {
    key: "fork",
    value: function fork() {
      return new StackBufferCursor(this.stack, this.pos, this.index);
    }
  }], [{
    key: "create",
    value: function create(stack) {
      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;
      return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
    }
  }]);
  return StackBufferCursor;
}(); // See lezer-generator/src/encode.ts for comments about the encoding
// used here
function decodeArray(input) {
  var Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;
  if (typeof input != "string") return input;
  var array = null;
  for (var pos = 0, out = 0; pos < input.length;) {
    var value = 0;
    for (;;) {
      var next = input.charCodeAt(pos++),
        stop = false;
      if (next == 126 /* Encode.BigValCode */) {
        value = 65535 /* Encode.BigVal */;
        break;
      }
      if (next >= 92 /* Encode.Gap2 */) next--;
      if (next >= 34 /* Encode.Gap1 */) next--;
      var digit = next - 32 /* Encode.Start */;
      if (digit >= 46 /* Encode.Base */) {
        digit -= 46 /* Encode.Base */;
        stop = true;
      }
      value += digit;
      if (stop) break;
      value *= 46 /* Encode.Base */;
    }

    if (array) array[out++] = value;else array = new Type(value);
  }
  return array;
}
var CachedToken = /*#__PURE__*/_createClass(function CachedToken() {
  _classCallCheck(this, CachedToken);
  this.start = -1;
  this.value = -1;
  this.end = -1;
  this.extended = -1;
  this.lookAhead = 0;
  this.mask = 0;
  this.context = 0;
});
var nullToken = new CachedToken();
/// [Tokenizers](#lr.ExternalTokenizer) interact with the input
/// through this interface. It presents the input as a stream of
/// characters, tracking lookahead and hiding the complexity of
/// [ranges](#common.Parser.parse^ranges) from tokenizer code.
var InputStream = /*#__PURE__*/function () {
  /// @internal
  function InputStream(
  /// @internal
  input,
  /// @internal
  ranges) {
    _classCallCheck(this, InputStream);
    this.input = input;
    this.ranges = ranges;
    /// @internal
    this.chunk = "";
    /// @internal
    this.chunkOff = 0;
    /// Backup chunk
    this.chunk2 = "";
    this.chunk2Pos = 0;
    /// The character code of the next code unit in the input, or -1
    /// when the stream is at the end of the input.
    this.next = -1;
    /// @internal
    this.token = nullToken;
    this.rangeIndex = 0;
    this.pos = this.chunkPos = ranges[0].from;
    this.range = ranges[0];
    this.end = ranges[ranges.length - 1].to;
    this.readNext();
  }
  /// @internal
  _createClass(InputStream, [{
    key: "resolveOffset",
    value: function resolveOffset(offset, assoc) {
      var range = this.range,
        index = this.rangeIndex;
      var pos = this.pos + offset;
      while (pos < range.from) {
        if (!index) return null;
        var next = this.ranges[--index];
        pos -= range.from - next.to;
        range = next;
      }
      while (assoc < 0 ? pos > range.to : pos >= range.to) {
        if (index == this.ranges.length - 1) return null;
        var _next = this.ranges[++index];
        pos += _next.from - range.to;
        range = _next;
      }
      return pos;
    }
    /// @internal
  }, {
    key: "clipPos",
    value: function clipPos(pos) {
      if (pos >= this.range.from && pos < this.range.to) return pos;
      var _iterator = _createForOfIteratorHelper(this.ranges),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var range = _step.value;
          if (range.to > pos) return Math.max(pos, range.from);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return this.end;
    }
    /// Look at a code unit near the stream position. `.peek(0)` equals
    /// `.next`, `.peek(-1)` gives you the previous character, and so
    /// on.
    ///
    /// Note that looking around during tokenizing creates dependencies
    /// on potentially far-away content, which may reduce the
    /// effectiveness incremental parsing—when looking forward—or even
    /// cause invalid reparses when looking backward more than 25 code
    /// units, since the library does not track lookbehind.
  }, {
    key: "peek",
    value: function peek(offset) {
      var idx = this.chunkOff + offset,
        pos,
        result;
      if (idx >= 0 && idx < this.chunk.length) {
        pos = this.pos + offset;
        result = this.chunk.charCodeAt(idx);
      } else {
        var resolved = this.resolveOffset(offset, 1);
        if (resolved == null) return -1;
        pos = resolved;
        if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
          result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
        } else {
          var i = this.rangeIndex,
            range = this.range;
          while (range.to <= pos) range = this.ranges[++i];
          this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
          if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);
          result = this.chunk2.charCodeAt(0);
        }
      }
      if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;
      return result;
    }
    /// Accept a token. By default, the end of the token is set to the
    /// current stream position, but you can pass an offset (relative to
    /// the stream position) to change that.
  }, {
    key: "acceptToken",
    value: function acceptToken(token) {
      var endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
      if (end == null || end < this.token.start) throw new RangeError("Token end out of bounds");
      this.token.value = token;
      this.token.end = end;
    }
  }, {
    key: "getChunk",
    value: function getChunk() {
      if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
        var chunk = this.chunk,
          chunkPos = this.chunkPos;
        this.chunk = this.chunk2;
        this.chunkPos = this.chunk2Pos;
        this.chunk2 = chunk;
        this.chunk2Pos = chunkPos;
        this.chunkOff = this.pos - this.chunkPos;
      } else {
        this.chunk2 = this.chunk;
        this.chunk2Pos = this.chunkPos;
        var nextChunk = this.input.chunk(this.pos);
        var end = this.pos + nextChunk.length;
        this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
        this.chunkPos = this.pos;
        this.chunkOff = 0;
      }
    }
  }, {
    key: "readNext",
    value: function readNext() {
      if (this.chunkOff >= this.chunk.length) {
        this.getChunk();
        if (this.chunkOff == this.chunk.length) return this.next = -1;
      }
      return this.next = this.chunk.charCodeAt(this.chunkOff);
    }
    /// Move the stream forward N (defaults to 1) code units. Returns
    /// the new value of [`next`](#lr.InputStream.next).
  }, {
    key: "advance",
    value: function advance() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.chunkOff += n;
      while (this.pos + n >= this.range.to) {
        if (this.rangeIndex == this.ranges.length - 1) return this.setDone();
        n -= this.range.to - this.pos;
        this.range = this.ranges[++this.rangeIndex];
        this.pos = this.range.from;
      }
      this.pos += n;
      if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;
      return this.readNext();
    }
  }, {
    key: "setDone",
    value: function setDone() {
      this.pos = this.chunkPos = this.end;
      this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
      this.chunk = "";
      return this.next = -1;
    }
    /// @internal
  }, {
    key: "reset",
    value: function reset(pos, token) {
      if (token) {
        this.token = token;
        token.start = pos;
        token.lookAhead = pos + 1;
        token.value = token.extended = -1;
      } else {
        this.token = nullToken;
      }
      if (this.pos != pos) {
        this.pos = pos;
        if (pos == this.end) {
          this.setDone();
          return this;
        }
        while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];
        while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];
        if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
          this.chunkOff = pos - this.chunkPos;
        } else {
          this.chunk = "";
          this.chunkOff = 0;
        }
        this.readNext();
      }
      return this;
    }
    /// @internal
  }, {
    key: "read",
    value: function read(from, to) {
      if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
      if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
      if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);
      var result = "";
      var _iterator2 = _createForOfIteratorHelper(this.ranges),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var r = _step2.value;
          if (r.from >= to) break;
          if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return result;
    }
  }]);
  return InputStream;
}(); /// @internal
exports.InputStream = InputStream;
var TokenGroup = /*#__PURE__*/function () {
  function TokenGroup(data, id) {
    _classCallCheck(this, TokenGroup);
    this.data = data;
    this.id = id;
  }
  _createClass(TokenGroup, [{
    key: "token",
    value: function token(input, stack) {
      var parser = stack.p.parser;
      readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
    }
  }]);
  return TokenGroup;
}();
TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
/// @hide
var LocalTokenGroup = /*#__PURE__*/function () {
  function LocalTokenGroup(data, precTable, elseToken) {
    _classCallCheck(this, LocalTokenGroup);
    this.precTable = precTable;
    this.elseToken = elseToken;
    this.data = typeof data == "string" ? decodeArray(data) : data;
  }
  _createClass(LocalTokenGroup, [{
    key: "token",
    value: function token(input, stack) {
      var start = input.pos,
        skipped = 0;
      for (;;) {
        readToken(this.data, input, stack, 0, this.data, this.precTable);
        if (input.token.value > -1) break;
        if (this.elseToken == null) return;
        if (input.next < 0) break;
        input.advance();
        input.reset(input.pos, input.token);
        skipped++;
      }
      if (skipped) {
        input.reset(start, input.token);
        input.acceptToken(this.elseToken, skipped);
      }
    }
  }]);
  return LocalTokenGroup;
}();
exports.LocalTokenGroup = LocalTokenGroup;
LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
/// `@external tokens` declarations in the grammar should resolve to
/// an instance of this class.
var ExternalTokenizer = /*#__PURE__*/_createClass(
/// Create a tokenizer. The first argument is the function that,
/// given an input stream, scans for the types of tokens it
/// recognizes at the stream's position, and calls
/// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
/// one.
function ExternalTokenizer(
/// @internal
token) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  _classCallCheck(this, ExternalTokenizer);
  this.token = token;
  this.contextual = !!options.contextual;
  this.fallback = !!options.fallback;
  this.extend = !!options.extend;
}); // Tokenizer data is stored a big uint16 array containing, for each
// state:
//
//  - A group bitmask, indicating what token groups are reachable from
//    this state, so that paths that can only lead to tokens not in
//    any of the current groups can be cut off early.
//
//  - The position of the end of the state's sequence of accepting
//    tokens
//
//  - The number of outgoing edges for the state
//
//  - The accepting tokens, as (token id, group mask) pairs
//
//  - The outgoing edges, as (start character, end character, state
//    index) triples, with end character being exclusive
//
// This function interprets that data, running through a stream as
// long as new states with the a matching group mask can be reached,
// and updating `input.token` when it matches a token.
exports.ExternalTokenizer = ExternalTokenizer;
function readToken(data, input, stack, group, precTable, precOffset) {
  var state = 0,
    groupMask = 1 << group,
    dialect = stack.p.parser.dialect;
  scan: for (;;) {
    if ((groupMask & data[state]) == 0) break;
    var accEnd = data[state + 1];
    // Check whether this state can lead to a token in the current group
    // Accept tokens in this state, possibly overwriting
    // lower-precedence / shorter tokens
    for (var i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {
      var term = data[i];
      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
        input.acceptToken(term);
        break;
      }
    }
    var next = input.next,
      low = 0,
      high = data[state + 2];
    // Special case for EOF
    if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
      state = data[accEnd + high * 3 - 1];
      continue scan;
    }
    // Do a binary search on the state's edges
    for (; low < high;) {
      var mid = low + high >> 1;
      var index = accEnd + mid + (mid << 1);
      var from = data[index],
        to = data[index + 1] || 0x10000;
      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {
        state = data[index + 2];
        input.advance();
        continue scan;
      }
    }
    break;
  }
}
function findOffset(data, start, term) {
  for (var i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++) if (next == term) return i - start;
  return -1;
}
function overrides(token, prev, tableData, tableOffset) {
  var iPrev = findOffset(tableData, tableOffset, prev);
  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
}

// Environment variable used to control console output
var verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
var stackIDs = null;
var Safety;
(function (Safety) {
  Safety[Safety["Margin"] = 25] = "Margin";
})(Safety || (Safety = {}));
function cutAt(tree, pos, side) {
  var cursor = tree.cursor(_common.IterMode.IncludeAnonymous);
  cursor.moveTo(pos);
  for (;;) {
    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {
      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));
      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;
      if (!cursor.parent()) return side < 0 ? 0 : tree.length;
    }
  }
}
var FragmentCursor = /*#__PURE__*/function () {
  function FragmentCursor(fragments, nodeSet) {
    _classCallCheck(this, FragmentCursor);
    this.fragments = fragments;
    this.nodeSet = nodeSet;
    this.i = 0;
    this.fragment = null;
    this.safeFrom = -1;
    this.safeTo = -1;
    this.trees = [];
    this.start = [];
    this.index = [];
    this.nextFragment();
  }
  _createClass(FragmentCursor, [{
    key: "nextFragment",
    value: function nextFragment() {
      var fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
      if (fr) {
        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
        while (this.trees.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
        }
        this.trees.push(fr.tree);
        this.start.push(-fr.offset);
        this.index.push(0);
        this.nextStart = this.safeFrom;
      } else {
        this.nextStart = 1e9;
      }
    }
    // `pos` must be >= any previously given `pos` for this cursor
  }, {
    key: "nodeAt",
    value: function nodeAt(pos) {
      if (pos < this.nextStart) return null;
      while (this.fragment && this.safeTo <= pos) this.nextFragment();
      if (!this.fragment) return null;
      for (;;) {
        var last = this.trees.length - 1;
        if (last < 0) {
          // End of tree
          this.nextFragment();
          return null;
        }
        var top = this.trees[last],
          index = this.index[last];
        if (index == top.children.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
          continue;
        }
        var next = top.children[index];
        var start = this.start[last] + top.positions[index];
        if (start > pos) {
          this.nextStart = start;
          return null;
        }
        if (next instanceof _common.Tree) {
          if (start == pos) {
            if (start < this.safeFrom) return null;
            var end = start + next.length;
            if (end <= this.safeTo) {
              var lookAhead = next.prop(_common.NodeProp.lookAhead);
              if (!lookAhead || end + lookAhead < this.fragment.to) return next;
            }
          }
          this.index[last]++;
          if (start + next.length >= Math.max(this.safeFrom, pos)) {
            // Enter this node
            this.trees.push(next);
            this.start.push(start);
            this.index.push(0);
          }
        } else {
          this.index[last]++;
          this.nextStart = start + next.length;
        }
      }
    }
  }]);
  return FragmentCursor;
}();
var TokenCache = /*#__PURE__*/function () {
  function TokenCache(parser, stream) {
    _classCallCheck(this, TokenCache);
    this.stream = stream;
    this.tokens = [];
    this.mainToken = null;
    this.actions = [];
    this.tokens = parser.tokenizers.map(function (_) {
      return new CachedToken();
    });
  }
  _createClass(TokenCache, [{
    key: "getActions",
    value: function getActions(stack) {
      var actionIndex = 0;
      var main = null;
      var parser = stack.p.parser,
        tokenizers = parser.tokenizers;
      var mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
      var context = stack.curContext ? stack.curContext.hash : 0;
      var lookAhead = 0;
      for (var i = 0; i < tokenizers.length; i++) {
        if ((1 << i & mask) == 0) continue;
        var tokenizer = tokenizers[i],
          token = this.tokens[i];
        if (main && !tokenizer.fallback) continue;
        if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
          this.updateCachedToken(token, tokenizer, stack);
          token.mask = mask;
          token.context = context;
        }
        if (token.lookAhead > token.end + 25 /* Safety.Margin */) lookAhead = Math.max(token.lookAhead, lookAhead);
        if (token.value != 0 /* Term.Err */) {
          var startIndex = actionIndex;
          if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
          actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
          if (!tokenizer.extend) {
            main = token;
            if (actionIndex > startIndex) break;
          }
        }
      }
      while (this.actions.length > actionIndex) this.actions.pop();
      if (lookAhead) stack.setLookAhead(lookAhead);
      if (!main && stack.pos == this.stream.end) {
        main = new CachedToken();
        main.value = stack.p.parser.eofTerm;
        main.start = main.end = stack.pos;
        actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
      }
      this.mainToken = main;
      return this.actions;
    }
  }, {
    key: "getMainToken",
    value: function getMainToken(stack) {
      if (this.mainToken) return this.mainToken;
      var main = new CachedToken(),
        pos = stack.pos,
        p = stack.p;
      main.start = pos;
      main.end = Math.min(pos + 1, p.stream.end);
      main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
      return main;
    }
  }, {
    key: "updateCachedToken",
    value: function updateCachedToken(token, tokenizer, stack) {
      var start = this.stream.clipPos(stack.pos);
      tokenizer.token(this.stream.reset(start, token), stack);
      if (token.value > -1) {
        var parser = stack.p.parser;
        for (var i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {
          var result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
            if ((result & 1) == 0 /* Specialize.Specialize */) token.value = result >> 1;else token.extended = result >> 1;
            break;
          }
        }
      } else {
        token.value = 0 /* Term.Err */;
        token.end = this.stream.clipPos(start + 1);
      }
    }
  }, {
    key: "putAction",
    value: function putAction(action, token, end, index) {
      // Don't add duplicate actions
      for (var i = 0; i < index; i += 3) if (this.actions[i] == action) return index;
      this.actions[index++] = action;
      this.actions[index++] = token;
      this.actions[index++] = end;
      return index;
    }
  }, {
    key: "addActions",
    value: function addActions(stack, token, end, index) {
      var state = stack.state,
        parser = stack.p.parser,
        data = parser.data;
      for (var set = 0; set < 2; set++) {
        for (var i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
          if (data[i] == 65535 /* Seq.End */) {
            if (data[i + 1] == 1 /* Seq.Next */) {
              i = pair(data, i + 2);
            } else {
              if (index == 0 && data[i + 1] == 2 /* Seq.Other */) index = this.putAction(pair(data, i + 2), token, end, index);
              break;
            }
          }
          if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);
        }
      }
      return index;
    }
  }]);
  return TokenCache;
}();
var Rec;
(function (Rec) {
  Rec[Rec["Distance"] = 5] = "Distance";
  Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
  // When two stacks have been running independently long enough to
  // add this many elements to their buffers, prune one.
  Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
  Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
  // Once a stack reaches this depth (in .stack.length) force-reduce
  // it back to CutTo to avoid creating trees that overflow the stack
  // on recursive traversal.
  Rec[Rec["CutDepth"] = 15000] = "CutDepth";
  Rec[Rec["CutTo"] = 9000] = "CutTo";
  Rec[Rec["MaxLeftAssociativeReductionCount"] = 300] = "MaxLeftAssociativeReductionCount";
  // The maximum number of non-recovering stacks to explore (to avoid
  // getting bogged down with exponentially multiplying stacks in
  // ambiguous content)
  Rec[Rec["MaxStackCount"] = 12] = "MaxStackCount";
})(Rec || (Rec = {}));
var Parse = /*#__PURE__*/function () {
  function Parse(parser, input, fragments, ranges) {
    _classCallCheck(this, Parse);
    this.parser = parser;
    this.input = input;
    this.ranges = ranges;
    this.recovering = 0;
    this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
    this.minStackPos = 0;
    this.reused = [];
    this.stoppedAt = null;
    this.lastBigReductionStart = -1;
    this.lastBigReductionSize = 0;
    this.bigReductionCount = 0;
    this.stream = new InputStream(input, ranges);
    this.tokens = new TokenCache(parser, this.stream);
    this.topTerm = parser.top[1];
    var from = ranges[0].from;
    this.stacks = [Stack.start(this, parser.top[0], from)];
    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;
  }
  _createClass(Parse, [{
    key: "parsedPos",
    get: function get() {
      return this.minStackPos;
    }
    // Move the parser forward. This will process all parse stacks at
    // `this.pos` and try to advance them to a further position. If no
    // stack for such a position is found, it'll start error-recovery.
    //
    // When the parse is finished, this will return a syntax tree. When
    // not, it returns `null`.
  }, {
    key: "advance",
    value: function advance() {
      var stacks = this.stacks,
        pos = this.minStackPos;
      // This will hold stacks beyond `pos`.
      var newStacks = this.stacks = [];
      var stopped, stoppedTokens;
      // If a large amount of reductions happened with the same start
      // position, force the stack out of that production in order to
      // avoid creating a tree too deep to recurse through.
      // (This is an ugly kludge, because unfortunately there is no
      // straightforward, cheap way to check for this happening, due to
      // the history of reductions only being available in an
      // expensive-to-access format in the stack buffers.)
      if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
        var _stacks = _slicedToArray(stacks, 1),
          s = _stacks[0];
        while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {}
        this.bigReductionCount = this.lastBigReductionSize = 0;
      }
      // Keep advancing any stacks at `pos` until they either move
      // forward or can't be advanced. Gather stacks that can't be
      // advanced further in `stopped`.
      for (var i = 0; i < stacks.length; i++) {
        var stack = stacks[i];
        for (;;) {
          this.tokens.mainToken = null;
          if (stack.pos > pos) {
            newStacks.push(stack);
          } else if (this.advanceStack(stack, newStacks, stacks)) {
            continue;
          } else {
            if (!stopped) {
              stopped = [];
              stoppedTokens = [];
            }
            stopped.push(stack);
            var tok = this.tokens.getMainToken(stack);
            stoppedTokens.push(tok.value, tok.end);
          }
          break;
        }
      }
      if (!newStacks.length) {
        var finished = stopped && findFinished(stopped);
        if (finished) return this.stackToTree(finished);
        if (this.parser.strict) {
          if (verbose && stopped) console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
          throw new SyntaxError("No parse at " + pos);
        }
        if (!this.recovering) this.recovering = 5 /* Rec.Distance */;
      }

      if (this.recovering && stopped) {
        var _finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
        if (_finished) return this.stackToTree(_finished.forceAll());
      }
      if (this.recovering) {
        var maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
        if (newStacks.length > maxRemaining) {
          newStacks.sort(function (a, b) {
            return b.score - a.score;
          });
          while (newStacks.length > maxRemaining) newStacks.pop();
        }
        if (newStacks.some(function (s) {
          return s.reducePos > pos;
        })) this.recovering--;
      } else if (newStacks.length > 1) {
        // Prune stacks that are in the same state, or that have been
        // running without splitting for a while, to avoid getting stuck
        // with multiple successful stacks running endlessly on.
        outer: for (var _i3 = 0; _i3 < newStacks.length - 1; _i3++) {
          var _stack = newStacks[_i3];
          for (var j = _i3 + 1; j < newStacks.length; j++) {
            var other = newStacks[j];
            if (_stack.sameState(other) || _stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
              if ((_stack.score - other.score || _stack.buffer.length - other.buffer.length) > 0) {
                newStacks.splice(j--, 1);
              } else {
                newStacks.splice(_i3--, 1);
                continue outer;
              }
            }
          }
        }
        if (newStacks.length > 12 /* Rec.MaxStackCount */) newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
      }

      this.minStackPos = newStacks[0].pos;
      for (var _i4 = 1; _i4 < newStacks.length; _i4++) if (newStacks[_i4].pos < this.minStackPos) this.minStackPos = newStacks[_i4].pos;
      return null;
    }
  }, {
    key: "stopAt",
    value: function stopAt(pos) {
      if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError("Can't move stoppedAt forward");
      this.stoppedAt = pos;
    }
    // Returns an updated version of the given stack, or null if the
    // stack can't advance normally. When `split` and `stacks` are
    // given, stacks split off by ambiguous operations will be pushed to
    // `split`, or added to `stacks` if they move `pos` forward.
  }, {
    key: "advanceStack",
    value: function advanceStack(stack, stacks, split) {
      var start = stack.pos,
        parser = this.parser;
      var base = verbose ? this.stackID(stack) + " -> " : "";
      if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;
      if (this.fragments) {
        var strictCx = stack.curContext && stack.curContext.tracker.strict,
          cxHash = strictCx ? stack.curContext.hash : 0;
        for (var cached = this.fragments.nodeAt(start); cached;) {
          var match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
          if (match > -1 && cached.length && (!strictCx || (cached.prop(_common.NodeProp.contextHash) || 0) == cxHash)) {
            stack.useNode(cached, match);
            if (verbose) console.log(base + this.stackID(stack) + " (via reuse of ".concat(parser.getName(cached.type.id), ")"));
            return true;
          }
          if (!(cached instanceof _common.Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;
          var inner = cached.children[0];
          if (inner instanceof _common.Tree && cached.positions[0] == 0) cached = inner;else break;
        }
      }
      var defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
      if (defaultReduce > 0) {
        stack.reduce(defaultReduce);
        if (verbose) console.log(base + this.stackID(stack) + " (via always-reduce ".concat(parser.getName(defaultReduce & 65535 /* Action.ValueMask */), ")"));
        return true;
      }
      if (stack.stack.length >= 15000 /* Rec.CutDepth */) {
        while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) {}
      }
      var actions = this.tokens.getActions(stack);
      for (var i = 0; i < actions.length;) {
        var action = actions[i++],
          term = actions[i++],
          end = actions[i++];
        var last = i == actions.length || !split;
        var localStack = last ? stack : stack.split();
        localStack.apply(action, term, end);
        if (verbose) console.log(base + this.stackID(localStack) + " (via ".concat((action & 65536 /* Action.ReduceFlag */) == 0 ? "shift" : "reduce of ".concat(parser.getName(action & 65535 /* Action.ValueMask */)), " for ").concat(parser.getName(term), " @ ").concat(start).concat(localStack == stack ? "" : ", split", ")"));
        if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);
      }
      return false;
    }
    // Advance a given stack forward as far as it will go. Returns the
    // (possibly updated) stack if it got stuck, or null if it moved
    // forward and was given to `pushStackDedup`.
  }, {
    key: "advanceFully",
    value: function advanceFully(stack, newStacks) {
      var pos = stack.pos;
      for (;;) {
        if (!this.advanceStack(stack, null, null)) return false;
        if (stack.pos > pos) {
          pushStackDedup(stack, newStacks);
          return true;
        }
      }
    }
  }, {
    key: "runRecovery",
    value: function runRecovery(stacks, tokens, newStacks) {
      var finished = null,
        restarted = false;
      for (var i = 0; i < stacks.length; i++) {
        var stack = stacks[i],
          token = tokens[i << 1],
          tokenEnd = tokens[(i << 1) + 1];
        var base = verbose ? this.stackID(stack) + " -> " : "";
        if (stack.deadEnd) {
          if (restarted) continue;
          restarted = true;
          stack.restart();
          if (verbose) console.log(base + this.stackID(stack) + " (restarted)");
          var done = this.advanceFully(stack, newStacks);
          if (done) continue;
        }
        var force = stack.split(),
          forceBase = base;
        for (var j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
          if (verbose) console.log(forceBase + this.stackID(force) + " (via force-reduce)");
          var _done = this.advanceFully(force, newStacks);
          if (_done) break;
          if (verbose) forceBase = this.stackID(force) + " -> ";
        }
        var _iterator3 = _createForOfIteratorHelper(stack.recoverByInsert(token)),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var insert = _step3.value;
            if (verbose) console.log(base + this.stackID(insert) + " (via recover-insert)");
            this.advanceFully(insert, newStacks);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        if (this.stream.end > stack.pos) {
          if (tokenEnd == stack.pos) {
            tokenEnd++;
            token = 0 /* Term.Err */;
          }

          stack.recoverByDelete(token, tokenEnd);
          if (verbose) console.log(base + this.stackID(stack) + " (via recover-delete ".concat(this.parser.getName(token), ")"));
          pushStackDedup(stack, newStacks);
        } else if (!finished || finished.score < stack.score) {
          finished = stack;
        }
      }
      return finished;
    }
    // Convert the stack's buffer to a syntax tree.
  }, {
    key: "stackToTree",
    value: function stackToTree(stack) {
      stack.close();
      return _common.Tree.build({
        buffer: StackBufferCursor.create(stack),
        nodeSet: this.parser.nodeSet,
        topID: this.topTerm,
        maxBufferLength: this.parser.bufferLength,
        reused: this.reused,
        start: this.ranges[0].from,
        length: stack.pos - this.ranges[0].from,
        minRepeatType: this.parser.minRepeatTerm
      });
    }
  }, {
    key: "stackID",
    value: function stackID(stack) {
      var id = (stackIDs || (stackIDs = new WeakMap())).get(stack);
      if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
      return id + stack;
    }
  }]);
  return Parse;
}();
function pushStackDedup(stack, newStacks) {
  for (var i = 0; i < newStacks.length; i++) {
    var other = newStacks[i];
    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i].score < stack.score) newStacks[i] = stack;
      return;
    }
  }
  newStacks.push(stack);
}
var Dialect = /*#__PURE__*/function () {
  function Dialect(source, flags, disabled) {
    _classCallCheck(this, Dialect);
    this.source = source;
    this.flags = flags;
    this.disabled = disabled;
  }
  _createClass(Dialect, [{
    key: "allows",
    value: function allows(term) {
      return !this.disabled || this.disabled[term] == 0;
    }
  }]);
  return Dialect;
}();
var id = function id(x) {
  return x;
};
/// Context trackers are used to track stateful context (such as
/// indentation in the Python grammar, or parent elements in the XML
/// grammar) needed by external tokenizers. You declare them in a
/// grammar file as `@context exportName from "module"`.
///
/// Context values should be immutable, and can be updated (replaced)
/// on shift or reduce actions.
///
/// The export used in a `@context` declaration should be of this
/// type.
var ContextTracker = /*#__PURE__*/_createClass(
/// Define a context tracker.
function ContextTracker(spec) {
  _classCallCheck(this, ContextTracker);
  this.start = spec.start;
  this.shift = spec.shift || id;
  this.reduce = spec.reduce || id;
  this.reuse = spec.reuse || id;
  this.hash = spec.hash || function () {
    return 0;
  };
  this.strict = spec.strict !== false;
}); /// Holds the parse tables for a given grammar, as generated by
/// `lezer-generator`, and provides [methods](#common.Parser) to parse
/// content with.
exports.ContextTracker = ContextTracker;
var LRParser = /*#__PURE__*/function (_Parser) {
  _inherits(LRParser, _Parser);
  var _super = _createSuper(LRParser);
  /// @internal
  function LRParser(spec) {
    var _this$nodeSet;
    var _this;
    _classCallCheck(this, LRParser);
    _this = _super.call(this);
    /// @internal
    _this.wrappers = [];
    if (spec.version != 14 /* File.Version */) throw new RangeError("Parser version (".concat(spec.version, ") doesn't match runtime version (", 14 /* File.Version */, ")"));
    var nodeNames = spec.nodeNames.split(" ");
    _this.minRepeatTerm = nodeNames.length;
    for (var i = 0; i < spec.repeatNodeCount; i++) nodeNames.push("");
    var topTerms = Object.keys(spec.topRules).map(function (r) {
      return spec.topRules[r][1];
    });
    var nodeProps = [];
    for (var _i5 = 0; _i5 < nodeNames.length; _i5++) nodeProps.push([]);
    function setProp(nodeID, prop, value) {
      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
    }
    if (spec.nodeProps) {
      var _iterator4 = _createForOfIteratorHelper(spec.nodeProps),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var propSpec = _step4.value;
          var prop = propSpec[0];
          if (typeof prop == "string") prop = _common.NodeProp[prop];
          for (var _i6 = 1; _i6 < propSpec.length;) {
            var next = propSpec[_i6++];
            if (next >= 0) {
              setProp(next, prop, propSpec[_i6++]);
            } else {
              var value = propSpec[_i6 + -next];
              for (var j = -next; j > 0; j--) setProp(propSpec[_i6++], prop, value);
              _i6++;
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
    _this.nodeSet = new _common.NodeSet(nodeNames.map(function (name, i) {
      return _common.NodeType.define({
        name: i >= _this.minRepeatTerm ? undefined : name,
        id: i,
        props: nodeProps[i],
        top: topTerms.indexOf(i) > -1,
        error: i == 0,
        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
      });
    }));
    if (spec.propSources) _this.nodeSet = (_this$nodeSet = _this.nodeSet).extend.apply(_this$nodeSet, _toConsumableArray(spec.propSources));
    _this.strict = false;
    _this.bufferLength = _common.DefaultBufferLength;
    var tokenArray = decodeArray(spec.tokenData);
    _this.context = spec.context;
    _this.specializerSpecs = spec.specialized || [];
    _this.specialized = new Uint16Array(_this.specializerSpecs.length);
    for (var _i7 = 0; _i7 < _this.specializerSpecs.length; _i7++) _this.specialized[_i7] = _this.specializerSpecs[_i7].term;
    _this.specializers = _this.specializerSpecs.map(getSpecializer);
    _this.states = decodeArray(spec.states, Uint32Array);
    _this.data = decodeArray(spec.stateData);
    _this["goto"] = decodeArray(spec["goto"]);
    _this.maxTerm = spec.maxTerm;
    _this.tokenizers = spec.tokenizers.map(function (value) {
      return typeof value == "number" ? new TokenGroup(tokenArray, value) : value;
    });
    _this.topRules = spec.topRules;
    _this.dialects = spec.dialects || {};
    _this.dynamicPrecedences = spec.dynamicPrecedences || null;
    _this.tokenPrecTable = spec.tokenPrec;
    _this.termNames = spec.termNames || null;
    _this.maxNode = _this.nodeSet.types.length - 1;
    _this.dialect = _this.parseDialect();
    _this.top = _this.topRules[Object.keys(_this.topRules)[0]];
    return _this;
  }
  _createClass(LRParser, [{
    key: "createParse",
    value: function createParse(input, fragments, ranges) {
      var parse = new Parse(this, input, fragments, ranges);
      var _iterator5 = _createForOfIteratorHelper(this.wrappers),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var w = _step5.value;
          parse = w(parse, input, fragments, ranges);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      return parse;
    }
    /// Get a goto table entry @internal
  }, {
    key: "getGoto",
    value: function getGoto(state, term) {
      var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var table = this["goto"];
      if (term >= table[0]) return -1;
      for (var pos = table[term + 1];;) {
        var groupTag = table[pos++],
          last = groupTag & 1;
        var target = table[pos++];
        if (last && loose) return target;
        for (var end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;
        if (last) return -1;
      }
    }
    /// Check if this state has an action for a given terminal @internal
  }, {
    key: "hasAction",
    value: function hasAction(state, terminal) {
      var data = this.data;
      for (var set = 0; set < 2; set++) {
        for (var i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
          if ((next = data[i]) == 65535 /* Seq.End */) {
            if (data[i + 1] == 1 /* Seq.Next */) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2 /* Seq.Other */) return pair(data, i + 2);else break;
          }
          if (next == terminal || next == 0 /* Term.Err */) return pair(data, i + 1);
        }
      }
      return 0;
    }
    /// @internal
  }, {
    key: "stateSlot",
    value: function stateSlot(state, slot) {
      return this.states[state * 6 /* ParseState.Size */ + slot];
    }
    /// @internal
  }, {
    key: "stateFlag",
    value: function stateFlag(state, flag) {
      return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
    }
    /// @internal
  }, {
    key: "validAction",
    value: function validAction(state, action) {
      if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */)) return true;
      for (var i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
        if (this.data[i] == 65535 /* Seq.End */) {
          if (this.data[i + 1] == 1 /* Seq.Next */) i = pair(this.data, i + 2);else return false;
        }
        if (action == pair(this.data, i + 1)) return true;
      }
    }
    /// Get the states that can follow this one through shift actions or
    /// goto jumps. @internal
  }, {
    key: "nextStates",
    value: function nextStates(state) {
      var _this2 = this;
      var result = [];
      var _loop2 = function _loop2(_i8) {
        if (_this2.data[_i8] == 65535 /* Seq.End */) {
          if (_this2.data[_i8 + 1] == 1 /* Seq.Next */) _i8 = pair(_this2.data, _i8 + 2);else {
            i = _i8;
            return "break";
          }
        }
        if ((_this2.data[_i8 + 2] & 65536 /* Action.ReduceFlag */ >> 16) == 0) {
          var value = _this2.data[_i8 + 1];
          if (!result.some(function (v, i) {
            return i & 1 && v == value;
          })) result.push(_this2.data[_i8], value);
        }
        i = _i8;
      };
      for (var i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
        var _ret = _loop2(i);
        if (_ret === "break") break;
      }
      return result;
    }
    /// Configure the parser. Returns a new parser instance that has the
    /// given settings modified. Settings not provided in `config` are
    /// kept from the original parser.
  }, {
    key: "configure",
    value: function configure(config) {
      var _this$nodeSet2;
      // Hideous reflection-based kludge to make it easy to create a
      // slightly modified copy of a parser.
      var copy = Object.assign(Object.create(LRParser.prototype), this);
      if (config.props) copy.nodeSet = (_this$nodeSet2 = this.nodeSet).extend.apply(_this$nodeSet2, _toConsumableArray(config.props));
      if (config.top) {
        var info = this.topRules[config.top];
        if (!info) throw new RangeError("Invalid top rule name ".concat(config.top));
        copy.top = info;
      }
      if (config.tokenizers) copy.tokenizers = this.tokenizers.map(function (t) {
        var found = config.tokenizers.find(function (r) {
          return r.from == t;
        });
        return found ? found.to : t;
      });
      if (config.specializers) {
        copy.specializers = this.specializers.slice();
        copy.specializerSpecs = this.specializerSpecs.map(function (s, i) {
          var found = config.specializers.find(function (r) {
            return r.from == s.external;
          });
          if (!found) return s;
          var spec = Object.assign(Object.assign({}, s), {
            external: found.to
          });
          copy.specializers[i] = getSpecializer(spec);
          return spec;
        });
      }
      if (config.contextTracker) copy.context = config.contextTracker;
      if (config.dialect) copy.dialect = this.parseDialect(config.dialect);
      if (config.strict != null) copy.strict = config.strict;
      if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);
      if (config.bufferLength != null) copy.bufferLength = config.bufferLength;
      return copy;
    }
    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
    /// are registered for this parser.
  }, {
    key: "hasWrappers",
    value: function hasWrappers() {
      return this.wrappers.length > 0;
    }
    /// Returns the name associated with a given term. This will only
    /// work for all terms when the parser was generated with the
    /// `--names` option. By default, only the names of tagged terms are
    /// stored.
  }, {
    key: "getName",
    value: function getName(term) {
      return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
    }
    /// The eof term id is always allocated directly after the node
    /// types. @internal
  }, {
    key: "eofTerm",
    get: function get() {
      return this.maxNode + 1;
    }
    /// The type of top node produced by the parser.
  }, {
    key: "topNode",
    get: function get() {
      return this.nodeSet.types[this.top[1]];
    }
    /// @internal
  }, {
    key: "dynamicPrecedence",
    value: function dynamicPrecedence(term) {
      var prec = this.dynamicPrecedences;
      return prec == null ? 0 : prec[term] || 0;
    }
    /// @internal
  }, {
    key: "parseDialect",
    value: function parseDialect(dialect) {
      var values = Object.keys(this.dialects),
        flags = values.map(function () {
          return false;
        });
      if (dialect) {
        var _iterator6 = _createForOfIteratorHelper(dialect.split(" ")),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var part = _step6.value;
            var _id = values.indexOf(part);
            if (_id >= 0) flags[_id] = true;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
      var disabled = null;
      for (var i = 0; i < values.length; i++) if (!flags[i]) {
        for (var j = this.dialects[values[i]], _id2; (_id2 = this.data[j++]) != 65535 /* Seq.End */;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[_id2] = 1;
      }
      return new Dialect(dialect, flags, disabled);
    }
    /// Used by the output of the parser generator. Not available to
    /// user code. @hide
  }], [{
    key: "deserialize",
    value: function deserialize(spec) {
      return new LRParser(spec);
    }
  }]);
  return LRParser;
}(_common.Parser);
exports.LRParser = LRParser;
function pair(data, off) {
  return data[off] | data[off + 1] << 16;
}
function findFinished(stacks) {
  var best = null;
  var _iterator7 = _createForOfIteratorHelper(stacks),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var stack = _step7.value;
      var stopped = stack.p.stoppedAt;
      if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) && (!best || best.score < stack.score)) best = stack;
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
  return best;
}
function getSpecializer(spec) {
  if (spec.external) {
    var mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
    return function (value, stack) {
      return spec.external(value, stack) << 1 | mask;
    };
  }
  return spec.get;
}

}).call(this)}).call(this,require('_process'))
},{"@lezer/common":22,"_process":4}],25:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TaskList = exports.Table = exports.Superscript = exports.Subscript = exports.Strikethrough = exports.MarkdownParser = exports.Line = exports.LeafBlock = exports.InlineContext = exports.GFM = exports.Emoji = exports.Element = exports.BlockContext = void 0;
exports.parseCode = parseCode;
exports.parser = void 0;
var _common = require("@lezer/common");
var _highlight = require("@lezer/highlight");
var _DefaultSkipMarkup;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var CompositeBlock = /*#__PURE__*/function () {
  function CompositeBlock(type,
  // Used for indentation in list items, markup character in lists
  value, from, hash, end, children, positions) {
    _classCallCheck(this, CompositeBlock);
    this.type = type;
    this.value = value;
    this.from = from;
    this.hash = hash;
    this.end = end;
    this.children = children;
    this.positions = positions;
    this.hashProp = [[_common.NodeProp.contextHash, hash]];
  }
  _createClass(CompositeBlock, [{
    key: "addChild",
    value: function addChild(child, pos) {
      if (child.prop(_common.NodeProp.contextHash) != this.hash) child = new _common.Tree(child.type, child.children, child.positions, child.length, this.hashProp);
      this.children.push(child);
      this.positions.push(pos);
    }
  }, {
    key: "toTree",
    value: function toTree(nodeSet) {
      var _this = this;
      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.end;
      var last = this.children.length - 1;
      if (last >= 0) end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
      var tree = new _common.Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
        makeTree: function makeTree(children, positions, length) {
          return new _common.Tree(_common.NodeType.none, children, positions, length, _this.hashProp);
        }
      });
      return tree;
    }
  }], [{
    key: "create",
    value: function create(type, value, from, parentHash, end) {
      var hash = parentHash + (parentHash << 8) + type + (value << 4) | 0;
      return new CompositeBlock(type, value, from, hash, end, [], []);
    }
  }]);
  return CompositeBlock;
}();
var Type;
(function (Type) {
  Type[Type["Document"] = 1] = "Document";
  Type[Type["CodeBlock"] = 2] = "CodeBlock";
  Type[Type["FencedCode"] = 3] = "FencedCode";
  Type[Type["Blockquote"] = 4] = "Blockquote";
  Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
  Type[Type["BulletList"] = 6] = "BulletList";
  Type[Type["OrderedList"] = 7] = "OrderedList";
  Type[Type["ListItem"] = 8] = "ListItem";
  Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
  Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
  Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
  Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
  Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
  Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
  Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
  Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
  Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
  Type[Type["LinkReference"] = 18] = "LinkReference";
  Type[Type["Paragraph"] = 19] = "Paragraph";
  Type[Type["CommentBlock"] = 20] = "CommentBlock";
  Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
  // Inline
  Type[Type["Escape"] = 22] = "Escape";
  Type[Type["Entity"] = 23] = "Entity";
  Type[Type["HardBreak"] = 24] = "HardBreak";
  Type[Type["Emphasis"] = 25] = "Emphasis";
  Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
  Type[Type["Link"] = 27] = "Link";
  Type[Type["Image"] = 28] = "Image";
  Type[Type["InlineCode"] = 29] = "InlineCode";
  Type[Type["HTMLTag"] = 30] = "HTMLTag";
  Type[Type["Comment"] = 31] = "Comment";
  Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
  Type[Type["URL"] = 33] = "URL";
  // Smaller tokens
  Type[Type["HeaderMark"] = 34] = "HeaderMark";
  Type[Type["QuoteMark"] = 35] = "QuoteMark";
  Type[Type["ListMark"] = 36] = "ListMark";
  Type[Type["LinkMark"] = 37] = "LinkMark";
  Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
  Type[Type["CodeMark"] = 39] = "CodeMark";
  Type[Type["CodeText"] = 40] = "CodeText";
  Type[Type["CodeInfo"] = 41] = "CodeInfo";
  Type[Type["LinkTitle"] = 42] = "LinkTitle";
  Type[Type["LinkLabel"] = 43] = "LinkLabel";
})(Type || (Type = {}));
/// Data structure used to accumulate a block's content during [leaf
/// block parsing](#BlockParser.leaf).
var LeafBlock = /*#__PURE__*/_createClass(
/// @internal
function LeafBlock(
/// The start position of the block.
start,
/// The block's text content.
content) {
  _classCallCheck(this, LeafBlock);
  this.start = start;
  this.content = content;
  /// @internal
  this.marks = [];
  /// The block parsers active for this block.
  this.parsers = [];
}); /// Data structure used during block-level per-line parsing.
exports.LeafBlock = LeafBlock;
var Line = /*#__PURE__*/function () {
  function Line() {
    _classCallCheck(this, Line);
    /// The line's full text.
    this.text = "";
    /// The base indent provided by the composite contexts (that have
    /// been handled so far).
    this.baseIndent = 0;
    /// The string position corresponding to the base indent.
    this.basePos = 0;
    /// The number of contexts handled @internal
    this.depth = 0;
    /// Any markers (i.e. block quote markers) parsed for the contexts. @internal
    this.markers = [];
    /// The position of the next non-whitespace character beyond any
    /// list, blockquote, or other composite block markers.
    this.pos = 0;
    /// The column of the next non-whitespace character.
    this.indent = 0;
    /// The character code of the character after `pos`.
    this.next = -1;
  }
  /// @internal
  _createClass(Line, [{
    key: "forward",
    value: function forward() {
      if (this.basePos > this.pos) this.forwardInner();
    }
    /// @internal
  }, {
    key: "forwardInner",
    value: function forwardInner() {
      var newPos = this.skipSpace(this.basePos);
      this.indent = this.countIndent(newPos, this.pos, this.indent);
      this.pos = newPos;
      this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
    }
    /// Skip whitespace after the given position, return the position of
    /// the next non-space character or the end of the line if there's
    /// only space after `from`.
  }, {
    key: "skipSpace",
    value: function skipSpace(from) {
      return _skipSpace(this.text, from);
    }
    /// @internal
  }, {
    key: "reset",
    value: function reset(text) {
      this.text = text;
      this.baseIndent = this.basePos = this.pos = this.indent = 0;
      this.forwardInner();
      this.depth = 1;
      while (this.markers.length) this.markers.pop();
    }
    /// Move the line's base position forward to the given position.
    /// This should only be called by composite [block
    /// parsers](#BlockParser.parse) or [markup skipping
    /// functions](#NodeSpec.composite).
  }, {
    key: "moveBase",
    value: function moveBase(to) {
      this.basePos = to;
      this.baseIndent = this.countIndent(to, this.pos, this.indent);
    }
    /// Move the line's base position forward to the given _column_.
  }, {
    key: "moveBaseColumn",
    value: function moveBaseColumn(indent) {
      this.baseIndent = indent;
      this.basePos = this.findColumn(indent);
    }
    /// Store a composite-block-level marker. Should be called from
    /// [markup skipping functions](#NodeSpec.composite) when they
    /// consume any non-whitespace characters.
  }, {
    key: "addMarker",
    value: function addMarker(elt) {
      this.markers.push(elt);
    }
    /// Find the column position at `to`, optionally starting at a given
    /// position and column.
  }, {
    key: "countIndent",
    value: function countIndent(to) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      for (var i = from; i < to; i++) indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
      return indent;
    }
    /// Find the position corresponding to the given column.
  }, {
    key: "findColumn",
    value: function findColumn(goal) {
      var i = 0;
      for (var indent = 0; i < this.text.length && indent < goal; i++) indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
      return i;
    }
    /// @internal
  }, {
    key: "scrub",
    value: function scrub() {
      if (!this.baseIndent) return this.text;
      var result = "";
      for (var i = 0; i < this.basePos; i++) result += " ";
      return result + this.text.slice(this.basePos);
    }
  }]);
  return Line;
}();
exports.Line = Line;
function skipForList(bl, cx, line) {
  if (line.pos == line.text.length || bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent) return true;
  if (line.indent >= line.baseIndent + 4) return false;
  var size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
  return size > 0 && (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) && line.text.charCodeAt(line.pos + size - 1) == bl.value;
}
var DefaultSkipMarkup = (_DefaultSkipMarkup = {}, _defineProperty(_DefaultSkipMarkup, Type.Blockquote, function (bl, cx, line) {
  if (line.next != 62 /* '>' */) return false;
  line.markers.push(_elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
  line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
  bl.end = cx.lineStart + line.text.length;
  return true;
}), _defineProperty(_DefaultSkipMarkup, Type.ListItem, function (bl, _cx, line) {
  if (line.indent < line.baseIndent + bl.value && line.next > -1) return false;
  line.moveBaseColumn(line.baseIndent + bl.value);
  return true;
}), _defineProperty(_DefaultSkipMarkup, Type.OrderedList, skipForList), _defineProperty(_DefaultSkipMarkup, Type.BulletList, skipForList), _defineProperty(_DefaultSkipMarkup, Type.Document, function () {
  return true;
}), _DefaultSkipMarkup);
function space(ch) {
  return ch == 32 || ch == 9 || ch == 10 || ch == 13;
}
function _skipSpace(line) {
  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  while (i < line.length && space(line.charCodeAt(i))) i++;
  return i;
}
function skipSpaceBack(line, i, to) {
  while (i > to && space(line.charCodeAt(i - 1))) i--;
  return i;
}
function isFencedCode(line) {
  if (line.next != 96 && line.next != 126 /* '`~' */) return -1;
  var pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next) pos++;
  if (pos < line.pos + 3) return -1;
  if (line.next == 96) for (var i = pos; i < line.text.length; i++) if (line.text.charCodeAt(i) == 96) return -1;
  return pos;
}
function isBlockquote(line) {
  return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
}
function isHorizontalRule(line, cx, breaking) {
  if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */) return -1;
  var count = 1;
  for (var pos = line.pos + 1; pos < line.text.length; pos++) {
    var ch = line.text.charCodeAt(pos);
    if (ch == line.next) count++;else if (!space(ch)) return -1;
  }
  // Setext headers take precedence
  if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length) return -1;
  return count < 3 ? -1 : 1;
}
function inList(cx, type) {
  for (var i = cx.stack.length - 1; i >= 0; i--) if (cx.stack[i].type == type) return true;
  return false;
}
function isBulletList(line, cx, breaking) {
  return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) && (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) && (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
}
function isOrderedList(line, cx, breaking) {
  var pos = line.pos,
    next = line.next;
  for (;;) {
    if (next >= 48 && next <= 57 /* '0-9' */) pos++;else break;
    if (pos == line.text.length) return -1;
    next = line.text.charCodeAt(pos);
  }
  if (pos == line.pos || pos > line.pos + 9 || next != 46 && next != 41 /* '.)' */ || pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1)) || breaking && !inList(cx, Type.OrderedList) && (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */)) return -1;
  return pos + 1 - line.pos;
}
function isAtxHeading(line) {
  if (line.next != 35 /* '#' */) return -1;
  var pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == 35) pos++;
  if (pos < line.text.length && line.text.charCodeAt(pos) != 32) return -1;
  var size = pos - line.pos;
  return size > 6 ? -1 : size;
}
function isSetextUnderline(line) {
  if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4) return -1;
  var pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next) pos++;
  var end = pos;
  while (pos < line.text.length && space(line.text.charCodeAt(pos))) pos++;
  return pos == line.text.length ? end : -1;
}
var EmptyLine = /^[ \t]*$/,
  CommentEnd = /-->/,
  ProcessingEnd = /\?>/;
var HTMLBlockStyle = [[/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i], [/^\s*<!--/, CommentEnd], [/^\s*<\?/, ProcessingEnd], [/^\s*<![A-Z]/, />/], [/^\s*<!\[CDATA\[/, /\]\]>/], [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine], [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]];
function isHTMLBlock(line, _cx, breaking) {
  if (line.next != 60 /* '<' */) return -1;
  var rest = line.text.slice(line.pos);
  for (var i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++) if (HTMLBlockStyle[i][0].test(rest)) return i;
  return -1;
}
function getListIndent(line, pos) {
  var indentAfter = line.countIndent(pos, line.pos, line.indent);
  var indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
  return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
}
function addCodeText(marks, from, to) {
  var last = marks.length - 1;
  if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText) marks[last].to = to;else marks.push(_elt(Type.CodeText, from, to));
}
// Rules for parsing blocks. A return value of false means the rule
// doesn't apply here, true means it does. When true is returned and
// `p.line` has been updated, the rule is assumed to have consumed a
// leaf block. Otherwise, it is assumed to have opened a context.
var DefaultBlockParsers = {
  LinkReference: undefined,
  IndentedCode: function IndentedCode(cx, line) {
    var base = line.baseIndent + 4;
    if (line.indent < base) return false;
    var start = line.findColumn(base);
    var from = cx.lineStart + start,
      to = cx.lineStart + line.text.length;
    var marks = [],
      pendingMarks = [];
    addCodeText(marks, from, to);
    while (cx.nextLine() && line.depth >= cx.stack.length) {
      if (line.pos == line.text.length) {
        // Empty
        addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
        var _iterator = _createForOfIteratorHelper(line.markers),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var m = _step.value;
            pendingMarks.push(m);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (line.indent < base) {
        break;
      } else {
        if (pendingMarks.length) {
          var _iterator2 = _createForOfIteratorHelper(pendingMarks),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _m = _step2.value;
              if (_m.type == Type.CodeText) addCodeText(marks, _m.from, _m.to);else marks.push(_m);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          pendingMarks = [];
        }
        addCodeText(marks, cx.lineStart - 1, cx.lineStart);
        var _iterator3 = _createForOfIteratorHelper(line.markers),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _m2 = _step3.value;
            marks.push(_m2);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        to = cx.lineStart + line.text.length;
        var codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
        if (codeStart < to) addCodeText(marks, codeStart, to);
      }
    }
    if (pendingMarks.length) {
      pendingMarks = pendingMarks.filter(function (m) {
        return m.type != Type.CodeText;
      });
      if (pendingMarks.length) line.markers = pendingMarks.concat(line.markers);
    }
    cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
    return true;
  },
  FencedCode: function FencedCode(cx, line) {
    var fenceEnd = isFencedCode(line);
    if (fenceEnd < 0) return false;
    var from = cx.lineStart + line.pos,
      ch = line.next,
      len = fenceEnd - line.pos;
    var infoFrom = line.skipSpace(fenceEnd),
      infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
    var marks = [_elt(Type.CodeMark, from, from + len)];
    if (infoFrom < infoTo) marks.push(_elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
    for (var first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
      var i = line.pos;
      if (line.indent - line.baseIndent < 4) while (i < line.text.length && line.text.charCodeAt(i) == ch) i++;
      if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
        var _iterator4 = _createForOfIteratorHelper(line.markers),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var m = _step4.value;
            marks.push(m);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        marks.push(_elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
        cx.nextLine();
        break;
      } else {
        if (!first) addCodeText(marks, cx.lineStart - 1, cx.lineStart);
        var _iterator5 = _createForOfIteratorHelper(line.markers),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _m3 = _step5.value;
            marks.push(_m3);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        var textStart = cx.lineStart + line.basePos,
          textEnd = cx.lineStart + line.text.length;
        if (textStart < textEnd) addCodeText(marks, textStart, textEnd);
      }
    }
    cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.FencedCode, cx.prevLineEnd() - from), from);
    return true;
  },
  Blockquote: function Blockquote(cx, line) {
    var size = isBlockquote(line);
    if (size < 0) return false;
    cx.startContext(Type.Blockquote, line.pos);
    cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
    line.moveBase(line.pos + size);
    return null;
  },
  HorizontalRule: function HorizontalRule(cx, line) {
    if (isHorizontalRule(line, cx, false) < 0) return false;
    var from = cx.lineStart + line.pos;
    cx.nextLine();
    cx.addNode(Type.HorizontalRule, from);
    return true;
  },
  BulletList: function BulletList(cx, line) {
    var size = isBulletList(line, cx, false);
    if (size < 0) return false;
    if (cx.block.type != Type.BulletList) cx.startContext(Type.BulletList, line.basePos, line.next);
    var newBase = getListIndent(line, line.pos + 1);
    cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
    cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
    line.moveBaseColumn(newBase);
    return null;
  },
  OrderedList: function OrderedList(cx, line) {
    var size = isOrderedList(line, cx, false);
    if (size < 0) return false;
    if (cx.block.type != Type.OrderedList) cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
    var newBase = getListIndent(line, line.pos + size);
    cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
    cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
    line.moveBaseColumn(newBase);
    return null;
  },
  ATXHeading: function ATXHeading(cx, line) {
    var size = isAtxHeading(line);
    if (size < 0) return false;
    var off = line.pos,
      from = cx.lineStart + off;
    var endOfSpace = skipSpaceBack(line.text, line.text.length, off),
      after = endOfSpace;
    while (after > off && line.text.charCodeAt(after - 1) == line.next) after--;
    if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1))) after = line.text.length;
    var buf = cx.buffer.write(Type.HeaderMark, 0, size).writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
    if (after < line.text.length) buf.write(Type.HeaderMark, after - off, endOfSpace - off);
    var node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
    cx.nextLine();
    cx.addNode(node, from);
    return true;
  },
  HTMLBlock: function HTMLBlock(cx, line) {
    var type = isHTMLBlock(line, cx, false);
    if (type < 0) return false;
    var from = cx.lineStart + line.pos,
      end = HTMLBlockStyle[type][1];
    var marks = [],
      trailing = end != EmptyLine;
    while (!end.test(line.text) && cx.nextLine()) {
      if (line.depth < cx.stack.length) {
        trailing = false;
        break;
      }
      var _iterator6 = _createForOfIteratorHelper(line.markers),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var m = _step6.value;
          marks.push(m);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
    if (trailing) cx.nextLine();
    var nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
    var to = cx.prevLineEnd();
    cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
    return true;
  },
  SetextHeading: undefined // Specifies relative precedence for block-continue function
};
// This implements a state machine that incrementally parses link references. At each
// next line, it looks ahead to see if the line continues the reference or not. If it
// doesn't and a valid link is available ending before that line, it finishes that.
// Similarly, on `finish` (when the leaf is terminated by external circumstances), it
// creates a link reference if there's a valid reference up to the current point.
var LinkReferenceParser = /*#__PURE__*/function () {
  function LinkReferenceParser(leaf) {
    _classCallCheck(this, LinkReferenceParser);
    this.stage = 0 /* Start */;
    this.elts = [];
    this.pos = 0;
    this.start = leaf.start;
    this.advance(leaf.content);
  }
  _createClass(LinkReferenceParser, [{
    key: "nextLine",
    value: function nextLine(cx, line, leaf) {
      if (this.stage == -1 /* Failed */) return false;
      var content = leaf.content + "\n" + line.scrub();
      var finish = this.advance(content);
      if (finish > -1 && finish < content.length) return this.complete(cx, leaf, finish);
      return false;
    }
  }, {
    key: "finish",
    value: function finish(cx, leaf) {
      if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && _skipSpace(leaf.content, this.pos) == leaf.content.length) return this.complete(cx, leaf, leaf.content.length);
      return false;
    }
  }, {
    key: "complete",
    value: function complete(cx, leaf, len) {
      cx.addLeafElement(leaf, _elt(Type.LinkReference, this.start, this.start + len, this.elts));
      return true;
    }
  }, {
    key: "nextStage",
    value: function nextStage(elt) {
      if (elt) {
        this.pos = elt.to - this.start;
        this.elts.push(elt);
        this.stage++;
        return true;
      }
      if (elt === false) this.stage = -1 /* Failed */;
      return false;
    }
  }, {
    key: "advance",
    value: function advance(content) {
      for (;;) {
        if (this.stage == -1 /* Failed */) {
          return -1;
        } else if (this.stage == 0 /* Start */) {
          if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true))) return -1;
          if (content.charCodeAt(this.pos) != 58 /* ':' */) return this.stage = -1 /* Failed */;
          this.elts.push(_elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
          this.pos++;
        } else if (this.stage == 1 /* Label */) {
          if (!this.nextStage(parseURL(content, _skipSpace(content, this.pos), this.start))) return -1;
        } else if (this.stage == 2 /* Link */) {
          var skip = _skipSpace(content, this.pos),
            end = 0;
          if (skip > this.pos) {
            var title = parseLinkTitle(content, skip, this.start);
            if (title) {
              var titleEnd = lineEnd(content, title.to - this.start);
              if (titleEnd > 0) {
                this.nextStage(title);
                end = titleEnd;
              }
            }
          }
          if (!end) end = lineEnd(content, this.pos);
          return end > 0 && end < content.length ? end : -1;
        } else {
          // RefStage.Title
          return lineEnd(content, this.pos);
        }
      }
    }
  }]);
  return LinkReferenceParser;
}();
function lineEnd(text, pos) {
  for (; pos < text.length; pos++) {
    var next = text.charCodeAt(pos);
    if (next == 10) break;
    if (!space(next)) return -1;
  }
  return pos;
}
var SetextHeadingParser = /*#__PURE__*/function () {
  function SetextHeadingParser() {
    _classCallCheck(this, SetextHeadingParser);
  }
  _createClass(SetextHeadingParser, [{
    key: "nextLine",
    value: function nextLine(cx, line, leaf) {
      var underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
      var next = line.next;
      if (underline < 0) return false;
      var underlineMark = _elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
      cx.nextLine();
      cx.addLeafElement(leaf, _elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [].concat(_toConsumableArray(cx.parser.parseInline(leaf.content, leaf.start)), [underlineMark])));
      return true;
    }
  }, {
    key: "finish",
    value: function finish() {
      return false;
    }
  }]);
  return SetextHeadingParser;
}();
var DefaultLeafBlocks = {
  LinkReference: function LinkReference(_, leaf) {
    return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null;
  },
  SetextHeading: function SetextHeading() {
    return new SetextHeadingParser();
  }
};
var DefaultEndLeaf = [function (_, line) {
  return isAtxHeading(line) >= 0;
}, function (_, line) {
  return isFencedCode(line) >= 0;
}, function (_, line) {
  return isBlockquote(line) >= 0;
}, function (p, line) {
  return isBulletList(line, p, true) >= 0;
}, function (p, line) {
  return isOrderedList(line, p, true) >= 0;
}, function (p, line) {
  return isHorizontalRule(line, p, true) >= 0;
}, function (p, line) {
  return isHTMLBlock(line, p, true) >= 0;
}];
var scanLineResult = {
  text: "",
  end: 0
};
/// Block-level parsing functions get access to this context object.
var BlockContext = /*#__PURE__*/function () {
  /// @internal
  function BlockContext(
  /// The parser configuration used.
  parser,
  /// @internal
  input, fragments,
  /// @internal
  ranges) {
    _classCallCheck(this, BlockContext);
    this.parser = parser;
    this.input = input;
    this.ranges = ranges;
    this.line = new Line();
    this.atEnd = false;
    /// @internal
    this.dontInject = new Set();
    this.stoppedAt = null;
    /// The range index that absoluteLineStart points into @internal
    this.rangeI = 0;
    this.to = ranges[ranges.length - 1].to;
    this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
    this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
    this.stack = [this.block];
    this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
    this.readLine();
  }
  _createClass(BlockContext, [{
    key: "parsedPos",
    get: function get() {
      return this.absoluteLineStart;
    }
  }, {
    key: "advance",
    value: function advance() {
      if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt) return this.finish();
      var line = this.line;
      for (;;) {
        while (line.depth < this.stack.length) this.finishContext();
        var _iterator7 = _createForOfIteratorHelper(line.markers),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var mark = _step7.value;
            this.addNode(mark.type, mark.from, mark.to);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
        if (line.pos < line.text.length) break;
        // Empty line
        if (!this.nextLine()) return this.finish();
      }
      if (this.fragments && this.reuseFragment(line.basePos)) return null;
      start: for (;;) {
        var _iterator8 = _createForOfIteratorHelper(this.parser.blockParsers),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var type = _step8.value;
            if (type) {
              var result = type(this, line);
              if (result != false) {
                if (result == true) return null;
                line.forward();
                continue start;
              }
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        break;
      }
      var leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
      var _iterator9 = _createForOfIteratorHelper(this.parser.leafBlockParsers),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var parse = _step9.value;
          if (parse) {
            var _parser2 = parse(this, leaf);
            if (_parser2) leaf.parsers.push(_parser2);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      lines: while (this.nextLine()) {
        if (line.pos == line.text.length) break;
        if (line.indent < line.baseIndent + 4) {
          var _iterator10 = _createForOfIteratorHelper(this.parser.endLeafBlock),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var stop = _step10.value;
              if (stop(this, line, leaf)) break lines;
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
        var _iterator11 = _createForOfIteratorHelper(leaf.parsers),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _parser = _step11.value;
            if (_parser.nextLine(this, line, leaf)) return null;
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
        leaf.content += "\n" + line.scrub();
        var _iterator12 = _createForOfIteratorHelper(line.markers),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var m = _step12.value;
            leaf.marks.push(m);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
      this.finishLeaf(leaf);
      return null;
    }
  }, {
    key: "stopAt",
    value: function stopAt(pos) {
      if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError("Can't move stoppedAt forward");
      this.stoppedAt = pos;
    }
  }, {
    key: "reuseFragment",
    value: function reuseFragment(start) {
      if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) || !this.fragments.matches(this.block.hash)) return false;
      var taken = this.fragments.takeNodes(this);
      if (!taken) return false;
      var withoutGaps = taken,
        end = this.absoluteLineStart + taken;
      for (var i = 1; i < this.ranges.length; i++) {
        var gapFrom = this.ranges[i - 1].to,
          gapTo = this.ranges[i].from;
        if (gapFrom >= this.lineStart && gapTo < end) withoutGaps -= gapTo - gapFrom;
      }
      this.lineStart += withoutGaps;
      this.absoluteLineStart += taken;
      this.moveRangeI();
      if (this.absoluteLineStart < this.to) {
        this.lineStart++;
        this.absoluteLineStart++;
        this.readLine();
      } else {
        this.atEnd = true;
        this.readLine();
      }
      return true;
    }
    /// The number of parent blocks surrounding the current block.
  }, {
    key: "depth",
    get: function get() {
      return this.stack.length;
    }
    /// Get the type of the parent block at the given depth. When no
    /// depth is passed, return the type of the innermost parent.
  }, {
    key: "parentType",
    value: function parentType() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.depth - 1;
      return this.parser.nodeSet.types[this.stack[depth].type];
    }
    /// Move to the next input line. This should only be called by
    /// (non-composite) [block parsers](#BlockParser.parse) that consume
    /// the line directly, or leaf block parser
    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
    /// consume the current line (and return true).
  }, {
    key: "nextLine",
    value: function nextLine() {
      this.lineStart += this.line.text.length;
      if (this.absoluteLineEnd >= this.to) {
        this.absoluteLineStart = this.absoluteLineEnd;
        this.atEnd = true;
        this.readLine();
        return false;
      } else {
        this.lineStart++;
        this.absoluteLineStart = this.absoluteLineEnd + 1;
        this.moveRangeI();
        this.readLine();
        return true;
      }
    }
  }, {
    key: "moveRangeI",
    value: function moveRangeI() {
      while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
        this.rangeI++;
        this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
      }
    }
    /// @internal
  }, {
    key: "scanLine",
    value: function scanLine(start) {
      var r = scanLineResult;
      r.end = start;
      if (start >= this.to) {
        r.text = "";
      } else {
        r.text = this.lineChunkAt(start);
        r.end += r.text.length;
        if (this.ranges.length > 1) {
          var textOffset = this.absoluteLineStart,
            rangeI = this.rangeI;
          while (this.ranges[rangeI].to < r.end) {
            rangeI++;
            var nextFrom = this.ranges[rangeI].from;
            var after = this.lineChunkAt(nextFrom);
            r.end = nextFrom + after.length;
            r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
            textOffset = r.end - r.text.length;
          }
        }
      }
      return r;
    }
    /// @internal
  }, {
    key: "readLine",
    value: function readLine() {
      var line = this.line,
        _this$scanLine = this.scanLine(this.absoluteLineStart),
        text = _this$scanLine.text,
        end = _this$scanLine.end;
      this.absoluteLineEnd = end;
      line.reset(text);
      for (; line.depth < this.stack.length; line.depth++) {
        var cx = this.stack[line.depth],
          handler = this.parser.skipContextMarkup[cx.type];
        if (!handler) throw new Error("Unhandled block context " + Type[cx.type]);
        if (!handler(cx, this, line)) break;
        line.forward();
      }
    }
  }, {
    key: "lineChunkAt",
    value: function lineChunkAt(pos) {
      var next = this.input.chunk(pos),
        text;
      if (!this.input.lineChunks) {
        var eol = next.indexOf("\n");
        text = eol < 0 ? next : next.slice(0, eol);
      } else {
        text = next == "\n" ? "" : next;
      }
      return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
    }
    /// The end position of the previous line.
  }, {
    key: "prevLineEnd",
    value: function prevLineEnd() {
      return this.atEnd ? this.lineStart : this.lineStart - 1;
    }
    /// @internal
  }, {
    key: "startContext",
    value: function startContext(type, start) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
      this.stack.push(this.block);
    }
    /// Start a composite block. Should only be called from [block
    /// parser functions](#BlockParser.parse) that return null.
  }, {
    key: "startComposite",
    value: function startComposite(type, start) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      this.startContext(this.parser.getNodeType(type), start, value);
    }
    /// @internal
  }, {
    key: "addNode",
    value: function addNode(block, from, to) {
      if (typeof block == "number") block = new _common.Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
      this.block.addChild(block, from - this.block.from);
    }
    /// Add a block element. Can be called by [block
    /// parsers](#BlockParser.parse).
  }, {
    key: "addElement",
    value: function addElement(elt) {
      this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
    }
    /// Add a block element from a [leaf parser](#LeafBlockParser). This
    /// makes sure any extra composite block markup (such as blockquote
    /// markers) inside the block are also added to the syntax tree.
  }, {
    key: "addLeafElement",
    value: function addLeafElement(leaf, elt) {
      this.addNode(this.buffer.writeElements(injectMarks(elt.children, leaf.marks), -elt.from).finish(elt.type, elt.to - elt.from), elt.from);
    }
    /// @internal
  }, {
    key: "finishContext",
    value: function finishContext() {
      var cx = this.stack.pop();
      var top = this.stack[this.stack.length - 1];
      top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
      this.block = top;
    }
  }, {
    key: "finish",
    value: function finish() {
      while (this.stack.length > 1) this.finishContext();
      return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
    }
  }, {
    key: "addGaps",
    value: function addGaps(tree) {
      return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
    }
    /// @internal
  }, {
    key: "finishLeaf",
    value: function finishLeaf(leaf) {
      var _iterator13 = _createForOfIteratorHelper(leaf.parsers),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var _parser3 = _step13.value;
          if (_parser3.finish(this, leaf)) return;
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      var inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
      this.addNode(this.buffer.writeElements(inline, -leaf.start).finish(Type.Paragraph, leaf.content.length), leaf.start);
    }
  }, {
    key: "elt",
    value: function elt(type, from, to, children) {
      if (typeof type == "string") return _elt(this.parser.getNodeType(type), from, to, children);
      return new TreeElement(type, from);
    }
    /// @internal
  }, {
    key: "buffer",
    get: function get() {
      return new Buffer(this.parser.nodeSet);
    }
  }]);
  return BlockContext;
}();
exports.BlockContext = BlockContext;
function injectGaps(ranges, rangeI, tree, offset, dont) {
  if (dont.has(tree.tree)) return tree.tree;
  var rangeEnd = ranges[rangeI].to;
  var children = [],
    positions = [],
    start = tree.from + offset;
  function movePastNext(upto, inclusive) {
    while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
      var size = ranges[rangeI + 1].from - rangeEnd;
      offset += size;
      upto += size;
      rangeI++;
      rangeEnd = ranges[rangeI].to;
    }
  }
  for (var ch = tree.firstChild; ch; ch = ch.nextSibling) {
    movePastNext(ch.from + offset, true);
    var from = ch.from + offset,
      node = void 0;
    if (ch.to + offset > rangeEnd) {
      node = injectGaps(ranges, rangeI, ch, offset, dont);
      movePastNext(ch.to + offset, false);
    } else {
      node = ch.toTree();
    }
    children.push(node);
    positions.push(from - start);
  }
  movePastNext(tree.to + offset, false);
  return new _common.Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
}
/// A Markdown parser configuration.
var MarkdownParser = /*#__PURE__*/function (_Parser) {
  _inherits(MarkdownParser, _Parser);
  var _super = _createSuper(MarkdownParser);
  /// @internal
  function MarkdownParser(
  /// The parser's syntax [node
  /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
  nodeSet,
  /// @internal
  blockParsers,
  /// @internal
  leafBlockParsers,
  /// @internal
  blockNames,
  /// @internal
  endLeafBlock,
  /// @internal
  skipContextMarkup,
  /// @internal
  inlineParsers,
  /// @internal
  inlineNames,
  /// @internal
  wrappers) {
    var _this2;
    _classCallCheck(this, MarkdownParser);
    _this2 = _super.call(this);
    _this2.nodeSet = nodeSet;
    _this2.blockParsers = blockParsers;
    _this2.leafBlockParsers = leafBlockParsers;
    _this2.blockNames = blockNames;
    _this2.endLeafBlock = endLeafBlock;
    _this2.skipContextMarkup = skipContextMarkup;
    _this2.inlineParsers = inlineParsers;
    _this2.inlineNames = inlineNames;
    _this2.wrappers = wrappers;
    /// @internal
    _this2.nodeTypes = Object.create(null);
    var _iterator14 = _createForOfIteratorHelper(nodeSet.types),
      _step14;
    try {
      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
        var t = _step14.value;
        _this2.nodeTypes[t.name] = t.id;
      }
    } catch (err) {
      _iterator14.e(err);
    } finally {
      _iterator14.f();
    }
    return _this2;
  }
  _createClass(MarkdownParser, [{
    key: "createParse",
    value: function createParse(input, fragments, ranges) {
      var parse = new BlockContext(this, input, fragments, ranges);
      var _iterator15 = _createForOfIteratorHelper(this.wrappers),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var w = _step15.value;
          parse = w(parse, input, fragments, ranges);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      return parse;
    }
    /// Reconfigure the parser.
  }, {
    key: "configure",
    value: function configure(spec) {
      var _nodeSet;
      var config = resolveConfig(spec);
      if (!config) return this;
      var nodeSet = this.nodeSet,
        skipContextMarkup = this.skipContextMarkup;
      var blockParsers = this.blockParsers.slice(),
        leafBlockParsers = this.leafBlockParsers.slice(),
        blockNames = this.blockNames.slice(),
        inlineParsers = this.inlineParsers.slice(),
        inlineNames = this.inlineNames.slice(),
        endLeafBlock = this.endLeafBlock.slice(),
        wrappers = this.wrappers;
      if (nonEmpty(config.defineNodes)) {
        skipContextMarkup = Object.assign({}, skipContextMarkup);
        var _nodeTypes = nodeSet.types.slice(),
          styles;
        var _iterator16 = _createForOfIteratorHelper(config.defineNodes),
          _step16;
        try {
          var _loop = function _loop() {
            var s = _step16.value;
            var _ref = typeof s == "string" ? {
                name: s
              } : s,
              name = _ref.name,
              block = _ref.block,
              composite = _ref.composite,
              style = _ref.style;
            if (_nodeTypes.some(function (t) {
              return t.name == name;
            })) return "continue";
            if (composite) skipContextMarkup[_nodeTypes.length] = function (bl, cx, line) {
              return composite(cx, line, bl.value);
            };
            var id = _nodeTypes.length;
            var group = composite ? ["Block", "BlockContext"] : !block ? undefined : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
            _nodeTypes.push(_common.NodeType.define({
              id: id,
              name: name,
              props: group && [[_common.NodeProp.group, group]]
            }));
            if (style) {
              if (!styles) styles = {};
              if (Array.isArray(style) || style instanceof _highlight.Tag) styles[name] = style;else Object.assign(styles, style);
            }
          };
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var _ret = _loop();
            if (_ret === "continue") continue;
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
        nodeSet = new _common.NodeSet(_nodeTypes);
        if (styles) nodeSet = nodeSet.extend((0, _highlight.styleTags)(styles));
      }
      if (nonEmpty(config.props)) nodeSet = (_nodeSet = nodeSet).extend.apply(_nodeSet, _toConsumableArray(config.props));
      if (nonEmpty(config.remove)) {
        var _iterator17 = _createForOfIteratorHelper(config.remove),
          _step17;
        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var rm = _step17.value;
            var block = this.blockNames.indexOf(rm),
              inline = this.inlineNames.indexOf(rm);
            if (block > -1) blockParsers[block] = leafBlockParsers[block] = undefined;
            if (inline > -1) inlineParsers[inline] = undefined;
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }
      }
      if (nonEmpty(config.parseBlock)) {
        var _iterator18 = _createForOfIteratorHelper(config.parseBlock),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var _spec = _step18.value;
            var found = blockNames.indexOf(_spec.name);
            if (found > -1) {
              blockParsers[found] = _spec.parse;
              leafBlockParsers[found] = _spec.leaf;
            } else {
              var pos = _spec.before ? findName(blockNames, _spec.before) : _spec.after ? findName(blockNames, _spec.after) + 1 : blockNames.length - 1;
              blockParsers.splice(pos, 0, _spec.parse);
              leafBlockParsers.splice(pos, 0, _spec.leaf);
              blockNames.splice(pos, 0, _spec.name);
            }
            if (_spec.endLeaf) endLeafBlock.push(_spec.endLeaf);
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      }
      if (nonEmpty(config.parseInline)) {
        var _iterator19 = _createForOfIteratorHelper(config.parseInline),
          _step19;
        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var _spec2 = _step19.value;
            var _found = inlineNames.indexOf(_spec2.name);
            if (_found > -1) {
              inlineParsers[_found] = _spec2.parse;
            } else {
              var _pos = _spec2.before ? findName(inlineNames, _spec2.before) : _spec2.after ? findName(inlineNames, _spec2.after) + 1 : inlineNames.length - 1;
              inlineParsers.splice(_pos, 0, _spec2.parse);
              inlineNames.splice(_pos, 0, _spec2.name);
            }
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
      }
      if (config.wrap) wrappers = wrappers.concat(config.wrap);
      return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
    }
    /// @internal
  }, {
    key: "getNodeType",
    value: function getNodeType(name) {
      var found = this.nodeTypes[name];
      if (found == null) throw new RangeError("Unknown node type '".concat(name, "'"));
      return found;
    }
    /// Parse the given piece of inline text at the given offset,
    /// returning an array of [`Element`](#Element) objects representing
    /// the inline content.
  }, {
    key: "parseInline",
    value: function parseInline(text, offset) {
      var cx = new InlineContext(this, text, offset);
      outer: for (var pos = offset; pos < cx.end;) {
        var next = cx["char"](pos);
        var _iterator20 = _createForOfIteratorHelper(this.inlineParsers),
          _step20;
        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var token = _step20.value;
            if (token) {
              var result = token(cx, next, pos);
              if (result >= 0) {
                pos = result;
                continue outer;
              }
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
        pos++;
      }
      return cx.resolveMarkers(0);
    }
  }]);
  return MarkdownParser;
}(_common.Parser);
exports.MarkdownParser = MarkdownParser;
function nonEmpty(a) {
  return a != null && a.length > 0;
}
function resolveConfig(spec) {
  if (!Array.isArray(spec)) return spec;
  if (spec.length == 0) return null;
  var conf = resolveConfig(spec[0]);
  if (spec.length == 1) return conf;
  var rest = resolveConfig(spec.slice(1));
  if (!rest || !conf) return conf || rest;
  var conc = function conc(a, b) {
    return (a || none).concat(b || none);
  };
  var wrapA = conf.wrap,
    wrapB = rest.wrap;
  return {
    props: conc(conf.props, rest.props),
    defineNodes: conc(conf.defineNodes, rest.defineNodes),
    parseBlock: conc(conf.parseBlock, rest.parseBlock),
    parseInline: conc(conf.parseInline, rest.parseInline),
    remove: conc(conf.remove, rest.remove),
    wrap: !wrapA ? wrapB : !wrapB ? wrapA : function (inner, input, fragments, ranges) {
      return wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges);
    }
  };
}
function findName(names, name) {
  var found = names.indexOf(name);
  if (found < 0) throw new RangeError("Position specified relative to unknown parser ".concat(name));
  return found;
}
var nodeTypes = [_common.NodeType.none];
for (var i = 1, name; name = Type[i]; i++) {
  nodeTypes[i] = _common.NodeType.define({
    id: i,
    name: name,
    props: i >= Type.Escape ? [] : [[_common.NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
  });
}
var none = [];
var Buffer = /*#__PURE__*/function () {
  function Buffer(nodeSet) {
    _classCallCheck(this, Buffer);
    this.nodeSet = nodeSet;
    this.content = [];
    this.nodes = [];
  }
  _createClass(Buffer, [{
    key: "write",
    value: function write(type, from, to) {
      var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      this.content.push(type, from, to, 4 + children * 4);
      return this;
    }
  }, {
    key: "writeElements",
    value: function writeElements(elts) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var _iterator21 = _createForOfIteratorHelper(elts),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var e = _step21.value;
          e.writeTo(this, offset);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      return this;
    }
  }, {
    key: "finish",
    value: function finish(type, length) {
      return _common.Tree.build({
        buffer: this.content,
        nodeSet: this.nodeSet,
        reused: this.nodes,
        topID: type,
        length: length
      });
    }
  }]);
  return Buffer;
}(); /// Elements are used to compose syntax nodes during parsing.
var Element = /*#__PURE__*/function () {
  /// @internal
  function Element(
  /// The node's
  /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
  type,
  /// The start of the node, as an offset from the start of the document.
  from,
  /// The end of the node.
  to) {
    var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : none;
    _classCallCheck(this, Element);
    this.type = type;
    this.from = from;
    this.to = to;
    this.children = children;
  }
  /// @internal
  _createClass(Element, [{
    key: "writeTo",
    value: function writeTo(buf, offset) {
      var startOff = buf.content.length;
      buf.writeElements(this.children, offset);
      buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
    }
    /// @internal
  }, {
    key: "toTree",
    value: function toTree(nodeSet) {
      return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
    }
  }]);
  return Element;
}();
exports.Element = Element;
var TreeElement = /*#__PURE__*/function () {
  function TreeElement(tree, from) {
    _classCallCheck(this, TreeElement);
    this.tree = tree;
    this.from = from;
  }
  _createClass(TreeElement, [{
    key: "to",
    get: function get() {
      return this.from + this.tree.length;
    }
  }, {
    key: "type",
    get: function get() {
      return this.tree.type.id;
    }
  }, {
    key: "children",
    get: function get() {
      return none;
    }
  }, {
    key: "writeTo",
    value: function writeTo(buf, offset) {
      buf.nodes.push(this.tree);
      buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
    }
  }, {
    key: "toTree",
    value: function toTree() {
      return this.tree;
    }
  }]);
  return TreeElement;
}();
function _elt(type, from, to, children) {
  return new Element(type, from, to, children);
}
var EmphasisUnderscore = {
  resolve: "Emphasis",
  mark: "EmphasisMark"
};
var EmphasisAsterisk = {
  resolve: "Emphasis",
  mark: "EmphasisMark"
};
var LinkStart = {},
  ImageStart = {};
var InlineDelimiter = /*#__PURE__*/_createClass(function InlineDelimiter(type, from, to, side) {
  _classCallCheck(this, InlineDelimiter);
  this.type = type;
  this.from = from;
  this.to = to;
  this.side = side;
});
var Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
var Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
try {
  Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
} catch (_) {}
var DefaultInline = {
  Escape: function Escape(cx, next, start) {
    if (next != 92 /* '\\' */ || start == cx.end - 1) return -1;
    var escaped = cx["char"](start + 1);
    for (var _i = 0; _i < Escapable.length; _i++) if (Escapable.charCodeAt(_i) == escaped) return cx.append(_elt(Type.Escape, start, start + 2));
    return -1;
  },
  Entity: function Entity(cx, next, start) {
    if (next != 38 /* '&' */) return -1;
    var m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
    return m ? cx.append(_elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
  },
  InlineCode: function InlineCode(cx, next, start) {
    if (next != 96 /* '`' */ || start && cx["char"](start - 1) == 96) return -1;
    var pos = start + 1;
    while (pos < cx.end && cx["char"](pos) == 96) pos++;
    var size = pos - start,
      curSize = 0;
    for (; pos < cx.end; pos++) {
      if (cx["char"](pos) == 96) {
        curSize++;
        if (curSize == size && cx["char"](pos + 1) != 96) return cx.append(_elt(Type.InlineCode, start, pos + 1, [_elt(Type.CodeMark, start, start + size), _elt(Type.CodeMark, pos + 1 - size, pos + 1)]));
      } else {
        curSize = 0;
      }
    }
    return -1;
  },
  HTMLTag: function HTMLTag(cx, next, start) {
    if (next != 60 /* '<' */ || start == cx.end - 1) return -1;
    var after = cx.slice(start + 1, cx.end);
    var url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
    if (url) return cx.append(_elt(Type.URL, start, start + 1 + url[0].length));
    var comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
    if (comment) return cx.append(_elt(Type.Comment, start, start + 1 + comment[0].length));
    var procInst = /^\?[^]*?\?>/.exec(after);
    if (procInst) return cx.append(_elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
    var m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
    if (!m) return -1;
    return cx.append(_elt(Type.HTMLTag, start, start + 1 + m[0].length));
  },
  Emphasis: function Emphasis(cx, next, start) {
    if (next != 95 && next != 42) return -1;
    var pos = start + 1;
    while (cx["char"](pos) == next) pos++;
    var before = cx.slice(start - 1, start),
      after = cx.slice(pos, pos + 1);
    var pBefore = Punctuation.test(before),
      pAfter = Punctuation.test(after);
    var sBefore = /\s|^$/.test(before),
      sAfter = /\s|^$/.test(after);
    var leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
    var rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
    var canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
    var canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
    return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));
  },
  HardBreak: function HardBreak(cx, next, start) {
    if (next == 92 /* '\\' */ && cx["char"](start + 1) == 10 /* '\n' */) return cx.append(_elt(Type.HardBreak, start, start + 2));
    if (next == 32) {
      var pos = start + 1;
      while (cx["char"](pos) == 32) pos++;
      if (cx["char"](pos) == 10 && pos >= start + 2) return cx.append(_elt(Type.HardBreak, start, pos + 1));
    }
    return -1;
  },
  Link: function Link(cx, next, start) {
    return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;
  },
  Image: function Image(cx, next, start) {
    return next == 33 /* '!' */ && cx["char"](start + 1) == 91 /* '[' */ ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;
  },
  LinkEnd: function LinkEnd(cx, next, start) {
    if (next != 93 /* ']' */) return -1;
    // Scanning back to the next link/image start marker
    for (var _i2 = cx.parts.length - 1; _i2 >= 0; _i2--) {
      var part = cx.parts[_i2];
      if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
        // If this one has been set invalid (because it would produce
        // a nested link) or there's no valid link here ignore both.
        if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
          cx.parts[_i2] = null;
          return -1;
        }
        // Finish the content and replace the entire range in
        // this.parts with the link/image node.
        var content = cx.takeContent(_i2);
        var link = cx.parts[_i2] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
        // Set any open-link markers before this link to invalid.
        if (part.type == LinkStart) for (var j = 0; j < _i2; j++) {
          var p = cx.parts[j];
          if (p instanceof InlineDelimiter && p.type == LinkStart) p.side = 0;
        }
        return link.to;
      }
    }
    return -1;
  }
};
function finishLink(cx, content, type, start, startPos) {
  var text = cx.text,
    next = cx["char"](startPos),
    endPos = startPos;
  content.unshift(_elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
  content.push(_elt(Type.LinkMark, startPos - 1, startPos));
  if (next == 40 /* '(' */) {
    var pos = cx.skipSpace(startPos + 1);
    var dest = parseURL(text, pos - cx.offset, cx.offset),
      title;
    if (dest) {
      pos = cx.skipSpace(dest.to);
      title = parseLinkTitle(text, pos - cx.offset, cx.offset);
      if (title) pos = cx.skipSpace(title.to);
    }
    if (cx["char"](pos) == 41 /* ')' */) {
      content.push(_elt(Type.LinkMark, startPos, startPos + 1));
      endPos = pos + 1;
      if (dest) content.push(dest);
      if (title) content.push(title);
      content.push(_elt(Type.LinkMark, pos, endPos));
    }
  } else if (next == 91 /* '[' */) {
    var label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
    if (label) {
      content.push(label);
      endPos = label.to;
    }
  }
  return _elt(type, start, endPos, content);
}
// These return `null` when falling off the end of the input, `false`
// when parsing fails otherwise (for use in the incremental link
// reference parser).
function parseURL(text, start, offset) {
  var next = text.charCodeAt(start);
  if (next == 60 /* '<' */) {
    for (var pos = start + 1; pos < text.length; pos++) {
      var ch = text.charCodeAt(pos);
      if (ch == 62 /* '>' */) return _elt(Type.URL, start + offset, pos + 1 + offset);
      if (ch == 60 || ch == 10 /* '<\n' */) return false;
    }
    return null;
  } else {
    var depth = 0,
      _pos2 = start;
    for (var escaped = false; _pos2 < text.length; _pos2++) {
      var _ch = text.charCodeAt(_pos2);
      if (space(_ch)) {
        break;
      } else if (escaped) {
        escaped = false;
      } else if (_ch == 40 /* '(' */) {
        depth++;
      } else if (_ch == 41 /* ')' */) {
        if (!depth) break;
        depth--;
      } else if (_ch == 92 /* '\\' */) {
        escaped = true;
      }
    }
    return _pos2 > start ? _elt(Type.URL, start + offset, _pos2 + offset) : _pos2 == text.length ? null : false;
  }
}
function parseLinkTitle(text, start, offset) {
  var next = text.charCodeAt(start);
  if (next != 39 && next != 34 && next != 40 /* '"\'(' */) return false;
  var end = next == 40 ? 41 : next;
  for (var pos = start + 1, escaped = false; pos < text.length; pos++) {
    var ch = text.charCodeAt(pos);
    if (escaped) escaped = false;else if (ch == end) return _elt(Type.LinkTitle, start + offset, pos + 1 + offset);else if (ch == 92 /* '\\' */) escaped = true;
  }
  return null;
}
function parseLinkLabel(text, start, offset, requireNonWS) {
  for (var escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
    var ch = text.charCodeAt(pos);
    if (escaped) escaped = false;else if (ch == 93 /* ']' */) return requireNonWS ? false : _elt(Type.LinkLabel, start + offset, pos + 1 + offset);else {
      if (requireNonWS && !space(ch)) requireNonWS = false;
      if (ch == 91 /* '[' */) return false;else if (ch == 92 /* '\\' */) escaped = true;
    }
  }
  return null;
}
/// Inline parsing functions get access to this context, and use it to
/// read the content and emit syntax nodes.
var InlineContext = /*#__PURE__*/function () {
  /// @internal
  function InlineContext(
  /// The parser that is being used.
  parser,
  /// The text of this inline section.
  text,
  /// The starting offset of the section in the document.
  offset) {
    _classCallCheck(this, InlineContext);
    this.parser = parser;
    this.text = text;
    this.offset = offset;
    /// @internal
    this.parts = [];
  }
  /// Get the character code at the given (document-relative)
  /// position.
  _createClass(InlineContext, [{
    key: "char",
    value: function char(pos) {
      return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset);
    }
    /// The position of the end of this inline section.
  }, {
    key: "end",
    get: function get() {
      return this.offset + this.text.length;
    }
    /// Get a substring of this inline section. Again uses
    /// document-relative positions.
  }, {
    key: "slice",
    value: function slice(from, to) {
      return this.text.slice(from - this.offset, to - this.offset);
    }
    /// @internal
  }, {
    key: "append",
    value: function append(elt) {
      this.parts.push(elt);
      return elt.to;
    }
    /// Add a [delimiter](#DelimiterType) at this given position. `open`
    /// and `close` indicate whether this delimiter is opening, closing,
    /// or both. Returns the end of the delimiter, for convenient
    /// returning from [parse functions](#InlineParser.parse).
  }, {
    key: "addDelimiter",
    value: function addDelimiter(type, from, to, open, close) {
      return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));
    }
    /// Add an inline element. Returns the end of the element.
  }, {
    key: "addElement",
    value: function addElement(elt) {
      return this.append(elt);
    }
    /// Resolve markers between this.parts.length and from, wrapping matched markers in the
    /// appropriate node and updating the content of this.parts. @internal
  }, {
    key: "resolveMarkers",
    value: function resolveMarkers(from) {
      // Scan forward, looking for closing tokens
      for (var _i3 = from; _i3 < this.parts.length; _i3++) {
        var close = this.parts[_i3];
        if (!(close instanceof InlineDelimiter && close.type.resolve && close.side & 2 /* Close */)) continue;
        var emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
        var closeSize = close.to - close.from;
        var open = void 0,
          j = _i3 - 1;
        // Continue scanning for a matching opening token
        for (; j >= from; j--) {
          var part = this.parts[j];
          if (part instanceof InlineDelimiter && part.side & 1 /* Open */ && part.type == close.type &&
          // Ignore emphasis delimiters where the character count doesn't match
          !(emp && (close.side & 1 /* Open */ || part.side & 2 /* Close */) && (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
            open = part;
            break;
          }
        }
        if (!open) continue;
        var type = close.type.resolve,
          content = [];
        var start = open.from,
          end = close.to;
        // Emphasis marker effect depends on the character count. Size consumed is minimum of the two
        // markers.
        if (emp) {
          var size = Math.min(2, open.to - open.from, closeSize);
          start = open.to - size;
          end = close.from + size;
          type = size == 1 ? "Emphasis" : "StrongEmphasis";
        }
        // Move the covered region into content, optionally adding marker nodes
        if (open.type.mark) content.push(this.elt(open.type.mark, start, open.to));
        for (var k = j + 1; k < _i3; k++) {
          if (this.parts[k] instanceof Element) content.push(this.parts[k]);
          this.parts[k] = null;
        }
        if (close.type.mark) content.push(this.elt(close.type.mark, close.from, end));
        var element = this.elt(type, start, end, content);
        // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
        this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
        var keep = this.parts[_i3] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
        // Insert the new element in this.parts
        if (keep) this.parts.splice(_i3, 0, element);else this.parts[_i3] = element;
      }
      // Collect the elements remaining in this.parts into an array.
      var result = [];
      for (var _i4 = from; _i4 < this.parts.length; _i4++) {
        var _part = this.parts[_i4];
        if (_part instanceof Element) result.push(_part);
      }
      return result;
    }
    /// Find an opening delimiter of the given type. Returns `null` if
    /// no delimiter is found, or an index that can be passed to
    /// [`takeContent`](#InlineContext.takeContent) otherwise.
  }, {
    key: "findOpeningDelimiter",
    value: function findOpeningDelimiter(type) {
      for (var _i5 = this.parts.length - 1; _i5 >= 0; _i5--) {
        var part = this.parts[_i5];
        if (part instanceof InlineDelimiter && part.type == type) return _i5;
      }
      return null;
    }
    /// Remove all inline elements and delimiters starting from the
    /// given index (which you should get from
    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
    /// resolve delimiters inside of them, and return them as an array
    /// of elements.
  }, {
    key: "takeContent",
    value: function takeContent(startIndex) {
      var content = this.resolveMarkers(startIndex);
      this.parts.length = startIndex;
      return content;
    }
    /// Skip space after the given (document) position, returning either
    /// the position of the next non-space character or the end of the
    /// section.
  }, {
    key: "skipSpace",
    value: function skipSpace(from) {
      return _skipSpace(this.text, from - this.offset) + this.offset;
    }
  }, {
    key: "elt",
    value: function elt(type, from, to, children) {
      if (typeof type == "string") return _elt(this.parser.getNodeType(type), from, to, children);
      return new TreeElement(type, from);
    }
  }]);
  return InlineContext;
}();
exports.InlineContext = InlineContext;
function injectMarks(elements, marks) {
  if (!marks.length) return elements;
  if (!elements.length) return marks;
  var elts = elements.slice(),
    eI = 0;
  var _iterator22 = _createForOfIteratorHelper(marks),
    _step22;
  try {
    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
      var mark = _step22.value;
      while (eI < elts.length && elts[eI].to < mark.to) eI++;
      if (eI < elts.length && elts[eI].from < mark.from) {
        var e = elts[eI];
        if (e instanceof Element) elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));
      } else {
        elts.splice(eI++, 0, mark);
      }
    }
  } catch (err) {
    _iterator22.e(err);
  } finally {
    _iterator22.f();
  }
  return elts;
}
// These are blocks that can span blank lines, and should thus only be
// reused if their next sibling is also being reused.
var NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
var FragmentCursor = /*#__PURE__*/function () {
  function FragmentCursor(fragments, input) {
    _classCallCheck(this, FragmentCursor);
    this.fragments = fragments;
    this.input = input;
    // Index into fragment array
    this.i = 0;
    // Active fragment
    this.fragment = null;
    this.fragmentEnd = -1;
    // Cursor into the current fragment, if any. When `moveTo` returns
    // true, this points at the first block after `pos`.
    this.cursor = null;
    if (fragments.length) this.fragment = fragments[this.i++];
  }
  _createClass(FragmentCursor, [{
    key: "nextFragment",
    value: function nextFragment() {
      this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
      this.cursor = null;
      this.fragmentEnd = -1;
    }
  }, {
    key: "moveTo",
    value: function moveTo(pos, lineStart) {
      while (this.fragment && this.fragment.to <= pos) this.nextFragment();
      if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0)) return false;
      if (this.fragmentEnd < 0) {
        var end = this.fragment.to;
        while (end > 0 && this.input.read(end - 1, end) != "\n") end--;
        this.fragmentEnd = end ? end - 1 : 0;
      }
      var c = this.cursor;
      if (!c) {
        c = this.cursor = this.fragment.tree.cursor();
        c.firstChild();
      }
      var rPos = pos + this.fragment.offset;
      while (c.to <= rPos) if (!c.parent()) return false;
      for (;;) {
        if (c.from >= rPos) return this.fragment.from <= lineStart;
        if (!c.childAfter(rPos)) return false;
      }
    }
  }, {
    key: "matches",
    value: function matches(hash) {
      var tree = this.cursor.tree;
      return tree && tree.prop(_common.NodeProp.contextHash) == hash;
    }
  }, {
    key: "takeNodes",
    value: function takeNodes(cx) {
      var cur = this.cursor,
        off = this.fragment.offset,
        fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
      var start = cx.absoluteLineStart,
        end = start,
        blockI = cx.block.children.length;
      var prevEnd = end,
        prevI = blockI;
      for (;;) {
        if (cur.to - off > fragEnd) {
          if (cur.type.isAnonymous && cur.firstChild()) continue;
          break;
        }
        cx.dontInject.add(cur.tree);
        cx.addNode(cur.tree, cur.from - off);
        // Taken content must always end in a block, because incremental
        // parsing happens on block boundaries. Never stop directly
        // after an indented code block, since those can continue after
        // any number of blank lines.
        if (cur.type.is("Block")) {
          if (NotLast.indexOf(cur.type.id) < 0) {
            end = cur.to - off;
            blockI = cx.block.children.length;
          } else {
            end = prevEnd;
            blockI = prevI;
            prevEnd = cur.to - off;
            prevI = cx.block.children.length;
          }
        }
        if (!cur.nextSibling()) break;
      }
      while (cx.block.children.length > blockI) {
        cx.block.children.pop();
        cx.block.positions.pop();
      }
      return end - start;
    }
  }]);
  return FragmentCursor;
}();
var markdownHighlighting = (0, _highlight.styleTags)({
  "Blockquote/...": _highlight.tags.quote,
  HorizontalRule: _highlight.tags.contentSeparator,
  "ATXHeading1/... SetextHeading1/...": _highlight.tags.heading1,
  "ATXHeading2/... SetextHeading2/...": _highlight.tags.heading2,
  "ATXHeading3/...": _highlight.tags.heading3,
  "ATXHeading4/...": _highlight.tags.heading4,
  "ATXHeading5/...": _highlight.tags.heading5,
  "ATXHeading6/...": _highlight.tags.heading6,
  "Comment CommentBlock": _highlight.tags.comment,
  Escape: _highlight.tags.escape,
  Entity: _highlight.tags.character,
  "Emphasis/...": _highlight.tags.emphasis,
  "StrongEmphasis/...": _highlight.tags.strong,
  "Link/... Image/...": _highlight.tags.link,
  "OrderedList/... BulletList/...": _highlight.tags.list,
  "BlockQuote/...": _highlight.tags.quote,
  "InlineCode CodeText": _highlight.tags.monospace,
  URL: _highlight.tags.url,
  "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": _highlight.tags.processingInstruction,
  "CodeInfo LinkLabel": _highlight.tags.labelName,
  LinkTitle: _highlight.tags.string,
  Paragraph: _highlight.tags.content
});
/// The default CommonMark parser.
var parser = new MarkdownParser(new _common.NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(function (n) {
  return DefaultBlockParsers[n];
}), Object.keys(DefaultBlockParsers).map(function (n) {
  return DefaultLeafBlocks[n];
}), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(function (n) {
  return DefaultInline[n];
}), Object.keys(DefaultInline), []);
exports.parser = parser;
function leftOverSpace(node, from, to) {
  var ranges = [];
  for (var n = node.firstChild, pos = from;; n = n.nextSibling) {
    var nextPos = n ? n.from : to;
    if (nextPos > pos) ranges.push({
      from: pos,
      to: nextPos
    });
    if (!n) break;
    pos = n.to;
  }
  return ranges;
}
/// Create a Markdown extension to enable nested parsing on code
/// blocks and/or embedded HTML.
function parseCode(config) {
  var codeParser = config.codeParser,
    htmlParser = config.htmlParser;
  var wrap = (0, _common.parseMixed)(function (node, input) {
    var id = node.type.id;
    if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {
      var info = "";
      if (id == Type.FencedCode) {
        var infoNode = node.node.getChild(Type.CodeInfo);
        if (infoNode) info = input.read(infoNode.from, infoNode.to);
      }
      var _parser4 = codeParser(info);
      if (_parser4) return {
        parser: _parser4,
        overlay: function overlay(node) {
          return node.type.id == Type.CodeText;
        }
      };
    } else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {
      return {
        parser: htmlParser,
        overlay: leftOverSpace(node.node, node.from, node.to)
      };
    }
    return null;
  });
  return {
    wrap: wrap
  };
}
var StrikethroughDelim = {
  resolve: "Strikethrough",
  mark: "StrikethroughMark"
};
/// An extension that implements
/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
/// Strikethrough syntax using `~~` delimiters.
var Strikethrough = {
  defineNodes: [{
    name: "Strikethrough",
    style: {
      "Strikethrough/...": _highlight.tags.strikethrough
    }
  }, {
    name: "StrikethroughMark",
    style: _highlight.tags.processingInstruction
  }],
  parseInline: [{
    name: "Strikethrough",
    parse: function parse(cx, next, pos) {
      if (next != 126 /* '~' */ || cx["char"](pos + 1) != 126 || cx["char"](pos + 2) == 126) return -1;
      var before = cx.slice(pos - 1, pos),
        after = cx.slice(pos + 2, pos + 3);
      var sBefore = /\s|^$/.test(before),
        sAfter = /\s|^$/.test(after);
      var pBefore = Punctuation.test(before),
        pAfter = Punctuation.test(after);
      return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
    },
    after: "Emphasis"
  }]
};
exports.Strikethrough = Strikethrough;
function parseRow(cx, line) {
  var startI = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var elts = arguments.length > 3 ? arguments[3] : undefined;
  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var count = 0,
    first = true,
    cellStart = -1,
    cellEnd = -1,
    esc = false;
  var parseCell = function parseCell() {
    elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
  };
  for (var _i6 = startI; _i6 < line.length; _i6++) {
    var next = line.charCodeAt(_i6);
    if (next == 124 /* '|' */ && !esc) {
      if (!first || cellStart > -1) count++;
      first = false;
      if (elts) {
        if (cellStart > -1) parseCell();
        elts.push(cx.elt("TableDelimiter", _i6 + offset, _i6 + offset + 1));
      }
      cellStart = cellEnd = -1;
    } else if (esc || next != 32 && next != 9) {
      if (cellStart < 0) cellStart = _i6;
      cellEnd = _i6 + 1;
    }
    esc = !esc && next == 92;
  }
  if (cellStart > -1) {
    count++;
    if (elts) parseCell();
  }
  return count;
}
function hasPipe(str, start) {
  for (var _i7 = start; _i7 < str.length; _i7++) {
    var next = str.charCodeAt(_i7);
    if (next == 124 /* '|' */) return true;
    if (next == 92 /* '\\' */) _i7++;
  }
  return false;
}
var delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
var TableParser = /*#__PURE__*/function () {
  function TableParser() {
    _classCallCheck(this, TableParser);
    // Null means we haven't seen the second line yet, false means this
    // isn't a table, and an array means this is a table and we've
    // parsed the given rows so far.
    this.rows = null;
  }
  _createClass(TableParser, [{
    key: "nextLine",
    value: function nextLine(cx, line, leaf) {
      if (this.rows == null) {
        // Second line
        this.rows = false;
        var lineText;
        if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) && delimiterLine.test(lineText = line.text.slice(line.pos))) {
          var firstRow = [],
            firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
          if (firstCount == parseRow(cx, lineText, line.pos)) this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow), cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
        }
      } else if (this.rows) {
        // Line after the second
        var content = [];
        parseRow(cx, line.text, line.pos, content, cx.lineStart);
        this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
      }
      return false;
    }
  }, {
    key: "finish",
    value: function finish(cx, leaf) {
      if (!this.rows) return false;
      cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
      return true;
    }
  }]);
  return TableParser;
}(); /// This extension provides
/// [GFM-style](https://github.github.com/gfm/#tables-extension-)
/// tables, using syntax like this:
///
/// ```
/// | head 1 | head 2 |
/// | ---    | ---    |
/// | cell 1 | cell 2 |
/// ```
var Table = {
  defineNodes: [{
    name: "Table",
    block: true
  }, {
    name: "TableHeader",
    style: {
      "TableHeader/...": _highlight.tags.heading
    }
  }, "TableRow", {
    name: "TableCell",
    style: _highlight.tags.content
  }, {
    name: "TableDelimiter",
    style: _highlight.tags.processingInstruction
  }],
  parseBlock: [{
    name: "Table",
    leaf: function leaf(_, _leaf) {
      return hasPipe(_leaf.content, 0) ? new TableParser() : null;
    },
    endLeaf: function endLeaf(cx, line, leaf) {
      if (leaf.parsers.some(function (p) {
        return p instanceof TableParser;
      }) || !hasPipe(line.text, line.basePos)) return false;
      var next = cx.scanLine(cx.absoluteLineEnd + 1).text;
      return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
    },
    before: "SetextHeading"
  }]
};
exports.Table = Table;
var TaskParser = /*#__PURE__*/function () {
  function TaskParser() {
    _classCallCheck(this, TaskParser);
  }
  _createClass(TaskParser, [{
    key: "nextLine",
    value: function nextLine() {
      return false;
    }
  }, {
    key: "finish",
    value: function finish(cx, leaf) {
      cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [cx.elt("TaskMarker", leaf.start, leaf.start + 3)].concat(_toConsumableArray(cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)))));
      return true;
    }
  }]);
  return TaskParser;
}(); /// Extension providing
/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
/// task list items, where list items can be prefixed with `[ ]` or
/// `[x]` to add a checkbox.
var TaskList = {
  defineNodes: [{
    name: "Task",
    block: true,
    style: _highlight.tags.list
  }, {
    name: "TaskMarker",
    style: _highlight.tags.atom
  }],
  parseBlock: [{
    name: "TaskList",
    leaf: function leaf(cx, _leaf2) {
      return /^\[[ xX]\]/.test(_leaf2.content) && cx.parentType().name == "ListItem" ? new TaskParser() : null;
    },
    after: "SetextHeading"
  }]
};
/// Extension bundle containing [`Table`](#Table),
/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).
exports.TaskList = TaskList;
var GFM = [Table, TaskList, Strikethrough];
exports.GFM = GFM;
function parseSubSuper(ch, node, mark) {
  return function (cx, next, pos) {
    if (next != ch || cx["char"](pos + 1) == ch) return -1;
    var elts = [cx.elt(mark, pos, pos + 1)];
    for (var _i8 = pos + 1; _i8 < cx.end; _i8++) {
      var _next = cx["char"](_i8);
      if (_next == ch) return cx.addElement(cx.elt(node, pos, _i8 + 1, elts.concat(cx.elt(mark, _i8, _i8 + 1))));
      if (_next == 92 /* '\\' */) elts.push(cx.elt("Escape", _i8, _i8++ + 2));
      if (space(_next)) break;
    }
    return -1;
  };
}
/// Extension providing
/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
/// superscript using `^` markers.
var Superscript = {
  defineNodes: [{
    name: "Superscript",
    style: _highlight.tags.special(_highlight.tags.content)
  }, {
    name: "SuperscriptMark",
    style: _highlight.tags.processingInstruction
  }],
  parseInline: [{
    name: "Superscript",
    parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
  }]
};
/// Extension providing
/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
/// subscript using `~` markers.
exports.Superscript = Superscript;
var Subscript = {
  defineNodes: [{
    name: "Subscript",
    style: _highlight.tags.special(_highlight.tags.content)
  }, {
    name: "SubscriptMark",
    style: _highlight.tags.processingInstruction
  }],
  parseInline: [{
    name: "Subscript",
    parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
  }]
};
/// Extension that parses two colons with only letters, underscores,
/// and numbers between them as `Emoji` nodes.
exports.Subscript = Subscript;
var Emoji = {
  defineNodes: [{
    name: "Emoji",
    style: _highlight.tags.character
  }],
  parseInline: [{
    name: "Emoji",
    parse: function parse(cx, next, pos) {
      var match;
      if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end)))) return -1;
      return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
    }
  }]
};
exports.Emoji = Emoji;

}).call(this)}).call(this,require("buffer").Buffer)
},{"@lezer/common":22,"@lezer/highlight":23,"buffer":2}],26:[function(require,module,exports){
'use strict';

const arrayMoveMutate = (array, from, to) => {
	const startIndex = from < 0 ? array.length + from : from;

	if (startIndex >= 0 && startIndex < array.length) {
		const endIndex = to < 0 ? array.length + to : to;

		const [item] = array.splice(from, 1);
		array.splice(endIndex, 0, item);
	}
};

const arrayMove = (array, from, to) => {
	array = [...array];
	arrayMoveMutate(array, from, to);
	return array;
};

module.exports = arrayMove;
module.exports.mutate = arrayMoveMutate;

},{}],27:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ZeebePropertiesProviderModule=exports.ZeebeDescriptionProvider=exports.ElementTemplatesPropertiesProviderModule=exports.CloudElementTemplatesValidator=exports.CloudElementTemplatesPropertiesProviderModule=exports.CamundaPlatformPropertiesProviderModule=exports.BpmnPropertiesProviderModule=exports.BpmnPropertiesPanelModule=void 0;exports.useService=useService;var _hooks=require("@bpmn-io/properties-panel/preact/hooks");var _minDash=require("min-dash");var _propertiesPanel=require("@bpmn-io/properties-panel");var _preact=require("@bpmn-io/properties-panel/preact");var _LabelUtil=require("bpmn-js/lib/features/label-editing/LabelUtil");var _ModelUtil=require("bpmn-js/lib/util/ModelUtil");var _DiUtil=require("bpmn-js/lib/util/DiUtil");var _compat=_interopRequireDefault(require("@bpmn-io/properties-panel/preact/compat"));var _jsxRuntime=require("@bpmn-io/properties-panel/preact/jsx-runtime");var _KeyboardUtil=require("diagram-js/lib/features/keyboard/KeyboardUtil");var _minDom=require("min-dom");var _ModelingUtil=require("bpmn-js/lib/features/modeling/util/ModelingUtil");var _ids=_interopRequireDefault(require("ids"));var _Collections=require("diagram-js/lib/util/Collections");var _zeebe=require("@bpmn-io/extract-process-variables/zeebe");var _arrayMove=require("array-move");var _extractProcessVariables=require("@bpmn-io/extract-process-variables");var _translate=_interopRequireDefault(require("diagram-js/lib/i18n/translate"));var _uuid=require("uuid");var _CommandInterceptor7=_interopRequireDefault(require("diagram-js/lib/command/CommandInterceptor"));var _semverCompare=_interopRequireDefault(require("semver-compare"));var _elementTemplatesValidator=require("@bpmn-io/element-templates-validator");var _classnames=_interopRequireDefault(require("classnames"));var _excluded=["styles"],_excluded2=["styles"],_excluded3=["styles"],_excluded4=["styles"],_excluded5=["styles"],_excluded6=["styles"],_excluded7=["styles"],_excluded8=["styles"],_excluded9=["styles"],_excluded10=["styles"],_excluded11=["styles"],_excluded12=["styles"],_excluded13=["styles"],_excluded14=["styles"],_excluded15=["styles"],_excluded16=["styles"],_excluded17=["styles"],_excluded18=["styles"],_excluded19=["styles"],_excluded20=["styles"],_excluded21=["styles"],_excluded22=["styles"],_excluded23=["styles"],_excluded24=["styles"],_excluded25=["styles"],_excluded26=["styles"],_excluded27=["styles"],_excluded28=["styles"],_excluded29=["styles"],_excluded30=["styles"],_excluded31=["styles"],_excluded32=["styles"],_excluded33=["styles"],_excluded34=["styles"],_excluded35=["styles"],_excluded36=["styles"],_excluded37=["styles"],_excluded38=["styles"],_excluded39=["styles"],_excluded40=["styles"],_excluded41=["styles"],_excluded42=["styles"],_excluded43=["styles"],_excluded44=["styles"],_excluded45=["styles"],_excluded46=["styles"],_excluded47=["styles"],_excluded48=["styles"],_excluded49=["styles"],_excluded50=["styles"],_excluded51=["styles"],_excluded52=["styles"],_excluded53=["styles"],_excluded54=["styles"],_excluded55=["styles"],_excluded56=["styles"],_excluded57=["styles"],_excluded58=["styles"],_excluded59=["styles"],_excluded60=["styles"],_excluded61=["styles"],_excluded62=["styles"],_excluded63=["styles"],_excluded64=["styles"],_excluded65=["styles"],_excluded66=["styles"],_excluded67=["styles"],_excluded68=["styles"],_excluded69=["styles"],_excluded70=["styles"],_excluded71=["styles"],_excluded72=["styles"],_excluded73=["styles"],_excluded74=["styles"],_excluded75=["styles"],_excluded76=["styles"],_excluded77=["styles"],_excluded78=["styles"],_excluded79=["styles"],_excluded80=["styles"],_excluded81=["styles"],_excluded82=["styles"],_excluded83=["styles"],_excluded84=["styles"],_excluded85=["styles"],_excluded86=["styles"],_excluded87=["styles"],_excluded88=["styles"],_excluded89=["styles"],_excluded90=["latest"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},_typeof(obj);}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});Object.defineProperty(subClass,"prototype",{writable:false});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}else if(call!==void 0){throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e2){throw _e2;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e3){didErr=true;err=_e3;},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]();}finally{if(didErr)throw err;}}};}function _regeneratorRuntime(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},"");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)};}catch(err){return{type:"throw",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==_typeof(value)&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject);},function(err){invoke("throw",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke("throw",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg);}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,"throw"===methodName&&delegate.iterator["return"]&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,"toString",function(){return"[object Generator]";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},"catch":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error("illegal catch attempt");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&iter[Symbol.iterator]!=null||iter["@@iterator"]!=null)return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,_toPropertyKey(descriptor.key),descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,"prototype",{writable:false});return Constructor;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return _typeof(key)==="symbol"?key:String(key);}function _toPrimitive(input,hint){if(_typeof(input)!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(_typeof(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2;}function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1;}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err;}finally{try{if(!_n&&null!=_i["return"]&&(_r=_i["return"](),Object(_r)!==_r))return;}finally{if(_d)throw _e;}}return _arr;}}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var BpmnPropertiesPanelContext=(0,_preact.createContext)({selectedElement:null,injector:null,getService:function getService(){return null;}});function useService(type,strict){var _useContext=(0,_hooks.useContext)(BpmnPropertiesPanelContext),getService=_useContext.getService;return getService(type,strict);}function _extends$1o(){_extends$1o=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1o.apply(this,arguments);}var AssociationIcon=function AssociationIcon(_ref){var _ref$styles=_ref.styles,styles=_ref$styles===void 0?{}:_ref$styles,props=_objectWithoutProperties(_ref,_excluded);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1o({width:"32",height:"32",xmlns:"http://www.w3.org/2000/svg"},props),/*#__PURE__*/_compat["default"].createElement("path",{stroke:"#000",strokeWidth:"2",fill:"none",strokeDasharray:"3.3,6",strokeLinecap:"square",d:"M1.5 30.5l29-29"}));};function _extends$1n(){_extends$1n=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1n.apply(this,arguments);}var BusinessRuleTaskIcon=function BusinessRuleTaskIcon(_ref2){var _ref2$styles=_ref2.styles,styles=_ref2$styles===void 0?{}:_ref2$styles,props=_objectWithoutProperties(_ref2,_excluded2);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1n({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5zM5.296 7.398v12.665h16.87V7.398H5.296zm.718 4.386h15.433v3.44H9.985v-3.432h-.719v3.431H6.014v-3.44zm0 4.158h3.252v3.403H6.014v-3.403zm3.97 0h11.463v3.403H9.985v-3.403z"}),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.079 8.209v3.587H21.44V8.209z"}));};function _extends$1m(){_extends$1m=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1m.apply(this,arguments);}var CallActivityIcon=function CallActivityIcon(_ref3){var _ref3$styles=_ref3.styles,styles=_ref3$styles===void 0?{}:_ref3$styles,props=_objectWithoutProperties(_ref3,_excluded3);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1m({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M24.978 3c3.761 0 6.89 2.979 7.018 6.695l.004.238V22.4c0 3.747-3.05 6.804-6.783 6.93l-.24.003H7.023c-3.761 0-6.89-2.978-7.018-6.695L0 22.4V9.933C0 6.187 3.05 3.13 6.783 3.004L7.023 3h17.955zm0 3.667H7.022c-1.842 0-3.255 1.344-3.35 3.079l-.005.187V22.4c0 1.761 1.35 3.167 3.16 3.262l.195.005L10 25.666V15h12v10.666h2.978c1.842 0 3.255-1.344 3.35-3.079l.005-.187V9.933c0-1.761-1.35-3.166-3.16-3.261l-.195-.005zm-3.732 9.087H10.754v9.912h10.491v-9.912zm-4.475 1.817v2.658h2.658v1.542H16.77v2.658H15.23V21.77H12.57V20.23h2.658V17.57h1.542z"}));};function _extends$1l(){_extends$1l=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1l.apply(this,arguments);}var CollaborationIcon=function CollaborationIcon(_ref4){var _ref4$styles=_ref4.styles,styles=_ref4$styles===void 0?{}:_ref4$styles,props=_objectWithoutProperties(_ref4,_excluded4);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1l({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("g",{fillRule:"evenodd"},/*#__PURE__*/_compat["default"].createElement("path",{fillRule:"nonzero",d:"M0 0v8.62h32V0H0zm1.655 7.054v-5.37h28.62v5.37H1.656zM0 23.38V32h32v-8.62H0zm1.655 7.054v-5.37h28.62v5.37H1.656z"}),/*#__PURE__*/_compat["default"].createElement("path",{d:"M24 8l4 7h-8l4-7zm0 2l-2.28 4h4.56L24 10zM23.5 21h1v3h-1zM23.5 15h1v3h-1zM8 24l-4-7h8l-4 7zm0-2l2.28-4H5.72L8 22zM7.5 8h1v3h-1zM7.5 14h1v3h-1z"})));};function _extends$1k(){_extends$1k=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1k.apply(this,arguments);}var ConditionalFlowIcon=function ConditionalFlowIcon(_ref5){var _ref5$styles=_ref5.styles,styles=_ref5$styles===void 0?{}:_ref5$styles,props=_objectWithoutProperties(_ref5,_excluded5);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1k({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M32 .041S20.42 5.95 14.537 8.713c1.26 1.15 2.432 2.392 3.648 3.588-5.703 5.78-3.15 3.303-8.087 8.316l-8.472 1.377L0 32l10.006-1.626.098-.598 1.279-7.873c4.975-5.052 2.403-2.555 8.118-8.346 1.218 1.214 2.43 2.435 3.648 3.648C26.29 11.018 32 .041 32 .041zM9.603 22.397L8.54 28.91 2.03 29.97l1.061-6.515 6.512-1.058z"}));};function _extends$1j(){_extends$1j=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1j.apply(this,arguments);}var ConnectionIcon=function ConnectionIcon(_ref6){var _ref6$styles=_ref6.styles,styles=_ref6$styles===void 0?{}:_ref6$styles,props=_objectWithoutProperties(_ref6,_excluded6);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1j({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M32 .06S20.33 6.014 14.403 8.798c1.27 1.16 2.451 2.41 3.676 3.616L0 30.734 1.325 32l18.08-18.32c1.227 1.223 2.448 2.453 3.676 3.676C26.247 11.12 32 .06 32 .06z"}));};function _extends$1i(){_extends$1i=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1i.apply(this,arguments);}var DataInputOutputAssociationIcon=function DataInputOutputAssociationIcon(_ref7){var _ref7$styles=_ref7.styles,styles=_ref7$styles===void 0?{}:_ref7$styles,props=_objectWithoutProperties(_ref7,_excluded7);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1i({width:"32",height:"32",xmlns:"http://www.w3.org/2000/svg"},props),/*#__PURE__*/_compat["default"].createElement("path",{stroke:"#000",strokeWidth:"2",strokeLinecap:"round",strokeDasharray:"1.1,4.3",d:"M1.5 30.5L27 5"}),/*#__PURE__*/_compat["default"].createElement("path",{d:"M31.803.197L26.5 16.107l-1.52-1.52 3.783-11.35-11.35 3.783-1.52-1.52z"}));};function _extends$1h(){_extends$1h=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1h.apply(this,arguments);}var DataInputIcon=function DataInputIcon(_ref8){var _ref8$styles=_ref8.styles,styles=_ref8$styles===void 0?{}:_ref8$styles,props=_objectWithoutProperties(_ref8,_excluded8);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1h({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M20.833 0H3.488v32H28V7.36L20.833 0zm-2.105 1.818v7.507h7.454v20.857H5.306V1.818h13.422zm1.818.493l5.06 5.196h-5.06V2.311zm-9.182.86v3.744H7.081v3.222h4.283v3.743l5.7-5.354-5.7-5.354zm.808 1.868l3.711 3.487-3.71 3.487V9.329H7.888V7.723h4.283V5.039z"}));};function _extends$1g(){_extends$1g=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1g.apply(this,arguments);}var DataObjectIcon=function DataObjectIcon(_ref9){var _ref9$styles=_ref9.styles,styles=_ref9$styles===void 0?{}:_ref9$styles,props=_objectWithoutProperties(_ref9,_excluded9);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1g({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M21.345 0H4v32h24.512V7.36L21.345 0zM19.24 1.818v7.507h7.454v20.857H5.818V1.818H19.24zm1.818.493l5.06 5.196h-5.06V2.311z"}));};function _extends$1f(){_extends$1f=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1f.apply(this,arguments);}var DataOutputIcon=function DataOutputIcon(_ref10){var _ref10$styles=_ref10.styles,styles=_ref10$styles===void 0?{}:_ref10$styles,props=_objectWithoutProperties(_ref10,_excluded10);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1f({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M20.833 0H3.488v32H28V7.36L20.833 0zm-2.105 1.818v7.507h7.454v20.857H5.306V1.818h13.422zm1.818.493l5.06 5.196h-5.06V2.311zm-9.182.86v3.744H7.081v3.222h4.283v3.743l5.7-5.354-5.7-5.354z"}));};function _extends$1e(){_extends$1e=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1e.apply(this,arguments);}var DataStoreIcon=function DataStoreIcon(_ref11){var _ref11$styles=_ref11.styles,styles=_ref11$styles===void 0?{}:_ref11$styles,props=_objectWithoutProperties(_ref11,_excluded11);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1e({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.008 1c-3.712 0-7.417.306-10.319.939-1.45.316-2.7.71-3.68 1.226C1.065 3.662.297 4.304.061 5.23a.823.823 0 00-.035.15L0 5.502l.017.084c-.012 7.41 0 14.46 0 22.08l.017.082c.203.985.995 1.656 1.975 2.172.98.517 2.23.91 3.68 1.226 2.902.633 6.607.94 10.319.94 3.711 0 7.416-.307 10.318-.94 1.451-.316 2.701-.71 3.68-1.226.98-.516 1.772-1.187 1.975-2.172l.017-.082V5.541a.825.825 0 000-.106v-.016l-.002-.013a.823.823 0 00-.046-.197c-.244-.916-1.007-1.55-1.943-2.044-.98-.516-2.23-.91-3.68-1.226C23.423 1.306 19.718 1 16.006 1zm0 1.646c3.62 0 7.245.308 9.968.901 1.36.297 2.497.67 3.263 1.074.612.323.932.643 1.063.882-.131.24-.451.56-1.063.882-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.901-9.968.901-3.62 0-7.245-.307-9.968-.901-1.361-.297-2.497-.67-3.264-1.074-.611-.322-.931-.642-1.062-.882.13-.24.451-.56 1.062-.882.767-.403 1.903-.777 3.264-1.074 2.723-.593 6.348-.9 9.968-.9zM1.664 7.647c.112.067.227.132.345.194.98.517 2.23.91 3.68 1.226 2.902.633 6.607.94 10.319.94 3.711 0 7.416-.307 10.318-.94 1.451-.316 2.701-.71 3.68-1.226.119-.062.234-.127.346-.194v1.93c-.08.245-.398.619-1.113.995-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.901-9.968.901-3.62 0-7.245-.307-9.968-.9-1.361-.298-2.497-.671-3.264-1.075-.714-.376-1.032-.75-1.112-.995v-1.93zm0 4.187c.112.067.227.132.345.195.98.516 2.23.91 3.68 1.226 2.902.632 6.607.938 10.319.938 3.711 0 7.416-.306 10.318-.938 1.451-.317 2.701-.71 3.68-1.226.119-.063.234-.128.346-.195v1.93c-.08.245-.398.619-1.113.995-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.901-9.968.901-3.62 0-7.245-.307-9.968-.9-1.361-.298-2.497-.67-3.264-1.075-.714-.376-1.032-.75-1.112-.995v-1.93zm0 4.188c.112.067.227.131.345.194.98.516 2.23.91 3.68 1.226 2.902.633 6.607.939 10.319.939 3.711 0 7.416-.306 10.318-.94 1.451-.316 2.701-.709 3.68-1.225.119-.063.234-.127.346-.194V27.47c-.08.245-.398.618-1.113.995-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.9-9.968.9-3.62 0-7.245-.306-9.968-.9-1.361-.297-2.497-.67-3.264-1.074-.714-.377-1.032-.75-1.112-.995V16.022z"}));};function _extends$1d(){_extends$1d=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1d.apply(this,arguments);}var DefaultFlowIcon=function DefaultFlowIcon(_ref12){var _ref12$styles=_ref12.styles,styles=_ref12$styles===void 0?{}:_ref12$styles,props=_objectWithoutProperties(_ref12,_excluded12);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1d({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M32 .06S20.33 6.014 14.403 8.798c1.27 1.16 2.451 2.41 3.676 3.616L6.84 23.804H.046v1.755h5.063L0 30.735 1.325 32l6.357-6.441h7.145v-1.756H9.414l9.99-10.123c1.228 1.223 2.45 2.453 3.677 3.676C26.247 11.12 32 .06 32 .06z"}));};function _extends$1c(){_extends$1c=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1c.apply(this,arguments);}var EndEventCancelIcon=function EndEventCancelIcon(_ref13){var _ref13$styles=_ref13.styles,styles=_ref13$styles===void 0?{}:_ref13$styles,props=_objectWithoutProperties(_ref13,_excluded13);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1c({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0015.676.05zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm-3.955 3.918L8.94 12.072l3.985 3.985-3.913 3.913 3.048 3.047 3.913-3.913 3.987 3.987 3.096-3.096-3.987-3.987 3.913-3.913-3.047-3.048-3.913 3.913-3.985-3.985z"}));};function _extends$1b(){_extends$1b=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1b.apply(this,arguments);}var EndEventCompensationIcon=function EndEventCompensationIcon(_ref14){var _ref14$styles=_ref14.styles,styles=_ref14$styles===void 0?{}:_ref14$styles,props=_objectWithoutProperties(_ref14,_excluded14);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1b({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0015.676.05zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm-.56 5.744l-7.407 5.23 7.408 5.234v-5.057c2.384 1.687 4.771 3.371 7.157 5.057V10.801l-7.157 5.054v-5.054z"}));};function _extends$1a(){_extends$1a=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1a.apply(this,arguments);}var EndEventErrorIcon=function EndEventErrorIcon(_ref15){var _ref15$styles=_ref15.styles,styles=_ref15$styles===void 0?{}:_ref15$styles,props=_objectWithoutProperties(_ref15,_excluded15);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1a({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0015.676.05zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm6.132 4.166l-3.633 7.363-4.516-5.874-4.102 12.131 4.599-5.91 4.743 5.427 2.909-13.137z"}));};function _extends$19(){_extends$19=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$19.apply(this,arguments);}var EndEventEscalationIcon=function EndEventEscalationIcon(_ref16){var _ref16$styles=_ref16.styles,styles=_ref16$styles===void 0?{}:_ref16$styles,props=_objectWithoutProperties(_ref16,_excluded16);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$19({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0015.676.05zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm.006 3.9c-1.672 4.653-2.733 9.5-4.406 14.153 1.535-1.525 2.872-3.234 4.406-4.759l4.406 4.76c-1.497-4.71-2.91-9.445-4.406-14.155z"}));};function _extends$18(){_extends$18=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$18.apply(this,arguments);}var EndEventLinkIcon=function EndEventLinkIcon(_ref17){var _ref17$styles=_ref17.styles,styles=_ref17$styles===void 0?{}:_ref17$styles,props=_objectWithoutProperties(_ref17,_excluded17);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$18({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676 0C7.943.007.834 6.45.104 14.16c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 4.958 23.394.313 16.978.032A18.532 18.532 0 0015.676 0zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm1.78 4.065v3.555H9.779v6.713h7.994v3.554l5.828-6.91-5.828-6.912z"}));};function _extends$17(){_extends$17=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$17.apply(this,arguments);}var EndEventMessageIcon=function EndEventMessageIcon(_ref18){var _ref18$styles=_ref18.styles,styles=_ref18$styles===void 0?{}:_ref18$styles,props=_objectWithoutProperties(_ref18,_excluded18);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$17({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676 0C7.943.007.834 6.45.104 14.16c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 4.958 23.394.313 16.978.032A18.532 18.532 0 0015.676 0zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm-5.91 5.448l6.041 4.9 6.04-4.9H10.084zm-1.34 1.137v9.92h14.513v-9.718l-7.132 5.786-7.381-5.988z"}));};function _extends$16(){_extends$16=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$16.apply(this,arguments);}var EndEventMultipleIcon=function EndEventMultipleIcon(_ref19){var _ref19$styles=_ref19.styles,styles=_ref19$styles===void 0?{}:_ref19$styles,props=_objectWithoutProperties(_ref19,_excluded19);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$16({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676 0C7.943.007.834 6.45.104 14.16c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 4.958 23.394.313 16.978.032A18.529 18.529 0 0015.676 0zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm.011 3.039l-7.619 5.53 2.91 8.95h9.418l2.91-8.95-7.619-5.53z"}));};function _extends$15(){_extends$15=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$15.apply(this,arguments);}var EndEventNoneIcon=function EndEventNoneIcon(_ref20){var _ref20$styles=_ref20.styles,styles=_ref20$styles===void 0?{}:_ref20$styles,props=_objectWithoutProperties(_ref20,_excluded20);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$15({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.84.042C8.654-.01 1.913 5.437.4 12.454-1.057 18.62 1.554 25.495 6.784 29.09c5.076 3.636 12.31 3.92 17.59.544 5.309-3.251 8.435-9.744 7.445-15.921C30.91 7.307 25.795 1.738 19.442.422a16.064 16.064 0 00-3.602-.38zm.382 5.01c5.28-.017 10.13 4.353 10.669 9.61.687 5.025-2.552 10.281-7.423 11.792-4.754 1.617-10.486-.447-12.962-4.856-2.74-4.575-1.574-11.094 2.768-14.27a11.05 11.05 0 016.948-2.276z"}));};function _extends$14(){_extends$14=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$14.apply(this,arguments);}var EndEventSignalIcon=function EndEventSignalIcon(_ref21){var _ref21$styles=_ref21.styles,styles=_ref21$styles===void 0?{}:_ref21$styles,props=_objectWithoutProperties(_ref21,_excluded21);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$14({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0015.676.05zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm.006 3.492c-2.261 4.07-4.532 8.136-6.797 12.204h13.595L15.999 8.55z"}));};function _extends$13(){_extends$13=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$13.apply(this,arguments);}var EndEventTerminateIcon=function EndEventTerminateIcon(_ref22){var _ref22$styles=_ref22.styles,styles=_ref22$styles===void 0?{}:_ref22$styles,props=_objectWithoutProperties(_ref22,_excluded22);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$13({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0015.676.05zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 015.592-1.522zm.006 2.859c-5.264-.2-9.495 5.551-7.755 10.516 1.366 5.085 8.108 7.436 12.339 4.301 4.455-2.807 4.708-9.943.462-13.058A8.128 8.128 0 0016 7.915z"}));};function _extends$12(){_extends$12=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$12.apply(this,arguments);}var EventSubProcessExpandedIcon=function EventSubProcessExpandedIcon(_ref23){var _ref23$styles=_ref23.styles,styles=_ref23$styles===void 0?{}:_ref23$styles,props=_objectWithoutProperties(_ref23,_excluded23);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$12({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M7.295 4.78h1.779V3.003h-1.78V4.78zm3.558 0h1.779V3.003h-1.78V4.78zm3.557 0h1.78V3.003h-1.78V4.78zm3.558 0h1.78V3.003h-1.78V4.78zm3.558 0h1.779V3.003h-1.779V4.78zm3.558 0c.55.014 1.106-.034 1.654.045l.245-1.762c-.629-.096-1.266-.05-1.9-.061V4.78zM5.732 3.004a5.933 5.933 0 00-.915.093c.111.582.226 1.164.315 1.75.358-.101.947.098.746-.483-.096-.382.164-1.208-.146-1.36zm22.372 2.281c.427.234.812.547 1.13.915.42-.4 1.002-.777 1.33-1.18a5.863 5.863 0 00-1.593-1.289l-.867 1.554zm-25.27-1.44c-.587.354-1.11.811-1.539 1.345.47.333.96.86 1.417 1.077.299-.362.66-.673 1.065-.913-.328-.493-.55-1.055-.944-1.509zM30.515 7.26c-.563.046-.557.342-.378.784.154.25-.097.862.25.85.525-.023 1.14.043 1.612-.032a5.891 5.891 0 00-.362-2.027l-1.122.425zM.268 7.114A6.042 6.042 0 000 9.052h1.78c-.013-.5.047-1.003.208-1.478L.296 7.027l-.026.079-.002.008zM30.22 12.45H32v-1.779h-1.779v1.779zm-30.22.16h1.78v-1.779H0v1.78zm30.22 3.398H32v-1.78h-1.779v1.78zm-30.22.16h1.78v-1.779H0v1.779zm30.22 3.398H32v-1.78h-1.779v1.78zm-30.22.16h1.78v-1.78H0v1.78zm30.22 3.397H32v-1.779h-1.779v1.78zm-30.22.16h1.78v-1.778H0v1.778zm30.137 1.47a4.059 4.059 0 01-.522 1.32c.506.283 1.046.715 1.53.908a5.836 5.836 0 00.744-1.918c-.576-.094-1.209-.264-1.752-.31zm-29.984.51c.157.676.435 1.325.82 1.904l1.486-.977a4.065 4.065 0 01-.577-1.347l-1.73.42zm28.427 1.943c-.371.277-.79.49-1.234.627l.548 1.693a5.84 5.84 0 001.835-.96l-1.082-1.412-.066.05-.001.002zm-26.164 1.47c.567.413 1.21.722 1.886.907.14-.569.343-1.175.444-1.722a4.062 4.062 0 01-1.283-.624l-1.047 1.438zm3.88 1.119h1.779v-1.78h-1.78v1.78zm3.55 0h1.787v-1.78H9.846v1.78zm3.565 0h1.78v-1.78h-1.78v1.78zm3.558 0h1.78v-1.78h-1.78v1.78zm3.451 0h1.743v-1.78h-1.743v1.78zm3.665 0h1.779v-1.78h-1.78v1.78zm-1.922-.545V16.776H9.846V29.25h12.318zM10.967 17.905h10.068V27.97H10.967V17.905zm1.336 3.998v1.711h7.396v-1.711h-7.396z",opacity:".97"}));};function _extends$11(){_extends$11=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$11.apply(this,arguments);}var GatewayComplexIcon=function GatewayComplexIcon(_ref24){var _ref24$styles=_ref24.styles,styles=_ref24$styles===void 0?{}:_ref24$styles,props=_objectWithoutProperties(_ref24,_excluded24);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$11({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.001 0a1.29 1.29 0 00-.917.373L.373 15.084a1.316 1.316 0 00.002 1.834l14.71 14.709a1.313 1.313 0 001.833 0l14.711-14.711a1.316 1.316 0 00-.002-1.834L16.917.372A1.294 1.294 0 0016.002 0zM16 2.181l13.821 13.821L16 29.823 2.179 16.003 16 2.18zm-.327 6.79v.007l-.145.027-.118.08-.083.123-.028.145v4.954L11.793 10.8l-.125-.08-.14-.029-.144.027-.122.082-.46.46-.085.125-.026.142.028.14.08.125 3.505 3.505H9.347l-.001-.002-.145.032-.118.08-.083.122-.028.146v.652l.029.147.082.119.12.08.144.032h4.956L10.8 20.207v-.001l-.084.124-.026.142.028.14.08.124.46.461.126.082.14.029.143-.027.124-.084L15.3 17.69v4.964-.001l.028.147.082.12.12.08.144.031h.652l.148-.03.118-.08.083-.12.028-.146v-4.962l3.505 3.505.126.082.14.027.142-.027.124-.084.461-.46.083-.123s.028-.144.027-.146l-.028-.14-.082-.126-3.496-3.496h4.948l.148-.03.119-.08.082-.12.028-.147v-.652l-.028-.145-.083-.122-.119-.08s-.147-.033-.147-.031h-4.964l3.512-3.512.082-.122.029-.144-.028-.14-.084-.124-.46-.461-.123-.082-.14-.027-.145.027-.122.082-3.507 3.507V9.348l-.028-.146-.082-.122-.12-.08-.147-.029h-.652z"}));};function _extends$10(){_extends$10=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$10.apply(this,arguments);}var GatewayEventBasedIcon=function GatewayEventBasedIcon(_ref25){var _ref25$styles=_ref25.styles,styles=_ref25$styles===void 0?{}:_ref25$styles,props=_objectWithoutProperties(_ref25,_excluded25);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$10({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16 0a1.29 1.29 0 00-.918.373L.371 15.084a1.316 1.316 0 00.002 1.834l14.71 14.709a1.313 1.313 0 001.833 0l14.711-14.711a1.316 1.316 0 00-.002-1.834L16.915.372A1.294 1.294 0 0016 0zm-.002 2.181l13.821 13.821-13.821 13.821-13.821-13.82L15.998 2.18zm0 5.876l-.254.185-7.377 5.355 2.915 8.964h9.433l2.915-8.964-7.631-5.54zm0 1.07l6.614 4.8-2.526 7.769h-8.175l-2.526-7.768 6.614-4.802z"}));};function _extends$$(){_extends$$=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$$.apply(this,arguments);}var GatewayNoneIcon=function GatewayNoneIcon(_ref26){var _ref26$styles=_ref26.styles,styles=_ref26$styles===void 0?{}:_ref26$styles,props=_objectWithoutProperties(_ref26,_excluded26);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$$({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M.373 15.084a1.316 1.316 0 00.002 1.834l14.71 14.709a1.313 1.313 0 001.833 0l14.711-14.711a1.316 1.316 0 00-.002-1.834L16.917.373a1.313 1.313 0 00-1.833 0L.373 15.084zm1.806.918L16 2.182l13.821 13.82L16 29.823 2.179 16.003z"}));};function _extends$_(){_extends$_=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$_.apply(this,arguments);}var GatewayOrIcon=function GatewayOrIcon(_ref27){var _ref27$styles=_ref27.styles,styles=_ref27$styles===void 0?{}:_ref27$styles,props=_objectWithoutProperties(_ref27,_excluded27);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$_({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.001 0a1.29 1.29 0 00-.917.373L.373 15.084a1.316 1.316 0 00.002 1.834l14.71 14.709a1.313 1.313 0 001.833 0l14.711-14.711a1.316 1.316 0 00-.002-1.834L16.917.372A1.294 1.294 0 0016.002 0zM16 2.181l13.821 13.821L16 29.823 2.179 16.003 16 2.18zm0 6.379a7.447 7.447 0 00-7.44 7.441A7.447 7.447 0 0016 23.443 7.447 7.447 0 0023.443 16a7.447 7.447 0 00-7.441-7.441zm0 .825a6.61 6.61 0 016.617 6.616A6.61 6.61 0 0116 22.618 6.61 6.61 0 019.385 16 6.61 6.61 0 0116 9.385z"}));};function _extends$Z(){_extends$Z=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$Z.apply(this,arguments);}var GatewayParallelIcon=function GatewayParallelIcon(_ref28){var _ref28$styles=_ref28.styles,styles=_ref28$styles===void 0?{}:_ref28$styles,props=_objectWithoutProperties(_ref28,_excluded28);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$Z({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.001 0a1.29 1.29 0 00-.917.373L.373 15.084a1.316 1.316 0 00.002 1.834l14.71 14.709a1.313 1.313 0 001.833 0l14.711-14.711a1.316 1.316 0 00-.002-1.834L16.917.372A1.294 1.294 0 0016.002 0zM16 2.181l13.821 13.821L16 29.823 2.179 16.003 16 2.18zm-.377 5.708l-.168.032-.136.092-.096.14-.032.168v6.868h-6.87l-.002-.002-.166.037-.137.092v-.002l-.095.141-.033.167v.753s.032.169.034.17l.094.138.138.092.167.036h6.87v6.867l-.001-.001.033.17.095.138.138.092s.166.035.167.037h.752l.17-.036.137-.092.095-.137.033-.17v-6.867h6.868l.17-.035.137-.092.095-.137.033-.17v-.753s-.033-.165-.032-.167l-.096-.14-.138-.093s-.17-.037-.17-.035H16.81V8.323l-.033-.168-.094-.14-.138-.092-.17-.034h-.752z"}));};function _extends$Y(){_extends$Y=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$Y.apply(this,arguments);}var GatewayXorIcon=function GatewayXorIcon(_ref29){var _ref29$styles=_ref29.styles,styles=_ref29$styles===void 0?{}:_ref29$styles,props=_objectWithoutProperties(_ref29,_excluded29);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$Y({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16 0a1.29 1.29 0 00-.918.373L.371 15.084a1.316 1.316 0 00.002 1.834l14.71 14.709a1.313 1.313 0 001.833 0l14.711-14.711a1.316 1.316 0 00-.002-1.834L16.915.372A1.294 1.294 0 0016 0zm-.002 2.181l13.821 13.821-13.821 13.821-13.821-13.82L15.998 2.18zm-5.162 7.69l-.166.032-.141.096-.532.532s-.097.142-.097.144l-.03.164.032.162.093.144 4.857 4.858-4.855 4.855v-.001L9.9 21l-.03.164.032.162s.093.142.093.144l.531.532.146.095.162.032.164-.03.144-.097 4.855-4.856 4.857 4.857.145.095.162.032.164-.03.144-.097.531-.532.095-.14.033-.168-.033-.162-.095-.146L17.144 16 22 11.144l.095-.14.033-.166-.033-.163-.097-.144-.532-.532-.14-.095-.163-.032-.166.032-.141.095L16 14.855l-4.858-4.858v-.002l-.144-.092-.162-.032z"}));};function _extends$X(){_extends$X=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$X.apply(this,arguments);}var GroupIcon=function GroupIcon(_ref30){var _ref30$styles=_ref30.styles,styles=_ref30$styles===void 0?{}:_ref30$styles,props=_objectWithoutProperties(_ref30,_excluded30);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$X({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.34.016c-2.333.025-4.684 1.77-5.29 4.17C.608 5.848.88 7.608.804 9.314v2.922h2.041c.038-2.332-.076-4.673.062-7C3.14 3.355 4.869 1.938 6.643 2.04h8.956V.009c-3.086 0-6.173-.02-9.258 0v.007zm13.094 2.023h1.92V.009h-1.92v2.03zm5.756 0c1.265-.069 2.66.045 3.602 1.055 1.036.983 1.201 2.523 1.122 3.91v6.313h2.078c-.03-2.677.062-5.36-.047-8.032-.17-2.743-2.62-5.111-5.215-5.236-.511-.064-1.027-.02-1.54-.033v2.023zM.803 18.319h2.041v-2.026H.804v2.026zm29.11 1.084h2.08v-2.03h-2.08v2.03zM.804 26.148c.004 2.218 1.393 4.366 3.313 5.28 1.728.853 3.681.448 5.521.544.43-.112 1.29.231 1.435-.183v-1.847c-1.788-.043-3.584.094-5.365-.082-1.67-.354-2.919-2.048-2.863-3.844v-3.644H.804v3.777zm29.11-.068c.04 1.961-1.508 3.787-3.381 3.842-1.954.06-3.914.02-5.87.026v2.03c2.118-.042 4.242.08 6.355-.063 2.524-.264 4.818-2.644 4.94-5.323.08-1.039.014-2.085.035-3.126h-2.078v2.613zm-15.006 5.898h1.92v-2.03h-1.92v2.03z"}));};function _extends$W(){_extends$W=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$W.apply(this,arguments);}var IntermediateEventCatchCancelIcon=function IntermediateEventCatchCancelIcon(_ref31){var _ref31$styles=_ref31.styles,styles=_ref31$styles===void 0?{}:_ref31$styles,props=_objectWithoutProperties(_ref31,_excluded31);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$W({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.111.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.454 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.215-2.282-2.022-5.3-3.217-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.082 11.082 0 0116 5.021zm-3.956 3.946l-3.096 3.097 3.985 3.985-3.913 3.913 3.047 3.048 3.913-3.913 3.988 3.987 3.097-3.096L19.076 16l3.914-3.913-3.048-3.048-3.913 3.913-3.986-3.985zm-.002 1.222l3.988 3.987 3.913-3.913 1.826 1.826-3.913 3.913 3.985 3.986-1.873 1.873-3.985-3.985-3.913 3.913-1.827-1.827 3.914-3.913-3.988-3.987 1.873-1.873z"}));};function _extends$V(){_extends$V=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$V.apply(this,arguments);}var IntermediateEventCatchCompensationIcon=function IntermediateEventCatchCompensationIcon(_ref32){var _ref32$styles=_ref32.styles,styles=_ref32$styles===void 0?{}:_ref32$styles,props=_objectWithoutProperties(_ref32,_excluded32);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$V({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm-.56 5.772l-7.408 5.231 7.409 5.234v-5.057c2.385 1.687 4.771 3.371 7.157 5.057V10.793l-7.157 5.055v-5.055zm-.865 1.665v7.125l-5.048-3.562 5.048-3.563zm7.161 0v7.132l-5.048-3.566 5.048-3.566z"}));};function _extends$U(){_extends$U=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$U.apply(this,arguments);}var IntermediateEventCatchConditionIcon=function IntermediateEventCatchConditionIcon(_ref33){var _ref33$styles=_ref33.styles,styles=_ref33$styles===void 0?{}:_ref33$styles,props=_objectWithoutProperties(_ref33,_excluded33);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$U({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.97.04h-.127C8.713-.018 2.003 5.334.437 12.286c-1.51 6.123.98 13.005 6.136 16.665 5.125 3.788 12.546 4.105 17.912.623 5.272-3.276 8.33-9.766 7.325-15.916-.904-6.241-5.79-11.7-11.95-13.143A16.082 16.082 0 0015.97.04zm-.181 1.724c.115 0 .23 0 .347.003 6.625-.066 12.823 5.149 13.89 11.69 1.13 5.91-1.908 12.349-7.262 15.138-5.473 3.013-12.866 1.884-17.116-2.726C1.291 21.372.444 13.914 3.802 8.602c2.493-4.112 7.169-6.819 11.987-6.838zm.283 1.554c-.117 0-.234.002-.351.005-6.1 0-11.691 5.049-12.346 11.114-.78 5.684 2.795 11.612 8.218 13.52 5.139 1.943 11.416.101 14.624-4.38 3.461-4.583 3.262-11.538-.596-15.831-2.36-2.747-5.924-4.423-9.549-4.428zm-.078 1.695c.078 0 .156 0 .234.003 5.4 0 10.321 4.556 10.734 9.942.563 5.13-2.958 10.364-7.971 11.678-4.832 1.41-10.457-.935-12.746-5.446-2.463-4.559-1.2-10.795 3.014-13.883a11.072 11.072 0 016.735-2.294zm-5.352 4.266V22.761h10.716V9.279H10.642zm.863.866h8.987v11.75h-8.987v-11.75zm.927 1.323v.862h7.133v-.862h-7.133zm0 2.602v.866h7.133v-.866h-7.133zm0 3.008v.862h7.133v-.862h-7.133zm0 2.717v.863h7.133v-.863h-7.133z"}));};function _extends$T(){_extends$T=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$T.apply(this,arguments);}var IntermediateEventCatchErrorIcon=function IntermediateEventCatchErrorIcon(_ref34){var _ref34$styles=_ref34.styles,styles=_ref34$styles===void 0?{}:_ref34$styles,props=_objectWithoutProperties(_ref34,_excluded34);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$T({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm6.132 4.194c-1.21 2.455-2.422 4.91-3.633 7.364l-4.516-5.875-4.103 12.133 4.6-5.912c1.58 1.81 3.162 3.619 4.744 5.429L22.13 9.215zM14.383 13.1l4.295 5.445 1.073-2.387-1.027 4.131-4.384-5.157-1.778 2.75 1.821-4.782z"}));};function _extends$S(){_extends$S=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$S.apply(this,arguments);}var IntermediateEventCatchEscalationIcon=function IntermediateEventCatchEscalationIcon(_ref35){var _ref35$styles=_ref35.styles,styles=_ref35$styles===void 0?{}:_ref35$styles,props=_objectWithoutProperties(_ref35,_excluded35);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$S({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm.006 3.927c-1.672 4.654-2.734 9.502-4.406 14.155 1.534-1.525 2.872-3.234 4.406-4.759l4.406 4.76c-1.496-4.71-2.91-9.446-4.406-14.156zm.032 2.929c.822 2.586 1.598 5.186 2.42 7.771l-2.42-2.612c-.682.597-2.452 2.884-2.338 2.388.87-2.487 1.447-5.067 2.338-7.547z"}));};function _extends$R(){_extends$R=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$R.apply(this,arguments);}var IntermediateEventCatchLinkIcon=function IntermediateEventCatchLinkIcon(_ref36){var _ref36$styles=_ref36.styles,styles=_ref36$styles===void 0?{}:_ref36$styles,props=_objectWithoutProperties(_ref36,_excluded36);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$R({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm1.78 4.093v3.555H9.785v6.714h7.994v3.554l5.829-6.911-5.83-6.912zm.974 2.584l3.61 4.295-3.61 4.294v-1.933h-7.88v-4.688h7.88v-1.968z"}));};function _extends$Q(){_extends$Q=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$Q.apply(this,arguments);}var IntermediateEventCatchMessageIcon=function IntermediateEventCatchMessageIcon(_ref37){var _ref37$styles=_ref37.styles,styles=_ref37$styles===void 0?{}:_ref37$styles,props=_objectWithoutProperties(_ref37,_excluded37);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$Q({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm-7.245 5.475v11.06h14.502v-11.06H8.754zm3.222 1.728h8.057c-1.427.878-2.854 2.806-4.281 3.016l-3.776-3.016zm9.554 1.017v6.587H10.48V13.24l5.524 4.414 5.526-4.414z"}));};function _extends$P(){_extends$P=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$P.apply(this,arguments);}var IntermediateEventCatchMultipleIcon=function IntermediateEventCatchMultipleIcon(_ref38){var _ref38$styles=_ref38.styles,styles=_ref38$styles===void 0?{}:_ref38$styles,props=_objectWithoutProperties(_ref38,_excluded38);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$P({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 4.975zm.006 3.073l-7.62 5.531 2.91 8.95h9.42l2.91-8.95-7.62-5.53zm0 1.067l6.604 4.794-2.523 7.757h-8.162l-2.522-7.757 6.603-4.794z"}));};function _extends$O(){_extends$O=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$O.apply(this,arguments);}var IntermediateEventCatchNonInterruptingConditionIcon=function IntermediateEventCatchNonInterruptingConditionIcon(_ref39){var _ref39$styles=_ref39.styles,styles=_ref39$styles===void 0?{}:_ref39$styles,props=_objectWithoutProperties(_ref39,_excluded39);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$O({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M10.638 9.563V23.056h10.724V9.563H10.638zm.863.866h8.995v11.76H11.5V10.43zm.928 1.324v.862h7.139v-.862h-7.14zm0 2.605v.866h7.139v-.866h-7.14zm0 3.01v.863h7.139v-.863h-7.14zm0 2.72v.863h7.139v-.864h-7.14zM15.999.308h-.004l-.188.001h-.011l-.188.004h-.011L15.41.32h-.011l-.187.008h-.005L15.2.33l-.187.01h-.005l-.005.001-.187.013h-.011L14.62.37h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.185.027h-.005l-.005.001-.184.029h-.005l-.005.001-.183.031-.006.001-.005.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003.178-.001h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.176.027.17.03.174.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.087-.135.061-.15.032-.158.002-.16-.027-.16-.057-.15L20 1.023l-.108-.12-.128-.097-.145-.073-.128-.038-.158-.035-.005-.001-.005-.001L19.14.62h-.005l-.005-.002-.182-.035h-.006L18.938.58l-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.006-.001-.183-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.43 17.783.41l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.37h-.005L17.38.368l-.187-.015h-.005l-.005-.001-.187-.013h-.011L16.8.328h-.011L16.6.32h-.011l-.187-.006h-.011L16.204.31h-.011L16.005.31H16zm9.016 2.935l-.16.004-.158.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.126.125.124.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.084.152.084.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.16-.016.155-.046.144-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.003-.005-.002-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.003-.005-.101-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.005-.003-.004-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.004-.004-.003-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.004-.004-.132-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027zm-18.381.344l-.161.008-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003L4.682 5l-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.004-.003.005-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.004-.003.005-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023zM16 3.595h-.005l-.148.001h-.01l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.047.12.048.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.139-.107-.12-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.006-.002-.005-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.142-.031-.005-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.002-.143-.025-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01L16.32 3.6h-.011l-.147-.003h-.011l-.147-.001H16zm-5.482 1.366l-.16.008-.157.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.005.003-.004.004-.11.096-.004.004-.004.003-.11.098-.003.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.004.004-.003.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.004-.086.118-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.03.15-.057.138-.085.119-.109.082-.105.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022zm13.91 2.116l-.162.008-.157.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.025.159.055.152.082.138.086.103.09.09.094.098.092.099.093.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.114.068.118.067.115.065.118.064.117.062.117.061.121.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.048.127.047.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.085.137.11.119.129.096.145.07.155.043.16.013.161-.017.154-.046.144-.075.126-.1.106-.12.082-.14.055-.151.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.06-.132-.001-.005-.002-.004-.061-.132-.003-.004-.002-.005-.063-.13-.002-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.074-.125-.002-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.081-.12-.003-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.118-.003-.004-.004-.004-.087-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.094-.113-.003-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.11-.004-.003-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023zM4.45 13.135l-.161.002-.158.032-.15.06-.135.088-.118.11-.094.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.005-.019.145v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.005l-.001.006-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.005.033.142v.005l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.104.102-.125.076-.142.049-.153.02-.16-.011-.161-.031-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.133-.024-.133-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.133.01-.138.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029zm26.698 1.601l-.161.01-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.025.175-.026.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.16-.062.165-.062.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.079.158-.08.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.119.13.097.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.005.002-.004.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.171.001-.005.002-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.181.001-.005.001-.005.037-.182.002-.005v-.005l.036-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187V16.7l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02zm-30.21.572l-.161.001-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.004.074.17.002.005.002.004.076.169.002.004.002.005.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158-.074-.155-.074-.16-.071-.157-.07-.16-.068-.16-.067-.165-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178-.001-.177v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057-.159-.028zm26.798 2.024l-.16.007-.157.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.133-.026.133-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.063.119-.062.116-.067.119-.066.116-.069.115-.069.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.107-.085.11-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.081-.12.003-.005.003-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.005.003-.004.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.002-.005.003-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.001-.006.042-.138.001-.005.002-.005.04-.14v-.005l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.142.001-.005.001-.005.031-.141.001-.006.002-.005.029-.142v-.005l.002-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022zM6.841 23.019l-.16.024-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.109.04.048.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.105.004.004.004.004.103.105.004.004.004.003.105.104.003.004.004.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.004.003.005.004.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.002.126.073.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.067.005.003.004.002.13.066.004.002.005.003.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.002.133.057.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.16-.015.156-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.159-.061-.149-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.08-.11-.08-.109-.081-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006zm15.063 2.701l-.16.014-.156.044-.12.057-.06.034-.12.066-.117.064-.118.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.035-.13.036-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021.005-.001h.006l.143-.023.006-.001h.005l.143-.025h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.037h.005l.005-.002.14-.038.005-.002h.005l.14-.04.005-.002.005-.001.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.057.005-.002.005-.002.132-.057.005-.003.005-.002.132-.06.005-.001.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.003.005-.002.128-.066.005-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.003.065-.037.132-.093.112-.115.089-.135.062-.149.034-.157.003-.161-.026-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.046-.16-.016zM6.33 27.127l-.16.023-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.004.003.005.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.002.162.088.005.003.004.002.164.086.005.003.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.168.076.005.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.06.005.003.005.001.175.06.005.001.005.002.176.057.005.001.005.002.176.055.006.001.005.002.177.052.005.002.005.001.178.05.005.002.005.002.178.048.006.001.005.002.179.046.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.17-.044-.168-.046-.167-.047-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006zm19.215.087l-.16.01-.157.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.158.073-.157.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.047-.17.046-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.007.133-.016.115-.024.005-.001.005-.001.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002.005-.001.18-.046.004-.002h.005l.179-.05h.005l.005-.002.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.004-.002.005-.002.172-.068.005-.002.005-.002.171-.07.005-.001.005-.002.17-.072.005-.002.004-.002.17-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.003.167-.08.004-.002.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.003.163-.086.005-.002.005-.003.162-.088.005-.002.005-.003.161-.09.005-.002.004-.003.16-.092.005-.003.005-.002.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.003.155-.101.005-.003.004-.003.154-.104.004-.003.004-.003.153-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.112.004-.003.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02z"}));};function _extends$N(){_extends$N=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$N.apply(this,arguments);}var IntermediateEventCatchNonInterruptingEscalationIcon=function IntermediateEventCatchNonInterruptingEscalationIcon(_ref40){var _ref40$styles=_ref40.styles,styles=_ref40$styles===void 0?{}:_ref40$styles,props=_objectWithoutProperties(_ref40,_excluded40);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$N({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.012 9.222c-1.673 4.657-2.735 9.508-4.409 14.164 1.536-1.526 2.874-3.236 4.41-4.762l4.408 4.762c-1.497-4.712-2.911-9.451-4.409-14.164zm.032 2.93c.823 2.588 1.599 5.19 2.421 7.777l-2.42-2.614c-.683.598-2.454 2.886-2.34 2.39.871-2.489 1.448-5.07 2.34-7.552zM16.012.312c-1.448.02-2.93.157-4.302.628-.852.447-.255 1.863.66 1.574 2.255-.608 4.648-.607 6.922-.108.934.075 1.228-1.376.338-1.67C18.451.44 17.227.317 16.012.311zm9.012 2.934c-.913-.104-1.272 1.258-.454 1.648 1.834 1.36 3.293 3.185 4.31 5.22.526.776 1.842.098 1.515-.78a15.522 15.522 0 00-5.06-6.006c-.1-.044-.203-.07-.31-.082zM6.65 3.59c-.762.089-1.24.809-1.805 1.267C3.38 6.295 2.163 8.007 1.37 9.905c-.266.898 1.094 1.484 1.564.675a14.825 14.825 0 014.327-5.56c.476-.515.09-1.419-.612-1.431zm9.362.007c-.698.066-1.689-.16-2.033.635-.282.733.535 1.358 1.217 1.125 1.806-.147 3.63.203 5.293.907.902.255 1.472-1.112.656-1.573-1.6-.735-3.374-1.089-5.133-1.094zm-5.479 1.365c-.835.15-1.517.76-2.21 1.226-1.203.94-2.318 2.061-3.057 3.402-.33.904 1.063 1.552 1.547.723 1.045-1.656 2.596-2.925 4.285-3.873.545-.499.171-1.463-.565-1.478zm13.903 2.115c-.875-.07-1.22 1.173-.501 1.627 1.325 1.34 2.188 3.062 2.748 4.84.468.84 1.869.21 1.557-.699-.604-2.118-1.751-4.097-3.351-5.615a.93.93 0 00-.453-.153zM4.467 13.132c-.822-.07-.996.826-1.046 1.455-.256 1.93-.094 3.933.562 5.769.406.844 1.807.365 1.612-.551a11.498 11.498 0 01-.334-5.808.874.874 0 00-.794-.865zm26.687 1.6c-.746-.037-1.014.785-.879 1.395.043 2.393-.57 4.771-1.66 6.894-.31.884 1.02 1.536 1.53.75a15.632 15.632 0 001.821-8.372.876.876 0 00-.812-.667zm-30.197.571c-.782-.073-1.044.775-.933 1.404.068 2.414.661 4.833 1.809 6.962.534.77 1.842.076 1.505-.798a14.833 14.833 0 01-1.603-6.861.876.876 0 00-.778-.707zm26.787 2.024c-.777-.048-.952.797-1.021 1.392-.354 1.692-1.202 3.231-2.216 4.608-.407.872.925 1.638 1.48.852 1.361-1.733 2.296-3.827 2.582-6.017a.874.874 0 00-.825-.835zM6.857 23.012c-.808.018-1.082 1.122-.47 1.59 1.393 1.607 3.187 2.886 5.194 3.599.91.222 1.43-1.165.598-1.596a11.495 11.495 0 01-4.723-3.396.899.899 0 00-.599-.197zm15.057 2.7c-.81.194-1.504.76-2.325.972-1.203.458-2.5.536-3.758.664-.869.307-.573 1.728.346 1.663 2.201-.034 4.412-.626 6.293-1.778.604-.495.227-1.532-.556-1.521zM6.346 27.118c-.833.008-1.11 1.218-.395 1.617 1.986 1.602 4.358 2.749 6.868 3.226.933.076 1.227-1.376.338-1.67a14.838 14.838 0 01-6.345-3.066.929.929 0 00-.466-.107zm19.208.087c-.766.09-1.241.841-1.922 1.158-1.516.991-3.251 1.58-4.996 2.005-.872.405-.346 1.849.584 1.604 2.543-.526 4.98-1.66 6.963-3.344.47-.52.072-1.42-.63-1.423z"}));};function _extends$M(){_extends$M=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$M.apply(this,arguments);}var IntermediateEventCatchNonInterruptingMessageIcon=function IntermediateEventCatchNonInterruptingMessageIcon(_ref41){var _ref41$styles=_ref41.styles,styles=_ref41$styles===void 0?{}:_ref41$styles,props=_objectWithoutProperties(_ref41,_excluded41);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$M({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M8.742 10.464v11.072h14.516V10.464H8.742zm3.224 1.73h8.066a69569 69569 0 00-4.034 3.22l-4.032-3.22zm9.565 1.018v6.594H10.469v-6.593L16 17.63l5.532-4.419zM16 0h-.005l-.188.001h-.011l-.188.004h-.011l-.187.006h-.011l-.187.008h-.005L15.2.02l-.187.01h-.005l-.005.001-.187.013h-.011L14.62.06h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.185.027h-.005l-.005.001-.184.029h-.005l-.005.001-.183.031-.006.001-.005.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003L16 1.73h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.176.027.17.03.174.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.087-.135.061-.15.032-.158.002-.16-.027-.16-.057-.15L20 .714l-.108-.12-.128-.097-.145-.073-.128-.038-.158-.035-.005-.001-.005-.001L19.14.31h-.005l-.005-.002-.182-.035h-.006l-.005-.002-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.006-.001-.183-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.12 17.783.1l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.06h-.005L17.38.06l-.187-.015h-.005l-.005-.001-.187-.013h-.011L16.8.02h-.011L16.6.01h-.011l-.187-.006h-.011L16.204 0h-.011L16.005 0H16zm9.015 2.935l-.16.004-.158.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.126.125.124.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.084.152.084.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.16-.016.155-.046.144-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.003-.005-.002-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.003-.005-.101-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.005-.003-.004-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.004-.004-.003-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.004-.004-.132-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027zM6.634 3.28l-.161.008-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003-.004.004-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.004-.003.005-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.004-.003.005-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023zM16 3.286h-.005l-.148.001h-.01l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.047.12.048.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.139-.107-.12-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.006-.002-.005-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.142-.031-.005-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.002-.143-.025-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01l-.147-.005h-.011l-.147-.003h-.011l-.147-.001H16zm-5.482 1.366l-.16.008-.157.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.005.003-.004.004-.11.096-.004.004-.004.003-.11.098-.003.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.004.004-.003.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.004-.086.118-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.03.15-.057.138-.085.119-.109.082-.105.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022zm13.91 2.116l-.162.008-.157.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.025.159.055.152.082.138.086.103.09.09.094.098.092.099.093.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.114.068.118.067.115.065.118.064.117.062.117.061.121.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.048.127.047.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.085.137.11.119.129.096.145.07.155.043.16.013.161-.017.154-.046.144-.075.126-.1.106-.12.082-.14.055-.151.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.06-.132-.001-.005-.002-.004-.061-.132-.003-.004-.002-.005-.063-.13-.002-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.074-.125-.002-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.081-.12-.003-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.118-.003-.004-.004-.004-.087-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.094-.113-.003-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.11-.004-.003-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023zM4.45 12.826l-.161.002-.158.032-.15.06-.135.088-.118.11-.094.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.005-.019.145v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.005l-.001.006-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.005.033.142v.005l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.104.102-.125.076-.142.049-.153.02-.16-.011-.161-.031-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.133-.024-.133-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.133.01-.138.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029zm26.698 1.601l-.161.01-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.025.175-.026.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.16-.062.165-.062.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.079.158-.08.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.119.13.097.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.005.002-.004.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.171.001-.005.002-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.181.001-.005.001-.005.037-.182.002-.005v-.005l.036-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187v-.011l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02zM.938 15L.777 15l-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.004.074.17.002.005.002.004.076.169.002.004.002.005.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158L3.1 22.1l-.074-.16-.071-.157-.07-.16-.068-.16-.067-.165-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178L1.73 16v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057L.938 15zm26.798 2.024l-.16.007-.157.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.133-.026.133-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.063.119-.062.116-.067.119-.066.116-.069.115-.069.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.107-.085.11-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.081-.12.003-.005.003-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.005.003-.004.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.002-.005.003-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.001-.006.042-.138.001-.005.002-.005.04-.14V19.4l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.142.001-.005.001-.005.031-.141.001-.006.002-.005.029-.142v-.005l.002-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022zM6.841 22.71l-.16.024-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.109.04.048.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.105.004.004.004.004.103.105.004.004.004.003.105.104.003.004.004.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.004.003.005.004.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.002.126.073.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.067.005.003.004.002.13.066.004.002.005.003.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.002.133.057.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.16-.015.156-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.159-.061-.149-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.08-.11-.08-.109-.081-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006zm15.063 2.701l-.16.014-.156.044-.12.057-.06.034-.12.066-.117.064-.118.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.035-.13.036-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021.005-.001h.006l.143-.023.006-.001h.005l.143-.025h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.037h.005l.005-.002.14-.038.005-.002h.005l.14-.04.005-.002.005-.001.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.057.005-.002.005-.002.132-.057.005-.003.005-.002.132-.06.005-.001.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.003.005-.002.128-.066.005-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.003.065-.037.132-.093.112-.115.089-.135.062-.149.034-.157.003-.161-.026-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.046-.16-.016zM6.33 26.818l-.16.023-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.004.003.005.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.002.162.088.005.003.004.002.164.086.005.003.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.168.076.005.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.06.005.003.005.001.175.06.005.001.005.002.176.057.005.001.005.002.176.055.006.001.005.002.177.052.005.002.005.001.178.05.005.002.005.002.178.048.006.001.005.002.179.046.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.17-.044-.168-.046-.167-.047-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006zm19.215.087l-.16.01-.157.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.158.073-.157.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.047-.17.046-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.007.133-.016.115-.024.005-.001.005-.001.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002.005-.001.18-.046.004-.002h.005l.179-.05h.005l.005-.002.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.004-.002.005-.002.172-.068.005-.002.005-.002.171-.07.005-.001.005-.002.17-.072.005-.002.004-.002.17-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.003.167-.08.004-.002.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.003.163-.086.005-.002.005-.003.162-.088.005-.002.005-.003.161-.09.005-.002.004-.003.16-.092.005-.003.005-.002.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.003.155-.101.005-.003.004-.003.154-.104.004-.003.004-.003.153-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.112.004-.003.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02z"}));};function _extends$L(){_extends$L=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$L.apply(this,arguments);}var IntermediateEventCatchNonInterruptingMultipleIcon=function IntermediateEventCatchNonInterruptingMultipleIcon(_ref42){var _ref42$styles=_ref42.styles,styles=_ref42$styles===void 0?{}:_ref42$styles,props=_objectWithoutProperties(_ref42,_excluded42);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$L({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M23.637 13.902l-7.625-5.535-7.624 5.535 2.912 8.956h9.425l2.912-8.956zm-1.017.33l-2.524 7.762H11.93l-2.524-7.762 6.607-4.796 6.608 4.796zM16.012.311c-1.448.02-2.93.157-4.302.628-.852.447-.255 1.863.66 1.574 2.255-.608 4.648-.607 6.922-.108.934.075 1.228-1.376.338-1.67C18.451.44 17.227.317 16.012.311zm9.012 2.934c-.913-.104-1.272 1.258-.454 1.648 1.834 1.36 3.293 3.185 4.31 5.22.526.776 1.842.098 1.515-.78a15.522 15.522 0 00-5.06-6.006c-.1-.044-.203-.07-.31-.082zM6.65 3.59c-.762.089-1.24.809-1.805 1.267C3.38 6.295 2.163 8.007 1.37 9.905c-.266.898 1.094 1.484 1.564.675a14.825 14.825 0 014.327-5.56c.476-.515.09-1.419-.612-1.431zm9.362.007c-.698.066-1.689-.16-2.033.635-.282.733.535 1.358 1.217 1.125 1.806-.147 3.63.203 5.293.907.902.255 1.472-1.112.656-1.573-1.6-.735-3.374-1.089-5.133-1.094zm-5.479 1.365c-.835.15-1.517.76-2.21 1.226-1.203.94-2.318 2.061-3.057 3.402-.33.904 1.063 1.552 1.547.723 1.045-1.656 2.596-2.925 4.285-3.873.545-.499.171-1.463-.565-1.478zm13.903 2.115c-.875-.07-1.22 1.173-.501 1.627 1.325 1.34 2.188 3.062 2.748 4.84.468.84 1.869.21 1.557-.699-.604-2.118-1.751-4.097-3.351-5.615a.93.93 0 00-.453-.153zM4.467 13.132c-.822-.07-.996.826-1.046 1.455-.256 1.93-.094 3.933.562 5.769.406.844 1.807.365 1.612-.551a11.498 11.498 0 01-.334-5.808.874.874 0 00-.794-.865zm26.687 1.6c-.746-.037-1.014.785-.879 1.395.043 2.393-.57 4.771-1.66 6.894-.31.884 1.02 1.536 1.53.75a15.632 15.632 0 001.821-8.372.876.876 0 00-.812-.667zm-30.197.571c-.782-.073-1.044.775-.933 1.404.068 2.414.661 4.833 1.809 6.962.534.77 1.842.076 1.505-.798a14.833 14.833 0 01-1.603-6.861.876.876 0 00-.778-.707zm26.787 2.024c-.777-.048-.952.797-1.021 1.392-.354 1.692-1.202 3.231-2.216 4.608-.407.872.925 1.638 1.48.852 1.361-1.733 2.296-3.827 2.582-6.017a.874.874 0 00-.825-.835zM6.857 23.012c-.808.018-1.082 1.122-.47 1.59 1.393 1.607 3.187 2.886 5.194 3.599.91.222 1.43-1.165.598-1.596a11.495 11.495 0 01-4.723-3.396.899.899 0 00-.599-.197zm15.057 2.7c-.81.194-1.504.76-2.325.972-1.203.458-2.5.536-3.758.664-.869.307-.573 1.728.346 1.663 2.201-.034 4.412-.626 6.293-1.778.604-.495.227-1.532-.556-1.521zM6.346 27.118c-.833.008-1.11 1.218-.395 1.617 1.986 1.602 4.358 2.749 6.868 3.226.933.076 1.227-1.376.338-1.67a14.838 14.838 0 01-6.345-3.066.929.929 0 00-.466-.107zm19.208.087c-.766.09-1.241.841-1.922 1.158-1.516.991-3.251 1.58-4.996 2.005-.872.405-.346 1.849.584 1.604 2.543-.526 4.98-1.66 6.963-3.344.47-.52.072-1.42-.63-1.423z"}));};function _extends$K(){_extends$K=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$K.apply(this,arguments);}var IntermediateEventCatchNonInterruptingParallelIcon=function IntermediateEventCatchNonInterruptingParallelIcon(_ref43){var _ref43$styles=_ref43.styles,styles=_ref43$styles===void 0?{}:_ref43$styles,props=_objectWithoutProperties(_ref43,_excluded43);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$K({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M13.51 9.081v4.428H9.08v4.982h4.428v4.428h4.982V18.49h4.428v-4.982H18.49V9.081h-4.982zm.83.83h3.32v4.428h4.429v3.322H17.66v4.428h-3.32v-4.454H9.91v-3.296h4.428V9.911zM16 0h-.005l-.188.001h-.011l-.188.004h-.011l-.187.006h-.011l-.187.008h-.005L15.2.02l-.187.01h-.005l-.005.001-.187.013h-.011L14.62.06h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.185.027h-.005l-.005.001-.184.029h-.005l-.005.001-.183.031-.006.001-.005.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003L16 1.73h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.176.027.17.03.174.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.087-.135.061-.15.032-.158.002-.16-.027-.16-.057-.15L20 .714l-.108-.12-.128-.097-.145-.073-.128-.038-.158-.035-.005-.001-.005-.001L19.14.31h-.005l-.005-.002-.182-.035h-.006l-.005-.002-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.006-.001-.183-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.12 17.783.1l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.06h-.005L17.38.06l-.187-.015h-.005l-.005-.001-.187-.013h-.011L16.8.02h-.011L16.6.01h-.011l-.187-.006h-.011L16.204 0h-.011L16.005 0H16zm9.015 2.935l-.16.004-.158.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.126.125.124.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.084.152.084.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.16-.016.155-.046.144-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.003-.005-.002-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.003-.005-.101-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.005-.003-.004-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.004-.004-.003-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.004-.004-.132-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027zM6.634 3.28l-.161.008-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003-.004.004-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.004-.003.005-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.004-.003.005-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023zM16 3.286h-.005l-.148.001h-.01l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.047.12.048.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.139-.107-.12-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.006-.002-.005-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.142-.031-.005-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.002-.143-.025-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01l-.147-.005h-.011l-.147-.003h-.011l-.147-.001H16zm-5.482 1.366l-.16.008-.157.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.005.003-.004.004-.11.096-.004.004-.004.003-.11.098-.003.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.004.004-.003.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.004-.086.118-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.03.15-.057.138-.085.119-.109.082-.105.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022zm13.91 2.116l-.162.008-.157.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.025.159.055.152.082.138.086.103.09.09.094.098.092.099.093.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.114.068.118.067.115.065.118.064.117.062.117.061.121.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.048.127.047.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.085.137.11.119.129.096.145.07.155.043.16.013.161-.017.154-.046.144-.075.126-.1.106-.12.082-.14.055-.151.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.06-.132-.001-.005-.002-.004-.061-.132-.003-.004-.002-.005-.063-.13-.002-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.074-.125-.002-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.081-.12-.003-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.118-.003-.004-.004-.004-.087-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.094-.113-.003-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.11-.004-.003-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023zM4.45 12.826l-.161.002-.158.032-.15.06-.135.088-.118.11-.094.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.005-.019.145v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.005l-.001.006-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.005.033.142v.005l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.104.102-.125.076-.142.049-.153.02-.16-.011-.161-.031-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.133-.024-.133-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.133.01-.138.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029zm26.698 1.601l-.161.01-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.025.175-.026.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.16-.062.165-.062.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.079.158-.08.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.119.13.097.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.005.002-.004.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.171.001-.005.002-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.181.001-.005.001-.005.037-.182.002-.005v-.005l.036-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187v-.011l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02zM.938 15L.777 15l-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.004.074.17.002.005.002.004.076.169.002.004.002.005.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158L3.1 22.1l-.074-.16-.071-.157-.07-.16-.068-.16-.067-.165-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178L1.73 16v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057L.938 15zm26.798 2.024l-.16.007-.157.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.133-.026.133-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.063.119-.062.116-.067.119-.066.116-.069.115-.069.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.107-.085.11-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.081-.12.003-.005.003-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.005.003-.004.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.002-.005.003-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.001-.006.042-.138.001-.005.002-.005.04-.14V19.4l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.142.001-.005.001-.005.031-.141.001-.006.002-.005.029-.142v-.005l.002-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022zM6.841 22.71l-.16.024-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.109.04.048.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.105.004.004.004.004.103.105.004.004.004.003.105.104.003.004.004.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.004.003.005.004.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.002.126.073.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.067.005.003.004.002.13.066.004.002.005.003.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.002.133.057.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.16-.015.156-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.159-.061-.149-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.08-.11-.08-.109-.081-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006zm15.063 2.701l-.16.014-.156.044-.12.057-.06.034-.12.066-.117.064-.118.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.035-.13.036-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021.005-.001h.006l.143-.023.006-.001h.005l.143-.025h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.037h.005l.005-.002.14-.038.005-.002h.005l.14-.04.005-.002.005-.001.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.057.005-.002.005-.002.132-.057.005-.003.005-.002.132-.06.005-.001.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.003.005-.002.128-.066.005-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.003.065-.037.132-.093.112-.115.089-.135.062-.149.034-.157.003-.161-.026-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.046-.16-.016zM6.33 26.818l-.16.023-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.004.003.005.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.002.162.088.005.003.004.002.164.086.005.003.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.168.076.005.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.06.005.003.005.001.175.06.005.001.005.002.176.057.005.001.005.002.176.055.006.001.005.002.177.052.005.002.005.001.178.05.005.002.005.002.178.048.006.001.005.002.179.046.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.17-.044-.168-.046-.167-.047-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006zm19.215.087l-.16.01-.157.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.158.073-.157.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.047-.17.046-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.007.133-.016.115-.024.005-.001.005-.001.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002.005-.001.18-.046.004-.002h.005l.179-.05h.005l.005-.002.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.004-.002.005-.002.172-.068.005-.002.005-.002.171-.07.005-.001.005-.002.17-.072.005-.002.004-.002.17-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.003.167-.08.004-.002.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.003.163-.086.005-.002.005-.003.162-.088.005-.002.005-.003.161-.09.005-.002.004-.003.16-.092.005-.003.005-.002.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.003.155-.101.005-.003.004-.003.154-.104.004-.003.004-.003.153-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.112.004-.003.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02z",opacity:".98"}));};function _extends$J(){_extends$J=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$J.apply(this,arguments);}var IntermediateEventCatchNonInterruptingSignalIcon=function IntermediateEventCatchNonInterruptingSignalIcon(_ref44){var _ref44$styles=_ref44.styles,styles=_ref44$styles===void 0?{}:_ref44$styles,props=_objectWithoutProperties(_ref44,_excluded44);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$J({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.012 8.816L9.21 21.026h13.606l-6.803-12.21zm0 1.776l5.332 9.57H10.681l5.331-9.57zm0-10.281c-1.448.02-2.93.157-4.302.628-.852.447-.255 1.863.66 1.574 2.255-.608 4.648-.607 6.922-.108.934.075 1.228-1.376.338-1.67C18.451.44 17.227.317 16.012.311zm9.012 2.934c-.913-.104-1.272 1.258-.454 1.648 1.834 1.36 3.293 3.185 4.31 5.22.526.776 1.842.098 1.515-.78a15.522 15.522 0 00-5.06-6.006c-.1-.044-.203-.07-.31-.082zM6.65 3.59c-.762.089-1.24.809-1.805 1.267C3.38 6.295 2.163 8.007 1.37 9.905c-.266.898 1.094 1.484 1.564.675a14.825 14.825 0 014.327-5.56c.476-.515.09-1.419-.612-1.431zm9.362.007c-.698.066-1.689-.16-2.033.635-.282.733.535 1.358 1.217 1.125 1.806-.147 3.63.203 5.293.907.902.255 1.472-1.112.656-1.573-1.6-.735-3.374-1.089-5.133-1.094zm-5.479 1.365c-.835.15-1.517.76-2.21 1.226-1.203.94-2.318 2.061-3.057 3.402-.33.904 1.063 1.552 1.547.723 1.045-1.656 2.596-2.925 4.285-3.873.545-.499.171-1.463-.565-1.478zm13.903 2.115c-.875-.07-1.22 1.173-.501 1.627 1.325 1.34 2.188 3.062 2.748 4.84.468.84 1.869.21 1.557-.699-.604-2.118-1.751-4.097-3.351-5.615a.93.93 0 00-.453-.153zM4.467 13.132c-.822-.07-.996.826-1.046 1.455-.256 1.93-.094 3.933.562 5.769.406.844 1.807.365 1.612-.551a11.498 11.498 0 01-.334-5.808.874.874 0 00-.794-.865zm26.687 1.6c-.746-.037-1.014.785-.879 1.395.043 2.393-.57 4.771-1.66 6.894-.31.884 1.02 1.536 1.53.75a15.632 15.632 0 001.821-8.372.876.876 0 00-.812-.667zm-30.197.571c-.782-.073-1.044.775-.933 1.404.068 2.414.661 4.833 1.809 6.962.534.77 1.842.076 1.505-.798a14.833 14.833 0 01-1.603-6.861.876.876 0 00-.778-.707zm26.787 2.024c-.777-.048-.952.797-1.021 1.392-.354 1.692-1.202 3.231-2.216 4.608-.407.872.925 1.638 1.48.852 1.361-1.733 2.296-3.827 2.582-6.017a.874.874 0 00-.825-.835zM6.857 23.012c-.808.018-1.082 1.122-.47 1.59 1.393 1.607 3.187 2.886 5.194 3.599.91.222 1.43-1.165.598-1.596a11.495 11.495 0 01-4.723-3.396.899.899 0 00-.599-.197zm15.057 2.7c-.81.194-1.504.76-2.325.972-1.203.458-2.5.536-3.758.664-.869.307-.573 1.728.346 1.663 2.201-.034 4.412-.626 6.293-1.778.604-.495.227-1.532-.556-1.521zM6.346 27.118c-.833.008-1.11 1.218-.395 1.617 1.986 1.602 4.358 2.749 6.868 3.226.933.076 1.227-1.376.338-1.67a14.838 14.838 0 01-6.345-3.066.929.929 0 00-.466-.107zm19.208.087c-.766.09-1.241.841-1.922 1.158-1.516.991-3.251 1.58-4.996 2.005-.872.405-.346 1.849.584 1.604 2.543-.526 4.98-1.66 6.963-3.344.47-.52.072-1.42-.63-1.423z"}));};function _extends$I(){_extends$I=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$I.apply(this,arguments);}var IntermediateEventCatchNonInterruptingTimerIcon=function IntermediateEventCatchNonInterruptingTimerIcon(_ref45){var _ref45$styles=_ref45.styles,styles=_ref45$styles===void 0?{}:_ref45$styles,props=_objectWithoutProperties(_ref45,_excluded45);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$I({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.998 8.406c-3.018-.041-5.92 1.926-7.031 4.727-1.138 2.695-.51 6.012 1.537 8.103 1.99 2.141 5.268 2.93 8.014 1.927 2.878-.98 4.992-3.827 5.068-6.87.153-2.957-1.624-5.88-4.3-7.137a7.552 7.552 0 00-3.288-.75zm0 1.384c2.759-.052 5.373 1.973 6.015 4.655.704 2.578-.482 5.517-2.791 6.867-2.358 1.48-5.682 1.086-7.618-.918-2.043-1.971-2.407-5.381-.84-7.745 1.11-1.763 3.15-2.88 5.234-2.86zm1.962 1.765l-2.074 3.762c-.64.068-.793 1.04-.202 1.3.39.27.696-.18 1.052-.165h3.17v-.865h-3.182l1.993-3.615c-.252-.14-.505-.278-.757-.417zm-1.965-8.268h-.158l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.048.12.047.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.138-.107-.121-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.005-.002-.006-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.141-.031-.006-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.001-.143-.026-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01l-.147-.005h-.011l-.147-.003h-.01l-.148-.001h-.01zM10.357 4.66l-.156.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.004.003-.005.004-.11.096-.004.004-.004.003-.109.098-.004.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.003.004-.004.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.005-.086.117-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.029.15-.058.138-.085.119-.108.082-.106.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022-.16.008zm13.91 2.116l-.158.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.026.159.054.152.082.139.086.102.09.09.094.098.093.099.092.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.115.068.117.067.115.065.118.064.117.062.118.061.12.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.049.127.046.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.086.137.109.119.129.096.145.07.155.043.16.013.161-.017.155-.046.143-.074.126-.1.106-.122.082-.138.055-.152.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.059-.132-.002-.005-.002-.004-.061-.132-.003-.004-.002-.005-.062-.13-.003-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.073-.125-.003-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.08-.12-.004-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.117-.003-.005-.003-.004-.088-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.093-.113-.004-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.109-.004-.004-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023-.16.008zM4.288 12.828l-.158.032-.15.06-.135.088-.117.11-.095.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.006-.019.144v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.006l-.001.005-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.006.033.14v.006l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.103.102-.126.076-.142.049-.153.02-.16-.01-.161-.032-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.132-.024-.134-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.132.01-.139.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029-.16.002zm23.286 4.202l-.156.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.134-.026.132-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.062.119-.063.116-.067.119-.066.116-.068.115-.07.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.108-.085.109-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.082-.12.003-.005.002-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.004.003-.005.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.003-.005.002-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.002-.006.04-.138.002-.005.002-.005.04-.14V19.4l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.141.001-.006.001-.005.031-.141.002-.006v-.005l.03-.142.001-.005.001-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022-.16.007zM6.681 22.734l-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.11.04.047.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.106.004.003.004.004.103.105.004.004.004.004.105.103.004.004.003.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.005.004.004.003.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.003.126.072.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.068.005.002.004.002.13.066.004.003.005.002.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.003.133.056.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.161-.015.155-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.158-.061-.15-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.079-.11-.08-.109-.082-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006-.16.024zm15.063 2.691l-.156.044-.12.057-.06.034-.12.066-.116.064-.119.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.036-.13.035-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021h.005l.006-.002.143-.022h.006l.005-.002.143-.024h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.036.005-.002.005-.001.14-.038.005-.001.005-.002.14-.04h.005l.005-.002.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.056.005-.003.005-.002.132-.057.005-.002.005-.003.132-.059.005-.002.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.002.005-.003.129-.066.004-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.002.065-.038.132-.093.112-.115.089-.135.062-.149.034-.157.004-.161-.027-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.045-.16-.017-.161.014zM15.994 0l-.187.001h-.011l-.188.004h-.011l-.187.006h-.011l-.187.008h-.005L15.2.02l-.187.01h-.005l-.005.001-.187.013h-.01L14.62.06h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.184.027h-.006l-.005.001-.184.029h-.005l-.005.001-.183.031-.005.001-.006.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003L16 1.73h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.177.027.17.03.173.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.088-.135.06-.15.032-.158.002-.16-.027-.16-.057-.15L20 .714l-.108-.12-.128-.097-.144-.073-.129-.038-.158-.035-.005-.001-.005-.001L19.14.31h-.005l-.005-.002-.182-.035h-.006l-.005-.002-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.005-.001-.184-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.12 17.783.1l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.06 17.385.06h-.005l-.187-.015h-.005l-.005-.001-.187-.013h-.01L16.799.02h-.011L16.6.01h-.011l-.187-.006h-.011L16.204 0h-.011L16.005 0h-.01zm8.86 2.939l-.157.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.127.125.123.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.085.152.083.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.161-.016.155-.046.143-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.002-.005-.003-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.002-.005-.102-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.004-.003-.005-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.003-.004-.004-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.003-.004-.133-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027-.16.004zm-18.381.348l-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003-.004.004-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.005-.003.004-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.005-.003.004-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023-.161.008zm24.514 11.15l-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.024.175-.027.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.161-.061.164-.063.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.078.158-.081.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.12.13.096.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.004.002-.005.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.17.002-.006.001-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.18.001-.006.001-.005.038-.182v-.005l.002-.005.035-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187v-.011l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02-.161.009zM.777 15l-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.005.074.169.002.005.002.004.076.169.002.005.002.004.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158L3.1 22.1l-.074-.16-.071-.156-.07-.162-.068-.16-.067-.164-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178L1.73 16v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057L.938 15 .777 15zM6.17 26.842l-.152.052-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.005.003.004.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.003.162.088.005.002.004.002.164.087.005.002.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.169.076.004.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.061.005.002.005.001.175.06.005.001.005.002.176.057.005.001.005.002.177.055.005.001.005.002.177.052.005.002.005.001.178.051.005.001.005.002.178.048.006.002h.005l.179.047.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.169-.044-.17-.045-.166-.048-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006-.16.024zm19.214.073l-.156.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.157.073-.158.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.048-.17.045-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.008.133-.017.115-.024h.005l.005-.002.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002h.005l.18-.047.004-.001.005-.002.179-.048.005-.002.005-.001.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.005-.002.004-.002.172-.068.005-.001.005-.002.171-.07.005-.002.005-.002.17-.072.005-.002.005-.002.169-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.002.167-.08.004-.003.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.002.163-.087.005-.002.005-.002.162-.088.005-.003.005-.003.161-.09.005-.002.004-.003.16-.092.005-.002.005-.003.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.002.155-.102.005-.003.004-.003.154-.104.004-.003.005-.003.152-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.111.004-.004.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02-.16.009z"}));};function _extends$H(){_extends$H=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$H.apply(this,arguments);}var IntermediateEventCatchParallelMultipleIcon=function IntermediateEventCatchParallelMultipleIcon(_ref46){var _ref46$styles=_ref46.styles,styles=_ref46$styles===void 0?{}:_ref46$styles,props=_objectWithoutProperties(_ref46,_excluded46);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$H({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.003C8.195-.157.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.408 17.201.049c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.215-2.282-2.022-5.3-3.217-8.357-3.22zM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.082 11.082 0 0116 4.975zm-2.15 3.281v5.534H8.213v4.38h5.636v5.534h4.31V18.17h5.639v-4.38h-5.64V8.256h-4.31zm.865.865h2.583v5.534h5.635v2.65h-5.635v5.533h-2.583v-5.534h-5.64v-2.649h5.64V9.121z"}));};function _extends$G(){_extends$G=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$G.apply(this,arguments);}var IntermediateEventCatchSignalIcon=function IntermediateEventCatchSignalIcon(_ref47){var _ref47$styles=_ref47.styles,styles=_ref47$styles===void 0?{}:_ref47$styles,props=_objectWithoutProperties(_ref47,_excluded47);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$G({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm.006 3.521L9.206 20.745h13.598L16.005 8.542zm0 1.775l5.329 9.564H10.677l5.328-9.564z"}));};function _extends$F(){_extends$F=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$F.apply(this,arguments);}var IntermediateEventCatchTimerIcon=function IntermediateEventCatchTimerIcon(_ref48){var _ref48$styles=_ref48.styles,styles=_ref48$styles===void 0?{}:_ref48$styles,props=_objectWithoutProperties(_ref48,_excluded48);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$F({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.97.04h-.127C8.713-.018 2.003 5.334.437 12.286c-1.51 6.123.98 13.005 6.136 16.665 5.125 3.788 12.546 4.105 17.912.623 5.272-3.276 8.33-9.766 7.325-15.916-.904-6.241-5.79-11.7-11.95-13.143A16.082 16.082 0 0015.97.04zm-.181 1.724c.115 0 .23 0 .347.003 6.625-.066 12.823 5.149 13.89 11.69 1.13 5.91-1.908 12.349-7.262 15.138-5.473 3.013-12.866 1.884-17.116-2.726C1.291 21.372.444 13.914 3.802 8.602c2.493-4.112 7.169-6.819 11.987-6.838zm.283 1.554c-.117 0-.234.002-.351.005-6.1 0-11.691 5.049-12.346 11.114-.78 5.684 2.795 11.612 8.218 13.52 5.139 1.943 11.416.101 14.624-4.38 3.461-4.583 3.262-11.538-.596-15.831-2.36-2.747-5.924-4.423-9.549-4.428zm-.078 1.695c.078 0 .156 0 .234.003 5.4 0 10.321 4.556 10.734 9.942.563 5.13-2.958 10.364-7.971 11.678-4.832 1.41-10.457-.935-12.746-5.446-2.463-4.559-1.2-10.795 3.014-13.883a11.072 11.072 0 016.735-2.294zm-.137 3.42c-2.965.02-5.792 1.968-6.884 4.722-1.137 2.693-.509 6.007 1.536 8.096 1.988 2.14 5.263 2.929 8.007 1.926 2.875-.98 4.987-3.824 5.063-6.865.154-2.954-1.622-5.875-4.295-7.13a7.545 7.545 0 00-3.427-.75zm.27 1.381c2.708.013 5.249 2.014 5.88 4.652.704 2.576-.481 5.512-2.788 6.862-2.356 1.478-5.677 1.084-7.611-.918-2.042-1.97-2.405-5.376-.839-7.738 1.11-1.762 3.146-2.877 5.229-2.857h.13zm1.831 1.764l-2.072 3.76c-.64.068-.792 1.039-.202 1.298.39.27.696-.18 1.051-.164h3.168v-.864h-3.18l1.992-3.612-.757-.418z"}));};function _extends$E(){_extends$E=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$E.apply(this,arguments);}var IntermediateEventNoneIcon=function IntermediateEventNoneIcon(_ref49){var _ref49$styles=_ref49.styles,styles=_ref49$styles===void 0?{}:_ref49$styles,props=_objectWithoutProperties(_ref49,_excluded49);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$E({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.848.001C8.113-.093.931 6.281.125 13.983c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.207C29.105 4.938 23.55.48 17.367.06A16.448 16.448 0 0015.848 0v.001zm.293 1.727c7.113-.099 13.662 5.97 14.077 13.08.56 6.299-3.516 12.735-9.582 14.679-5.798 2.004-12.806-.12-16.283-5.237C.717 19.159.874 11.638 5.016 6.876 7.722 3.638 11.902 1.63 16.14 1.728zm-.415 1.555C9.157 3.258 3.256 9.156 3.278 15.729c-.16 5.965 4.365 11.725 10.293 12.737 5.409 1.065 11.37-1.744 13.775-6.753 2.534-4.986 1.386-11.627-2.953-15.251-2.364-2.077-5.512-3.27-8.667-3.18zm.507 1.692c5.82-.026 11.013 5.318 10.79 11.143-.024 5.3-4.313 10.267-9.636 10.803-5.075.667-10.426-2.588-11.885-7.553-1.535-4.744.494-10.46 4.925-12.885a11.072 11.072 0 015.806-1.508z"}));};function _extends$D(){_extends$D=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$D.apply(this,arguments);}var IntermediateEventThrowCompensationIcon=function IntermediateEventThrowCompensationIcon(_ref50){var _ref50$styles=_ref50.styles,styles=_ref50$styles===void 0?{}:_ref50$styles,props=_objectWithoutProperties(_ref50,_excluded50);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$D({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 4.975zm-.56 5.772l-7.408 5.231 7.409 5.234v-5.057c2.385 1.687 4.771 3.371 7.157 5.057V10.747l-7.157 5.055v-5.055z"}));};function _extends$C(){_extends$C=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$C.apply(this,arguments);}var IntermediateEventThrowEscalationIcon=function IntermediateEventThrowEscalationIcon(_ref51){var _ref51$styles=_ref51.styles,styles=_ref51$styles===void 0?{}:_ref51$styles,props=_objectWithoutProperties(_ref51,_excluded51);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$C({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm.006 3.927c-1.672 4.654-2.734 9.502-4.406 14.155 1.534-1.525 2.872-3.234 4.406-4.759l4.406 4.76c-1.496-4.71-2.91-9.446-4.406-14.156z"}));};function _extends$B(){_extends$B=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$B.apply(this,arguments);}var IntermediateEventThrowLinkIcon=function IntermediateEventThrowLinkIcon(_ref52){var _ref52$styles=_ref52.styles,styles=_ref52$styles===void 0?{}:_ref52$styles,props=_objectWithoutProperties(_ref52,_excluded52);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$B({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 5.021zm1.78 4.093v3.555H9.785v6.714h7.994v3.554l5.829-6.911-5.83-6.912z"}));};function _extends$A(){_extends$A=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$A.apply(this,arguments);}var IntermediateEventThrowMessageIcon=function IntermediateEventThrowMessageIcon(_ref53){var _ref53$styles=_ref53.styles,styles=_ref53$styles===void 0?{}:_ref53$styles,props=_objectWithoutProperties(_ref53,_excluded53);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$A({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 4.975zm-5.91 5.475l6.04 4.901 6.042-4.9H10.088zm-1.341 1.138v9.921h14.514V11.79l-7.132 5.787-7.382-5.99z"}));};function _extends$z(){_extends$z=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$z.apply(this,arguments);}var IntermediateEventThrowMultipleIcon=function IntermediateEventThrowMultipleIcon(_ref54){var _ref54$styles=_ref54.styles,styles=_ref54$styles===void 0?{}:_ref54$styles,props=_objectWithoutProperties(_ref54,_excluded54);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$z({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 4.975zm.006 3.073l-7.62 5.532 2.91 8.95h9.42l2.91-8.95-7.62-5.532z"}));};function _extends$y(){_extends$y=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$y.apply(this,arguments);}var IntermediateEventThrowSignalIcon=function IntermediateEventThrowSignalIcon(_ref55){var _ref55$styles=_ref55.styles,styles=_ref55$styles===void 0?{}:_ref55$styles,props=_objectWithoutProperties(_ref55,_excluded55);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$y({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22zM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0116 4.975zm.006 3.52c-2.261 4.07-4.533 8.136-6.798 12.205h13.596L16.005 8.495z"}));};function _extends$x(){_extends$x=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$x.apply(this,arguments);}var LaneIcon=function LaneIcon(_ref56){var _ref56$styles=_ref56.styles,styles=_ref56$styles===void 0?{}:_ref56$styles,props=_objectWithoutProperties(_ref56,_excluded56);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$x({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M0 7v18.62h32V7H0zm1.655 17.056V8.684h28.62v15.372H1.656z"}));};function _extends$w(){_extends$w=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$w.apply(this,arguments);}var ManualTaskIcon=function ManualTaskIcon(_ref57){var _ref57$styles=_ref57.styles,styles=_ref57$styles===void 0?{}:_ref57$styles,props=_objectWithoutProperties(_ref57,_excluded57);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$w({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5zm4.43 1.328c-.222.005-.43.09-.606.203-.985.638-4.356 2.977-5.096 3.486-.67.46-1.12 1.153-1.38 1.974-.27.858-.235 1.793-.232 2.576.002.59.016 1.104.17 1.727.22.908.634 1.63 1.23 2.118.597.49 1.363.732 2.23.734 3.038.012 6.078.016 9.119 0 .327-.002.645-.127.848-.37.204-.241.287-.56.291-.914a1.732 1.732 0 00-.097-.625h.327c.335 0 .641-.11.852-.316.21-.206.317-.475.374-.754a1.783 1.783 0 00-.126-1.143 1.18 1.18 0 00.877-.521c.196-.306.257-.666.258-1.025.001-.375-.088-.738-.293-1.033a1.179 1.179 0 00-.958-.512h-.478c.108-.237.156-.505.155-.782-.003-.373-.098-.721-.316-.99a1.21 1.21 0 00-.943-.43c-2.273-.004-4.236.018-6.412.012l-.19-.001c.102-.104.202-.205.312-.314.337-.336.662-.652.83-.869.4-.516.46-1.215.123-1.729-.178-.272-.439-.456-.72-.494a.93.93 0 00-.148-.008zm.029.728l.022.001c.055.008.115.027.209.172.132.201.126.606-.09.884-.079.102-.431.465-.767.8-.337.334-.657.643-.815.836-.153.186-.096.338-.056.435.04.096.085.212.298.263.063.014.066.01.086.012l.066.003c2.429.027 4.986-.004 7.223-.003.194 0 .293.056.379.162.086.105.151.286.153.533 0 .257-.065.467-.155.59-.09.124-.183.182-.37.183-1.706-.001-3.411-.005-5.117-.009v.731c2.23.004 4.461.01 6.692.012.17 0 .265.06.361.2.096.138.164.364.163.615 0 .268-.058.501-.143.634-.085.132-.162.193-.385.195-2.32-.001-4.554-.006-6.688-.003v.73c1.905 0 3.809.003 5.713.001.194.005.316.09.416.26.102.173.151.442.093.728-.04.193-.102.313-.17.38-.067.065-.148.108-.343.108h-5.71l.002.734c1.445 0 2.89-.01 4.334-.001.162 0 .232.041.297.123.064.081.123.238.12.488-.003.244-.061.385-.12.455-.06.07-.127.11-.296.11-3.037.016-6.076.012-9.113 0-.735-.002-1.316-.196-1.77-.568-.454-.372-.793-.935-.986-1.728-.134-.546-.146-.978-.148-1.558-.003-.796-.018-1.664.199-2.354.222-.705.582-1.24 1.096-1.593.75-.515 4.14-2.866 5.079-3.474a.504.504 0 01.241-.087z"}));};function _extends$v(){_extends$v=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$v.apply(this,arguments);}var MessageFlowIcon=function MessageFlowIcon(_ref58){var _ref58$styles=_ref58.styles,styles=_ref58$styles===void 0?{}:_ref58$styles,props=_objectWithoutProperties(_ref58,_excluded58);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$v({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M4.073 26.607l1.295 1.296L1.325 32l-.662-.633L0 30.735l4.073-4.128zm6.953-7.046l1.296 1.296L1.325 32l7.555-7.656-1.295-1.296 1.455-1.474 1.986-2.013zM32 .06s-2.699 5.189-5.417 10.462l-.326.633c-1.14 2.214-2.265 4.407-3.176 6.2-1.228-1.222-2.449-2.452-3.676-3.675l-3.57 3.618-1.297-1.296 3.541-3.588c-.98-.964-1.932-1.958-2.923-2.91l-.753-.706c2.68-1.258 6.533-3.165 9.95-4.876l.617-.309C28.838 1.673 32 .06 32 .06zm-4.126 4.06l-.015.007-.115.057-.048.024-.115.057L17.7 9.172l5.017 4.948 5.157-10z"}));};function _extends$u(){_extends$u=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$u.apply(this,arguments);}var ParticipantIcon=function ParticipantIcon(_ref59){var _ref59$styles=_ref59.styles,styles=_ref59$styles===void 0?{}:_ref59$styles,props=_objectWithoutProperties(_ref59,_excluded59);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$u({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M0 5v22.069h32V5H0zm30.276 1.684v18.82H6.62V6.684h23.655zm-28.62 0h3.31v18.82h-3.31V6.684z"}));};function _extends$t(){_extends$t=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$t.apply(this,arguments);}var ProcessIcon=function ProcessIcon(_ref60){var _ref60$styles=_ref60.styles,styles=_ref60$styles===void 0?{}:_ref60$styles,props=_objectWithoutProperties(_ref60,_excluded60);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$t({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{fillRule:"evenodd",d:"M16.177 0l.137.002c.452.009.9.037 1.342.082.346.036.62.303.68.646l.437 2.536c.055.319.296.57.608.655.986.269 1.923.653 2.796 1.14.28.155.624.145.885-.039l2.083-1.47a.775.775 0 01.937.022c.86.699 1.645 1.484 2.343 2.343.22.27.223.653.023.937l-1.439 2.038a.833.833 0 00-.031.896c.512.889.92 1.846 1.204 2.855a.833.833 0 00.653.601l2.435.42c.342.059.61.333.645.679a15.928 15.928 0 01.08 2.064l-.003.114c-.012.382-.038.76-.077 1.134a.775.775 0 01-.645.68l-2.396.412a.835.835 0 00-.656.61 12.511 12.511 0 01-1.2 2.917.832.832 0 00.034.892l1.396 1.978c.2.284.196.667-.023.936a16.104 16.104 0 01-2.343 2.343.775.775 0 01-.937.023l-1.99-1.404a.833.833 0 00-.88-.026c-.907.516-1.886.922-2.916 1.2a.833.833 0 00-.61.656l-.414 2.396a.775.775 0 01-.679.646 16.096 16.096 0 01-3.312 0 .775.775 0 01-.679-.646l-.423-2.452a.834.834 0 00-.598-.636 12.474 12.474 0 01-1.468-.514 12.49 12.49 0 01-1.417-.68.833.833 0 00-.878.03l-2.026 1.43a.775.775 0 01-.937-.023 16.069 16.069 0 01-2.342-2.342.774.774 0 01-.024-.936l1.402-1.986a.833.833 0 00.032-.896 12.507 12.507 0 01-1.214-2.911.833.833 0 00-.655-.606l-2.386-.412a.775.775 0 01-.646-.678 16.097 16.097 0 010-3.314.775.775 0 01.646-.678l2.386-.412a.833.833 0 00.655-.606 12.507 12.507 0 011.214-2.911.833.833 0 00-.032-.896L3.552 6.853a.774.774 0 01.023-.936 16.091 16.091 0 012.343-2.343.775.775 0 01.937-.023l2.03 1.433c.26.177.6.182.874.028.915-.512 1.88-.9 2.87-1.167a.833.833 0 00.612-.656l.424-2.46a.775.775 0 01.679-.645C14.845.032 15.348.004 15.85 0h.326zM16 6.4c-5.302 0-9.6 4.297-9.6 9.599 0 5.302 4.298 9.6 9.6 9.6s9.6-4.298 9.6-9.6-4.298-9.6-9.6-9.6zm-3 4.283c0-1.425 1.637-2.203 2.715-1.29l5.69 4.815c.794.672.794 1.91 0 2.583l-5.69 4.815c-1.078.913-2.715.134-2.715-1.29z"}));};function _extends$s(){_extends$s=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$s.apply(this,arguments);}var ReceiveTaskIcon=function ReceiveTaskIcon(_ref61){var _ref61$styles=_ref61.styles,styles=_ref61$styles===void 0?{}:_ref61$styles,props=_objectWithoutProperties(_ref61,_excluded61);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$s({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5zM5.23 7.764v11.577h17.55V7.764H5.23zm1.816.758h13.917l-6.959 4.577-6.958-4.577zm-1.06.21l8.018 5.274 8.018-5.275v9.853H5.987V8.73z"}));};function _extends$r(){_extends$r=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$r.apply(this,arguments);}var ScriptTaskIcon=function ScriptTaskIcon(_ref62){var _ref62$styles=_ref62.styles,styles=_ref62$styles===void 0?{}:_ref62$styles,props=_objectWithoutProperties(_ref62,_excluded62);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$r({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5zm2.99 3.077l-.077.045-.026.015c-1.09.646-1.84 1.239-2.336 1.818-.496.579-.735 1.162-.742 1.725-.014 1.119.812 1.958 1.544 2.708.732.75 1.385 1.456 1.446 2.041.032.298-.039.598-.364 1.008-.324.408-.911.897-1.85 1.445l-1.388.808h8.56l.101-.059c.996-.58 1.667-1.116 2.094-1.655.429-.54.603-1.107.547-1.638-.11-1.052-.967-1.818-1.688-2.556-.721-.739-1.306-1.436-1.298-2.092.004-.331.132-.7.535-1.171.402-.47 1.08-1.02 2.119-1.636l1.362-.806h-8.54zm.241.867h5.271a6.83 6.83 0 00-1.113 1.01c-.496.58-.736 1.163-.743 1.726-.014 1.119.812 1.958 1.544 2.708.732.75 1.385 1.456 1.446 2.041.032.298-.039.598-.364 1.008-.312.393-.872.862-1.753 1.386H8.728c.367-.286.658-.566.88-.847.43-.54.604-1.107.548-1.638-.11-1.052-.968-1.818-1.688-2.556-.721-.739-1.306-1.435-1.298-2.092.004-.331.132-.7.534-1.171.389-.454 1.04-.984 2.021-1.575zm-1.233 1.48v.4h4.12v-.4h-4.12zm-.154 2.158v.4H12.6v-.4H8.34zm1.931 2.158v.4h4.126v-.4H10.27zm.59 2.158v.4h4.276v-.4h-4.276z"}));};function _extends$q(){_extends$q=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$q.apply(this,arguments);}var SendTaskIcon=function SendTaskIcon(_ref63){var _ref63$styles=_ref63.styles,styles=_ref63$styles===void 0?{}:_ref63$styles,props=_objectWithoutProperties(_ref63,_excluded63);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$q({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5zm-1.38 3.16l8.332 4.717L21.78 8.16H5.114zm.021 1.745v9.309H21.8V9.905l-8.353 4.655-8.31-4.655z"}));};function _extends$p(){_extends$p=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$p.apply(this,arguments);}var ServiceTaskIcon=function ServiceTaskIcon(_ref64){var _ref64$styles=_ref64.styles,styles=_ref64$styles===void 0?{}:_ref64$styles,props=_objectWithoutProperties(_ref64,_excluded64);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$p({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5zm1.22 1.681V7.84c-.329.093-.63.223-.914.382l-.83-.82-1.554 1.561.83.82c-.16.288-.285.594-.372.911l-1.177.002v2.2l1.189-.004c.109.431.345.819.58 1.165v-1.898l-1.038.004v-.737l1.034-.002.058-.294c.084-.429.252-.838.493-1.203l.165-.25-.727-.718.523-.526.728.719.247-.165c.379-.25.793-.417 1.206-.505l.291-.06-.002-1.01h.75L9.19 8.417H11.16c-.185-.221-.951-.508-1.237-.588L9.93 6.68H7.713zm2.078 2.105l.003 1.158a4.19 4.19 0 00-.915.383l-.83-.821-1.553 1.562.83.82c-.16.288-.286.593-.373.91l-1.176.003v2.2l1.188-.004c.094.326.224.624.383.905l-.85.847 1.57 1.543.847-.843c.29.161.599.286.919.373v1.198c.756.006 1.56.003 2.206.003V17.81a4.19 4.19 0 00.915-.383l.847.835 1.554-1.56-.848-.836c.16-.288.286-.594.373-.912l1.152-.007V12.75l-1.165.007a4.09 4.09 0 00-.382-.905l.805-.807-1.57-1.546-.804.806a4.16 4.16 0 00-.915-.372l.007-1.147H9.792zm.732.73h.751l-.006 1.005.297.058c.43.085.844.252 1.21.492l.25.162.701-.704.528.52-.702.704.169.25c.248.374.412.779.505 1.196l.061.292 1.016-.006v.737l-1.01.006-.058.292c-.085.43-.252.838-.494 1.205l-.165.25.744.733-.523.525-.743-.734-.248.165c-.378.247-.789.418-1.203.503l-.294.058v1.067h-.745v-1.059l-.295-.057a3.395 3.395 0 01-1.21-.492l-.248-.162-.747.743-.528-.52.747-.744-.17-.25a3.546 3.546 0 01-.506-1.196l-.06-.291-1.04.004v-.738l1.034-.002.058-.294c.085-.428.252-.837.493-1.203l.165-.25-.726-.718.522-.526.728.72.248-.166a3.546 3.546 0 011.205-.504l.292-.06-.003-1.01zm.388 2.685a1.65 1.65 0 00-1.645 1.645c0 .904.74 1.645 1.645 1.645a1.65 1.65 0 001.645-1.645 1.65 1.65 0 00-1.645-1.645zm0 .73a.91.91 0 01.915.915.91.91 0 01-.915.914.91.91 0 01-.915-.914.91.91 0 01.915-.915z"}));};function _extends$o(){_extends$o=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$o.apply(this,arguments);}var StartEventCompensationIcon=function StartEventCompensationIcon(_ref65){var _ref65$styles=_ref65.styles,styles=_ref65$styles===void 0?{}:_ref65$styles,props=_objectWithoutProperties(_ref65,_excluded65);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$o({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0015.994 0zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708zm-.566 9.03l-7.415 5.235 7.415 5.238v-5.062c2.386 1.689 4.775 3.375 7.163 5.062V10.761l-7.163 5.058v-5.058zm-.866 1.666v7.13L9.51 15.993l5.052-3.565zm7.166 0v7.137l-5.052-3.568 5.052-3.569z"}));};function _extends$n(){_extends$n=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$n.apply(this,arguments);}var StartEventConditionIcon=function StartEventConditionIcon(_ref66){var _ref66$styles=_ref66.styles,styles=_ref66$styles===void 0?{}:_ref66$styles,props=_objectWithoutProperties(_ref66,_excluded66);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$n({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16 0C7.174 0 0 7.174 0 16s7.174 16 16 16 16-7.174 16-16S24.826 0 16 0zm0 1.73c7.892 0 14.27 6.378 14.27 14.27 0 7.891-6.379 14.27-14.27 14.27S1.73 23.891 1.73 16C1.73 8.108 8.108 1.73 16 1.73zm-5.362 7.523v13.493h10.724V9.253H10.638zm.863.866h8.995V21.88H11.501V10.12zm.928 1.324v.863h7.139v-.863h-7.139zm0 2.605v.867h7.139v-.867h-7.139zm0 3.01v.864h7.139v-.863h-7.139zm0 2.72v.863h7.139v-.863h-7.139z"}));};function _extends$m(){_extends$m=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$m.apply(this,arguments);}var StartEventErrorIcon=function StartEventErrorIcon(_ref67){var _ref67$styles=_ref67.styles,styles=_ref67$styles===void 0?{}:_ref67$styles,props=_objectWithoutProperties(_ref67,_excluded67);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$m({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.995.005C9.705-.08 3.643 3.968 1.257 9.78-1.235 15.49.06 22.581 4.42 27.034c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0015.994.005zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626-4.814-3.838-6.538-10.939-4.067-16.57 2.14-5.205 7.515-8.774 13.147-8.708zm6.13 7.45l-3.635 7.37-4.52-5.88c-1.37 4.048-2.738 8.095-4.106 12.143l4.603-5.917 4.748 5.433 2.91-13.149zm-7.754 3.889l4.299 5.449 1.073-2.39-1.028 4.135-4.387-5.16-1.78 2.75 1.823-4.784z"}));};function _extends$l(){_extends$l=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$l.apply(this,arguments);}var StartEventEscalationIcon=function StartEventEscalationIcon(_ref68){var _ref68$styles=_ref68.styles,styles=_ref68$styles===void 0?{}:_ref68$styles,props=_objectWithoutProperties(_ref68,_excluded68);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$l({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0015.994 0zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708zm0 7.183c-1.674 4.658-2.736 9.509-4.41 14.166 1.535-1.526 2.874-3.236 4.41-4.763l4.41 4.763c-1.499-4.713-2.913-9.453-4.41-14.166zm.032 2.931c.822 2.588 1.598 5.19 2.42 7.778l-2.42-2.615c-.683.598-2.455 2.887-2.34 2.39.871-2.489 1.448-5.07 2.34-7.553z"}));};function _extends$k(){_extends$k=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$k.apply(this,arguments);}var StartEventMessageIcon=function StartEventMessageIcon(_ref69){var _ref69$styles=_ref69.styles,styles=_ref69$styles===void 0?{}:_ref69$styles,props=_objectWithoutProperties(_ref69,_excluded69);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$k({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0015.994 0zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708zm-7.257 8.732v11.069h14.513v-11.07H8.738zm3.224 1.73h8.064c-1.428.878-2.857 2.807-4.285 3.018l-3.779-3.019zm9.562 1.017v6.593H10.465V13.21l5.528 4.417 5.53-4.418z"}));};function _extends$j(){_extends$j=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$j.apply(this,arguments);}var StartEventMultipleIcon=function StartEventMultipleIcon(_ref70){var _ref70$styles=_ref70.styles,styles=_ref70$styles===void 0?{}:_ref70$styles,props=_objectWithoutProperties(_ref70,_excluded70);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$j({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0015.994 0zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708zm0 6.328l-7.626 5.536c.97 2.986 1.942 5.971 2.913 8.957h9.426l2.912-8.957-7.625-5.536zm0 1.068l6.609 4.798-2.525 7.763H11.91l-2.524-7.763 6.609-4.798z"}));};function _extends$i(){_extends$i=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$i.apply(this,arguments);}var StartEventNonInterruptingConditionIcon=function StartEventNonInterruptingConditionIcon(_ref71){var _ref71$styles=_ref71.styles,styles=_ref71$styles===void 0?{}:_ref71$styles,props=_objectWithoutProperties(_ref71,_excluded71);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$i({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M10.632 9.189V22.68h10.723V9.189H10.632zm.862.865h8.994v11.76H11.494v-11.76zm.928 1.324v.863h7.138v-.863h-7.138zm0 2.605v.866h7.138v-.866h-7.138zm0 3.01v.863h7.138v-.863h-7.138zm0 2.72v.862h7.138v-.863h-7.138zM16.12 0h-.232l-.22.004h-.012l-.221.006h-.012l-.22.01h-.012l-.22.013h-.012l-.22.016h-.012l-.22.019h-.005l-.006.001-.22.021h-.006l-.005.001-.22.025h-.011l-.22.028h-.005l-.006.002-.219.03h-.005l-.006.001-.218.033-.006.001-.006.001-.217.036-.006.001-.006.001-.217.039-.006.001-.006.001-.216.042-.006.001-.006.001-.215.045-.006.001-.006.002-.215.047-.006.002-.006.001-.214.05-.006.002-.006.002-.115.029-.152.053-.14.081-.122.106-.1.126-.075.143-.047.154-.018.16.012.16.042.156.07.145.095.13.118.11.137.086.15.059.158.03h.161l.132-.022.11-.028.202-.047.203-.046.208-.043.202-.039.206-.037.206-.034.205-.03.208-.03.205-.025.209-.023.208-.02.21-.017.209-.015.207-.011.21-.009.21-.006.207-.003h.21l.21.002.207.005.207.008.212.011.207.014.208.017.209.019.208.022.205.025.206.028.207.03.208.035.205.036.202.039.052.01.16.018.16-.012.156-.042.146-.07.13-.096.109-.119.085-.136.06-.15.03-.159v-.16l-.03-.16-.059-.15-.086-.136-.109-.118-.13-.096-.145-.07-.128-.038-.057-.011-.006-.002h-.006l-.216-.042-.006-.001-.006-.001-.217-.039H18.9l-.006-.002-.217-.035-.006-.001-.006-.001-.218-.032-.006-.001-.006-.001-.218-.03h-.006l-.006-.001-.219-.027h-.011l-.22-.024-.005-.001h-.006l-.22-.021h-.006l-.006-.001-.22-.017-.005-.001h-.006L17.06.03h-.012l-.22-.012h-.012l-.22-.01h-.012l-.22-.005h-.012L16.132 0h-.012zm8.715 2.783l-.157.034-.149.063-.134.089-.116.112-.092.132-.067.147-.038.157-.008.16.021.16.051.153.079.141.103.124.102.087.052.038h.001l.087.064v.001l.082.061.002.001.076.059h.001l.084.065.082.066.002.001.079.063.002.002.077.063.081.067.002.002.077.065.076.065.001.002.08.07.078.07h.002l.075.068.077.072.002.001.073.069.077.073.072.07.002.001.077.076.07.07v.001l.075.076.07.073.002.001.074.079.002.002.069.074.069.075.074.082.07.08.002.001.068.079h.001l.067.079.068.082.065.078.001.002.068.083.067.084.063.081.001.002.067.087.002.002.063.084.001.001.064.087.008.01.008.01.095.12.093.121.09.119.087.119.088.122.086.123.084.12.081.122.001.002.084.126.08.126.08.127.077.126.079.131.074.127.075.131.073.131.07.13.07.133.069.133.045.09.086.137.109.119.13.096.144.07.156.042.16.013.16-.017.155-.047.143-.075.126-.1.106-.121.082-.14.054-.151.025-.16-.005-.16-.035-.158-.05-.124-.048-.095-.002-.004-.002-.004-.073-.14-.002-.005-.002-.004-.074-.14-.002-.004-.002-.004-.076-.14-.002-.003-.002-.004-.077-.139-.003-.004-.002-.004-.078-.138-.003-.004-.002-.003-.08-.137-.002-.004-.003-.004-.081-.136-.002-.004-.003-.004-.083-.136-.002-.003-.002-.004-.085-.135-.002-.004-.003-.003-.085-.134-.003-.004-.002-.004-.087-.132-.003-.004-.003-.004-.088-.132-.003-.003-.002-.004-.09-.13-.003-.005-.003-.003-.091-.13-.003-.004-.002-.004-.093-.129-.003-.003-.003-.004-.094-.128-.003-.004-.003-.003-.095-.127-.003-.004-.003-.004-.097-.125-.003-.004-.003-.004-.09-.114-.06-.082-.003-.003-.002-.003-.069-.091-.002-.004-.002-.003-.07-.09-.003-.003-.002-.003-.07-.09-.003-.003-.002-.003-.071-.09-.002-.003-.003-.002-.072-.089-.002-.003-.002-.003-.073-.088-.002-.003-.002-.002-.074-.087-.002-.003-.002-.003-.074-.086-.003-.003-.002-.003-.074-.086-.003-.002-.002-.003-.075-.085-.003-.003-.002-.002-.076-.084-.002-.003-.003-.003-.076-.083-.002-.003-.003-.003-.077-.082-.002-.003-.003-.002-.077-.082-.003-.003-.003-.002-.078-.081-.002-.003-.003-.003-.078-.08-.003-.002-.003-.003-.079-.08-.002-.002-.003-.002-.08-.08-.002-.002-.003-.002-.08-.078-.003-.003-.003-.002-.08-.077-.003-.003-.003-.002-.082-.077-.002-.002-.003-.002-.082-.076-.003-.002-.002-.003-.083-.075-.003-.002-.002-.003-.084-.074-.002-.002-.003-.002-.084-.074-.003-.002-.002-.002-.085-.073-.002-.002-.003-.003-.085-.071-.003-.003-.002-.002-.086-.07-.003-.003-.002-.002-.086-.07-.003-.003-.003-.002-.086-.07-.003-.002-.003-.002-.087-.069-.002-.002-.003-.002-.088-.068-.002-.002-.003-.002-.088-.067-.003-.003-.003-.002-.088-.066-.003-.002-.003-.002-.089-.066-.003-.002-.003-.002-.057-.042-.14-.082-.15-.055-.16-.026-.16.004zM6.377 3.21l-.157.037-.148.066-.111.074-.007.006-.003.002-.003.002-.086.069-.003.002-.002.002-.086.07-.003.002-.002.002-.086.07-.002.003-.003.002-.085.071-.002.002-.003.003-.084.071-.003.003-.002.002-.084.072-.003.003-.002.002-.083.073-.003.003-.002.002-.083.074-.002.002-.003.003-.082.074-.003.003-.002.002-.081.076-.003.002-.003.002-.08.077-.003.002-.003.003-.08.076-.002.003-.003.002-.08.078-.002.002-.003.003-.079.078-.002.003-.003.002-.078.08-.003.002-.002.002-.078.08-.002.003-.003.002-.077.08-.003.004-.002.002-.077.081-.002.003-.003.003-.076.082-.002.002-.003.003-.075.082-.002.003-.003.003-.074.083-.003.003-.002.003-.074.084-.003.003-.002.002-.074.085-.002.003-.002.003-.073.085-.003.003-.002.003-.072.086-.002.003-.003.003-.071.087-.003.003-.002.002-.07.088-.003.003-.002.003-.07.088-.003.003-.002.003-.07.09-.002.002-.002.003-.069.09-.002.003-.003.003-.068.09-.002.003-.002.003-.067.092-.003.003-.002.003-.067.092-.002.003-.002.003-.066.092-.002.003-.002.004-.066.093-.002.003-.002.003-.065.094-.002.003-.002.004-.064.094-.002.003-.002.004-.063.095-.002.003-.002.003-.063.097-.002.003-.002.003-.046.073-.05.07-.003.002-.002.003-.067.093-.003.003-.002.003-.066.094-.002.003-.002.003-.066.094-.002.003-.002.003-.064.094-.002.004-.002.003-.064.094-.002.004-.002.003-.062.095-.002.003-.002.003-.062.096-.002.003-.002.003-.06.096-.003.003-.002.003-.06.096-.001.004-.002.003-.059.096-.002.004-.002.003-.058.097-.002.003-.001.003-.057.098-.002.003-.002.003-.056.098-.002.003-.002.003-.055.098-.002.004-.001.003-.055.098-.001.004-.002.003-.054.099-.001.003-.002.003-.052.1-.002.002-.002.004-.051.1-.002.002-.002.004-.05.1-.002.003-.002.003-.05.1v.003l-.002.004-.05.1v.003l-.002.004-.048.1-.002.004-.001.003-.047.101-.002.003-.001.004-.013.027-.052.152-.024.16.006.16.037.157.064.148.091.133.114.114.134.09.147.065.157.036.162.006.159-.024.152-.053.14-.08.122-.105.1-.126.066-.117.01-.023.044-.095.045-.095.002-.003.042-.087.048-.097.048-.095v-.001l.048-.092.001-.001.047-.09.05-.093.002-.002.049-.09.052-.092.001-.002.051-.089.001-.002.051-.087.053-.088.001-.002.055-.091.057-.091.057-.09.001-.002.057-.089.055-.083.001-.002.06-.09.06-.088.062-.089.001-.001.06-.084.063-.088.065-.089.017-.023.016-.025.06-.094.059-.09v-.002l.058-.086.057-.086.001-.001.062-.09.062-.088.001-.002.06-.085.002-.002.06-.082.063-.087.064-.084.002-.002.061-.08.065-.084.064-.08v-.001l.067-.083.067-.082.07-.083.069-.08.063-.074.074-.083.068-.077.002-.002.07-.076.07-.075.072-.077.001-.001.067-.07.076-.078.002-.002.07-.07.075-.075.002-.002.072-.07.075-.072.002-.002.073-.069.074-.068.001-.001.08-.073.076-.068.002-.002.072-.063v-.001l.078-.067.079-.068.002-.001.08-.068.002-.002.077-.063.082-.066.001-.001.075-.06.002-.002.006-.004.117-.111.094-.131.068-.146.04-.156.01-.161-.019-.16-.049-.154-.076-.141-.102-.125-.123-.105-.14-.079-.153-.052-.16-.023-.16.007zm24.596 11.088l-.156.04-.146.067-.131.094-.112.117-.087.135-.061.15-.033.157-.004.134.007.142.005.152.004.15.002.149v.153l.001.011v.015l.004.11.002.11v.002l.002.106v.321l-.003.102-.002.106-.004.107-.005.105-.006.106-.006.106-.008.106v.002l-.008.103v.002l-.01.1-.01.105-.01.105-.013.105-.012.099v.002l-.014.108-.014.1-.016.105-.016.103v.002l-.017.099-.018.104-.019.103v.002l-.019.097-.02.104-.022.103v.001l-.022.098-.023.103v.002l-.024.096-.025.103v.002l-.024.096-.027.102v.003l-.026.093v.001l-.029.103v.002l-.03.099-.028.097v.002l-.03.095-.03.096v.001l-.033.1-.031.095v.002l-.035.1v.003l-.034.094v.003l-.035.096v.001l-.034.09v.002l-.038.098-.036.093v.002l-.038.095-.079.194-.08.188-.085.189-.087.19-.09.184-.092.183-.095.184-.05.093-.064.148-.034.158-.005.16.026.16.054.151.082.14.106.12.127.1.143.075.154.046.16.017.161-.013.156-.042.144-.071.13-.096.109-.119.072-.112.053-.099.003-.005.003-.006.102-.195.003-.006.003-.006.098-.196.003-.006.003-.006.096-.197.002-.006.003-.006.093-.2.002-.006.003-.006.09-.2.002-.006.003-.007.086-.202.003-.006.002-.006.084-.203.002-.005.001-.005.04-.102.002-.003.001-.003.04-.103.001-.003.001-.003.04-.103v-.004l.001-.003.039-.103v-.003l.002-.003.037-.104.001-.003.001-.003.037-.104v-.004l.002-.003.035-.104.002-.003v-.004l.035-.104.002-.004v-.003l.034-.105.002-.003v-.003l.034-.105v-.004l.002-.003.032-.106.001-.003.001-.003.031-.106.001-.003.001-.004.031-.106.001-.003.001-.004.03-.106v-.003l.002-.004.028-.107.001-.003.001-.003.028-.107.001-.004.001-.003.027-.107.001-.004v-.003l.027-.108.001-.003v-.004l.026-.108.001-.003v-.004l.025-.108.001-.003v-.004l.025-.108v-.004l.001-.003.023-.109v-.003l.001-.004.022-.109v-.003l.002-.004.02-.109.001-.004v-.003l.02-.11.002-.003v-.004l.02-.11v-.007l.019-.11v-.003l.001-.004.017-.11v-.004l.001-.003.017-.11v-.008l.016-.11v-.004l.001-.004.015-.11v-.008l.015-.111v-.008l.013-.111v-.007l.013-.112v-.007l.011-.112v-.004l.001-.004.01-.112v-.007l.01-.112v-.008l.008-.112v-.008l.007-.113v-.007l.007-.113v-.008l.005-.113v-.007l.005-.114v-.007l.003-.114v-.007l.003-.114v-.129l.001-.114v-.13l-.003-.114v-.008l-.003-.115v-.007l-.003-.102v-.155l-.003-.158v-.01l-.004-.158v-.01l-.006-.158v-.01l-.007-.148-.023-.16-.051-.152-.08-.14-.103-.124-.125-.102-.142-.077-.153-.05-.16-.02-.161.01zm-30.213.66l-.157.034-.149.063-.134.09-.115.113-.092.132-.067.147-.037.156-.009.134.001.11V15.95l.006.22v.012l.01.22v.012l.012.22v.006l.001.006.015.22v.005l.001.006.018.22.001.006v.006l.022.219v.006l.001.006.024.219.001.006v.006l.028.218.001.006v.006l.031.218.001.006.001.006.033.218.001.006.001.005.037.218v.006l.002.005.04.217v.006l.001.006.043.216.001.006.001.006.046.216v.005l.002.006.048.215.002.006.001.006.051.214.002.006v.006l.055.214.002.005.001.006.057.213.002.006.001.005.06.213.002.005.001.006.063.212.002.005.001.006.066.21.002.006.002.006.068.21.002.005.002.005.07.21.003.005.002.005.074.208.002.006.002.005.077.207.002.006.002.005.08.206.002.005.002.006.082.204.002.006.002.005.086.204.002.005.002.006.088.202.002.005.003.006.09.2.003.006.002.005.094.2.002.006.003.005.096.199.002.005.003.005.03.062.086.137.11.118.128.097.145.07.156.043.16.013.16-.017.155-.047.143-.074.127-.1.106-.121.081-.14.055-.15.025-.16-.005-.161-.034-.158-.05-.124-.028-.055-.092-.19-.087-.188-.087-.192-.083-.19-.08-.193-.078-.194-.076-.196-.073-.195-.07-.197-.067-.198-.065-.199-.063-.2-.059-.2-.056-.2-.055-.204-.05-.201-.049-.202-.046-.205-.043-.206-.04-.203-.038-.207-.034-.204-.032-.207-.028-.205-.026-.207-.023-.208-.02-.207-.018-.207-.014-.208-.011-.207-.009-.208-.005-.207-.002-.104-.017-.16-.046-.155-.074-.143-.1-.126-.121-.107-.139-.081-.152-.055-.159-.025-.161.004zm24.585 11.83l-.156.039-.146.068-.11.076-.015.012-.163.129-.166.127-.168.125-.17.124-.17.12-.172.118-.173.115-.176.114-.177.111-.18.11-.178.105-.182.104-.182.101-.184.1-.184.095-.189.095-.186.09-.188.089-.19.086-.19.082-.193.081-.195.078-.191.074-.197.073-.195.07-.196.065-.198.064-.198.061-.2.058-.2.055-.2.052-.2.049-.151.035-.153.05-.141.078-.125.103-.103.124-.078.14-.05.154-.022.16.009.16.038.157.067.147.093.132.116.112.134.089.149.062.158.034.16.003.133-.02.158-.035.006-.002.006-.001.213-.052.006-.002.007-.001.212-.056.006-.001.006-.002.212-.058.006-.002.006-.002.211-.061.006-.002.006-.002.21-.064.006-.002.006-.002.21-.067.005-.002.006-.002.208-.07.006-.002.006-.003.207-.073.006-.002.006-.002.206-.077.006-.002.005-.002.206-.08.005-.001.006-.003.204-.082.006-.002.005-.002.203-.085.006-.003.005-.002.202-.088.006-.002.005-.003.2-.09.006-.003.006-.003.2-.093.005-.003.005-.002.198-.096.006-.003.005-.003.197-.099.005-.002.005-.003.196-.102.005-.002.005-.003.195-.105.005-.002.005-.003.193-.107.005-.003.005-.003.191-.11.005-.003.005-.003.19-.112.005-.003.005-.003.189-.115.005-.003.005-.003.187-.117.005-.003.004-.004.186-.12.005-.003.004-.003.184-.122.005-.003.005-.004.182-.125.004-.003.005-.003.18-.128.005-.003.005-.003.179-.13.004-.003.005-.004.177-.132.004-.004.005-.003.175-.135.005-.003.004-.004.173-.137.005-.003.004-.004.019-.015.115-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.052-.153-.079-.14-.103-.124-.125-.102-.142-.078-.153-.05-.16-.02-.16.01zm-19.17.054l-.153.051-.14.079-.124.103-.103.125-.077.141-.05.153-.02.16.009.161.04.156.067.147.093.131.095.094.047.04.005.004.005.004.17.14.005.004.005.004.172.137.004.004.005.003.086.067.003.002.003.002.087.067.003.002.003.002.088.066.002.003.003.002.089.065.002.002.003.002.09.065.002.002.003.002.09.064.002.002.003.002.09.063.003.002.003.002.09.063.003.002.003.002.092.062.002.002.003.002.092.061.003.002.003.002.092.06.003.003.003.001.093.06.003.002.003.002.093.06.003.001.003.002.094.058.003.002.003.002.095.058.003.001.003.002.095.057.003.002.003.002.095.056.003.002.003.002.096.055.004.002.003.001.096.055.003.002.003.002.098.053.003.002.003.002.097.053.004.002.003.001.098.053.003.001.003.002.099.052.003.001.003.002.1.05.003.002.003.002.1.05.003.002.003.001.1.05h.003l.004.003.1.048.004.001.003.002.101.048.003.001.004.002.101.046.004.002.003.001.102.046.004.002.003.001.103.045.003.002.003.001.103.045.004.001.003.002.104.043.003.001.004.002.104.042.003.002.004.001.104.042.004.001.003.002.105.04.004.002.003.001.106.04.003.002h.004l.106.04.004.001.003.002.107.038.003.001.004.001.107.038.003.001.004.001.107.037.004.001.004.001.108.036.003.001.004.001.108.035.004.001.003.001.11.034.003.001.004.001.109.033.004.002h.003l.11.033h.004l.003.002.11.031.004.001.004.001.084.023.081.028.004.001.003.001.109.037.003.001.004.001.109.036.003.001.004.001.109.035h.003l.004.002.11.033.003.001.003.001.11.033.003.001.004.001.109.031.004.002h.003l.11.031.003.001.004.001.11.03h.003l.003.001.11.029h.004l.003.002.11.027.003.001.004.001.11.027h.003l.004.001.004.001.16.022.16-.008.157-.038.147-.067.132-.092.112-.116.09-.134.062-.149.034-.157.004-.161-.025-.16-.055-.151-.082-.139-.107-.12-.127-.1-.143-.074-.124-.04h-.003l-.104-.025-.103-.026h-.002l-.095-.026h-.001l-.101-.027h-.002l-.1-.028h-.002l-.103-.03-.104-.032-.097-.03h-.002l-.103-.033-.102-.033-.101-.034-.106-.036-.027-.01-.027-.007-.107-.03-.104-.029-.104-.03h-.002l-.097-.03-.102-.032-.102-.032-.102-.034-.103-.035-.096-.034-.1-.036-.101-.037h-.002l-.094-.036-.096-.037-.097-.04h-.002l-.099-.04-.098-.042h-.002l-.092-.04-.097-.043-.095-.043-.097-.044h-.002l-.09-.043-.094-.045-.094-.046-.093-.047-.09-.046-.096-.05-.088-.047-.002-.001-.09-.049-.094-.052-.002-.002-.087-.049-.087-.05h-.002l-.088-.053h-.001l-.09-.055-.086-.052-.002-.001-.089-.055-.084-.054h-.002l-.09-.059h-.001l-.085-.056-.001-.001-.084-.056-.082-.056h-.001l-.086-.06-.082-.058H7.79l-.086-.062-.002-.002-.08-.058-.081-.06h-.001l-.085-.064-.002-.002-.076-.058-.002-.002-.082-.064-.161-.128-.162-.133-.04-.034-.132-.092-.147-.066-.157-.038-.16-.008-.16.022z"}));};function _extends$h(){_extends$h=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$h.apply(this,arguments);}var StartEventNonInterruptingEscalationIcon=function StartEventNonInterruptingEscalationIcon(_ref72){var _ref72$styles=_ref72.styles,styles=_ref72$styles===void 0?{}:_ref72$styles,props=_objectWithoutProperties(_ref72,_excluded72);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$h({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16 9.209c-1.674 4.655-2.735 9.504-4.408 14.16 1.534-1.526 2.873-3.235 4.407-4.761l4.408 4.76c-1.497-4.71-2.91-9.448-4.408-14.16zm.031 2.93c.822 2.586 1.598 5.187 2.42 7.774l-2.42-2.614c-.682.598-2.453 2.886-2.34 2.389.873-2.488 1.45-5.068 2.34-7.55zM16.132.364c-1.51.016-3.055.139-4.492.614-.854.442-.266 1.861.651 1.578 2.266-.58 4.656-.596 6.944-.144.935.063 1.21-1.391.318-1.674-1.118-.26-2.274-.361-3.42-.374zm8.865 2.777c-.931-.1-1.262 1.29-.425 1.666 1.863 1.364 3.222 3.298 4.322 5.296.617.737 1.875-.145 1.398-.979-1.184-2.275-2.808-4.384-4.923-5.866a.863.863 0 00-.372-.117zM6.55 3.564c-.734.078-1.196.762-1.735 1.206C3.552 6.02 2.55 7.511 1.681 9.053c-.31.533-.71 1.33-.03 1.767.615.432 1.282-.132 1.446-.742.796-1.475 1.746-2.89 2.934-4.08.43-.548 1.292-.822 1.34-1.595a.874.874 0 00-.822-.839zm24.582 11.078c-.771-.033-1.004.82-.873 1.437.13 2.395-.471 4.797-1.615 6.897-.33.876.984 1.559 1.512.785a14.276 14.276 0 001.761-8.54.865.865 0 00-.785-.579zm-30.195.666c-.774-.06-1.032.785-.905 1.407.117 2.41.732 4.81 1.858 6.945.528.774 1.84.09 1.51-.786A15.932 15.932 0 011.728 16a.876.876 0 00-.79-.692zm24.57 11.817c-.762.099-1.243.835-1.919 1.16-1.514 1.002-3.237 1.632-4.978 2.092-.864.423-.307 1.855.616 1.591 2.528-.578 4.93-1.75 6.913-3.421.469-.522.07-1.42-.631-1.422zm-19.16.042c-.845.001-1.12 1.228-.395 1.628 1.665 1.401 3.667 2.348 5.76 2.912.618.178 1.482.565 1.893-.177.355-.628-.226-1.297-.87-1.326-1.972-.515-3.912-1.285-5.5-2.594-.26-.213-.522-.472-.888-.443z"}));};function _extends$g(){_extends$g=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$g.apply(this,arguments);}var StartEventNonInterruptingMessageIcon=function StartEventNonInterruptingMessageIcon(_ref73){var _ref73$styles=_ref73.styles,styles=_ref73$styles===void 0?{}:_ref73$styles,props=_objectWithoutProperties(_ref73,_excluded73);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$g({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M8.746 10.393v11.064h14.506V10.393H8.746zm3.223 1.728h8.06c-1.428.879-2.856 2.807-4.283 3.018l-3.777-3.018zm9.557 1.018v6.59H10.473v-6.59l5.525 4.416 5.528-4.416zM16.132 0c-1.51.016-3.055.139-4.492.614-.854.442-.266 1.861.651 1.578 2.266-.58 4.656-.596 6.944-.144.935.063 1.21-1.391.318-1.674-1.118-.26-2.274-.361-3.42-.374zm8.865 2.777c-.931-.1-1.262 1.29-.425 1.666 1.863 1.364 3.222 3.298 4.322 5.296.617.737 1.875-.145 1.398-.979-1.184-2.275-2.808-4.384-4.923-5.866a.863.863 0 00-.372-.117zM6.55 3.2c-.734.078-1.196.762-1.735 1.206C3.552 5.656 2.55 7.147 1.681 8.69c-.31.533-.71 1.33-.03 1.767.615.432 1.282-.132 1.446-.742.796-1.475 1.746-2.89 2.934-4.08.43-.548 1.292-.822 1.34-1.595a.874.874 0 00-.822-.839zm24.582 11.078c-.771-.033-1.004.82-.873 1.437.13 2.395-.471 4.797-1.615 6.897-.33.876.984 1.559 1.512.785a14.276 14.276 0 001.761-8.54.865.865 0 00-.785-.579zm-30.195.666c-.774-.06-1.032.785-.905 1.407.117 2.41.732 4.81 1.858 6.945.528.774 1.84.09 1.51-.786a15.932 15.932 0 01-1.672-6.874.876.876 0 00-.79-.692zm24.57 11.817c-.762.099-1.243.835-1.919 1.16-1.514 1.002-3.237 1.632-4.978 2.092-.864.423-.307 1.855.616 1.591 2.528-.578 4.93-1.75 6.913-3.421.469-.522.07-1.42-.631-1.422zm-19.16.042c-.845.001-1.12 1.228-.395 1.628 1.665 1.401 3.667 2.348 5.76 2.912.618.178 1.482.565 1.893-.177.355-.628-.226-1.297-.87-1.326-1.972-.515-3.912-1.285-5.5-2.594-.26-.213-.522-.472-.888-.443z"}));};function _extends$f(){_extends$f=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$f.apply(this,arguments);}var StartEventNonInterruptingMultipleIcon=function StartEventNonInterruptingMultipleIcon(_ref74){var _ref74$styles=_ref74.styles,styles=_ref74$styles===void 0?{}:_ref74$styles,props=_objectWithoutProperties(_ref74,_excluded74);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$f({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M23.621 13.524L16 7.99l-7.622 5.534 2.911 8.952h9.422l2.911-8.952zm-1.016.33l-2.523 7.759h-8.165l-2.524-7.76L16 9.059l6.606 4.796zM16.132 0c-1.51.016-3.055.139-4.492.614-.854.442-.266 1.861.651 1.578 2.266-.58 4.656-.596 6.944-.144.935.063 1.21-1.391.318-1.674-1.118-.26-2.274-.361-3.42-.374zm8.865 2.777c-.931-.1-1.262 1.29-.425 1.666 1.863 1.364 3.222 3.298 4.322 5.296.617.737 1.875-.145 1.398-.979-1.184-2.275-2.808-4.384-4.923-5.866a.863.863 0 00-.372-.117zM6.55 3.2c-.734.078-1.196.762-1.735 1.206C3.552 5.656 2.55 7.147 1.681 8.69c-.31.533-.71 1.33-.03 1.767.615.432 1.282-.132 1.446-.742.796-1.475 1.746-2.89 2.934-4.08.43-.548 1.292-.822 1.34-1.595a.874.874 0 00-.822-.839zm24.582 11.078c-.771-.033-1.004.82-.873 1.437.13 2.395-.471 4.797-1.615 6.897-.33.876.984 1.559 1.512.785a14.276 14.276 0 001.761-8.54.865.865 0 00-.785-.579zm-30.195.666c-.774-.06-1.032.785-.905 1.407.117 2.41.732 4.81 1.858 6.945.528.774 1.84.09 1.51-.786a15.932 15.932 0 01-1.672-6.874.876.876 0 00-.79-.692zm24.57 11.817c-.762.099-1.243.835-1.919 1.16-1.514 1.002-3.237 1.632-4.978 2.092-.864.423-.307 1.855.616 1.591 2.528-.578 4.93-1.75 6.913-3.421.469-.522.07-1.42-.631-1.422zm-19.16.042c-.845.001-1.12 1.228-.395 1.628 1.665 1.401 3.667 2.348 5.76 2.912.618.178 1.482.565 1.893-.177.355-.628-.226-1.297-.87-1.326-1.972-.515-3.912-1.285-5.5-2.594-.26-.213-.522-.472-.888-.443z"}));};function _extends$e(){_extends$e=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$e.apply(this,arguments);}var StartEventNonInterruptingParallelMultipleIcon=function StartEventNonInterruptingParallelMultipleIcon(_ref75){var _ref75$styles=_ref75.styles,styles=_ref75$styles===void 0?{}:_ref75$styles,props=_objectWithoutProperties(_ref75,_excluded75);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$e({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M13.503 9.016v4.428H9.075v4.98h4.428v4.428h4.98v-4.427h4.428v-4.981h-4.427V9.016h-4.981zm.83.83h3.32v4.428h4.428v3.32h-4.428v4.428h-3.32v-4.454H9.905v-3.294h4.428V9.846zM16.12 0h-.232l-.22.004h-.012l-.221.006h-.012l-.22.01h-.012l-.22.013h-.012l-.22.016h-.012l-.22.019h-.005l-.006.001-.22.021h-.006l-.005.001-.22.025h-.011l-.22.028h-.005l-.006.002-.219.03h-.005l-.006.001-.218.033-.006.001-.006.001-.217.036-.006.001-.006.001-.217.039-.006.001-.006.001-.216.042-.006.001-.006.001-.215.045-.006.001-.006.002-.215.047-.006.002-.006.001-.214.05-.006.002-.006.002-.115.029-.152.053-.14.081-.122.106-.1.126-.075.143-.047.154-.018.16.012.16.042.156.07.145.095.13.118.11.137.086.15.059.158.03h.161l.132-.022.11-.028.202-.047.203-.046.208-.043.202-.039.206-.037.206-.034.205-.03.208-.03.205-.025.209-.023.208-.02.21-.017.209-.015.207-.011.21-.009.21-.006.207-.003h.21l.21.002.207.005.207.008.212.011.207.014.208.017.209.019.208.022.205.025.206.028.207.03.208.035.205.036.202.039.052.01.16.018.16-.012.156-.042.146-.07.13-.096.109-.119.085-.136.06-.15.03-.159v-.16l-.03-.16-.059-.15-.086-.136-.109-.118-.13-.096-.145-.07-.128-.038-.057-.011-.006-.002h-.006l-.216-.042-.006-.001-.006-.001-.217-.039H18.9l-.006-.002-.217-.035-.006-.001-.006-.001-.218-.032-.006-.001-.006-.001-.218-.03h-.006l-.006-.001-.219-.027h-.011l-.22-.024-.005-.001h-.006l-.22-.021h-.006l-.006-.001-.22-.017-.005-.001h-.006L17.06.03h-.012l-.22-.012h-.012l-.22-.01h-.012l-.22-.005h-.012L16.132 0h-.012zm8.715 2.783l-.157.034-.149.063-.134.089-.116.112-.092.132-.067.147-.038.157-.008.16.021.16.051.153.079.141.103.124.102.087.052.038h.001l.087.064v.001l.082.061.002.001.076.059h.001l.084.065.082.066.002.001.079.063.002.002.077.063.081.067.002.002.077.065.076.065.001.002.08.07.078.07h.002l.075.068.077.072.002.001.073.069.077.073.072.07.002.001.077.076.07.07v.001l.075.076.07.073.002.001.074.079.002.002.069.074.069.075.074.082.07.08.002.001.068.079h.001l.067.079.068.082.065.078.001.002.068.083.067.084.063.081.001.002.067.087.002.002.063.084.001.001.064.087.008.01.008.01.095.12.093.121.09.119.087.119.088.122.086.123.084.12.081.122.001.002.084.126.08.126.08.127.077.126.079.131.074.127.075.131.073.131.07.13.07.133.069.133.045.09.086.137.109.119.13.096.144.07.156.042.16.013.16-.017.155-.047.143-.075.126-.1.106-.121.082-.14.054-.151.025-.16-.005-.16-.035-.158-.05-.124-.048-.095-.002-.004-.002-.004-.073-.14-.002-.005-.002-.004-.074-.14-.002-.004-.002-.004-.076-.14-.002-.003-.002-.004-.077-.139-.003-.004-.002-.004-.078-.138-.003-.004-.002-.003-.08-.137-.002-.004-.003-.004-.081-.136-.002-.004-.003-.004-.083-.136-.002-.003-.002-.004-.085-.135-.002-.004-.003-.003-.085-.134-.003-.004-.002-.004-.087-.132-.003-.004-.003-.004-.088-.132-.003-.003-.002-.004-.09-.13-.003-.005-.003-.003-.091-.13-.003-.004-.002-.004-.093-.129-.003-.003-.003-.004-.094-.128-.003-.004-.003-.003-.095-.127-.003-.004-.003-.004-.097-.125-.003-.004-.003-.004-.09-.114-.06-.082-.003-.003-.002-.003-.069-.091-.002-.004-.002-.003-.07-.09-.003-.003-.002-.003-.07-.09-.003-.003-.002-.003-.071-.09-.002-.003-.003-.002-.072-.089-.002-.003-.002-.003-.073-.088-.002-.003-.002-.002-.074-.087-.002-.003-.002-.003-.074-.086-.003-.003-.002-.003-.074-.086-.003-.002-.002-.003-.075-.085-.003-.003-.002-.002-.076-.084-.002-.003-.003-.003-.076-.083-.002-.003-.003-.003-.077-.082-.002-.003-.003-.002-.077-.082-.003-.003-.003-.002-.078-.081-.002-.003-.003-.003-.078-.08-.003-.002-.003-.003-.079-.08-.002-.002-.003-.002-.08-.08-.002-.002-.003-.002-.08-.078-.003-.003-.003-.002-.08-.077-.003-.003-.003-.002-.082-.077-.002-.002-.003-.002-.082-.076-.003-.002-.002-.003-.083-.075-.003-.002-.002-.003-.084-.074-.002-.002-.003-.002-.084-.074-.003-.002-.002-.002-.085-.073-.002-.002-.003-.003-.085-.071-.003-.003-.002-.002-.086-.07-.003-.003-.002-.002-.086-.07-.003-.003-.003-.002-.086-.07-.003-.002-.003-.002-.087-.069-.002-.002-.003-.002-.088-.068-.002-.002-.003-.002-.088-.067-.003-.003-.003-.002-.088-.066-.003-.002-.003-.002-.089-.066-.003-.002-.003-.002-.057-.042-.14-.082-.15-.055-.16-.026-.16.004zM6.377 3.21l-.157.037-.148.066-.111.074-.007.006-.003.002-.003.002-.086.069-.003.002-.002.002-.086.07-.003.002-.002.002-.086.07-.002.003-.003.002-.085.071-.002.002-.003.003-.084.071-.003.003-.002.002-.084.072-.003.003-.002.002-.083.073-.003.003-.002.002-.083.074-.002.002-.003.003-.082.074-.003.003-.002.002-.081.076-.003.002-.003.002-.08.077-.003.002-.003.003-.08.076-.002.003-.003.002-.08.078-.002.002-.003.003-.079.078-.002.003-.003.002-.078.08-.003.002-.002.002-.078.08-.002.003-.003.002-.077.08-.003.004-.002.002-.077.081-.002.003-.003.003-.076.082-.002.002-.003.003-.075.082-.002.003-.003.003-.074.083-.003.003-.002.003-.074.084-.003.003-.002.002-.074.085-.002.003-.002.003-.073.085-.003.003-.002.003-.072.086-.002.003-.003.003-.071.087-.003.003-.002.002-.07.088-.003.003-.002.003-.07.088-.003.003-.002.003-.07.09-.002.002-.002.003-.069.09-.002.003-.003.003-.068.09-.002.003-.002.003-.067.092-.003.003-.002.003-.067.092-.002.003-.002.003-.066.092-.002.003-.002.004-.066.093-.002.003-.002.003-.065.094-.002.003-.002.004-.064.094-.002.003-.002.004-.063.095-.002.003-.002.003-.063.097-.002.003-.002.003-.046.073-.05.07-.003.002-.002.003-.067.093-.003.003-.002.003-.066.094-.002.003-.002.003-.066.094-.002.003-.002.003-.064.094-.002.004-.002.003-.064.094-.002.004-.002.003-.062.095-.002.003-.002.003-.062.096-.002.003-.002.003-.06.096-.003.003-.002.003-.06.096-.001.004-.002.003-.059.096-.002.004-.002.003-.058.097-.002.003-.001.003-.057.098-.002.003-.002.003-.056.098-.002.003-.002.003-.055.098-.002.004-.001.003-.055.098-.001.004-.002.003-.054.099-.001.003-.002.003-.052.1-.002.002-.002.004-.051.1-.002.002-.002.004-.05.1-.002.003-.002.003-.05.1v.003l-.002.004-.05.1v.003l-.002.004-.048.1-.002.004-.001.003-.047.101-.002.003-.001.004-.013.027-.052.152-.024.16.006.16.037.157.064.148.091.133.114.114.134.09.147.065.157.036.162.006.159-.024.152-.053.14-.08.122-.105.1-.126.066-.117.01-.023.044-.095.045-.095.002-.003.042-.087.048-.097.048-.095v-.001l.048-.092.001-.001.047-.09.05-.093.002-.002.049-.09.052-.092.001-.002.051-.089.001-.002.051-.087.053-.088.001-.002.055-.091.057-.091.057-.09.001-.002.057-.089.055-.083.001-.002.06-.09.06-.088.062-.089.001-.001.06-.084.063-.088.065-.089.017-.023.016-.025.06-.094.059-.09v-.002l.058-.086.057-.086.001-.001.062-.09.062-.088.001-.002.06-.085.002-.002.06-.082.063-.087.064-.084.002-.002.061-.08.065-.084.064-.08v-.001l.067-.083.067-.082.07-.083.069-.08.063-.074.074-.083.068-.077.002-.002.07-.076.07-.075.072-.077.001-.001.067-.07.076-.078.002-.002.07-.07.075-.075.002-.002.072-.07.075-.072.002-.002.073-.069.074-.068.001-.001.08-.073.076-.068.002-.002.072-.063v-.001l.078-.067.079-.068.002-.001.08-.068.002-.002.077-.063.082-.066.001-.001.075-.06.002-.002.006-.004.117-.111.094-.131.068-.146.04-.156.01-.161-.019-.16-.049-.154-.076-.141-.102-.125-.123-.105-.14-.079-.153-.052-.16-.023-.16.007zm24.596 11.088l-.156.04-.146.067-.131.094-.112.117-.087.135-.061.15-.033.157-.004.134.007.142.005.152.004.15.002.149v.153l.001.011v.015l.004.11.002.11v.002l.002.106v.321l-.003.102-.002.106-.004.107-.005.105-.006.106-.006.106-.008.106v.002l-.008.103v.002l-.01.1-.01.105-.01.105-.013.105-.012.099v.002l-.014.108-.014.1-.016.105-.016.103v.002l-.017.099-.018.104-.019.103v.002l-.019.097-.02.104-.022.103v.001l-.022.098-.023.103v.002l-.024.096-.025.103v.002l-.024.096-.027.102v.003l-.026.093v.001l-.029.103v.002l-.03.099-.028.097v.002l-.03.095-.03.096v.001l-.033.1-.031.095v.002l-.035.1v.003l-.034.094v.003l-.035.096v.001l-.034.09v.002l-.038.098-.036.093v.002l-.038.095-.079.194-.08.188-.085.189-.087.19-.09.184-.092.183-.095.184-.05.093-.064.148-.034.158-.005.16.026.16.054.151.082.14.106.12.127.1.143.075.154.046.16.017.161-.013.156-.042.144-.071.13-.096.109-.119.072-.112.053-.099.003-.005.003-.006.102-.195.003-.006.003-.006.098-.196.003-.006.003-.006.096-.197.002-.006.003-.006.093-.2.002-.006.003-.006.09-.2.002-.006.003-.007.086-.202.003-.006.002-.006.084-.203.002-.005.001-.005.04-.102.002-.003.001-.003.04-.103.001-.003.001-.003.04-.103v-.004l.001-.003.039-.103v-.003l.002-.003.037-.104.001-.003.001-.003.037-.104v-.004l.002-.003.035-.104.002-.003v-.004l.035-.104.002-.004v-.003l.034-.105.002-.003v-.003l.034-.105v-.004l.002-.003.032-.106.001-.003.001-.003.031-.106.001-.003.001-.004.031-.106.001-.003.001-.004.03-.106v-.003l.002-.004.028-.107.001-.003.001-.003.028-.107.001-.004.001-.003.027-.107.001-.004v-.003l.027-.108.001-.003v-.004l.026-.108.001-.003v-.004l.025-.108.001-.003v-.004l.025-.108v-.004l.001-.003.023-.109v-.003l.001-.004.022-.109v-.003l.002-.004.02-.109.001-.004v-.003l.02-.11.002-.003v-.004l.02-.11v-.007l.019-.11v-.003l.001-.004.017-.11v-.004l.001-.003.017-.11v-.008l.016-.11v-.004l.001-.004.015-.11v-.008l.015-.111v-.008l.013-.111v-.007l.013-.112v-.007l.011-.112v-.004l.001-.004.01-.112v-.007l.01-.112v-.008l.008-.112v-.008l.007-.113v-.007l.007-.113v-.008l.005-.113v-.007l.005-.114v-.007l.003-.114v-.007l.003-.114v-.129l.001-.114v-.13l-.003-.114v-.008l-.003-.115v-.007l-.003-.102v-.155l-.003-.158v-.01l-.004-.158v-.01l-.006-.158v-.01l-.007-.148-.023-.16-.051-.152-.08-.14-.103-.124-.125-.102-.142-.077-.153-.05-.16-.02-.161.01zm-30.213.66l-.157.034-.149.063-.134.09-.115.113-.092.132-.067.147-.037.156-.009.134.001.11V15.95l.006.22v.012l.01.22v.012l.012.22v.006l.001.006.015.22v.005l.001.006.018.22.001.006v.006l.022.219v.006l.001.006.024.219.001.006v.006l.028.218.001.006v.006l.031.218.001.006.001.006.033.218.001.006.001.005.037.218v.006l.002.005.04.217v.006l.001.006.043.216.001.006.001.006.046.216v.005l.002.006.048.215.002.006.001.006.051.214.002.006v.006l.055.214.002.005.001.006.057.213.002.006.001.005.06.213.002.005.001.006.063.212.002.005.001.006.066.21.002.006.002.006.068.21.002.005.002.005.07.21.003.005.002.005.074.208.002.006.002.005.077.207.002.006.002.005.08.206.002.005.002.006.082.204.002.006.002.005.086.204.002.005.002.006.088.202.002.005.003.006.09.2.003.006.002.005.094.2.002.006.003.005.096.199.002.005.003.005.03.062.086.137.11.118.128.097.145.07.156.043.16.013.16-.017.155-.047.143-.074.127-.1.106-.121.081-.14.055-.15.025-.16-.005-.161-.034-.158-.05-.124-.028-.055-.092-.19-.087-.188-.087-.192-.083-.19-.08-.193-.078-.194-.076-.196-.073-.195-.07-.197-.067-.198-.065-.199-.063-.2-.059-.2-.056-.2-.055-.204-.05-.201-.049-.202-.046-.205-.043-.206-.04-.203-.038-.207-.034-.204-.032-.207-.028-.205-.026-.207-.023-.208-.02-.207-.018-.207-.014-.208-.011-.207-.009-.208-.005-.207-.002-.104-.017-.16-.046-.155-.074-.143-.1-.126-.121-.107-.139-.081-.152-.055-.159-.025-.161.004zm24.585 11.83l-.156.039-.146.068-.11.076-.015.012-.163.129-.166.127-.168.125-.17.124-.17.12-.172.118-.173.115-.176.114-.177.111-.18.11-.178.105-.182.104-.182.101-.184.1-.184.095-.189.095-.186.09-.188.089-.19.086-.19.082-.193.081-.195.078-.191.074-.197.073-.195.07-.196.065-.198.064-.198.061-.2.058-.2.055-.2.052-.2.049-.151.035-.153.05-.141.078-.125.103-.103.124-.078.14-.05.154-.022.16.009.16.038.157.067.147.093.132.116.112.134.089.149.062.158.034.16.003.133-.02.158-.035.006-.002.006-.001.213-.052.006-.002.007-.001.212-.056.006-.001.006-.002.212-.058.006-.002.006-.002.211-.061.006-.002.006-.002.21-.064.006-.002.006-.002.21-.067.005-.002.006-.002.208-.07.006-.002.006-.003.207-.073.006-.002.006-.002.206-.077.006-.002.005-.002.206-.08.005-.001.006-.003.204-.082.006-.002.005-.002.203-.085.006-.003.005-.002.202-.088.006-.002.005-.003.2-.09.006-.003.006-.003.2-.093.005-.003.005-.002.198-.096.006-.003.005-.003.197-.099.005-.002.005-.003.196-.102.005-.002.005-.003.195-.105.005-.002.005-.003.193-.107.005-.003.005-.003.191-.11.005-.003.005-.003.19-.112.005-.003.005-.003.189-.115.005-.003.005-.003.187-.117.005-.003.004-.004.186-.12.005-.003.004-.003.184-.122.005-.003.005-.004.182-.125.004-.003.005-.003.18-.128.005-.003.005-.003.179-.13.004-.003.005-.004.177-.132.004-.004.005-.003.175-.135.005-.003.004-.004.173-.137.005-.003.004-.004.019-.015.115-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.052-.153-.079-.14-.103-.124-.125-.102-.142-.078-.153-.05-.16-.02-.16.01zm-19.17.054l-.153.051-.14.079-.124.103-.103.125-.077.141-.05.153-.02.16.009.161.04.156.067.147.093.131.095.094.047.04.005.004.005.004.17.14.005.004.005.004.172.137.004.004.005.003.086.067.003.002.003.002.087.067.003.002.003.002.088.066.002.003.003.002.089.065.002.002.003.002.09.065.002.002.003.002.09.064.002.002.003.002.09.063.003.002.003.002.09.063.003.002.003.002.092.062.002.002.003.002.092.061.003.002.003.002.092.06.003.003.003.001.093.06.003.002.003.002.093.06.003.001.003.002.094.058.003.002.003.002.095.058.003.001.003.002.095.057.003.002.003.002.095.056.003.002.003.002.096.055.004.002.003.001.096.055.003.002.003.002.098.053.003.002.003.002.097.053.004.002.003.001.098.053.003.001.003.002.099.052.003.001.003.002.1.05.003.002.003.002.1.05.003.002.003.001.1.05h.003l.004.003.1.048.004.001.003.002.101.048.003.001.004.002.101.046.004.002.003.001.102.046.004.002.003.001.103.045.003.002.003.001.103.045.004.001.003.002.104.043.003.001.004.002.104.042.003.002.004.001.104.042.004.001.003.002.105.04.004.002.003.001.106.04.003.002h.004l.106.04.004.001.003.002.107.038.003.001.004.001.107.038.003.001.004.001.107.037.004.001.004.001.108.036.003.001.004.001.108.035.004.001.003.001.11.034.003.001.004.001.109.033.004.002h.003l.11.033h.004l.003.002.11.031.004.001.004.001.084.023.081.028.004.001.003.001.109.037.003.001.004.001.109.036.003.001.004.001.109.035h.003l.004.002.11.033.003.001.003.001.11.033.003.001.004.001.109.031.004.002h.003l.11.031.003.001.004.001.11.03h.003l.003.001.11.029h.004l.003.002.11.027.003.001.004.001.11.027h.003l.004.001.004.001.16.022.16-.008.157-.038.147-.067.132-.092.112-.116.09-.134.062-.149.034-.157.004-.161-.025-.16-.055-.151-.082-.139-.107-.12-.127-.1-.143-.074-.124-.04h-.003l-.104-.025-.103-.026h-.002l-.095-.026h-.001l-.101-.027h-.002l-.1-.028h-.002l-.103-.03-.104-.032-.097-.03h-.002l-.103-.033-.102-.033-.101-.034-.106-.036-.027-.01-.027-.007-.107-.03-.104-.029-.104-.03h-.002l-.097-.03-.102-.032-.102-.032-.102-.034-.103-.035-.096-.034-.1-.036-.101-.037h-.002l-.094-.036-.096-.037-.097-.04h-.002l-.099-.04-.098-.042h-.002l-.092-.04-.097-.043-.095-.043-.097-.044h-.002l-.09-.043-.094-.045-.094-.046-.093-.047-.09-.046-.096-.05-.088-.047-.002-.001-.09-.049-.094-.052-.002-.002-.087-.049-.087-.05h-.002l-.088-.053h-.001l-.09-.055-.086-.052-.002-.001-.089-.055-.084-.054h-.002l-.09-.059h-.001l-.085-.056-.001-.001-.084-.056-.082-.056h-.001l-.086-.06-.082-.058H7.79l-.086-.062-.002-.002-.08-.058-.081-.06h-.001l-.085-.064-.002-.002-.076-.058-.002-.002-.082-.064-.161-.128-.162-.133-.04-.034-.132-.092-.147-.066-.157-.038-.16-.008-.16.022z",opacity:".98"}));};function _extends$d(){_extends$d=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$d.apply(this,arguments);}var StartEventNonInterruptingSignalIcon=function StartEventNonInterruptingSignalIcon(_ref76){var _ref76$styles=_ref76.styles,styles=_ref76$styles===void 0?{}:_ref76$styles,props=_objectWithoutProperties(_ref76,_excluded76);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$d({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16.007 8.82L9.21 21.022h13.596L16.007 8.82zm0 1.775l5.328 9.563H10.68l5.327-9.563zM16.14.386c-1.571.236-4.195-.284-4.9 1.381.619 1.703 2.745.069 4.085.365 1.421-.13 2.84.2 4.235.259C21.27.784 18.19.344 17 .413a20.456 20.456 0 00-.86-.027zM25 3.162c-2.19.694.401 2.26 1.181 3.094 1.083 1.152 1.954 2.484 2.715 3.864 1.48 1.005 1.845-1.26.81-2.03-1.158-1.897-2.613-3.704-4.513-4.89l-.192-.038zm-18.438.423c-1.793.712-2.909 2.548-4.01 4.061-.773.814-2.211 3.653.005 3.211 1.123-1.469 1.87-3.306 3.267-4.614.664-.7 2.73-2.013.738-2.658zm24.57 11.072c-1.659.435-.468 2.667-.99 3.895a13.427 13.427 0 01-1.497 4.435c-.23 1.659 1.991 1.165 2.018-.199a14.277 14.277 0 001.254-7.552.865.865 0 00-.785-.579zm-30.18.666c-1.677.386-.633 2.667-.608 3.876.371 1.623.792 3.35 1.79 4.696 2.382.321.571-2.338.292-3.492a15.92 15.92 0 01-.684-4.39.877.877 0 00-.79-.69zm24.558 11.81c-1.755.865-3.303 2.266-5.274 2.765-1.162-.016-3.074 1.271-1.331 2.102 2.66-.447 5.163-1.733 7.236-3.445.472-.506.06-1.432-.631-1.421zm-19.151.043c-2.004.786.416 2.405 1.43 2.913 1.608.904 3.379 1.636 5.208 1.877 1.77-.804-.228-2.094-1.357-2.073-1.75-.537-3.403-1.396-4.798-2.586l-.227-.104-.256-.027z"}));};function _extends$c(){_extends$c=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$c.apply(this,arguments);}var StartEventNonInterruptingTimerIcon=function StartEventNonInterruptingTimerIcon(_ref77){var _ref77$styles=_ref77.styles,styles=_ref77$styles===void 0?{}:_ref77$styles,props=_objectWithoutProperties(_ref77,_excluded77);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$c({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.991 8.7c-3.018-.042-5.92 1.925-7.03 4.725-1.138 2.695-.509 6.011 1.537 8.102 1.99 2.142 5.267 2.93 8.013 1.927 2.877-.98 4.99-3.826 5.067-6.87.153-2.956-1.624-5.88-4.299-7.135a7.551 7.551 0 00-3.288-.75zm0 1.383c2.758-.052 5.372 1.972 6.014 4.654.704 2.578-.482 5.516-2.79 6.867-2.358 1.48-5.682 1.085-7.617-.919-2.043-1.97-2.407-5.38-.84-7.743 1.11-1.764 3.149-2.88 5.233-2.86zm1.962 1.764l-2.074 3.762c-.64.068-.793 1.04-.202 1.3.39.27.696-.18 1.052-.165h3.17v-.865h-3.182l1.993-3.614-.757-.418zM16.12.358h-.232l-.22.004h-.012l-.221.006h-.012l-.22.01h-.012l-.22.013h-.012l-.22.016h-.012l-.22.019h-.005l-.006.001-.22.021h-.006l-.005.001-.22.025h-.011l-.22.028h-.005l-.006.002-.219.03h-.005l-.006.001-.218.033-.006.001-.006.001-.217.036-.006.001-.006.001-.217.039-.006.001-.006.001-.216.042-.006.001-.006.001-.215.045-.006.001-.006.002-.215.047-.006.002-.006.001-.214.05-.006.002-.006.002-.115.029-.152.053-.14.081-.122.106-.1.126-.075.143-.047.154-.018.16.012.16.042.156.07.145.095.13.118.11.137.086.15.059.158.03h.161l.132-.022.11-.028.202-.047.203-.046.208-.043.202-.039.206-.037.206-.034.205-.03.208-.03.205-.025.209-.023.208-.02.21-.017.209-.015.207-.011.21-.009.21-.006.207-.003h.21l.21.002.207.005.207.008.212.011.207.014.208.017.209.019.208.022.205.025.206.028.207.03.208.035.205.036.202.039.052.01.16.018.16-.012.156-.042.146-.07.13-.096.109-.119.085-.136.06-.15.03-.159v-.16l-.03-.16-.059-.15-.086-.136L19.823.9l-.13-.096-.145-.07-.128-.038-.057-.011-.006-.002h-.006L19.135.64l-.006-.001-.006-.001-.217-.039H18.9l-.006-.002-.217-.035-.006-.001-.006-.001-.218-.032-.006-.001-.006-.001-.218-.03h-.006l-.006-.001-.219-.027h-.011l-.22-.024-.005-.001h-.006l-.22-.021h-.006L17.512.42l-.22-.017-.005-.001h-.006l-.22-.015h-.012l-.22-.012h-.012l-.22-.01h-.012l-.22-.005h-.012l-.221-.003h-.012zm8.715 2.783l-.157.034-.149.063-.134.089-.116.112-.092.132-.067.147-.038.157-.008.16.021.16.051.153.079.141.103.124.102.087.052.038h.001l.087.064v.001l.082.061.002.001.076.059h.001l.084.065.082.066.002.001.079.063.002.002.077.063.081.067.002.002.077.065.076.065.001.002.08.07.078.07h.002l.075.068.077.072.002.001.073.069.077.073.072.07.002.001.077.076.07.07v.001l.075.076.07.073.002.001.074.079.002.002.069.074.069.075.074.082.07.08.002.001.068.079h.001l.067.079.068.082.065.078.001.002.068.083.067.084.063.081.001.002.067.087.002.002.063.084.001.001.064.087.008.01.008.01.095.12.093.121.09.119.087.119.088.122.086.123.084.12.081.122.001.002.084.126.08.126.08.127.077.126.079.131.074.127.075.131.073.131.07.13.07.133.069.133.045.09.086.137.109.119.13.096.144.07.156.042.16.013.16-.017.155-.047.143-.075.126-.1.106-.121.082-.14.054-.151.025-.16-.005-.16-.035-.158-.05-.124-.048-.095-.002-.004-.002-.004-.073-.14-.002-.005-.002-.004-.074-.14-.002-.004-.002-.004-.076-.14-.002-.003-.002-.004-.077-.139-.003-.004-.002-.004-.078-.138-.003-.004-.002-.003-.08-.137-.002-.004-.003-.004-.081-.136-.002-.004-.003-.004-.083-.136-.002-.003-.002-.004-.085-.135-.002-.004-.003-.003-.085-.134-.003-.004-.002-.004-.087-.132-.003-.004-.003-.004-.088-.132-.003-.003-.002-.004-.09-.13-.003-.005-.003-.003-.091-.13-.003-.004-.002-.004-.093-.129-.003-.003-.003-.004-.094-.128-.003-.004-.003-.003-.095-.127-.003-.004-.003-.004-.097-.125-.003-.004-.003-.004-.09-.114-.06-.082-.003-.003-.002-.003-.069-.091-.002-.004-.002-.003-.07-.09-.003-.003-.002-.003-.07-.09-.003-.003-.002-.003-.071-.09-.002-.003-.003-.002-.072-.089-.002-.003-.002-.003-.073-.088-.002-.003-.002-.002-.074-.087-.002-.003-.002-.003-.074-.086-.003-.003-.002-.003-.074-.086-.003-.002-.002-.003-.075-.085-.003-.003-.002-.002-.076-.084-.002-.003-.003-.003-.076-.083-.002-.003-.003-.003-.077-.082-.002-.003-.003-.002-.077-.082-.003-.003-.003-.002-.078-.081-.002-.003-.003-.003-.078-.08-.003-.002-.003-.003-.079-.08-.002-.002-.003-.002-.08-.08-.002-.002-.003-.002-.08-.078-.003-.003-.003-.002-.08-.077-.003-.003-.003-.002-.082-.077-.002-.002-.003-.002-.082-.076-.003-.002-.002-.003-.083-.075-.003-.002-.002-.003-.084-.074-.002-.002-.003-.002-.084-.074-.003-.002-.002-.002-.085-.073-.002-.002-.003-.003-.085-.071-.003-.003-.002-.002-.086-.07-.003-.003-.002-.002-.086-.07-.003-.003-.003-.002-.086-.07-.003-.002-.003-.002-.087-.069-.002-.002-.003-.002-.088-.068-.002-.002-.003-.002-.088-.067-.003-.003-.003-.002-.088-.066-.003-.002-.003-.002-.089-.066-.003-.002-.003-.002-.057-.042-.14-.082-.15-.055-.16-.026-.16.004zm-18.458.426l-.157.037-.148.066-.111.074-.007.006-.003.002-.003.002-.086.069-.003.002-.002.002-.086.07-.003.002-.002.002-.086.07-.002.003-.003.002-.085.071-.002.002-.003.003-.084.071-.003.003-.002.002-.084.072-.003.003-.002.002-.083.073-.003.003-.002.002-.083.074-.002.002-.003.003-.082.074-.003.003-.002.002-.081.076-.003.002-.003.002-.08.077-.003.002-.003.003-.08.076-.002.003-.003.002-.08.078-.002.002-.003.003-.079.078-.002.003-.003.002-.078.08-.003.002-.002.002-.078.08-.002.003-.003.002-.077.08-.003.004-.002.002-.077.081-.002.003-.003.003-.076.082-.002.002-.003.003-.075.082-.002.003-.003.003-.074.083-.003.003-.002.003-.074.084-.003.003-.002.002-.074.085-.002.003-.002.003-.073.085-.003.003-.002.003-.072.086-.002.003-.003.003-.071.087-.003.003-.002.002-.07.088-.003.003-.002.003-.07.088-.003.003-.002.003-.07.09-.002.002-.002.003-.069.09-.002.003-.003.003-.068.09-.002.003-.002.003-.067.092-.003.003-.002.003-.067.092-.002.003-.002.003-.066.092-.002.003-.002.004-.066.093-.002.003-.002.003-.065.094-.002.003-.002.004-.064.094-.002.003-.002.004-.063.095-.002.003-.002.003-.063.097-.002.003-.002.003-.046.073-.05.07-.003.002-.002.003-.067.093-.003.003-.002.003-.066.094-.002.003-.002.003-.066.094-.002.003-.002.003-.064.094-.002.004-.002.003-.064.094-.002.004-.002.003-.062.095-.002.003-.002.003-.062.096-.002.003-.002.003-.06.096-.003.003-.002.003-.06.096-.001.004-.002.003-.059.096-.002.004-.002.003-.058.097-.002.003-.001.003-.057.098-.002.003-.002.003-.056.098-.002.003-.002.003-.055.098-.002.004-.001.003-.055.098-.001.004-.002.003-.054.099-.001.003-.002.003-.052.1-.002.002-.002.004-.051.1-.002.002-.002.004-.05.1-.002.003-.002.003-.05.1v.003l-.002.004-.05.1V9.5l-.002.004-.048.1-.002.004-.001.003-.047.101-.002.003-.001.004-.013.027-.052.152-.024.16.006.16.037.157.064.148.091.133.114.114.134.09.147.065.157.036.162.006.159-.024.152-.053.14-.08.122-.105.1-.126.066-.117.01-.023.044-.095.045-.095.002-.003.042-.087.048-.097.048-.095v-.001l.048-.092.001-.001.047-.09.05-.093.002-.002.049-.09.052-.092.001-.002.051-.089.001-.002.051-.087.053-.088.001-.002.055-.091.057-.091.057-.09.001-.002.057-.089.055-.083.001-.002.06-.09.06-.088.062-.089.001-.001.06-.084.063-.088.065-.089.017-.023.016-.025.06-.094.059-.09v-.002l.058-.086.057-.086.001-.001.062-.09.062-.088.001-.002.06-.085.002-.002.06-.082.063-.087.064-.084.002-.002.061-.08.065-.084.064-.08v-.001l.067-.083.067-.082.07-.083.069-.08.063-.074.074-.083.068-.077.002-.002.07-.076.07-.075.072-.077.001-.001.067-.07.076-.078.002-.002.07-.07.075-.075.002-.002.072-.07.075-.072.002-.002.073-.069.074-.068.001-.001.08-.073.076-.068.002-.002.072-.063v-.001l.078-.067.079-.068.002-.001.08-.068.002-.002.077-.063.082-.066.001-.001.075-.06.002-.002.006-.004.117-.111.094-.131.068-.146.04-.156.01-.161-.019-.16-.049-.154-.076-.141-.102-.125-.123-.105-.14-.079-.153-.052-.16-.023-.16.007zm24.596 11.088l-.156.04-.146.067-.131.094-.112.117-.087.135-.061.15-.033.157-.004.134.007.142.005.152.004.15.002.149v.153l.001.011v.015l.004.11.002.11v.002l.002.106v.321l-.003.102-.002.106-.004.107-.005.105-.006.106-.006.106-.008.106v.002l-.008.103v.002l-.01.1-.01.105-.01.105-.013.105-.012.099v.002l-.014.108-.014.1-.016.105-.016.103v.002l-.017.099-.018.104-.019.103v.002l-.019.097-.02.104-.022.103v.001l-.022.098-.023.103v.002l-.024.096-.025.103v.002l-.024.096-.027.102v.003l-.026.093v.001l-.029.103v.002l-.03.099-.028.097v.002l-.03.095-.03.096v.001l-.033.1-.031.095v.002l-.035.1v.003l-.034.094v.003l-.035.096v.001l-.034.09v.002l-.038.098-.036.093v.002l-.038.095-.079.194-.08.188-.085.189-.087.19-.09.184-.092.183-.095.184-.05.093-.064.148-.034.158-.005.16.026.16.054.151.082.14.106.12.127.1.143.075.154.046.16.017.161-.013.156-.042.144-.071.13-.096.109-.119.072-.112.053-.099.003-.005.003-.006.102-.195.003-.006.003-.006.098-.196.003-.006.003-.006.096-.197.002-.006.003-.006.093-.2.002-.006.003-.006.09-.2.002-.006.003-.007.086-.202.003-.006.002-.006.084-.203.002-.005.001-.005.04-.102.002-.003.001-.003.04-.103.001-.003.001-.003.04-.103v-.004l.001-.003.039-.103v-.003l.002-.003.037-.104.001-.003.001-.003.037-.104v-.004l.002-.003.035-.104.002-.003v-.004l.035-.104.002-.004v-.003l.034-.105.002-.003v-.003l.034-.105v-.004l.002-.003.032-.106.001-.003.001-.003.031-.106.001-.003.001-.004.031-.106.001-.003.001-.004.03-.106v-.003l.002-.004.028-.107.001-.003.001-.003.028-.107.001-.004.001-.003.027-.107.001-.004v-.003l.027-.108.001-.003v-.004l.026-.108.001-.003v-.004l.025-.108.001-.003v-.004l.025-.108v-.004l.001-.003.023-.109v-.003l.001-.004.022-.109v-.003l.002-.004.02-.109.001-.004v-.003l.02-.11.002-.003v-.004l.02-.11v-.007l.019-.11v-.003l.001-.004.017-.11v-.004l.001-.003.017-.11v-.008l.016-.11v-.004l.001-.004.015-.11v-.008l.015-.111v-.008l.013-.111v-.007l.013-.112v-.007l.011-.112v-.004l.001-.004.01-.112v-.007l.01-.112v-.008l.008-.112v-.008l.007-.113v-.007l.007-.113v-.008l.005-.113v-.007l.005-.114v-.007l.003-.114v-.007l.003-.114v-.129l.001-.114v-.13l-.003-.114V16.5l-.003-.115v-.007l-.003-.102v-.155l-.003-.158v-.01l-.004-.158v-.01l-.006-.158v-.01l-.007-.148-.023-.16-.051-.152-.08-.14-.103-.124-.125-.102-.142-.077-.153-.05-.16-.02-.161.01zm-30.213.66l-.157.034-.149.063-.134.09-.115.113-.092.132-.067.147-.037.156-.009.134.001.11V16.308l.006.22v.012l.01.22v.012l.012.22v.006l.001.006.015.22v.005l.001.006.018.22.001.006v.006l.022.219v.006l.001.006.024.219.001.006v.006l.028.218.001.006v.006l.031.218.001.006.001.006.033.218.001.006.001.005.037.218v.006l.002.005.04.217v.006l.001.006.043.216.001.006.001.006.046.216v.005l.002.006.048.215.002.006.001.006.051.214.002.006v.006l.055.214.002.005.001.006.057.213.002.006.001.005.06.213.002.005.001.006.063.212.002.005.001.006.066.21.002.006.002.006.068.21.002.005.002.005.07.21.003.005.002.005.074.208.002.006.002.005.077.207.002.006.002.005.08.206.002.005.002.006.082.204.002.006.002.005.086.204.002.005.002.006.088.202.002.005.003.006.09.2.003.006.002.005.094.2.002.006.003.005.096.199.002.005.003.005.03.062.086.137.11.118.128.097.145.07.156.043.16.013.16-.017.155-.047.143-.074.127-.1.106-.121.081-.14.055-.15.025-.16-.005-.161-.034-.158-.05-.124-.028-.055-.092-.19-.087-.188-.087-.192-.083-.19-.08-.193-.078-.194-.076-.196-.073-.195-.07-.197-.067-.198-.065-.199-.063-.2-.059-.2-.056-.2-.055-.204-.05-.201-.049-.202-.046-.205-.043-.206-.04-.203-.038-.207-.034-.204-.032-.207-.028-.205-.026-.207-.023-.208-.02-.207-.018-.207-.014-.208-.011-.207-.009-.208-.005-.207-.002-.104-.017-.16-.046-.155-.074-.143-.1-.126-.121-.107-.139-.081-.152-.055-.159-.025-.161.004zm24.585 11.83l-.156.039-.146.068-.11.076-.015.012-.163.129-.166.127-.168.125-.17.124-.17.12-.172.118-.173.115-.176.114-.177.111-.18.11-.178.105-.182.104-.182.101-.184.1-.184.095-.189.095-.186.09-.188.089-.19.086-.19.082-.193.081-.195.078-.191.074-.197.073-.195.07-.196.065-.198.064-.198.061-.2.058-.2.055-.2.052-.2.049-.151.035-.153.05-.141.078-.125.103-.103.124-.078.14-.05.154-.022.16.009.16.038.157.067.147.093.132.116.112.134.089.149.062.158.034.16.003.133-.02.158-.035.006-.002.006-.001.213-.052.006-.002.007-.001.212-.056.006-.001.006-.002.212-.058.006-.002.006-.002.211-.061.006-.002.006-.002.21-.064.006-.002.006-.002.21-.067.005-.002.006-.002.208-.07.006-.002.006-.003.207-.073.006-.002.006-.002.206-.077.006-.002.005-.002.206-.08.005-.001.006-.003.204-.082.006-.002.005-.002.203-.085.006-.003.005-.002.202-.088.006-.002.005-.003.2-.09.006-.003.006-.003.2-.093.005-.003.005-.002.198-.096.006-.003.005-.003.197-.099.005-.002.005-.003.196-.102.005-.002.005-.003.195-.105.005-.002.005-.003.193-.107.005-.003.005-.003.191-.11.005-.003.005-.003.19-.112.005-.003.005-.003.189-.115.005-.003.005-.003.187-.117.005-.003.004-.004.186-.12.005-.003.004-.003.184-.122.005-.003.005-.004.182-.125.004-.003.005-.003.18-.128.005-.003.005-.003.179-.13.004-.003.005-.004.177-.132.004-.004.005-.003.175-.135.005-.003.004-.004.173-.137.005-.003.004-.004.019-.015.115-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.052-.153-.079-.14-.103-.124-.125-.102-.142-.078-.153-.05-.16-.02-.16.01zm-19.17.054l-.153.051-.14.079-.124.103-.103.125-.077.141-.05.153-.02.16.009.161.04.156.067.147.093.131.095.094.047.04.005.004.005.004.17.14.005.004.005.004.172.137.004.004.005.003.086.067.003.002.003.002.087.067.003.002.003.002.088.066.002.003.003.002.089.065.002.002.003.002.09.065.002.002.003.002.09.064.002.002.003.002.09.063.003.002.003.002.09.063.003.002.003.002.092.062.002.002.003.002.092.061.003.002.003.002.092.06.003.003.003.001.093.06.003.002.003.002.093.06.003.001.003.002.094.058.003.002.003.002.095.058.003.001.003.002.095.057.003.002.003.002.095.056.003.002.003.002.096.055.004.002.003.001.096.055.003.002.003.002.098.053.003.002.003.002.097.053.004.002.003.001.098.053.003.001.003.002.099.052.003.001.003.002.1.05.003.002.003.002.1.05.003.002.003.001.1.05h.003l.004.003.1.048.004.001.003.002.101.048.003.001.004.002.101.046.004.002.003.001.102.046.004.002.003.001.103.045.003.002.003.001.103.045.004.001.003.002.104.043.003.001.004.002.104.042.003.002.004.001.104.042.004.001.003.002.105.04.004.002.003.001.106.04.003.002h.004l.106.04.004.001.003.002.107.038.003.001.004.001.107.038.003.001.004.001.107.037.004.001.004.001.108.036.003.001.004.001.108.035.004.001.003.001.11.034.003.001.004.001.109.033.004.002h.003l.11.033h.004l.003.002.11.031.004.001.004.001.084.023.081.028.004.001.003.001.109.037.003.001.004.001.109.036.003.001.004.001.109.035h.003l.004.002.11.033.003.001.003.001.11.033.003.001.004.001.109.031.004.002h.003l.11.031.003.001.004.001.11.03h.003l.003.001.11.029h.004l.003.002.11.027.003.001.004.001.11.027h.003l.004.001.004.001.16.022.16-.008.157-.038.147-.067.132-.092.112-.116.09-.134.062-.149.034-.157.004-.161-.025-.16-.055-.151-.082-.139-.107-.12-.127-.1-.143-.074-.124-.04h-.003l-.104-.025-.103-.026h-.002l-.095-.026h-.001l-.101-.027h-.002l-.1-.028h-.002l-.103-.03-.104-.032-.097-.03h-.002l-.103-.033-.102-.033-.101-.034-.106-.036-.027-.01-.027-.007-.107-.03-.104-.029-.104-.03h-.002l-.097-.03-.102-.032-.102-.032-.102-.034-.103-.035-.096-.034-.1-.036-.101-.037h-.002l-.094-.036-.096-.037-.097-.04h-.002l-.099-.04-.098-.042h-.002l-.092-.04-.097-.043-.095-.043-.097-.044h-.002l-.09-.043-.094-.045-.094-.046-.093-.047-.09-.046-.096-.05-.088-.047-.002-.001-.09-.049-.094-.052-.002-.002-.087-.049-.087-.05h-.002l-.088-.053h-.001l-.09-.055-.086-.052-.002-.001-.089-.055-.084-.054h-.002l-.09-.059h-.001l-.085-.056-.001-.001-.084-.056-.082-.056h-.001l-.086-.06-.082-.058H7.79l-.086-.062-.002-.002-.08-.058-.081-.06h-.001l-.085-.064-.002-.002-.076-.058-.002-.002-.082-.064-.161-.128-.162-.133-.04-.034-.132-.092-.147-.066-.157-.038-.16-.008-.16.022z"}));};function _extends$b(){_extends$b=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$b.apply(this,arguments);}var StartEventNoneIcon=function StartEventNoneIcon(_ref78){var _ref78$styles=_ref78.styles,styles=_ref78$styles===void 0?{}:_ref78$styles,props=_objectWithoutProperties(_ref78,_excluded78);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$b({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.847.004C9.61-.016 3.624 4.014 1.257 9.78-1.235 15.49.06 22.581 4.42 27.034c4.193 4.513 11.101 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.268.403-6.228-3.26-12.441-8.87-15.154A15.924 15.924 0 0015.846.004zm.439 1.729c6.105.033 11.856 4.45 13.435 10.359 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.625-4.814-3.84-6.538-10.94-4.067-16.57 2.14-5.206 7.515-8.775 13.147-8.71.097-.001.194-.002.29-.001z"}));};function _extends$a(){_extends$a=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$a.apply(this,arguments);}var StartEventParallelMultipleIcon=function StartEventParallelMultipleIcon(_ref79){var _ref79$styles=_ref79.styles,styles=_ref79$styles===void 0?{}:_ref79$styles,props=_objectWithoutProperties(_ref79,_excluded79);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$a({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.847 0C9.61-.02 3.624 4.01 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.101 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.268.403-6.228-3.26-12.441-8.87-15.154A15.924 15.924 0 0015.846 0zm.439 1.729c6.105.033 11.856 4.45 13.435 10.359 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.625C2.101 23.17.377 16.07 2.848 10.44c2.134-5.2 7.522-8.78 13.147-8.71.097-.001.194-.002.29-.001zM13.504 9.08v4.427H9.077v4.98h4.427v4.427h4.98v-4.427h4.428v-4.98h-4.427V9.08h-4.98zm.83.83h3.32v4.427h4.428v3.32h-4.427v4.427h-3.32v-4.453H9.906v-3.294h4.427V9.91z"}));};function _extends$9(){_extends$9=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$9.apply(this,arguments);}var StartEventSignalIcon=function StartEventSignalIcon(_ref80){var _ref80$styles=_ref80.styles,styles=_ref80$styles===void 0?{}:_ref80$styles,props=_objectWithoutProperties(_ref80,_excluded80);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$9({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M15.995.005C9.705-.08 3.643 3.968 1.257 9.78-1.235 15.49.06 22.581 4.42 27.034c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0015.994.005zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626-4.814-3.838-6.538-10.939-4.067-16.57 2.14-5.205 7.515-8.774 13.147-8.708zm0 6.776L9.19 20.724H22.8L15.995 8.511zm0 1.777l5.332 9.572H10.662l5.333-9.572z"}));};function _extends$8(){_extends$8=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$8.apply(this,arguments);}var StartEventTimerIcon=function StartEventTimerIcon(_ref81){var _ref81$styles=_ref81.styles,styles=_ref81$styles===void 0?{}:_ref81$styles,props=_objectWithoutProperties(_ref81,_excluded81);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$8({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M16 0C7.174 0 0 7.174 0 16s7.174 16 16 16 16-7.174 16-16S24.826 0 16 0zm0 1.73c7.892 0 14.27 6.378 14.27 14.27 0 7.891-6.379 14.27-14.27 14.27S1.73 23.891 1.73 16C1.73 8.108 8.108 1.73 16 1.73zm-.143 6.676c-2.967.02-5.797 1.97-6.89 4.727-1.138 2.695-.51 6.012 1.537 8.102 1.99 2.142 5.268 2.932 8.014 1.928 2.878-.98 4.992-3.827 5.068-6.87.153-2.957-1.624-5.881-4.3-7.137a7.552 7.552 0 00-3.43-.75zm.27 1.383c2.71.012 5.254 2.015 5.886 4.656.704 2.577-.482 5.517-2.791 6.867-2.358 1.48-5.682 1.085-7.618-.918-2.043-1.971-2.407-5.381-.84-7.745 1.11-1.763 3.15-2.88 5.234-2.86h.13zm1.833 1.765l-2.074 3.763c-.64.068-.793 1.04-.202 1.3.39.27.696-.18 1.052-.165h3.17v-.865h-3.181l1.992-3.615-.757-.418z"}));};function _extends$7(){_extends$7=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$7.apply(this,arguments);}var SubprocessCollapsedIcon=function SubprocessCollapsedIcon(_ref82){var _ref82$styles=_ref82.styles,styles=_ref82$styles===void 0?{}:_ref82$styles,props=_objectWithoutProperties(_ref82,_excluded82);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$7({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M5.637 3A5.644 5.644 0 000 8.637v15.417a5.644 5.644 0 005.637 5.637h20.726A5.644 5.644 0 0032 24.054V8.637A5.644 5.644 0 0026.363 3H5.637zm0 1.778h20.726a3.83 3.83 0 013.859 3.859v15.417a3.83 3.83 0 01-3.859 3.858h-4.201V16.695H9.838v11.217H5.637a3.83 3.83 0 01-3.859-3.858V8.637a3.83 3.83 0 013.859-3.859zm5.33 13.046h10.066v10.065H10.967V17.824zm4.189 1.431V22.06H12.35v1.689h2.804V26.554h1.69V23.749h2.804V22.06h-2.804V19.255h-1.69z"}));};function _extends$6(){_extends$6=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$6.apply(this,arguments);}var SubprocessExpandedIcon=function SubprocessExpandedIcon(_ref83){var _ref83$styles=_ref83.styles,styles=_ref83$styles===void 0?{}:_ref83$styles,props=_objectWithoutProperties(_ref83,_excluded83);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$6({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M5.636 3A5.642 5.642 0 000 8.636v15.418a5.643 5.643 0 005.636 5.636h20.728A5.643 5.643 0 0032 24.054V8.636A5.642 5.642 0 0026.364 3H5.636zm0 1.778h20.728a3.83 3.83 0 013.858 3.858v15.418a3.83 3.83 0 01-3.858 3.858h-4.203V16.723H9.84v11.189H5.636a3.83 3.83 0 01-3.858-3.858V8.636a3.83 3.83 0 013.858-3.858zm5.331 13.074h10.066v10.06H10.967v-10.06zm1.336 3.996v1.711h7.394v-1.71h-7.394z"}));};function _extends$5(){_extends$5=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$5.apply(this,arguments);}var TaskNoneIcon=function TaskNoneIcon(_ref84){var _ref84$styles=_ref84.styles,styles=_ref84$styles===void 0?{}:_ref84$styles,props=_objectWithoutProperties(_ref84,_excluded84);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$5({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M6.494 2.667C2.916 2.667 0 5.57 0 9.142v13.383C0 26.097 2.916 29 6.494 29h19.012C29.084 29 32 26.097 32 22.525V9.142c0-3.572-2.916-6.475-6.494-6.475H6.494zm0 2h19.012c2.509 0 4.494 1.98 4.494 4.475v13.383C30 25.02 28.015 27 25.506 27H6.494C3.985 27 2 25.02 2 22.525V9.142c0-2.495 1.985-4.475 4.494-4.475z"}));};function _extends$4(){_extends$4=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$4.apply(this,arguments);}var TextAnnotationicon=function TextAnnotationicon(_ref85){var _ref85$styles=_ref85.styles,styles=_ref85$styles===void 0?{}:_ref85$styles,props=_objectWithoutProperties(_ref85,_excluded85);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$4({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M22.087 0v31.647H32v-1.788h-8.125V1.788H32V0h-9.913zm-2.924 13.999l-2.737 2.167 2.167 2.738 2.738-2.167-2.168-2.738zm-5.475 4.335L10.95 20.5l2.168 2.738 2.737-2.168-2.167-2.737zm-5.475 4.335l-2.738 2.167 2.168 2.738 2.737-2.168-2.167-2.737zm-5.476 4.335L0 29.17l2.167 2.738 2.738-2.168-2.168-2.737z"}));};function _extends$3(){_extends$3=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$3.apply(this,arguments);}var TransactionIcon=function TransactionIcon(_ref86){var _ref86$styles=_ref86.styles,styles=_ref86$styles===void 0?{}:_ref86$styles,props=_objectWithoutProperties(_ref86,_excluded86);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$3({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{d:"M5.422 3A5.424 5.424 0 000 8.422v15.822a5.424 5.424 0 005.422 5.423h21.156A5.424 5.424 0 0032 24.244V8.422A5.424 5.424 0 0026.578 3H5.422zm0 1.244h21.156a4.155 4.155 0 014.178 4.178v15.822a4.155 4.155 0 01-4.178 4.178H5.422a4.155 4.155 0 01-4.178-4.178V8.422a4.155 4.155 0 014.178-4.178zm1.056 1.778a3.373 3.373 0 00-3.367 3.366v13.89a3.373 3.373 0 003.367 3.366h19.044a3.373 3.373 0 003.367-3.366V9.388a3.373 3.373 0 00-3.367-3.366H6.478zm0 1.245h19.044c1.187 0 2.122.935 2.122 2.121v13.89a2.104 2.104 0 01-2.122 2.122H6.478a2.104 2.104 0 01-2.122-2.122V9.388c0-1.186.935-2.121 2.122-2.121z"}));};function _extends$2(){_extends$2=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$2.apply(this,arguments);}var UserTaskIcon=function UserTaskIcon(_ref87){var _ref87$styles=_ref87.styles,styles=_ref87$styles===void 0?{}:_ref87$styles,props=_objectWithoutProperties(_ref87,_excluded87);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$2({xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32"},props),/*#__PURE__*/_compat["default"].createElement("path",{fillRule:"evenodd",d:"M10.263 7.468c-1.698 0-2.912 1.305-2.915 2.791v.001c0 .45.121.924.311 1.352.138.309.308.593.516.82-1.235.423-2.683 1.119-3.414 2.49l-.04.075v4.44h11.083v-4.44l-.04-.074c-.72-1.352-2.136-2.047-3.36-2.471.597-.608.774-1.392.774-2.192-.004-1.487-1.218-2.792-2.915-2.792zm-1.16 1.583c.08 0 .165.003.26.008.757.045 1.012.181 1.207.31.196.13.334.252.851.268.404-.016.598-.087.737-.169.056-.033.103-.067.152-.1.128.275.197.578.198.893 0 .894-.154 1.52-.975 2.034l.08.604c.171.052.348.11.527.171.025.105.054.242.073.387.02.153.029.311.016.43a.422.422 0 01-.056.19c-.417.417-1.157.66-1.908.66-.75 0-1.49-.243-1.908-.66a.422.422 0 01-.056-.19 1.949 1.949 0 01.016-.43c.02-.146.049-.284.074-.388.177-.062.352-.118.521-.17l.048-.648a.616.616 0 00-.126-.118c-.183-.138-.405-.44-.562-.793-.157-.353-.254-.757-.254-1.08 0-.387.105-.758.297-1.079l.11-.04c.143-.046.339-.09.679-.09zm-1.448 4.304l-.002.014c-.025.185-.04.387-.018.589.021.202.074.42.248.593.595.594 1.494.857 2.382.857.889 0 1.788-.263 2.382-.857.174-.174.227-.391.249-.593a2.496 2.496 0 00-.018-.59l-.002-.01c.903.396 1.776.963 2.258 1.81v3.599H13.53v-2.538h-.67v2.538H7.651v-2.538h-.67v2.538H5.39v-3.599c.483-.849 1.359-1.416 2.264-1.813zM6.495 3C2.914 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494zm0 2h19.01C28.016 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5z"}));};var iconsByType={'Association':AssociationIcon,'BusinessRuleTask':BusinessRuleTaskIcon,'CallActivity':CallActivityIcon,'Collaboration':CollaborationIcon,'ConditionalFlow':ConditionalFlowIcon,'SequenceFlow':ConnectionIcon,'DataInput':DataInputIcon,'DataInputAssociation':DataInputOutputAssociationIcon,'DataOutput':DataOutputIcon,'DataOutputAssociation':DataInputOutputAssociationIcon,'DataObjectReference':DataObjectIcon,'DataStoreReference':DataStoreIcon,'DefaultFlow':DefaultFlowIcon,'CancelEndEvent':EndEventCancelIcon,'CompensateEndEvent':EndEventCompensationIcon,'ErrorEndEvent':EndEventErrorIcon,'EscalationEndEvent':EndEventEscalationIcon,'LinkEndEvent':EndEventLinkIcon,'MessageEndEvent':EndEventMessageIcon,'MultipleEndEvent':EndEventMultipleIcon,'EndEvent':EndEventNoneIcon,'SignalEndEvent':EndEventSignalIcon,'TerminateEndEvent':EndEventTerminateIcon,'EventSubProcess':EventSubProcessExpandedIcon,'ComplexGateway':GatewayComplexIcon,'EventBasedGateway':GatewayEventBasedIcon,'ExclusiveGateway':GatewayXorIcon,'Gateway':GatewayNoneIcon,'InclusiveGateway':GatewayOrIcon,'ParallelGateway':GatewayParallelIcon,'Group':GroupIcon,'CancelIntermediateCatchEvent':IntermediateEventCatchCancelIcon,'CompensateIntermediateCatchEvent':IntermediateEventCatchCompensationIcon,'ConditionalIntermediateCatchEvent':IntermediateEventCatchConditionIcon,'ErrorIntermediateCatchEvent':IntermediateEventCatchErrorIcon,'EscalationIntermediateCatchEvent':IntermediateEventCatchEscalationIcon,'LinkIntermediateCatchEvent':IntermediateEventCatchLinkIcon,'MessageIntermediateCatchEvent':IntermediateEventCatchMessageIcon,'MultipleIntermediateCatchEvent':IntermediateEventCatchMultipleIcon,'ConditionalIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingConditionIcon,'EscalationIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingEscalationIcon,'MessageIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingMessageIcon,'MultipleIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingMultipleIcon,'ParallelIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingParallelIcon,'SignalIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingSignalIcon,'TimerIntermediateCatchEventNonInterrupting':IntermediateEventCatchNonInterruptingTimerIcon,'ParallelMultipleIntermediateCatchEvent':IntermediateEventCatchParallelMultipleIcon,'SignalIntermediateCatchEvent':IntermediateEventCatchSignalIcon,'TimerIntermediateCatchEvent':IntermediateEventCatchTimerIcon,'IntermediateThrowEvent':IntermediateEventNoneIcon,'CompensateIntermediateThrowEvent':IntermediateEventThrowCompensationIcon,'EscalationIntermediateThrowEvent':IntermediateEventThrowEscalationIcon,'LinkIntermediateThrowEvent':IntermediateEventThrowLinkIcon,'MessageIntermediateThrowEvent':IntermediateEventThrowMessageIcon,'MultipleIntermediateThrowEvent':IntermediateEventThrowMultipleIcon,'SignalIntermediateThrowEvent':IntermediateEventThrowSignalIcon,'Lane':LaneIcon,'ManualTask':ManualTaskIcon,'MessageFlow':MessageFlowIcon,'Participant':ParticipantIcon,'Process':ProcessIcon,'ReceiveTask':ReceiveTaskIcon,'ScriptTask':ScriptTaskIcon,'SendTask':SendTaskIcon,'ServiceTask':ServiceTaskIcon,'CompensateStartEvent':StartEventCompensationIcon,'ConditionalStartEvent':StartEventConditionIcon,'ErrorStartEvent':StartEventErrorIcon,'EscalationStartEvent':StartEventEscalationIcon,'MessageStartEvent':StartEventMessageIcon,'MultipleStartEvent':StartEventMultipleIcon,'ConditionalStartEventNonInterrupting':StartEventNonInterruptingConditionIcon,'EscalationStartEventNonInterrupting':StartEventNonInterruptingEscalationIcon,'MessageStartEventNonInterrupting':StartEventNonInterruptingMessageIcon,'MultipleStartEventNonInterrupting':StartEventNonInterruptingMultipleIcon,'ParallelMultipleStartEventNonInterrupting':StartEventNonInterruptingParallelMultipleIcon,'SignalStartEventNonInterrupting':StartEventNonInterruptingSignalIcon,'TimerStartEventNonInterrupting':StartEventNonInterruptingTimerIcon,'CancelBoundaryEvent':IntermediateEventCatchCancelIcon,'CompensateBoundaryEvent':IntermediateEventCatchCompensationIcon,'ConditionalBoundaryEvent':IntermediateEventCatchConditionIcon,'ErrorBoundaryEvent':IntermediateEventCatchErrorIcon,'EscalationBoundaryEvent':IntermediateEventCatchEscalationIcon,'LinkBoundaryEvent':IntermediateEventCatchLinkIcon,'MessageBoundaryEvent':IntermediateEventCatchMessageIcon,'MultipleBoundaryEvent':IntermediateEventCatchMultipleIcon,'BoundaryEvent':IntermediateEventNoneIcon,'ConditionalBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingConditionIcon,'EscalationBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingEscalationIcon,'MessageBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingMessageIcon,'MultipleBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingMultipleIcon,'ParallelBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingParallelIcon,'SignalBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingSignalIcon,'TimerBoundaryEventNonInterrupting':IntermediateEventCatchNonInterruptingTimerIcon,'ParallelMultipleBoundaryEvent':IntermediateEventCatchParallelMultipleIcon,'SignalBoundaryEvent':IntermediateEventCatchSignalIcon,'TimerBoundaryEvent':IntermediateEventCatchTimerIcon,'StartEvent':StartEventNoneIcon,'ParallelMultipleStartEvent':StartEventParallelMultipleIcon,'SignalStartEvent':StartEventSignalIcon,'TimerStartEvent':StartEventTimerIcon,'CollapsedSubProcess':SubprocessCollapsedIcon,'CollapsedAdHocSubProcess':SubprocessCollapsedIcon,'ExpandedSubProcess':SubprocessExpandedIcon,'ExpandedAdHocSubProcess':SubprocessExpandedIcon,'Task':TaskNoneIcon,'TextAnnotation':TextAnnotationicon,'Transaction':TransactionIcon,'UserTask':UserTaskIcon};function getConcreteType(element){var elementType=element.type;var type=getRawType(elementType);// (1) event definition types
var eventDefinition=getEventDefinition$2(element);if(eventDefinition){type="".concat(getEventDefinitionPrefix(eventDefinition)).concat(type);// (1.1) interrupting / non interrupting
if((0,_ModelUtil.is)(element,'bpmn:StartEvent')&&!(0,_DiUtil.isInterrupting)(element)||(0,_ModelUtil.is)(element,'bpmn:BoundaryEvent')&&!isCancelActivity(element)){type="".concat(type,"NonInterrupting");}return type;}// (2) sub process types
if((0,_ModelUtil.is)(element,'bpmn:SubProcess')&&!(0,_ModelUtil.is)(element,'bpmn:Transaction')){if((0,_DiUtil.isEventSubProcess)(element)){type="Event".concat(type);}else{var expanded=(0,_DiUtil.isExpanded)(element)&&!isPlane(element);type="".concat(expanded?'Expanded':'Collapsed').concat(type);}}// (3) conditional + default flows
if(isDefaultFlow(element)){type='DefaultFlow';}if(isConditionalFlow(element)){type='ConditionalFlow';}return type;}var PanelHeaderProvider={getDocumentationRef:function getDocumentationRef(element){var elementTemplates=getTemplatesService();if(elementTemplates){return getTemplateDocumentation(element,elementTemplates);}},getElementLabel:function getElementLabel(element){if((0,_ModelUtil.is)(element,'bpmn:Process')){return(0,_ModelUtil.getBusinessObject)(element).name;}return(0,_LabelUtil.getLabel)(element);},getElementIcon:function getElementIcon(element){var concreteType=getConcreteType(element);var elementTemplates=getTemplatesService();if(elementTemplates){var template=getTemplate(element,elementTemplates);if(template&&template.icon){return function(){return(0,_jsxRuntime.jsx)("img",{"class":"bio-properties-panel-header-template-icon",width:"32",height:"32",src:template.icon.contents});};}}return iconsByType[concreteType];},getTypeLabel:function getTypeLabel(element){var elementTemplates=getTemplatesService();if(elementTemplates){var template=getTemplate(element,elementTemplates);if(template&&template.name){return template.name;}}var concreteType=getConcreteType(element);return concreteType.replace(/(\B[A-Z])/g,' $1').replace(/(\bNon Interrupting)/g,'($1)');}};// helpers ///////////////////////
function isCancelActivity(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return businessObject&&businessObject.cancelActivity!==false;}function getEventDefinition$2(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element),eventDefinitions=businessObject.eventDefinitions;return eventDefinitions&&eventDefinitions[0];}function getRawType(type){return type.split(':')[1];}function getEventDefinitionPrefix(eventDefinition){var rawType=getRawType(eventDefinition.$type);return rawType.replace('EventDefinition','');}function isDefaultFlow(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var sourceBusinessObject=(0,_ModelUtil.getBusinessObject)(element.source);if(!(0,_ModelUtil.is)(element,'bpmn:SequenceFlow')||!sourceBusinessObject){return false;}return sourceBusinessObject["default"]&&sourceBusinessObject["default"]===businessObject&&((0,_ModelUtil.is)(sourceBusinessObject,'bpmn:Gateway')||(0,_ModelUtil.is)(sourceBusinessObject,'bpmn:Activity'));}function isConditionalFlow(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var sourceBusinessObject=(0,_ModelUtil.getBusinessObject)(element.source);if(!(0,_ModelUtil.is)(element,'bpmn:SequenceFlow')||!sourceBusinessObject){return false;}return businessObject.conditionExpression&&(0,_ModelUtil.is)(sourceBusinessObject,'bpmn:Activity');}function isPlane(element){// Backwards compatibility for bpmn-js<8
var di=element&&(element.di||(0,_ModelUtil.getBusinessObject)(element).di);return(0,_ModelUtil.is)(di,'bpmndi:BPMNPlane');}function getTemplatesService(){// eslint-disable-next-line react-hooks/rules-of-hooks
return useService('elementTemplates',false);}function getTemplate(element,elementTemplates){return elementTemplates.get(element);}function getTemplateDocumentation(element,elementTemplates){var template=getTemplate(element,elementTemplates);return template&&template.documentationRef;}function _extends$1(){_extends$1=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1.apply(this,arguments);}var EmptyIcon=function EmptyIcon(_ref88){var _ref88$styles=_ref88.styles,styles=_ref88$styles===void 0?{}:_ref88$styles,props=_objectWithoutProperties(_ref88,_excluded88);return/*#__PURE__*/_compat["default"].createElement("svg",_extends$1({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",width:"64",height:"64"},props),/*#__PURE__*/_compat["default"].createElement("defs",null,/*#__PURE__*/_compat["default"].createElement("rect",{id:"a",width:"57",height:"47",x:"3",y:"8",rx:"7"}),/*#__PURE__*/_compat["default"].createElement("mask",{id:"b",width:"57",height:"47",x:"0",y:"0",fill:"#fff",maskContentUnits:"userSpaceOnUse",maskUnits:"objectBoundingBox"},/*#__PURE__*/_compat["default"].createElement("use",{xlinkHref:"#a"}))),/*#__PURE__*/_compat["default"].createElement("g",{fill:"none",fillRule:"evenodd"},/*#__PURE__*/_compat["default"].createElement("path",{fill:"#818798",d:"M52 11a5 5 0 015 5v31a5 5 0 01-5 5H11a5 5 0 01-5-5V16a5 5 0 015-5h41zm0 2H11a3 3 0 00-2.995 2.824L8 16v31a3 3 0 002.824 2.995L11 50h41a3 3 0 002.995-2.824L55 47V16a3 3 0 00-2.824-2.995L52 13z"}),/*#__PURE__*/_compat["default"].createElement("path",{fill:"#D5D7DD",d:"M16 24h31v6H16zM21 33h21v6H21z"}),/*#__PURE__*/_compat["default"].createElement("use",{stroke:"#B9BCC6",strokeDasharray:"5 2",strokeWidth:"2",mask:"url(#b)",xlinkHref:"#a"})));};function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var MultipleIcon=function MultipleIcon(_ref89){var _ref89$styles=_ref89.styles,styles=_ref89$styles===void 0?{}:_ref89$styles,props=_objectWithoutProperties(_ref89,_excluded89);return/*#__PURE__*/_compat["default"].createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",width:"128",height:"64"},props),/*#__PURE__*/_compat["default"].createElement("defs",null,/*#__PURE__*/_compat["default"].createElement("path",{id:"a",d:"M9 9h110v47H9z"}),/*#__PURE__*/_compat["default"].createElement("mask",{id:"b",width:"110",height:"47",x:"0",y:"0",fill:"#fff",maskContentUnits:"userSpaceOnUse",maskUnits:"objectBoundingBox"},/*#__PURE__*/_compat["default"].createElement("use",{xlinkHref:"#a"}))),/*#__PURE__*/_compat["default"].createElement("g",{fill:"none",fillRule:"evenodd"},/*#__PURE__*/_compat["default"].createElement("path",{fill:"#818798",d:"M25 20.272L37.728 33 25 45.728 12.272 33 25 20.272zm0 2.829L15.1 33l9.9 9.9 9.9-9.9-9.9-9.9z"}),/*#__PURE__*/_compat["default"].createElement("path",{fill:"#D5D7DD",d:"M17 47h16v6H17z"}),/*#__PURE__*/_compat["default"].createElement("path",{fill:"#818798",d:"M35 32h27v2H35z"}),/*#__PURE__*/_compat["default"].createElement("path",{fill:"#818798",d:"M60 30v6l6-3z"}),/*#__PURE__*/_compat["default"].createElement("path",{fill:"#D5D7DD",d:"M80 34h21v6H80z"}),/*#__PURE__*/_compat["default"].createElement("g",null,/*#__PURE__*/_compat["default"].createElement("path",{fill:"#818798",d:"M111 12a5 5 0 015 5v31a5 5 0 01-5 5H70a5 5 0 01-5-5V17a5 5 0 015-5h41zm0 2H70a3 3 0 00-3 3v31a3 3 0 003 3h41a3 3 0 003-3V17a3 3 0 00-3-3z"}),/*#__PURE__*/_compat["default"].createElement("path",{fill:"#D5D7DD",d:"M75 25h31v6H75z"})),/*#__PURE__*/_compat["default"].createElement("use",{stroke:"#B9BCC6",strokeDasharray:"5 2",strokeWidth:"2",mask:"url(#b)",xlinkHref:"#a"})));};var PanelPlaceholderProvider=function PanelPlaceholderProvider(translate){if(!translate)translate=function translate(text){return text;};return{getEmpty:function getEmpty(){return{text:translate('Select an element to edit its properties.'),icon:EmptyIcon};},getMultiple:function getMultiple(){return{text:translate('Multiple elements are selected. Select a single element to edit its properties.'),icon:MultipleIcon};}};};function BpmnPropertiesPanel(props){var element=props.element,injector=props.injector,getProviders=props.getProviders,initialLayoutConfig=props.layoutConfig,descriptionConfig=props.descriptionConfig;var canvas=injector.get('canvas');var elementRegistry=injector.get('elementRegistry');var eventBus=injector.get('eventBus');var translate=injector.get('translate');var _useState=(0,_hooks.useState)({selectedElement:element}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var selectedElement=state.selectedElement;/**
   * @param {djs.model.Base | Array<djs.model.Base>} element
   */var _update=function _update(element){if(!element){return;}var newSelectedElement=element;// handle labels
if(newSelectedElement&&newSelectedElement.type==='label'){newSelectedElement=newSelectedElement.labelTarget;}setState(_objectSpread(_objectSpread({},state),{},{selectedElement:newSelectedElement}));// notify interested parties on property panel updates
eventBus.fire('propertiesPanel.updated',{element:newSelectedElement});};// (2) react on element changes
// (2a) selection changed
(0,_hooks.useEffect)(function(){var onSelectionChanged=function onSelectionChanged(e){var _e$newSelection=e.newSelection,newSelection=_e$newSelection===void 0?[]:_e$newSelection;if(newSelection.length>1){return _update(newSelection);}var newElement=newSelection[0];var rootElement=canvas.getRootElement();if(isImplicitRoot$1(rootElement)){return;}_update(newElement||rootElement);};eventBus.on('selection.changed',onSelectionChanged);return function(){eventBus.off('selection.changed',onSelectionChanged);};},[]);// (2b) selected element changed
(0,_hooks.useEffect)(function(){var onElementsChanged=function onElementsChanged(e){var elements=e.elements;var updatedElement=findElement(elements,selectedElement);if(updatedElement&&elementExists(updatedElement,elementRegistry)){_update(updatedElement);}};eventBus.on('elements.changed',onElementsChanged);return function(){eventBus.off('elements.changed',onElementsChanged);};},[selectedElement]);// (2c) root element changed
(0,_hooks.useEffect)(function(){var onRootAdded=function onRootAdded(e){var element=e.element;_update(element);};eventBus.on('root.added',onRootAdded);return function(){eventBus.off('root.added',onRootAdded);};},[selectedElement]);// (2d) provided entries changed
(0,_hooks.useEffect)(function(){var onProvidersChanged=function onProvidersChanged(){_update(selectedElement);};eventBus.on('propertiesPanel.providersChanged',onProvidersChanged);return function(){eventBus.off('propertiesPanel.providersChanged',onProvidersChanged);};},[selectedElement]);// (2e) element templates changed
(0,_hooks.useEffect)(function(){var onTemplatesChanged=function onTemplatesChanged(){_update(selectedElement);};eventBus.on('elementTemplates.changed',onTemplatesChanged);return function(){eventBus.off('elementTemplates.changed',onTemplatesChanged);};},[selectedElement]);// (3) create properties panel context
var bpmnPropertiesPanelContext={selectedElement:selectedElement,injector:injector,getService:function getService(type,strict){return injector.get(type,strict);}};// (4) retrieve groups for selected element
var providers=getProviders(selectedElement);var groups=(0,_hooks.useMemo)(function(){return(0,_minDash.reduce)(providers,function(groups,provider){// do not collect groups for multi element state
if((0,_minDash.isArray)(selectedElement)){return[];}var updater=provider.getGroups(selectedElement);return updater(groups);},[]);},[providers,selectedElement]);// (5) notify layout changes
var _useState3=(0,_hooks.useState)(initialLayoutConfig||{}),_useState4=_slicedToArray(_useState3,2),layoutConfig=_useState4[0],setLayoutConfig=_useState4[1];var onLayoutChanged=(0,_hooks.useCallback)(function(newLayout){eventBus.fire('propertiesPanel.layoutChanged',{layout:newLayout});},[eventBus]);// React to external layout changes
(0,_hooks.useEffect)(function(){var cb=function cb(e){var layout=e.layout;setLayoutConfig(layout);};eventBus.on('propertiesPanel.setLayout',cb);return function(){return eventBus.off('propertiesPanel.setLayout',cb);};},[eventBus,setLayoutConfig]);// (6) notify description changes
var onDescriptionLoaded=function onDescriptionLoaded(description){eventBus.fire('propertiesPanel.descriptionLoaded',{description:description});};return(0,_jsxRuntime.jsx)(BpmnPropertiesPanelContext.Provider,{value:bpmnPropertiesPanelContext,children:(0,_jsxRuntime.jsx)(_propertiesPanel.PropertiesPanel,{element:selectedElement,headerProvider:PanelHeaderProvider,placeholderProvider:PanelPlaceholderProvider(translate),groups:groups,layoutConfig:layoutConfig,layoutChanged:onLayoutChanged,descriptionConfig:descriptionConfig,descriptionLoaded:onDescriptionLoaded,eventBus:eventBus})});}// helpers //////////////////////////
function isImplicitRoot$1(element){// Backwards compatibility for diagram-js<7.4.0, see https://github.com/bpmn-io/bpmn-properties-panel/pull/102
return element&&(element.isImplicit||element.id==='__implicitroot');}function findElement(elements,element){return(0,_minDash.find)(elements,function(e){return e===element;});}function elementExists(element,elementRegistry){return element&&elementRegistry.get(element.id);}var DEFAULT_PRIORITY=1000;/**
 * @typedef { import('@bpmn-io/properties-panel').GroupDefinition } GroupDefinition
 * @typedef { import('@bpmn-io/properties-panel').ListGroupDefinition } ListGroupDefinition
 * @typedef { { getGroups: (ModdleElement) => (Array{GroupDefinition|ListGroupDefinition}) => Array{GroupDefinition|ListGroupDefinition}) } PropertiesProvider
 */var BpmnPropertiesPanelRenderer=/*#__PURE__*/function(){function BpmnPropertiesPanelRenderer(config,injector,eventBus){var _this=this;_classCallCheck(this,BpmnPropertiesPanelRenderer);var _ref90=config||{},parent=_ref90.parent,layoutConfig=_ref90.layout,descriptionConfig=_ref90.description;this._eventBus=eventBus;this._injector=injector;this._layoutConfig=layoutConfig;this._descriptionConfig=descriptionConfig;this._container=(0,_minDom.domify)('<div style="height: 100%" class="bio-properties-panel-container"></div>');var commandStack=injector.get('commandStack',false);commandStack&&setupKeyboard(this._container,eventBus,commandStack);eventBus.on('diagram.init',function(){if(parent){_this.attachTo(parent);}});eventBus.on('diagram.destroy',function(){_this.detach();});eventBus.on('root.added',function(event){var element=event.element;_this._render(element);});}/**
   * Attach the properties panel to a parent node.
   *
   * @param {HTMLElement} container
   */_createClass(BpmnPropertiesPanelRenderer,[{key:"attachTo",value:function attachTo(container){if(!container){throw new Error('container required');}// unwrap jQuery if provided
if(container.get&&container.constructor.prototype.jquery){container=container.get(0);}if(typeof container==='string'){container=(0,_minDom.query)(container);}// (1) detach from old parent
this.detach();// (2) append to parent container
container.appendChild(this._container);// (3) notify interested parties
this._eventBus.fire('propertiesPanel.attach');}/**
   * Detach the properties panel from its parent node.
   */},{key:"detach",value:function detach(){var parentNode=this._container.parentNode;if(parentNode){parentNode.removeChild(this._container);this._eventBus.fire('propertiesPanel.detach');}}/**
   * Register a new properties provider to the properties panel.
   *
   * @param {Number} [priority]
   * @param {PropertiesProvider} provider
   */},{key:"registerProvider",value:function registerProvider(priority,provider){if(!provider){provider=priority;priority=DEFAULT_PRIORITY;}if(typeof provider.getGroups!=='function'){console.error('Properties provider does not implement #getGroups(element) API');return;}this._eventBus.on('propertiesPanel.getProviders',priority,function(event){event.providers.push(provider);});this._eventBus.fire('propertiesPanel.providersChanged');}/**
   * Updates the layout of the properties panel.
   * @param {Object} layout
   */},{key:"setLayout",value:function setLayout(layout){this._eventBus.fire('propertiesPanel.setLayout',{layout:layout});}},{key:"_getProviders",value:function _getProviders(){var event=this._eventBus.createEvent({type:'propertiesPanel.getProviders',providers:[]});this._eventBus.fire(event);return event.providers;}},{key:"_render",value:function _render(element){var canvas=this._injector.get('canvas');if(!element){element=canvas.getRootElement();}if(isImplicitRoot(element)){return;}(0,_preact.render)((0,_jsxRuntime.jsx)(BpmnPropertiesPanel,{element:element,injector:this._injector,getProviders:this._getProviders.bind(this),layoutConfig:this._layoutConfig,descriptionConfig:this._descriptionConfig}),this._container);this._eventBus.fire('propertiesPanel.rendered');}},{key:"_destroy",value:function _destroy(){if(this._container){(0,_preact.render)(null,this._container);this._eventBus.fire('propertiesPanel.destroyed');}}}]);return BpmnPropertiesPanelRenderer;}();BpmnPropertiesPanelRenderer.$inject=['config.propertiesPanel','injector','eventBus'];// helpers ///////////////////////
function isImplicitRoot(element){// Backwards compatibility for diagram-js<7.4.0, see https://github.com/bpmn-io/bpmn-properties-panel/pull/102
return element&&(element.isImplicit||element.id==='__implicitroot');}/**
 * Setup keyboard bindings (undo, redo) on the given container.
 *
 * @param {Element} container
 * @param {EventBus} eventBus
 * @param {CommandStack} commandStack
 */function setupKeyboard(container,eventBus,commandStack){function cancel(event){event.preventDefault();event.stopPropagation();}function handleKeys(event){if((0,_KeyboardUtil.isUndo)(event)){commandStack.undo();return cancel(event);}if((0,_KeyboardUtil.isRedo)(event)){commandStack.redo();return cancel(event);}}eventBus.on('keyboard.bind',function(){_minDom.event.bind(container,'keydown',handleKeys);});eventBus.on('keyboard.unbind',function(){_minDom.event.unbind(container,'keydown',handleKeys);});}/**
 * A handler that combines and executes multiple commands.
 *
 * All updates are bundled on the command stack and executed in one step.
 * This also makes it possible to revert the changes in one step.
 *
 * Example use case: remove the camunda:formKey attribute and in addition
 * add all form fields needed for the camunda:formData property.
 */var MultiCommandHandler=/*#__PURE__*/function(){function MultiCommandHandler(commandStack){_classCallCheck(this,MultiCommandHandler);this._commandStack=commandStack;}_createClass(MultiCommandHandler,[{key:"preExecute",value:function preExecute(context){var commandStack=this._commandStack;(0,_minDash.forEach)(context,function(command){commandStack.execute(command.cmd,command.context);});}}]);return MultiCommandHandler;}();MultiCommandHandler.$inject=['commandStack'];var HANDLERS={'properties-panel.multi-command-executor':MultiCommandHandler};function CommandInitializer(eventBus,commandStack){eventBus.on('diagram.init',function(){(0,_minDash.forEach)(HANDLERS,function(handler,id){commandStack.registerHandler(id,handler);});});}CommandInitializer.$inject=['eventBus','commandStack'];var Commands={__init__:[CommandInitializer]};var index$3={__depends__:[Commands,_propertiesPanel.DebounceInputModule],__init__:['propertiesPanel'],propertiesPanel:['type',BpmnPropertiesPanelRenderer]};exports.BpmnPropertiesPanelModule=index$3;function ReferenceSelectEntry(props){var autoFocusEntry=props.autoFocusEntry,element=props.element,getOptions=props.getOptions;var options=getOptions(element);var prevOptions=(0,_propertiesPanel.usePrevious)(options);// auto focus specifc other entry when options changed
(0,_hooks.useEffect)(function(){if(autoFocusEntry&&prevOptions&&options.length>prevOptions.length){var entry=(0,_minDom.query)("[data-entry-id=\"".concat(autoFocusEntry,"\"]"));var focusableInput=(0,_minDom.query)('.bio-properties-panel-input',entry);if(focusableInput){focusableInput.select();}}},[options]);return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,_objectSpread({},props));}function isErrorSupported(element){return(0,_ModelingUtil.isAny)(element,['bpmn:StartEvent','bpmn:BoundaryEvent','bpmn:EndEvent'])&&!!getErrorEventDefinition(element);}function getErrorEventDefinition(element){return getEventDefinition$1(element,'bpmn:ErrorEventDefinition');}function getTimerEventDefinition$1(element){return getEventDefinition$1(element,'bpmn:TimerEventDefinition');}function getError(element){var errorEventDefinition=getErrorEventDefinition(element);return errorEventDefinition&&errorEventDefinition.get('errorRef');}function getEventDefinition$1(element,eventType){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var eventDefinitions=businessObject.get('eventDefinitions')||[];return(0,_minDash.find)(eventDefinitions,function(definition){return(0,_ModelUtil.is)(definition,eventType);});}function isMessageSupported$1(element){return(0,_ModelUtil.is)(element,'bpmn:ReceiveTask')||(0,_ModelingUtil.isAny)(element,['bpmn:StartEvent','bpmn:EndEvent','bpmn:IntermediateThrowEvent','bpmn:BoundaryEvent','bpmn:IntermediateCatchEvent'])&&!!getMessageEventDefinition$1(element);}function getMessageEventDefinition$1(element){if((0,_ModelUtil.is)(element,'bpmn:ReceiveTask')){return(0,_ModelUtil.getBusinessObject)(element);}return getEventDefinition$1(element,'bpmn:MessageEventDefinition');}function getMessage$1(element){var messageEventDefinition=getMessageEventDefinition$1(element);return messageEventDefinition&&messageEventDefinition.get('messageRef');}function getLinkEventDefinition(element){return getEventDefinition$1(element,'bpmn:LinkEventDefinition');}function getSignalEventDefinition$1(element){return getEventDefinition$1(element,'bpmn:SignalEventDefinition');}function isLinkSupported(element){return(0,_ModelingUtil.isAny)(element,['bpmn:IntermediateThrowEvent','bpmn:IntermediateCatchEvent'])&&!!getLinkEventDefinition(element);}function isSignalSupported$1(element){return(0,_ModelUtil.is)(element,'bpmn:Event')&&!!getSignalEventDefinition$1(element);}function getSignal$1(element){var signalEventDefinition=getSignalEventDefinition$1(element);return signalEventDefinition&&signalEventDefinition.get('signalRef');}function getEscalationEventDefinition(element){return getEventDefinition$1(element,'bpmn:EscalationEventDefinition');}function isEscalationSupported(element){return(0,_ModelUtil.is)(element,'bpmn:Event')&&!!getEscalationEventDefinition(element);}function getEscalation(element){var escalationEventDefinition=getEscalationEventDefinition(element);return escalationEventDefinition&&escalationEventDefinition.get('escalationRef');}function isCompensationSupported(element){return(0,_ModelingUtil.isAny)(element,['bpmn:EndEvent','bpmn:IntermediateThrowEvent'])&&!!getCompensateEventDefinition(element);}function getCompensateEventDefinition(element){return getEventDefinition$1(element,'bpmn:CompensateEventDefinition');}function getCompensateActivity(element){var compensateEventDefinition=getCompensateEventDefinition(element);return compensateEventDefinition&&compensateEventDefinition.get('activityRef');}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function CompensationProps(props){var element=props.element;if(!isCompensationSupported(element)){return[];}return[{id:'waitForCompletion',component:WaitForCompletion,isEdited:_propertiesPanel.isCheckboxEntryEdited},{id:'activityRef',component:ActivityRef,isEdited:_propertiesPanel.isSelectEntryEdited}];}function WaitForCompletion(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var compensateEventDefinition=getCompensateEventDefinition(element);var getValue=function getValue(){return compensateEventDefinition.get('waitForCompletion');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:compensateEventDefinition,properties:{waitForCompletion:value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'waitForCompletion',label:translate('Wait for completion'),getValue:getValue,setValue:setValue});}function ActivityRef(props){var element=props.element;var commandStack=useService('commandStack');var elementRegistry=useService('elementRegistry');var translate=useService('translate');var compensateEventDefinition=getCompensateEventDefinition(element);var getValue=function getValue(){var activityRef=getCompensateActivity(element);return activityRef&&activityRef.get('id');};var setValue=function setValue(value){// update (or remove) activityRef
var activityRef=value?(0,_ModelUtil.getBusinessObject)(elementRegistry.get(value)):undefined;commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:compensateEventDefinition,properties:{activityRef:activityRef}});};var getOptions=function getOptions(){var options=[{value:'',label:translate('<none>')}];var activities=findActivityRefs(element);sortByName$7(activities).forEach(function(activity){options.push({value:activity.id,label:createOptionLabel(activity)});});return options;};return ReferenceSelectEntry({element:element,id:'activityRef',label:translate('Activity reference'),getValue:getValue,setValue:setValue,getOptions:getOptions});}// helper /////////////////////////
function getFlowElements(element,type){var flowElements=element.flowElements;return flowElements.filter(function(flowElement){return(0,_ModelUtil.is)(flowElement,type);});}function getContainedActivities(element){return getFlowElements(element,'bpmn:Activity');}function getContainedBoundaryEvents(element){return getFlowElements(element,'bpmn:BoundaryEvent');}/**
 * Checks whether an Activity is attaching a CompensateEvent of the parent container.
 *
 * @param {ModdleElement} activity
 * @param {Array<ModdleElement>} boundaryEvents
 * @returns {Boolean}
 */function hasCompensationEventAttached(activity,boundaryEvents){var activityId=activity.id;return!!(0,_minDash.find)(boundaryEvents,function(boundaryEvent){var attachedToRef=boundaryEvent.attachedToRef;var compensateEventDefinition=getCompensateEventDefinition(boundaryEvent);return attachedToRef&&compensateEventDefinition&&attachedToRef.id===activityId;});}/**
 * Checks whether an Activity can be compensated. That's the case when it is
 * a) a CallActivity
 * b) a SubProcess, when it is not event based and not a compensation
 * c) any other Activity, when it is attaching a CompensateEvent of the parent container
 *
 * @param {ModdleElement} activity
 * @param {Array<ModdleElement>} boundaryEvents
 * @returns {Boolean}
 */function canBeCompensated(activity,boundaryEvents){return(0,_ModelUtil.is)(activity,'bpmn:CallActivity')||(0,_ModelUtil.is)(activity,'bpmn:SubProcess')&&!activity.triggeredByEvent&&!activity.isForCompensation||hasCompensationEventAttached(activity,boundaryEvents);}function getActivitiesForCompensation(element){var activities=getContainedActivities(element);var boundaryEvents=getContainedBoundaryEvents(element);return activities.filter(function(activity){return canBeCompensated(activity,boundaryEvents);});}/**
 * Retrieves all possible activities to reference for a Compensation.
 *
 * @param {djs.model.Base} element
 * @returns {Array<ModdleElement>}
 */function findActivityRefs(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var parent=businessObject.$parent;// (1) get all activities in parent container
var activities=getActivitiesForCompensation(parent);// (2) if throwing compensation event is inside an EventSubProcess,
// also get all activities outside of the event sub process
if((0,_ModelUtil.is)(parent,'bpmn:SubProcess')&&parent.triggeredByEvent){parent=parent.$parent;if(parent){activities=[].concat(_toConsumableArray(activities),_toConsumableArray(getActivitiesForCompensation(parent)));}}return activities;}/**
 * Retrieves an option label in the form
 * a) with name: "my Task (id=Task_1)"
 * b) without name: "(id=Task_1)"
 *
 * @param {ModdleElement} activity
 * @returns {String}
 */function createOptionLabel(activity){var id=activity.id,name=activity.name;return"".concat(name?name+' ':'',"(id=").concat(id,")");}function sortByName$7(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}var DOCUMENTATION_TEXT_FORMAT='text/plain';/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function DocumentationProps(props){var element=props.element;var entries=[{id:'documentation',component:ElementDocumentationProperty,isEdited:_propertiesPanel.isTextAreaEntryEdited}];if(hasProcessRef$2(element)){entries.push({id:'processDocumentation',component:ProcessDocumentationProperty,isEdited:_propertiesPanel.isTextAreaEntryEdited});}return entries;}function ElementDocumentationProperty(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=getDocumentation((0,_ModelUtil.getBusinessObject)(element));var setValue=setDocumentation(element,(0,_ModelUtil.getBusinessObject)(element),bpmnFactory,commandStack);return(0,_propertiesPanel.TextAreaEntry)({element:element,id:'documentation',label:translate('Element documentation'),getValue:getValue,setValue:setValue,debounce:debounce});}function ProcessDocumentationProperty(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var processRef=(0,_ModelUtil.getBusinessObject)(element).processRef;var getValue=getDocumentation(processRef);var setValue=setDocumentation(element,processRef,bpmnFactory,commandStack);return(0,_propertiesPanel.TextAreaEntry)({element:element,id:'processDocumentation',label:translate('Process documentation'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ////////////////////////////
function hasProcessRef$2(element){return(0,_ModelUtil.is)(element,'bpmn:Participant')&&element.businessObject.get('processRef');}function findDocumentation(docs){return docs.find(function(d){return(d.textFormat||DOCUMENTATION_TEXT_FORMAT)===DOCUMENTATION_TEXT_FORMAT;});}/**
 * Retrieves a documentation element from a given moddle element.
 *
 * @param {ModdleElement} businessObject
 *
 * @returns {ModdleElement} documentation element inside the given moddle element.
 */function getDocumentation(businessObject){return function(){var documentation=findDocumentation(businessObject&&businessObject.get('documentation'));return documentation&&documentation.text;};}/**
 * Sets a documentation element for a given moddle element.
 *
 * @param {ModdleElement} businessObject
 */function setDocumentation(element,businessObject,bpmnFactory,commandStack){return function(value){var documentation=findDocumentation(businessObject&&businessObject.get('documentation'));// (1) update or removing existing documentation
if(documentation){if(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:documentation,properties:{text:value}});}else{return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{documentation:(0,_minDash.without)(businessObject.get('documentation'),documentation)}});}}// (2) create new documentation entry
if(value){documentation=bpmnFactory.create('bpmn:Documentation',{text:value});return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{documentation:[].concat(_toConsumableArray(businessObject.get('documentation')),[documentation])}});}};}/**
 * Create a new element and set its parent.
 *
 * @param {String} elementType of the new element
 * @param {Object} properties of the new element in key-value pairs
 * @param {moddle.object} parent of the new element
 * @param {BpmnFactory} factory which creates the new element
 *
 * @returns {djs.model.Base} element which is created
 */function createElement(elementType,properties,parent,factory){var element=factory.create(elementType,properties);if(parent){element.$parent=parent;}return element;}/**
 * generate a semantic id with given prefix
 */function nextId(prefix){var ids=new _ids["default"]([32,32,1]);return ids.nextPrefixed(prefix);}function getRoot(businessObject){var parent=businessObject;while(parent.$parent){parent=parent.$parent;}return parent;}function filterElementsByType(objectList,type){var list=objectList||[];return list.filter(function(element){return(0,_ModelUtil.is)(element,type);});}function findRootElementsByType(businessObject,referencedType){var root=getRoot(businessObject);return filterElementsByType(root.get('rootElements'),referencedType);}function findRootElementById(businessObject,type,id){var elements=findRootElementsByType(businessObject,type);return elements.find(function(element){return element.id===id;});}var EMPTY_OPTION$5='';var CREATE_NEW_OPTION$5='create-new';/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function ErrorProps$2(props){var element=props.element;if(!isErrorSupported(element)){return[];}var error=getError(element);var entries=[{id:'errorRef',component:ErrorRef$1,isEdited:_propertiesPanel.isSelectEntryEdited}];if(error){entries=[].concat(_toConsumableArray(entries),[{id:'errorName',component:ErrorName$1,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'errorCode',component:ErrorCode$2,isEdited:_propertiesPanel.isTextFieldEntryEdited}]);}return entries;}function ErrorRef$1(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var errorEventDefinition=getErrorEventDefinition(element);var getValue=function getValue(){var error=getError(element);if(error){return error.get('id');}return EMPTY_OPTION$5;};var setValue=function setValue(value){var root=getRoot(errorEventDefinition);var commands=[];var error;// (1) create new error
if(value===CREATE_NEW_OPTION$5){error=createElement('bpmn:Error',{name:nextId('Error_')},root,bpmnFactory);value=error.get('id');commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:root,properties:{rootElements:[].concat(_toConsumableArray(root.get('rootElements')),[error])}}});}// (2) update (or remove) errorRef
error=error||findRootElementById(errorEventDefinition,'bpmn:Error',value);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:errorEventDefinition,properties:{errorRef:error}}});// (3) commit all updates
return commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){var options=[{value:EMPTY_OPTION$5,label:translate('<none>')},{value:CREATE_NEW_OPTION$5,label:translate('Create new ...')}];var errors=findRootElementsByType((0,_ModelUtil.getBusinessObject)(element),'bpmn:Error');sortByName$6(errors).forEach(function(error){options.push({value:error.get('id'),label:error.get('name')});});return options;};return ReferenceSelectEntry({element:element,id:'errorRef',label:translate('Global error reference'),autoFocusEntry:'errorName',getValue:getValue,setValue:setValue,getOptions:getOptions});}function ErrorName$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var error=getError(element);var getValue=function getValue(){return error.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'errorName',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}function ErrorCode$2(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var error=getError(element);var getValue=function getValue(){return error.get('errorCode');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{errorCode:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'errorCode',label:translate('Code'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper /////////////////////////
function sortByName$6(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}var CREATE_NEW_OPTION$4='create-new';/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function EscalationProps$2(props){var element=props.element;if(!isEscalationSupported(element)){return[];}var escalation=getEscalation(element);var entries=[{id:'escalationRef',component:EscalationRef,isEdited:_propertiesPanel.isSelectEntryEdited}];if(escalation){entries=[].concat(_toConsumableArray(entries),[{id:'escalationName',component:EscalationName,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'escalationCode',component:EscalationCode$1,isEdited:_propertiesPanel.isTextFieldEntryEdited}]);}return entries;}function EscalationRef(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var escalationEventDefinition=getEscalationEventDefinition(element);var getValue=function getValue(){var escalation=getEscalation(element);return escalation&&escalation.get('id');};var setValue=function setValue(value){var root=getRoot(escalationEventDefinition);var commands=[];var escalation;// (1) create new escalation
if(value===CREATE_NEW_OPTION$4){var id=nextId('Escalation_');escalation=createElement('bpmn:Escalation',{id:id,name:id},root,bpmnFactory);value=escalation.get('id');commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:root,properties:{rootElements:[].concat(_toConsumableArray(root.get('rootElements')),[escalation])}}});}// (2) update (or remove) escalationRef
escalation=escalation||findRootElementById(escalationEventDefinition,'bpmn:Escalation',value);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:escalationEventDefinition,properties:{escalationRef:escalation}}});// (3) commit all updates
return commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){var options=[{value:'',label:translate('<none>')},{value:CREATE_NEW_OPTION$4,label:translate('Create new ...')}];var escalations=findRootElementsByType((0,_ModelUtil.getBusinessObject)(element),'bpmn:Escalation');sortByName$5(escalations).forEach(function(escalation){options.push({value:escalation.get('id'),label:escalation.get('name')});});return options;};return ReferenceSelectEntry({element:element,id:'escalationRef',label:translate('Global escalation reference'),autoFocusEntry:'escalationName',getValue:getValue,setValue:setValue,getOptions:getOptions});}function EscalationName(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var escalation=getEscalation(element);var getValue=function getValue(){return escalation.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:escalation,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'escalationName',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}function EscalationCode$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var escalation=getEscalation(element);var getValue=function getValue(){return escalation.get('escalationCode');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:escalation,properties:{escalationCode:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'escalationCode',label:translate('Code'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper /////////////////////////
function sortByName$5(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function ExecutableProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:Process')&&!hasProcessRef$1(element)){return[];}return[{id:'isExecutable',component:Executable,isEdited:_propertiesPanel.isCheckboxEntryEdited}];}function Executable(props){var element=props.element;var modeling=useService('modeling');var commandStack=useService('commandStack');var translate=useService('translate');var getValue,setValue;setValue=function setValue(value){modeling.updateProperties(element,{isExecutable:value});};getValue=function getValue(element){return element.businessObject.isExecutable;};// handle properties on processRef level for participants
if((0,_ModelUtil.is)(element,'bpmn:Participant')){var process=element.businessObject.get('processRef');setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{isExecutable:value}});};getValue=function getValue(){return process.get('isExecutable');};}return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'isExecutable',label:translate('Executable'),getValue:getValue,setValue:setValue});}// helper /////////////////////
function hasProcessRef$1(element){return(0,_ModelUtil.is)(element,'bpmn:Participant')&&element.businessObject.get('processRef');}var SPACE_REGEX=/\s/;// for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
var QNAME_REGEX=/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i;// for ID validation as per BPMN Schema (QName - Namespace)
var ID_REGEX=/^[a-z_][\w-.]*$/i;/**
 * checks whether the id value is valid
 *
 * @param {ModdleElement} element
 * @param {String} idValue
 * @param {Function} translate
 *
 * @return {String} error message
 */function isIdValid(element,idValue,translate){var assigned=element.$model.ids.assigned(idValue);var idAlreadyExists=assigned&&assigned!==element;if(!idValue){return translate('ID must not be empty.');}if(idAlreadyExists){return translate('ID must be unique.');}return validateId(idValue,translate);}function validateId(idValue,translate){if(containsSpace(idValue)){return translate('ID must not contain spaces.');}if(!ID_REGEX.test(idValue)){if(QNAME_REGEX.test(idValue)){return translate('ID must not contain prefix.');}return translate('ID must be a valid QName.');}}function containsSpace(value){return SPACE_REGEX.test(value);}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function IdProps(){return[{id:'id',component:Id$3,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function Id$3(props){var element=props.element;var modeling=useService('modeling');var debounce=useService('debounceInput');var translate=useService('translate');var setValue=function setValue(value){modeling.updateProperties(element,{id:value});};var getValue=function getValue(element){return element.businessObject.id;};var validate=function validate(value){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return isIdValid(businessObject,value,translate);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'id',label:translate((0,_ModelUtil.is)(element,'bpmn:Participant')?'Participant ID':'ID'),getValue:getValue,setValue:setValue,debounce:debounce,validate:validate});}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function LinkProps(props){var element=props.element;if(!isLinkSupported(element)){return[];}return[{id:'linkName',component:LinkName,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function LinkName(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var linkEventDefinition=getLinkEventDefinition(element);var getValue=function getValue(){return linkEventDefinition.get('name');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:linkEventDefinition,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'linkName',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}var EMPTY_OPTION$4='';var CREATE_NEW_OPTION$3='create-new';/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function MessageProps$2(props){var element=props.element;if(!isMessageSupported$1(element)){return[];}var message=getMessage$1(element);var entries=[{id:'messageRef',component:MessageRef$1,isEdited:_propertiesPanel.isSelectEntryEdited}];if(message){entries=[].concat(_toConsumableArray(entries),[{id:'messageName',component:MessageName$1,isEdited:_propertiesPanel.isTextFieldEntryEdited}]);}return entries;}function MessageRef$1(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var messageEventDefinition=getMessageEventDefinition$1(element);var getValue=function getValue(){var message=getMessage$1(element);if(message){return message.get('id');}return EMPTY_OPTION$4;};var setValue=function setValue(value){var root=getRoot(messageEventDefinition);var commands=[];var message;// (1) create new message
if(value===CREATE_NEW_OPTION$3){var id=nextId('Message_');message=createElement('bpmn:Message',{id:id,name:id},root,bpmnFactory);value=message.get('id');commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:root,properties:{rootElements:[].concat(_toConsumableArray(root.get('rootElements')),[message])}}});}// (2) update (or remove) messageRef
message=message||findRootElementById(messageEventDefinition,'bpmn:Message',value);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:messageEventDefinition,properties:{messageRef:message}}});// (3) commit all updates
return commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){var options=[{value:EMPTY_OPTION$4,label:translate('<none>')},{value:CREATE_NEW_OPTION$3,label:translate('Create new ...')}];var messages=findRootElementsByType((0,_ModelUtil.getBusinessObject)(element),'bpmn:Message');sortByName$4(messages).forEach(function(message){options.push({value:message.get('id'),label:message.get('name')});});return options;};return ReferenceSelectEntry({element:element,id:'messageRef',label:translate('Global message reference'),autoFocusEntry:'messageName',getValue:getValue,setValue:setValue,getOptions:getOptions});}function MessageName$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var message=getMessage$1(element);var getValue=function getValue(){return message.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:message,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'messageName',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper /////////////////////////
function sortByName$4(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function MultiInstanceProps$2(props){var element=props.element;if(!isMultiInstanceSupported$1(element)){return[];}var entries=[{id:'loopCardinality',component:LoopCardinality,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'completionCondition',component:CompletionCondition$1,isEdited:_propertiesPanel.isTextFieldEntryEdited}];return entries;}function LoopCardinality(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var debounce=useService('debounceInput');var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getLoopCardinalityValue(element);};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',updateFormalExpression(element,'loopCardinality',value,bpmnFactory));};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'loopCardinality',label:translate('Loop cardinality'),getValue:getValue,setValue:setValue,debounce:debounce});}function CompletionCondition$1(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var debounce=useService('debounceInput');var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getCompletionConditionValue(element);};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',updateFormalExpression(element,'completionCondition',value,bpmnFactory));};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'completionCondition',label:translate('Completion condition'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ////////////////////////////
// generic ///////////////////////////
/**
 * isMultiInstanceSupported - check whether given element supports MultiInstanceLoopCharacteristics.
 *
 * @param {djs.model.Base} element
 * @return {boolean}
 */function isMultiInstanceSupported$1(element){var loopCharacteristics=getLoopCharacteristics$2(element);return!!loopCharacteristics&&(0,_ModelUtil.is)(loopCharacteristics,'bpmn:MultiInstanceLoopCharacteristics');}/**
 * getBody - get the body of a given expression.
 *
 * @param {ModdleElement<bpmn:FormalExpression>} expression
 * @return {string} the body (value) of the expression
 */function getBody(expression){return expression&&expression.get('body');}/**
 * getProperty - get a property value of the loop characteristics.
 *
 * @param {djs.model.Base} element
 * @param {string} propertyName
 *
 * @return {any} the property value
 */function getProperty$2(element,propertyName){var loopCharacteristics=getLoopCharacteristics$2(element);return loopCharacteristics&&loopCharacteristics.get(propertyName);}/**
 * getLoopCharacteristics - get loopCharacteristics of a given element.
 *
 * @param {djs.model.Base} element
 * @return {ModdleElement<bpmn:MultiInstanceLoopCharacteristics> | undefined}
 */function getLoopCharacteristics$2(element){var bo=(0,_ModelUtil.getBusinessObject)(element);return bo.loopCharacteristics;}/**
 * createFormalExpression - creates a 'bpmn:FormalExpression' element.
 *
 * @param {ModdleElement} parent
 * @param {string} body
 * @param {BpmnFactory} bpmnFactory
 *
 * @result {ModdleElement<bpmn:FormalExpression>} a formal expression
 */function createFormalExpression$1(parent,body,bpmnFactory){return createElement('bpmn:FormalExpression',{body:body},parent,bpmnFactory);}/**
 * updateFormalExpression - updates a specific formal expression of the loop characteristics.
 *
 * @param {djs.model.Base} element
 * @param {string} propertyName
 * @param {string} newValue
 * @param {BpmnFactory} bpmnFactory
 */function updateFormalExpression(element,propertyName,newValue,bpmnFactory){var loopCharacteristics=getLoopCharacteristics$2(element);var expressionProps={};if(!newValue){// remove formal expression
expressionProps[propertyName]=undefined;return{element:element,moddleElement:loopCharacteristics,properties:expressionProps};}var existingExpression=loopCharacteristics.get(propertyName);if(!existingExpression){// add formal expression
expressionProps[propertyName]=createFormalExpression$1(loopCharacteristics,newValue,bpmnFactory);return{element:element,moddleElement:loopCharacteristics,properties:expressionProps};}// edit existing formal expression
return{element:element,moddleElement:existingExpression,properties:{body:newValue}};}// loopCardinality
/**
 * getLoopCardinality - get the loop cardinality of the loop characteristics.
 *
 * @param {djs.model.Base} element
 *
 * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the loop cardinality
 */function getLoopCardinality(element){return getProperty$2(element,'loopCardinality');}/**
 * getLoopCardinalityValue - get the loop cardinality value of the loop characteristics.
 *
 * @param {djs.model.Base} element
 *
 * @return {string} the loop cardinality value
 */function getLoopCardinalityValue(element){var loopCardinality=getLoopCardinality(element);return getBody(loopCardinality);}// completionCondition /////////////////////
/**
 * getCompletionCondition - get the completion condition of the loop characteristics.
 *
 * @param {djs.model.Base} element
 *
 * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the completion condition
 */function getCompletionCondition$1(element){return getProperty$2(element,'completionCondition');}/**
 * getCompletionConditionValue - get the completion condition value of the loop characteristics.
 *
 * @param {djs.model.Base} element
 *
 * @return {string} the completion condition value
 */function getCompletionConditionValue(element){var completionCondition=getCompletionCondition$1(element);return getBody(completionCondition);}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function NameProps(props){var element=props.element;if((0,_ModelingUtil.isAny)(element,['bpmn:Collaboration','bpmn:DataAssociation','bpmn:Association'])){return[];}return[{id:'name',component:Name$3,isEdited:_propertiesPanel.isTextAreaEntryEdited}];}function Name$3(props){var element=props.element;var modeling=useService('modeling');var debounce=useService('debounceInput');var canvas=useService('canvas');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');// (1) default: name
var options={element:element,id:'name',label:translate('Name'),debounce:debounce,setValue:function setValue(value){modeling.updateProperties(element,{name:value});},getValue:function getValue(element){return element.businessObject.name;},autoResize:true};// (2) text annotations
if((0,_ModelUtil.is)(element,'bpmn:TextAnnotation')){options=_objectSpread(_objectSpread({},options),{},{setValue:function setValue(value){modeling.updateProperties(element,{text:value});},getValue:function getValue(element){return element.businessObject.text;}});}// (3) groups
else if((0,_ModelUtil.is)(element,'bpmn:Group')){options=_objectSpread(_objectSpread({},options),{},{setValue:function setValue(value){var businessObject=(0,_ModelUtil.getBusinessObject)(element),categoryValueRef=businessObject.categoryValueRef;if(!categoryValueRef){initializeCategory(businessObject,canvas.getRootElement(),bpmnFactory);}modeling.updateLabel(element,value);},getValue:function getValue(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element),categoryValueRef=businessObject.categoryValueRef;return categoryValueRef&&categoryValueRef.value;}});}// (4) participants (only update label)
else if((0,_ModelUtil.is)(element,'bpmn:Participant')){options.label=translate('Participant Name');}return(0,_propertiesPanel.TextAreaEntry)(options);}// helpers ////////////////////////
function initializeCategory(businessObject,rootElement,bpmnFactory){var definitions=(0,_ModelUtil.getBusinessObject)(rootElement).$parent;var categoryValue=createCategoryValue(definitions,bpmnFactory);businessObject.categoryValueRef=categoryValue;}function createCategoryValue(definitions,bpmnFactory){var categoryValue=bpmnFactory.create('bpmn:CategoryValue');var category=bpmnFactory.create('bpmn:Category',{categoryValue:[categoryValue]});// add to correct place
(0,_Collections.add)(definitions.get('rootElements'),category);(0,_ModelUtil.getBusinessObject)(category).$parent=definitions;(0,_ModelUtil.getBusinessObject)(categoryValue).$parent=category;return categoryValue;}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function ProcessProps(props){var element=props.element;if(!hasProcessRef(element)){return[];}return[{id:'processId',component:ProcessId,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'processName',component:ProcessName,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function ProcessName(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var process=element.businessObject.get('processRef');var getValue=function getValue(){return process.get('name');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'processName',label:translate('Process name'),getValue:getValue,setValue:setValue,debounce:debounce});}function ProcessId(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var process=element.businessObject.get('processRef');var getValue=function getValue(){return process.get('id');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{id:value}});};var validate=function validate(value){return isIdValid(process,value,translate);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'processId',label:translate('Process ID'),getValue:getValue,setValue:setValue,debounce:debounce,validate:validate});}// helper ////////////////
function hasProcessRef(element){return(0,_ModelUtil.is)(element,'bpmn:Participant')&&element.businessObject.get('processRef');}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */var EMPTY_OPTION$3='';var CREATE_NEW_OPTION$2='create-new';/**
 * @returns {Entry[]}
 */function SignalProps$1(props){var element=props.element;if(!isSignalSupported$1(element)){return[];}var signal=getSignal$1(element);var entries=[{id:'signalRef',component:SignalRef,isEdited:_propertiesPanel.isSelectEntryEdited}];if(signal){entries=[].concat(_toConsumableArray(entries),[{id:'signalName',component:SignalName$1,isEdited:_propertiesPanel.isTextFieldEntryEdited}]);}return entries;}function SignalRef(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var signalEventDefinition=getSignalEventDefinition$1(element);var getValue=function getValue(){var signal=getSignal$1(element);if(signal){return signal.get('id');}return EMPTY_OPTION$3;};var setValue=function setValue(value){var root=getRoot(signalEventDefinition);var commands=[];var signal;// (1) create new signal
if(value===CREATE_NEW_OPTION$2){var id=nextId('Signal_');signal=createElement('bpmn:Signal',{id:id,name:id},root,bpmnFactory);value=signal.get('id');commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:root,properties:{rootElements:[].concat(_toConsumableArray(root.get('rootElements')),[signal])}}});}// (2) update (or remove) signalRef
signal=signal||findRootElementById(signalEventDefinition,'bpmn:Signal',value);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:signalEventDefinition,properties:{signalRef:signal}}});// (3) commit all updates
return commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){var options=[{value:EMPTY_OPTION$3,label:translate('<none>')},{value:CREATE_NEW_OPTION$2,label:translate('Create new ...')}];var signals=findRootElementsByType((0,_ModelUtil.getBusinessObject)(element),'bpmn:Signal');sortByName$3(signals).forEach(function(signal){options.push({value:signal.get('id'),label:signal.get('name')});});return options;};return ReferenceSelectEntry({element:element,id:'signalRef',label:translate('Global signal reference'),autoFocusEntry:'signalName',getValue:getValue,setValue:setValue,getOptions:getOptions});}function SignalName$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var signal=getSignal$1(element);var getValue=function getValue(){return signal.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:signal,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'signalName',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper /////////////////////////
function sortByName$3(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}function isTimerSupported(element){return(0,_ModelingUtil.isAny)(element,['bpmn:StartEvent','bpmn:IntermediateCatchEvent','bpmn:BoundaryEvent'])&&!!getTimerEventDefinition(element);}/**
 * Get the timer definition type for a given timer event definition.
 *
 * @param {ModdleElement<bpmn:TimerEventDefinition>} timer
 *
 * @return {string|undefined} the timer definition type
 */function getTimerDefinitionType(timer){if(!timer){return;}var timeDate=timer.get('timeDate');if(typeof timeDate!=='undefined'){return'timeDate';}var timeCycle=timer.get('timeCycle');if(typeof timeCycle!=='undefined'){return'timeCycle';}var timeDuration=timer.get('timeDuration');if(typeof timeDuration!=='undefined'){return'timeDuration';}}function getTimerEventDefinition(element){return getEventDefinition(element,'bpmn:TimerEventDefinition');}function getEventDefinition(element,eventType){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var eventDefinitions=businessObject.get('eventDefinitions')||[];return(0,_minDash.find)(eventDefinitions,function(definition){return(0,_ModelUtil.is)(definition,eventType);});}function isMessageSupported(element){return(0,_ModelUtil.is)(element,'bpmn:ReceiveTask')||(0,_ModelingUtil.isAny)(element,['bpmn:StartEvent','bpmn:EndEvent','bpmn:IntermediateThrowEvent','bpmn:BoundaryEvent','bpmn:IntermediateCatchEvent'])&&!!getMessageEventDefinition(element);}function getMessageEventDefinition(element){if((0,_ModelUtil.is)(element,'bpmn:ReceiveTask')){return(0,_ModelUtil.getBusinessObject)(element);}return getEventDefinition(element,'bpmn:MessageEventDefinition');}function getMessage(element){var messageEventDefinition=getMessageEventDefinition(element);return messageEventDefinition&&messageEventDefinition.get('messageRef');}function getSignalEventDefinition(element){return getEventDefinition(element,'bpmn:SignalEventDefinition');}function isSignalSupported(element){return(0,_ModelUtil.is)(element,'bpmn:Event')&&!!getSignalEventDefinition(element);}function getSignal(element){var signalEventDefinition=getSignalEventDefinition(element);return signalEventDefinition&&signalEventDefinition.get('signalRef');}function TimerProps$2(props){var element=props.element,idPrefix=props.idPrefix;var timerEventDefinition=props.timerEventDefinition;if(!timerEventDefinition){var businessObject=(0,_ModelUtil.getBusinessObject)(element);timerEventDefinition=getTimerEventDefinition(businessObject);}var timerEventDefinitionType=getTimerDefinitionType(timerEventDefinition);// (1) Only show for supported elements
if(!isTimerSupported(element)){return[];}// (2) Provide entries, have a value only if selection was made
var entries=[];entries.push({id:getId$1(idPrefix,'timerEventDefinitionType'),component:TimerEventDefinitionType$2,isEdited:_propertiesPanel.isSelectEntryEdited,timerEventDefinition:timerEventDefinition,timerEventDefinitionType:timerEventDefinitionType});if(timerEventDefinitionType){entries.push({id:getId$1(idPrefix,'timerEventDefinitionValue'),component:TimerEventDefinitionValue$2,isEdited:_propertiesPanel.isTextFieldEntryEdited,timerEventDefinition:timerEventDefinition,timerEventDefinitionType:timerEventDefinitionType});}return entries;}/**
 * TimerEventDefinitionType - Generic select entry allowing to select a specific
 * timerEventDefintionType. To be used together with timerEventDefinitionValue.
 *
 * @param  {type} props
 * @return {SelectEntry}
 */function TimerEventDefinitionType$2(props){var element=props.element,timerEventDefinition=props.timerEventDefinition,timerEventDefinitionType=props.timerEventDefinitionType;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate');var getValue=function getValue(){return timerEventDefinitionType||'';};var setValue=function setValue(value){// (1) Check if value is different to current type
if(value===timerEventDefinitionType){return;}// (2) Create empty formalExpression element
var formalExpression=bpmnFactory.create('bpmn:FormalExpression',{body:undefined});formalExpression.$parent=timerEventDefinition;// (3) Set the value for selected timerEventDefinitionType
var newProps={timeDuration:undefined,timeDate:undefined,timeCycle:undefined};if(value!==''){newProps[value]=formalExpression;}// (4) Execute businessObject update
commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventDefinition,properties:newProps});};var getOptions=function getOptions(element){return[{value:'',label:translate('<none>')},{value:'timeDate',label:translate('Date')},{value:'timeDuration',label:translate('Duration')},{value:'timeCycle',label:translate('Cycle')}];};return(0,_propertiesPanel.SelectEntry)({element:element,id:'timerEventDefinitionType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}/**
 * TimerEventDefinitionValue - Generic textField entry allowing to specify the
 * timerEventDefintionValue based on the set timerEventDefintionType. To be used
 * together with timerEventDefinitionType.
 *
 * @param  {type} props
 * @return {TextFieldEntry}
 */function TimerEventDefinitionValue$2(props){var element=props.element,timerEventDefinition=props.timerEventDefinition,timerEventDefinitionType=props.timerEventDefinitionType;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var timerEventFormalExpression=timerEventDefinition.get(timerEventDefinitionType);var getValue=function getValue(){return timerEventFormalExpression&&timerEventFormalExpression.get('body');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventFormalExpression,properties:{body:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'timerEventDefinitionValue',label:translate('Value'),getValue:getValue,setValue:setValue,debounce:debounce,description:getTimerEventDefinitionValueDescription$2(timerEventDefinitionType,translate)});}// helper //////////////////////////
function getTimerEventDefinitionValueDescription$2(timerDefinitionType,translate){switch(timerDefinitionType){case'timeDate':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A specific point in time defined as ISO 8601 combined date and time representation.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"2019-10-01T12:00:00Z"})," - ",translate('UTC time')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"2019-10-02T08:09:40+02:00"})," - ",translate('UTC plus 2 hours zone offset')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-date",target:"_blank",rel:"noopener",children:translate('Documentation: Timer events')})]});case'timeCycle':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A cycle defined as ISO 8601 repeating intervals format.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"R5/PT10S"})," - ",translate('every 10 seconds, up to 5 times')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"R/P1D"})," - ",translate('every day, infinitely')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-cycle",target:"_blank",rel:"noopener",children:translate('Documentation: Timer events')})]});case'timeDuration':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A time duration defined as ISO 8601 durations format.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"PT15S"})," - ",translate('15 seconds')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"PT1H30M"})," - ",translate('1 hour and 30 minutes')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"P14D"})," - ",translate('14 days')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-duration",target:"_blank",rel:"noopener",children:translate('Documentation: Timer events')})]});}}function getId$1(idPrefix,id){return idPrefix?idPrefix+id:id;}function GeneralGroup(element,injector){var translate=injector.get('translate');var entries=[].concat(_toConsumableArray(NameProps({element:element})),_toConsumableArray(IdProps()),_toConsumableArray(ProcessProps({element:element})),_toConsumableArray(ExecutableProps({element:element})));return{id:'general',label:translate('General'),entries:entries,component:_propertiesPanel.Group};}function CompensationGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Compensation'),id:'compensation',component:_propertiesPanel.Group,entries:_toConsumableArray(CompensationProps({element:element}))};if(group.entries.length){return group;}return null;}function DocumentationGroup(element,injector){var translate=injector.get('translate');var entries=_toConsumableArray(DocumentationProps({element:element}));return{id:'documentation',label:translate('Documentation'),entries:entries,component:_propertiesPanel.Group};}function ErrorGroup(element,injector){var translate=injector.get('translate');var group={id:'error',label:translate('Error'),component:_propertiesPanel.Group,entries:_toConsumableArray(ErrorProps$2({element:element}))};if(group.entries.length){return group;}return null;}function MessageGroup(element,injector){var translate=injector.get('translate');var group={id:'message',label:translate('Message'),component:_propertiesPanel.Group,entries:_toConsumableArray(MessageProps$2({element:element}))};if(group.entries.length){return group;}return null;}function SignalGroup(element,injector){var translate=injector.get('translate');var group={id:'signal',label:translate('Signal'),component:_propertiesPanel.Group,entries:_toConsumableArray(SignalProps$1({element:element}))};if(group.entries.length){return group;}return null;}function LinkGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Link'),id:'link',component:_propertiesPanel.Group,entries:_toConsumableArray(LinkProps({element:element}))};if(group.entries.length){return group;}return null;}function EscalationGroup(element,injector){var translate=injector.get('translate');var group={id:'escalation',label:translate('Escalation'),component:_propertiesPanel.Group,entries:_toConsumableArray(EscalationProps$2({element:element}))};if(group.entries.length){return group;}return null;}function TimerGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Timer'),id:'timer',component:_propertiesPanel.Group,entries:_toConsumableArray(TimerProps$2({element:element}))};if(group.entries.length){return group;}return null;}function MultiInstanceGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Multi-instance'),id:'multiInstance',component:_propertiesPanel.Group,entries:_toConsumableArray(MultiInstanceProps$2({element:element}))};if(group.entries.length){return group;}return null;}function _getGroups(element,injector){var groups=[GeneralGroup(element,injector),DocumentationGroup(element,injector),CompensationGroup(element,injector),ErrorGroup(element,injector),LinkGroup(element,injector),MessageGroup(element,injector),MultiInstanceGroup(element,injector),SignalGroup(element,injector),EscalationGroup(element,injector),TimerGroup(element,injector)];// contract: if a group returns null, it should not be displayed at all
return groups.filter(function(group){return group!==null;});}var BpmnPropertiesProvider=/*#__PURE__*/function(){function BpmnPropertiesProvider(propertiesPanel,injector){_classCallCheck(this,BpmnPropertiesProvider);propertiesPanel.registerProvider(this);this._injector=injector;}_createClass(BpmnPropertiesProvider,[{key:"getGroups",value:function getGroups(element){var _this2=this;return function(groups){groups=groups.concat(_getGroups(element,_this2._injector));return groups;};}}]);return BpmnPropertiesProvider;}();BpmnPropertiesProvider.$inject=['propertiesPanel','injector'];var index$2={__init__:['bpmnPropertiesProvider'],bpmnPropertiesProvider:['type',BpmnPropertiesProvider]};/**
 * Get extension elements of business object. Optionally filter by type.
 *
 * @param  {ModdleElement} businessObject
 * @param  {String} [type=undefined]
 * @returns {Array<ModdleElement>}
 */exports.BpmnPropertiesProviderModule=index$2;function getExtensionElementsList(businessObject){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;var extensionElements=businessObject.get('extensionElements');if(!extensionElements){return[];}var values=extensionElements.get('values');if(!values||!values.length){return[];}if(type){return values.filter(function(value){return(0,_ModelUtil.is)(value,type);});}return values;}/**
 * Add one or more extension elements. Create bpmn:ExtensionElements if it doesn't exist.
 *
 * @param {ModdleElement} element
 * @param {ModdleElement} businessObject
 * @param {ModdleElement|Array<ModdleElement>} extensionElementsToAdd
 * @param {CommandStack} commandStack
 */function addExtensionElements(element,businessObject,extensionElementToAdd,bpmnFactory,commandStack){var commands=[];var extensionElements=businessObject.get('extensionElements');// (1) create bpmn:ExtensionElements if it doesn't exist
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}extensionElementToAdd.$parent=extensionElements;// (2) add extension element to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[extensionElementToAdd])}}});commandStack.execute('properties-panel.multi-command-executor',commands);}/**
 * Remove one or more extension elements. Remove bpmn:ExtensionElements afterwards if it's empty.
 *
 * @param {ModdleElement} element
 * @param {ModdleElement} businessObject
 * @param {ModdleElement|Array<ModdleElement>} extensionElementsToRemove
 * @param {CommandStack} commandStack
 */function removeExtensionElements(element,businessObject,extensionElementsToRemove,commandStack){if(!(0,_minDash.isArray)(extensionElementsToRemove)){extensionElementsToRemove=[extensionElementsToRemove];}var extensionElements=businessObject.get('extensionElements'),values=extensionElements.get('values').filter(function(value){return!extensionElementsToRemove.includes(value);});commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:values}});}function useServiceIfAvailable(service,fallback){var resolved=useService(service,false);if(!resolved){return fallback;}return resolved;}function withVariableContext(Component){return function(props){var bpmnElement=props.bpmnElement,element=props.element;var bo=(bpmnElement||element).businessObject;var _useState5=(0,_hooks.useState)([]),_useState6=_slicedToArray(_useState5,2),variables=_useState6[0],setVariables=_useState6[1];var eventBus=useService('eventBus');var variableResolver=useServiceIfAvailable('variableResolver',{getVariablesForElement:_zeebe.getVariablesForElement});(0,_hooks.useEffect)(function(){var extractVariables=/*#__PURE__*/function(){var _ref91=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var variables;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return variableResolver.getVariablesForElement(bo);case 2:variables=_context.sent;setVariables(variables.map(function(variable){return _objectSpread(_objectSpread({},variable),{},{info:variable.info||variable.origin&&'Written in '+variable.origin.map(function(origin){return origin.name||origin.id;}).join(', ')});}));case 4:case"end":return _context.stop();}},_callee);}));return function extractVariables(){return _ref91.apply(this,arguments);};}();// The callback must return undefined, so the event propagation is not canceled.
// Cf. https://github.com/camunda/camunda-modeler/issues/3392
var callback=function callback(){extractVariables();};eventBus.on('commandStack.changed',callback);callback();return function(){eventBus.off('commandStack.changed',callback);};},[bo]);return(0,_jsxRuntime.jsx)(Component,_objectSpread(_objectSpread({},props),{},{variables:variables}));};}function withTooltipContainer(Component){return function(props){var tooltipContainer=(0,_hooks.useMemo)(function(){var config=useService('config');return config&&config.propertiesPanel&&config.propertiesPanel.feelTooltipContainer;},[]);return(0,_jsxRuntime.jsx)(Component,_objectSpread(_objectSpread({},props),{},{tooltipContainer:tooltipContainer}));};}var FeelEntry=withTooltipContainer(_propertiesPanel.FeelEntry);var FeelTextAreaEntry=withTooltipContainer(_propertiesPanel.FeelTextAreaEntry);var FeelEntryWithVariableContext=withVariableContext(FeelEntry);var FeelTextAreaEntryWithVariableContext=withVariableContext(FeelTextAreaEntry);function AssignmentDefinitionProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:UserTask')){return[];}return[{id:'assignmentDefinitionAssignee',component:Assignee$1,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'assignmentDefinitionCandidateGroups',component:CandidateGroups$1,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'assignmentDefinitionCandidateUsers',component:CandidateUsers$1,isEdited:_propertiesPanel.isFeelEntryEdited}];}function Assignee$1(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getAssignmentDefinition(element)||{}).assignee;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure AssignmentDefinition
var assignmentDefinition=getAssignmentDefinition(element);if(!assignmentDefinition){assignmentDefinition=createElement('zeebe:AssignmentDefinition',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[assignmentDefinition])}}});}// (3) update assignee definition type
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:assignmentDefinition,properties:{assignee:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'assignmentDefinitionAssignee',label:translate('Assignee'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function CandidateGroups$1(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getAssignmentDefinition(element)||{}).candidateGroups;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure assignmentDefinition
var assignmentDefinition=getAssignmentDefinition(element);if(!assignmentDefinition){assignmentDefinition=createElement('zeebe:AssignmentDefinition',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[assignmentDefinition])}}});}// (3) update candidateGroups
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:assignmentDefinition,properties:{candidateGroups:value}}});commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'assignmentDefinitionCandidateGroups',label:translate('Candidate groups'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function CandidateUsers$1(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getAssignmentDefinition(element)||{}).candidateUsers;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure assignmentDefinition
var assignmentDefinition=getAssignmentDefinition(element);if(!assignmentDefinition){assignmentDefinition=createElement('zeebe:AssignmentDefinition',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[assignmentDefinition])}}});}// (3) update candidateUsers
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:assignmentDefinition,properties:{candidateUsers:value}}});commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'assignmentDefinitionCandidateUsers',label:translate('Candidate users'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function getAssignmentDefinition(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:AssignmentDefinition')[0];}function isZeebeServiceTask(element){if(!(0,_ModelUtil.is)(element,'zeebe:ZeebeServiceTask'))return false;if((0,_ModelUtil.is)(element,'bpmn:EndEvent')||(0,_ModelUtil.is)(element,'bpmn:IntermediateThrowEvent')){return!!getMessageEventDefinition$1(element);}// BusinessRuleTask and ScriptTask are ServiceTasks only if they have a TaskDefinition
// (ie. if the implementation is set to ==JobWorker)
if((0,_ModelUtil.isAny)(element,['bpmn:BusinessRuleTask','bpmn:ScriptTask'])&&!getTaskDefinition$3(element)){return false;}return true;}function isMessageEndEvent(element){return(0,_ModelUtil.is)(element,'bpmn:EndEvent')&&!!getMessageEventDefinition$1(element);}function isMessageThrowEvent(element){return(0,_ModelUtil.is)(element,'bpmn:IntermediateThrowEvent')&&!!getMessageEventDefinition$1(element);}// helper ////////////////
function getTaskDefinition$3(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskDefinition')[0];}function areHeadersSupported(element){return(0,_ModelUtil.is)(element,'bpmn:UserTask')||isZeebeServiceTask(element);}/**
 * Get first zeebe:TaskHeaders element for a specific element.
 *
 * @param  {ModdleElement} element
 *
 * @return {ModdleElement} a zeebe:TaskHeader element
 */function getTaskHeaders$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskHeaders')[0];}/**
 * Retrieve all zeebe:Header elements for a specific element.
 *
 * @param  {ModdleElement} element
 *
 * @return {Array<ModdleElement>} a list of zeebe:Header elements
 */function getHeaders(element){var taskHeaders=getTaskHeaders$1(element);return taskHeaders?taskHeaders.get('values'):[];}var DMN_IMPLEMENTATION_OPTION='dmn',JOB_WORKER_IMPLEMENTATION_OPTION$1='jobWorker',DEFAULT_IMPLEMENTATION_OPTION$1='';function BusinessRuleImplementationProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:BusinessRuleTask')){return[];}return[{id:'businessRuleImplementation',component:BusinessRuleImplementation,isEdited:function isEdited(){return isBusinessRuleImplementationEdited(element);}}];}function BusinessRuleImplementation(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var getValue=function getValue(){if(getCalledDecision$1(element)){return DMN_IMPLEMENTATION_OPTION;}if(getTaskDefinition$2(element)){return JOB_WORKER_IMPLEMENTATION_OPTION$1;}return DEFAULT_IMPLEMENTATION_OPTION$1;};/**
   * Set value by either creating a zeebe:calledDecision or a zeebe:taskDefintion
   * extension element. Note that they must not exist both at the same time, however
   * this will be ensured by a bpmn-js behavior (and not by the propPanel).
   */var setValue=function setValue(value){var extensionElement,extensionElementType;if(value===DMN_IMPLEMENTATION_OPTION){extensionElement=getCalledDecision$1(element);extensionElementType='zeebe:CalledDecision';}else if(value===JOB_WORKER_IMPLEMENTATION_OPTION$1){extensionElement=getTaskDefinition$2(element);extensionElementType='zeebe:TaskDefinition';}else{resetElement$1(element,commandStack);}if(!extensionElement&&extensionElementType){extensionElement=createElement(extensionElementType,{},null,bpmnFactory);updateExtensionElements$1(element,extensionElement,bpmnFactory,commandStack);}};var getOptions=function getOptions(){var options=[{value:DEFAULT_IMPLEMENTATION_OPTION$1,label:translate('<none>')},{value:DMN_IMPLEMENTATION_OPTION,label:translate('DMN decision')},{value:JOB_WORKER_IMPLEMENTATION_OPTION$1,label:translate('Job worker')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:id,label:translate('Implementation'),getValue:getValue,setValue:setValue,getOptions:getOptions});}// helper ///////////////////////
function getTaskDefinition$2(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskDefinition')[0];}function getCalledDecision$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:CalledDecision')[0];}function isBusinessRuleImplementationEdited(element){return getTaskDefinition$2(element);}function resetElement$1(element,commandStack){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var toRemove=[getTaskDefinition$2(element),getTaskHeaders$1(element),getCalledDecision$1(element)].filter(Boolean);removeExtensionElements(element,businessObject,toRemove,commandStack);}function updateExtensionElements$1(element,extensionElementToAdd,bpmnFactory,commandStack){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var commands=[];var extensionElements=businessObject.get('extensionElements');var extensionElementValues;// (1) create bpmn:ExtensionElements if it doesn't exist
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}extensionElementToAdd.$parent=extensionElements;// (2) remove old exension element from extensionElements
if((0,_ModelUtil.is)(extensionElementToAdd,'zeebe:TaskDefinition')){extensionElementValues=(0,_minDash.without)(extensionElements.get('values'),getCalledDecision$1(element));}else if((0,_ModelUtil.is)(extensionElementToAdd,'zeebe:CalledDecision')){extensionElementValues=(0,_minDash.without)(extensionElements.get('values'),getTaskDefinition$2(element));}// (3) add extension element to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElementValues),[extensionElementToAdd])}}});commandStack.execute('properties-panel.multi-command-executor',commands);}function CalledDecisionProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:BusinessRuleTask')||!getCalledDecision(element)){return[];}return[{id:'decisionId',component:DecisionID,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'resultVariable',component:ResultVariable$4,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function DecisionID(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getCalledDecision(element)||{}).decisionId;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure calledDecision
var calledDecision=getCalledDecision(element);if(!calledDecision){calledDecision=createElement('zeebe:CalledDecision',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[calledDecision])}}});}// (3) update caledDecision.decisionId
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:calledDecision,properties:{decisionId:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:id,label:translate('Decision ID'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function ResultVariable$4(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getCalledDecision(element)||{}).resultVariable;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure calledDecision
var calledDecision=getCalledDecision(element);if(!calledDecision){calledDecision=createElement('zeebe:CalledDecision',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[calledDecision])}}});}// (3) update caledDecision.decisionId
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:calledDecision,properties:{resultVariable:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:id,label:translate('Result variable'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function getCalledDecision(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:CalledDecision')[0];}function ConditionProps$1(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:SequenceFlow')){return[];}var conditionProps=[];if(isConditionalSource$1(element.source)){conditionProps.push({id:'conditionExpression',component:ConditionExpression$1,isEdited:_propertiesPanel.isFeelEntryEdited});}return conditionProps;}function ConditionExpression$1(props){var element=props.element;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate'),debounce=useService('debounceInput');var getValue=function getValue(){return getConditionExpression$1(element);};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);// (1) If we set value to a default flow, make it a non-default flow
// by updating the element source
var source=element.source;if(source.businessObject["default"]===businessObject){commands.push({cmd:'element.updateProperties',context:{element:source,properties:{'default':undefined}}});}// (2) Create and set formalExpression element containing the conditionExpression,
// unless the provided value is empty
var formalExpressionElement=value&&value!=''?createElement('bpmn:FormalExpression',{body:value},businessObject,bpmnFactory):undefined;commands.push({cmd:'element.updateProperties',context:{element:element,properties:{conditionExpression:formalExpressionElement}}});// (3) Execute the commands
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'conditionExpression',label:translate('Condition expression'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////////////
var CONDITIONAL_SOURCES$1=['bpmn:Activity','bpmn:ExclusiveGateway','bpmn:InclusiveGateway'];function isConditionalSource$1(element){return(0,_ModelingUtil.isAny)(element,CONDITIONAL_SOURCES$1);}/**
 * getConditionExpression - get the body value of a condition expression for a given element
 *
 * @param  {ModdleElement} element
 *
 * @return {string|undefined}
 */function getConditionExpression$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var conditionExpression=businessObject.conditionExpression;if(conditionExpression){return conditionExpression.get('body');}}function ErrorProps$1(props){var element=props.element;var error=getError(element);var entries=[];if(error&&(0,_ModelUtil.is)(element,'bpmn:ThrowEvent')){entries.push({id:'errorCode',component:ErrorCode$1,isEdited:_propertiesPanel.isFeelEntryEdited});}return entries;}function ErrorCode$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var error=getError(element);var getValue=function getValue(){return error.get('errorCode');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{errorCode:value}});};return FeelEntryWithVariableContext({element:element,id:'errorCode',label:translate('Code'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function EscalationProps$1(props){var element=props.element;// update throw events only
if(!(0,_ModelUtil.is)(element,'bpmn:ThrowEvent')){return[];}var escalation=getEscalation(element);var entries=[];if(escalation){entries.push({id:'escalationCode',component:EscalationCode,isEdited:_propertiesPanel.isFeelEntryEdited});}return entries;}function EscalationCode(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var escalation=getEscalation(element);var getValue=function getValue(){return escalation.get('escalationCode');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:escalation,properties:{escalationCode:value}});};return FeelEntryWithVariableContext({element:element,id:'escalationCode',label:translate('Code'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function FormProps$1(props){var element=props.element,injector=props.injector;var formHelper=injector.invoke(FormHelper);if(!(0,_ModelUtil.is)(element,'bpmn:UserTask')){return[];}var entries=[{id:'formType',component:FormType$1,isEdited:_propertiesPanel.isSelectEntryEdited}];if(isCamundaForm(element,formHelper)){entries.push({id:'formConfiguration',component:FormConfiguration,isEdited:_propertiesPanel.isTextAreaEntryEdited});}else if(isCustomKey(element,formHelper)){entries.push({id:'customFormKey',component:CustomFormKey,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function FormType$1(props){var element=props.element;var translate=useService('translate');var injector=useService('injector');var formHelper=injector.invoke(FormHelper);var getValue=function getValue(){var formDefinition=formHelper.getFormDefinition(element);var userTaskForm=formHelper.getUserTaskForm(element);if(formDefinition){if(userTaskForm){return'camundaForm';}return'formKey';}return'';};var setValue=function setValue(value){formHelper.resetForm(element);if(value==='camundaForm'){formHelper.setUserTaskForm(element,'');}else if(value==='formKey'){formHelper.setFormDefinition(element,'');}};var getOptions=function getOptions(){return[{value:'',label:translate('<none>')},{value:'camundaForm',label:translate('Camunda forms')},{value:'formKey',label:translate('Custom form key')}];};return(0,_propertiesPanel.SelectEntry)({element:element,id:'formType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function FormConfiguration(props){var element=props.element;var injector=useService('injector');var debounce=useService('debounceInput');var translate=useService('translate');var formHelper=injector.invoke(FormHelper);var getValue=function getValue(){var userTaskForm=formHelper.getUserTaskForm(element);return userTaskForm.get('body');};var setValue=function setValue(value){formHelper.setUserTaskForm(element,value);};return(0,_propertiesPanel.TextAreaEntry)({element:element,id:'formConfiguration',label:translate('Form JSON configuration'),rows:4,getValue:getValue,setValue:setValue,debounce:debounce});}function CustomFormKey(props){var element=props.element;var injector=useService('injector');var debounce=useService('debounceInput');var translate=useService('translate');var formHelper=injector.invoke(FormHelper);var getValue=function getValue(){var formDefinition=formHelper.getFormDefinition(element);return formDefinition.get('formKey');};var setValue=function setValue(value){formHelper.setFormDefinition(element,value);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'customFormKey',label:translate('Form key'),getValue:getValue,setValue:setValue,debounce:debounce});}var USER_TASK_FORM_PREFIX='userTaskForm_';function FormHelper(bpmnFactory,commandStack){function getFormDefinition(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var formDefinitions=getExtensionElementsList(businessObject,'zeebe:FormDefinition');return formDefinitions[0];}function getUserTaskForm(element,parent){var rootElement=parent||getRootElement(element);// (1) get form definition from user task
var formDefinition=getFormDefinition(element);if((0,_minDash.isUndefined)(formDefinition)){return;}var formKey=formDefinition.get('formKey');// (2) retrieve user task form via form key
var userTaskForm=findUserTaskForm(formKey,rootElement);return userTaskForm;}function ensureTaskForm(element,values){var commands=[];var rootElement=getRootElement(element);// (1) ensure root element extension elements
var rootExtensionElements=rootElement.get('extensionElements');if(!rootExtensionElements){rootExtensionElements=createElement('bpmn:ExtensionElements',{values:[]},rootElement,bpmnFactory);commands.push(UpdateModdlePropertiesCmd(element,rootElement,{extensionElements:rootExtensionElements}));}// (2) ensure user task form
var userTaskForm=getUserTaskForm(element);// (2.1) create user task form if doesn't exist
if(!userTaskForm){userTaskForm=createUserTaskForm(values,rootExtensionElements,bpmnFactory);commands.push(UpdateModdlePropertiesCmd(element,rootExtensionElements,{values:[].concat(_toConsumableArray(rootExtensionElements.get('values')),[userTaskForm])}));}commands.push(UpdateModdlePropertiesCmd(element,userTaskForm,values));return commands;}function ensureFormDefinition(element,customFormKey){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var commands=[];// (1) ensure extension elements
var extensionElements=businessObject.get('extensionElements');if((0,_minDash.isUndefined)(extensionElements)){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push(UpdateModdlePropertiesCmd(element,businessObject,{extensionElements:extensionElements}));}// (2) ensure form definition
var formDefinition=getFormDefinition(element);// (2.1) create if doesn't exist
if(!formDefinition){var formKey=customFormKey;if((0,_minDash.isUndefined)(formKey)){var formId=createFormId();formKey=createFormKey(formId);}formDefinition=createFormDefinition({formKey:formKey},extensionElements,bpmnFactory);commands.push(UpdateModdlePropertiesCmd(element,extensionElements,{values:[].concat(_toConsumableArray(extensionElements.get('values')),[formDefinition])}));}// (2.2) update existing form definition with custom key
else if(customFormKey){commands.push(UpdateModdlePropertiesCmd(element,formDefinition,{formKey:customFormKey}));}return{formId:resolveFormId(formDefinition.get('formKey')),commands:commands};}function setFormDefinition(element,customFormKey){var _ensureFormDefinition=ensureFormDefinition(element,customFormKey),commands=_ensureFormDefinition.commands;commandStack.execute('properties-panel.multi-command-executor',commands);}function setUserTaskForm(element,value){var _ensureFormDefinition2=ensureFormDefinition(element),formId=_ensureFormDefinition2.formId,formDefCommands=_ensureFormDefinition2.commands;var userTaskCommands=ensureTaskForm(element,{id:formId,body:value});var commands=formDefCommands.concat(userTaskCommands);commandStack.execute('properties-panel.multi-command-executor',commands);}function unsetFormDefinition(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element),extensionElements=businessObject.get('extensionElements');var commands=[];var formDefinition=getFormDefinition(element);if(!formDefinition){return commands;}var values=(0,_minDash.without)(extensionElements.get('values'),formDefinition);commands.push(UpdateModdlePropertiesCmd(element,extensionElements,{values:values}));return commands;}function resetForm(element){var rootElement=getRootElement(element),rootExtensionElements=rootElement.get('extensionElements');// (1) remove form definition
var commands=unsetFormDefinition(element);// (2) remove referenced user task form
var userTaskForm=getUserTaskForm(element);if(!userTaskForm){commandStack.execute('properties-panel.multi-command-executor',commands);return;}var values=(0,_minDash.without)(rootExtensionElements.get('values'),userTaskForm);commands.push(UpdateModdlePropertiesCmd(element,rootExtensionElements,{values:values}));commandStack.execute('properties-panel.multi-command-executor',commands);}function createFormKey(formId){return'camunda-forms:bpmn:'+formId;}function createFormId(){return nextId(USER_TASK_FORM_PREFIX);}function resolveFormId(formKey){return formKey.split(':')[2];}function createFormDefinition(properties,extensionElements,bpmnFactory){return createElement('zeebe:FormDefinition',properties,extensionElements,bpmnFactory);}function createUserTaskForm(properties,extensionElements,bpmnFactory){return createElement('zeebe:UserTaskForm',properties,extensionElements,bpmnFactory);}function findUserTaskForm(formKey,rootElement){var forms=getExtensionElementsList(rootElement,'zeebe:UserTaskForm');return(0,_minDash.find)(forms,function(userTaskForm){return createFormKey(userTaskForm.id)===formKey;});}function getRootElement(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var parent=businessObject;while(parent.$parent&&!(0,_ModelUtil.is)(parent,'bpmn:Process')){parent=parent.$parent;}return parent;}return{getFormDefinition:getFormDefinition,getUserTaskForm:getUserTaskForm,setFormDefinition:setFormDefinition,setUserTaskForm:setUserTaskForm,resetForm:resetForm};}FormHelper.$inject=['bpmnFactory','commandStack'];// helpers /////////////
function UpdateModdlePropertiesCmd(element,businessObject,newProperties){return{cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:newProperties}};}function isCamundaForm(element,formHelper){var formDefinition=formHelper.getFormDefinition(element);var userTaskForm=formHelper.getUserTaskForm(element);return formDefinition&&userTaskForm;}function isCustomKey(element,formHelper){var formDefinition=formHelper.getFormDefinition(element);var userTaskForm=formHelper.getUserTaskForm(element);return formDefinition&&!userTaskForm;}function Header(props){var idPrefix=props.idPrefix,header=props.header;var entries=[{id:idPrefix+'-key',component:KeyProperty,header:header,idPrefix:idPrefix},{id:idPrefix+'-value',component:ValueProperty$2,header:header,idPrefix:idPrefix}];return entries;}function KeyProperty(props){var idPrefix=props.idPrefix,element=props.element,header=props.header;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:header,properties:{key:value}});};var getValue=function getValue(header){return header.key;};return(0,_propertiesPanel.TextFieldEntry)({element:header,id:idPrefix+'-key',label:translate('Key'),getValue:getValue,setValue:setValue,debounce:debounce});}function ValueProperty$2(props){var idPrefix=props.idPrefix,element=props.element,header=props.header;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:header,properties:{value:value}});};var getValue=function getValue(header){return header.value;};return(0,_propertiesPanel.TextFieldEntry)({element:header,id:idPrefix+'-value',label:translate('Value'),getValue:getValue,setValue:setValue,debounce:debounce});}function HeaderProps(_ref92){var element=_ref92.element,injector=_ref92.injector;if(!areHeadersSupported(element)){return null;}var headers=getHeaders(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=headers.map(function(header,index){var id=element.id+'-header-'+index;return{id:id,label:header.get('key')||'',entries:Header({idPrefix:id,element:element,header:header}),autoFocusEntry:id+'-key',remove:removeFactory$c({commandStack:commandStack,element:element,header:header})};});return{items:items,add:addFactory$9({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element}),shouldSort:false};}function removeFactory$c(_ref93){var commandStack=_ref93.commandStack,element=_ref93.element,header=_ref93.header;return function(event){event.stopPropagation();var commands=[];var taskHeaders=getTaskHeaders$1(element);if(!taskHeaders){return;}var newTaskHeaders=(0,_minDash.without)(taskHeaders.get('values'),header);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:taskHeaders,properties:{values:newTaskHeaders}}});// remove zeebe:TaskHeaders if there are no headers anymore
if(!newTaskHeaders.length){var businessObject=(0,_ModelUtil.getBusinessObject)(element),extensionElements=businessObject.get('extensionElements');commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),taskHeaders)}}});}commandStack.execute('properties-panel.multi-command-executor',commands);};}function addFactory$9(_ref94){var bpmnFactory=_ref94.bpmnFactory,commandStack=_ref94.commandStack,element=_ref94.element;return function(event){event.stopPropagation();var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure zeebe:TaskHeaders
var taskHeaders=getTaskHeaders$1(element);if(!taskHeaders){var parent=extensionElements;taskHeaders=createElement('zeebe:TaskHeaders',{values:[]},parent,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[taskHeaders])}}});}// (3) create header
var header=createElement('zeebe:Header',{},taskHeaders,bpmnFactory);// (4) add header to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:taskHeaders,properties:{values:[].concat(_toConsumableArray(taskHeaders.get('values')),[header])}}});commandStack.execute('properties-panel.multi-command-executor',commands);};}function InputOutputParameter$1(props){var idPrefix=props.idPrefix,parameter=props.parameter;var entries=[{id:idPrefix+'-target',component:TargetProperty,idPrefix:idPrefix,parameter:parameter},{id:idPrefix+'-source',component:SourceProperty,idPrefix:idPrefix,parameter:parameter}];return entries;}function TargetProperty(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:parameter,properties:{target:value}});};var getValue=function getValue(parameter){return parameter.target;};return(0,_propertiesPanel.TextFieldEntry)({element:parameter,id:idPrefix+'-target',label:translate((0,_ModelUtil.is)(parameter,'zeebe:Input')?'Local variable name':'Process variable name'),getValue:getValue,setValue:setValue,debounce:debounce});}function SourceProperty(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:parameter,properties:{source:value}});};var getValue=function getValue(parameter){return parameter.source;};return FeelEntryWithVariableContext({bpmnElement:element,element:parameter,id:idPrefix+'-source',label:translate('Variable assignment value'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}function getElements$1(bo,type,prop){var elems=getExtensionElementsList(bo,type);return!prop?elems:(elems[0]||{})[prop]||[];}function getParameters$1(element,prop){var ioMapping=getIoMapping(element);return ioMapping&&ioMapping.get(prop)||[];}/**
 * Get a ioMapping from the business object
 *
 * @param {djs.model.Base} element
 *
 * @return {ModdleElement} the ioMapping object
 */function getIoMapping(element){var bo=(0,_ModelUtil.getBusinessObject)(element);return(getElements$1(bo,'zeebe:IoMapping')||[])[0];}/**
 * Return all input parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {djs.model.Base} element
 *
 * @return {Array} a list of input parameter objects
 */function getInputParameters$1(element){return getParameters$1.apply(this,[element,'inputParameters']);}/**
 * Return all output parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {djs.model.Base} element
 *
 * @return {Array} a list of output parameter objects
 */function getOutputParameters$1(element){return getParameters$1.apply(this,[element,'outputParameters']);}function areInputParametersSupported$1(element){return(0,_ModelingUtil.isAny)(element,['bpmn:UserTask','bpmn:SubProcess','bpmn:CallActivity','bpmn:BusinessRuleTask','bpmn:ScriptTask'])||isZeebeServiceTask(element)||isSignalThrowEvent(element);}function areOutputParametersSupported$1(element){return(0,_ModelingUtil.isAny)(element,['zeebe:ZeebeServiceTask','bpmn:UserTask','bpmn:SubProcess','bpmn:ReceiveTask','bpmn:CallActivity','bpmn:Event','bpmn:BusinessRuleTask']);}function createIOMapping(properties,parent,bpmnFactory){return createElement('zeebe:IoMapping',properties,parent,bpmnFactory);}function isSignalThrowEvent(element){if(!(0,_ModelingUtil.isAny)(element,['bpmn:EndEvent','bpmn:IntermediateThrowEvent'])){return false;}return!!getEventDefinition$1(element,'bpmn:SignalEventDefinition');}function InputProps$1(_ref95){var element=_ref95.element,injector=_ref95.injector;if(!areInputParametersSupported$1(element)){return null;}var inputParameters=getInputParameters$1(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=inputParameters.map(function(parameter,index){var id=element.id+'-input-'+index;return{id:id,label:parameter.get('target')||'',entries:InputOutputParameter$1({idPrefix:id,element:element,parameter:parameter}),autoFocusEntry:id+'-target',remove:removeFactory$b({commandStack:commandStack,element:element,parameter:parameter})};});return{items:items,add:addFactory$8({element:element,bpmnFactory:bpmnFactory,commandStack:commandStack}),shouldSort:false};}function removeFactory$b(_ref96){var commandStack=_ref96.commandStack,element=_ref96.element,parameter=_ref96.parameter;return function(event){event.stopPropagation();var commands=[];var ioMapping=getIoMapping(element);if(!ioMapping){return;}var inputParameters=(0,_minDash.without)(ioMapping.get('inputParameters'),parameter);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:ioMapping,properties:{inputParameters:inputParameters}}});var businessObject=(0,_ModelUtil.getBusinessObject)(element),extensionElements=businessObject.get('extensionElements'),values=(0,_minDash.without)(extensionElements.get('values'),ioMapping);// remove ioMapping if there are no input/output parameters anymore
if(!inputParameters.length&&!ioMapping.get('outputParameters').length){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:values}}});}commandStack.execute('properties-panel.multi-command-executor',commands);};}function addFactory$8(_ref97){var element=_ref97.element,bpmnFactory=_ref97.bpmnFactory,commandStack=_ref97.commandStack;return function(event){event.stopPropagation();var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure IoMapping
var ioMapping=getIoMapping(element);if(!ioMapping){ioMapping=createIOMapping({inputParameters:[],outputParameters:[]},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[ioMapping])}}});}// (3) create parameter
var newParameter=createElement('zeebe:Input',{source:'',target:nextId('InputVariable_')},ioMapping,bpmnFactory);// (4) add parameter to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:ioMapping,properties:{inputParameters:[].concat(_toConsumableArray(ioMapping.get('inputParameters')),[newParameter])}}});commandStack.execute('properties-panel.multi-command-executor',commands);};}function MessageProps$1(props){var element=props.element;var message=getMessage$1(element);var entries=[];if(message){entries.push({id:'messageName',component:MessageName,isEdited:_propertiesPanel.isFeelEntryEdited});}if(message&&canHaveSubscriptionCorrelationKey(element)){entries.push({id:'messageSubscriptionCorrelationKey',component:SubscriptionCorrelationKey,isEdited:_propertiesPanel.isFeelEntryEdited});}return entries;}function MessageName(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var message=getMessage$1(element);var getValue=function getValue(){return message.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:message,properties:{name:value}});};return FeelEntryWithVariableContext({element:element,id:'messageName',label:translate('Name'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function SubscriptionCorrelationKey(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getCorrelationKey(element);};var setValue=function setValue(value){var commands=[];var message=getMessage$1(element);var extensionElements=message.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},message,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:message,properties:{extensionElements:extensionElements}}});}// (2) ensure subscription
var subscription=getSubscription(element);if(!subscription){subscription=createElement('zeebe:Subscription',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[subscription])}}});}// (3) update subscription correlation key
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:subscription,properties:{correlationKey:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'messageSubscriptionCorrelationKey',label:translate('Subscription correlation key'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function canHaveSubscriptionCorrelationKey(element){// (1) allow for receive task
if((0,_ModelUtil.is)(element,'bpmn:ReceiveTask')){return true;}// (2) allow for non start events
if(!(0,_ModelUtil.is)(element,'bpmn:StartEvent')){return true;}// (3) allow for start events inside event sub processes
if((0,_ModelUtil.is)(element,'bpmn:StartEvent')&&(0,_DiUtil.isEventSubProcess)(element.parent)){return true;}return false;}function getCorrelationKey(element){var subscription=getSubscription(element);return subscription?subscription.get('correlationKey'):'';}function getSubscription(element){var message=getMessage$1(element);var subscriptions=getSubscriptions(message);return subscriptions[0];}function getSubscriptions(message){var extensionElements=getExtensionElementsList(message,'zeebe:Subscription');return extensionElements;}function MultiInstanceProps$1(props){var element=props.element;if(!supportsMultiInstances(element)){return[];}return[{id:'multiInstance-inputCollection',component:InputCollection,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'multiInstance-inputElement',component:InputElement,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'multiInstance-outputCollection',component:OutputCollection,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'multiInstance-outputElement',component:OutputElement,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'multiInstance-completionCondition',component:CompletionCondition,isEdited:_propertiesPanel.isFeelEntryEdited}];}function InputCollection(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getProperty$1(element,'inputCollection');};var setValue=function setValue(value){return setProperty(element,'inputCollection',value,commandStack,bpmnFactory);};return FeelEntryWithVariableContext({element:element,id:'multiInstance-inputCollection',label:translate('Input collection'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}function InputElement(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getProperty$1(element,'inputElement');};var setValue=function setValue(value){return setProperty(element,'inputElement',value,commandStack,bpmnFactory);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'multiInstance-inputElement',label:translate('Input element'),getValue:getValue,setValue:setValue,debounce:debounce});}function OutputCollection(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getProperty$1(element,'outputCollection');};var setValue=function setValue(value){return setProperty(element,'outputCollection',value,commandStack,bpmnFactory);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'multiInstance-outputCollection',label:translate('Output collection'),getValue:getValue,setValue:setValue,debounce:debounce});}function OutputElement(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getProperty$1(element,'outputElement');};var setValue=function setValue(value){return setProperty(element,'outputElement',value,commandStack,bpmnFactory);};return FeelEntryWithVariableContext({element:element,id:'multiInstance-outputElement',label:translate('Output element'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}function CompletionCondition(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){var completionCondition=getCompletionCondition(element);return completionCondition&&completionCondition.get('body');};var setValue=function setValue(value){if(value&&value!==''){var loopCharacteristics=getLoopCharacteristics$1(element);var completionCondition=createElement('bpmn:FormalExpression',{body:value},loopCharacteristics,bpmnFactory);setCompletionCondition(element,commandStack,completionCondition);}else{setCompletionCondition(element,commandStack,undefined);}};return FeelEntryWithVariableContext({element:element,id:'multiInstance-completionCondition',label:translate('Completion condition'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function getLoopCharacteristics$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return businessObject.get('loopCharacteristics');}function getZeebeLoopCharacteristics(loopCharacteristics){var extensionElements=getExtensionElementsList(loopCharacteristics,'zeebe:LoopCharacteristics');return extensionElements&&extensionElements[0];}function supportsMultiInstances(element){return!!getLoopCharacteristics$1(element);}function getCompletionCondition(element){return getLoopCharacteristics$1(element).get('completionCondition');}function setCompletionCondition(element,commandStack){var completionCondition=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getLoopCharacteristics$1(element),properties:{completionCondition:completionCondition}});}function getProperty$1(element,propertyName){var loopCharacteristics=getLoopCharacteristics$1(element),zeebeLoopCharacteristics=getZeebeLoopCharacteristics(loopCharacteristics);return zeebeLoopCharacteristics&&zeebeLoopCharacteristics.get(propertyName);}function setProperty(element,propertyName,value,commandStack,bpmnFactory){var loopCharacteristics=getLoopCharacteristics$1(element);var commands=[];// (1) ensure extension elements
var extensionElements=loopCharacteristics.get('extensionElements');if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},loopCharacteristics,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:loopCharacteristics,properties:{extensionElements:extensionElements}}});}// (2) ensure zeebe loop characteristics
var zeebeLoopCharacteristics=getZeebeLoopCharacteristics(loopCharacteristics);if(!zeebeLoopCharacteristics){zeebeLoopCharacteristics=createElement('zeebe:LoopCharacteristics',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[zeebeLoopCharacteristics])}}});}// (3) update defined property
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:zeebeLoopCharacteristics,properties:_defineProperty({},propertyName,value)}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);}function getProcessId(element){var calledElement=getCalledElement(element);return calledElement?calledElement.get('processId'):'';}function getCalledElement(element){var calledElements=getCalledElements(element);return calledElements[0];}function getCalledElements(element){var bo=(0,_ModelUtil.getBusinessObject)(element);var extElements=getExtensionElementsList(bo,'zeebe:CalledElement');return extElements;}function OutputPropagationProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:CallActivity')){return[];}return[{id:'propagateAllChildVariables',component:PropagateAllChildVariables,isEdited:_propertiesPanel.isToggleSwitchEntryEdited}];}function PropagateAllChildVariables(props){var element=props.element;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate');var propagateAllChildVariables=isPropagateAllChildVariables(element);var getValue=function getValue(){return propagateAllChildVariables;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);// (1) ensure extension elements
var extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure zeebe:calledElement
var calledElement=getCalledElement(businessObject);if(!calledElement){calledElement=createElement('zeebe:CalledElement',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[calledElement])}}});}// (3) Update propagateAllChildVariables attribute
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:calledElement,properties:{propagateAllChildVariables:value}}});// (4) Execute the commands
commandStack.execute('properties-panel.multi-command-executor',commands);};return(0,_propertiesPanel.ToggleSwitchEntry)({id:'propagateAllChildVariables',label:translate('Propagate all child process variables'),switcherLabel:propagateAllChildVariables?translate('On'):translate('Off'),description:propagateAllChildVariables?translate('All variables from the child process instance will be propagated to the parent process instance'):translate('Only variables defined via output mappings will be propagated from the child to the parent process instance'),getValue:getValue,setValue:setValue});}// helper //////////////////////////
/**
  * Determine default value for propagateAllChildVariables attribute
  * @param {Object} element representing a bpmn:CallActivity
  *
  * @returns {boolean}
  */function determinePropAllChildVariablesDefault(element){var outputParameters=getOutputParameters$1(element);if(outputParameters){return outputParameters.length>0?false:true;}}/**
  * Check whether the propagateAllChildVariables attribute is set on an element.
  * Note that a default logic will be determine if it is not explicitly set.
  * @param {Object} element
  *
  * @returns {boolean}
  */function isPropagateAllChildVariables(element){if(!(0,_ModelUtil.is)(element,'bpmn:CallActivity')){return undefined;}var bo=(0,_ModelUtil.getBusinessObject)(element),calledElement=getCalledElement(bo);return calledElement&&(0,_minDash.has)(calledElement,'propagateAllChildVariables')?calledElement.get('propagateAllChildVariables'):determinePropAllChildVariablesDefault(element);}function OutputProps$1(_ref98){var element=_ref98.element,injector=_ref98.injector;if(!areOutputParametersSupported$1(element)){return null;}var outputParameters=getOutputParameters$1(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=outputParameters.map(function(parameter,index){var id=element.id+'-output-'+index;return{id:id,label:parameter.get('target')||'',entries:InputOutputParameter$1({idPrefix:id,element:element,parameter:parameter}),autoFocusEntry:id+'-target',remove:removeFactory$a({commandStack:commandStack,element:element,parameter:parameter})};});return{items:items,add:addFactory$7({element:element,bpmnFactory:bpmnFactory,commandStack:commandStack}),shouldSort:false};}function removeFactory$a(_ref99){var commandStack=_ref99.commandStack,element=_ref99.element,parameter=_ref99.parameter;return function(event){event.stopPropagation();var commands=[];var ioMapping=getIoMapping(element);if(!ioMapping){return;}var outputParameters=(0,_minDash.without)(ioMapping.get('outputParameters'),parameter);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:ioMapping,properties:{outputParameters:outputParameters}}});// remove ioMapping if there are no input/output parameters anymore
if(!ioMapping.get('inputParameters').length&&!outputParameters.length){var businessObject=(0,_ModelUtil.getBusinessObject)(element),extensionElements=businessObject.get('extensionElements'),_values=(0,_minDash.without)(extensionElements.get('values'),ioMapping);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:_values}}});}commandStack.execute('properties-panel.multi-command-executor',commands);};}function addFactory$7(_ref100){var element=_ref100.element,bpmnFactory=_ref100.bpmnFactory,commandStack=_ref100.commandStack;return function(event){event.stopPropagation();var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure IoMapping
var ioMapping=getIoMapping(element);if(!ioMapping){var parent=extensionElements;ioMapping=createIOMapping({inputParameters:[],outputParameters:[]},parent,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[ioMapping])}}});}// (3) create parameter
var newParameter=createElement('zeebe:Output',{source:'',target:nextId('OutputVariable_')},ioMapping,bpmnFactory);// (4) add parameter to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:ioMapping,properties:{outputParameters:[].concat(_toConsumableArray(ioMapping.get('outputParameters')),[newParameter])}}});commandStack.execute('properties-panel.multi-command-executor',commands);};}var SCRIPT_IMPLEMENTATION_OPTION='script',JOB_WORKER_IMPLEMENTATION_OPTION='jobWorker',DEFAULT_IMPLEMENTATION_OPTION='';function ScriptImplementationProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:ScriptTask')){return[];}return[{id:'scriptImplementation',component:ScriptImplementation,isEdited:function isEdited(){return isScriptImplementationEdited(element);}}];}function ScriptImplementation(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var getValue=function getValue(){if(getScript$1(element)){return SCRIPT_IMPLEMENTATION_OPTION;}if(getTaskDefinition$1(element)){return JOB_WORKER_IMPLEMENTATION_OPTION;}return DEFAULT_IMPLEMENTATION_OPTION;};/**
   * Set value by either creating a zeebe:script or a zeebe:taskDefintion
   * extension element. Note that they must not exist both at the same time, however
   * this will be ensured by a bpmn-js behavior (and not by the propPanel).
   */var setValue=function setValue(value){var extensionElement,extensionElementType;if(value===SCRIPT_IMPLEMENTATION_OPTION){extensionElement=getScript$1(element);extensionElementType='zeebe:Script';}else if(value===JOB_WORKER_IMPLEMENTATION_OPTION){extensionElement=getTaskDefinition$1(element);extensionElementType='zeebe:TaskDefinition';}else{resetElement(element,commandStack);}if(!extensionElement&&extensionElementType){extensionElement=createElement(extensionElementType,{},null,bpmnFactory);updateExtensionElements(element,extensionElement,bpmnFactory,commandStack);}};var getOptions=function getOptions(){var options=[{value:DEFAULT_IMPLEMENTATION_OPTION,label:translate('<none>')},{value:SCRIPT_IMPLEMENTATION_OPTION,label:translate('FEEL expression')},{value:JOB_WORKER_IMPLEMENTATION_OPTION,label:translate('Job worker')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:id,label:translate('Implementation'),getValue:getValue,setValue:setValue,getOptions:getOptions});}// helper ///////////////////////
function getTaskDefinition$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskDefinition')[0];}function getScript$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:Script')[0];}function getTaskHeaders(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskHeaders');}function isScriptImplementationEdited(element){return getTaskDefinition$1(element)||getScript$1(element);}function resetElement(element,commandStack){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var taskDefinition=getTaskDefinition$1(element);var taskHeaders=getTaskHeaders(element);var script=getScript$1(element);if(taskDefinition){var removed=[taskDefinition,taskHeaders].filter(Boolean);removeExtensionElements(element,businessObject,removed,commandStack);return;}if(script){removeExtensionElements(element,businessObject,script,commandStack);}}function updateExtensionElements(element,extensionElementToAdd,bpmnFactory,commandStack){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var commands=[];var extensionElements=businessObject.get('extensionElements');var extensionElementValues;// (1) create bpmn:ExtensionElements if it doesn't exist
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}extensionElementToAdd.$parent=extensionElements;// (2) remove old exension element from extensionElements
if((0,_ModelUtil.is)(extensionElementToAdd,'zeebe:TaskDefinition')){extensionElementValues=(0,_minDash.without)(extensionElements.get('values'),getScript$1(element));}else if((0,_ModelUtil.is)(extensionElementToAdd,'zeebe:Script')){var matcher=function matcher(extension){return(0,_ModelUtil.isAny)(extension,['zeebe:TaskDefinition','zeebe:TaskHeaders']);};extensionElementValues=(0,_minDash.without)(extensionElements.get('values'),matcher);}// (3) add extension element to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElementValues),[extensionElementToAdd])}}});commandStack.execute('properties-panel.multi-command-executor',commands);}function ScriptProps$1(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:ScriptTask')||!getScript(element)){return[];}return[{id:'resultVariable',component:ResultVariable$3,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'scriptExpression',component:Expression$3,isEdited:_propertiesPanel.isFeelEntryEdited}];}function Expression$3(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getScript(element)||{}).get('expression');};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure script
var script=getScript(element);if(!script){script=createElement('zeebe:Script',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[script])}}});}// (3) update script.expression
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:script,properties:{expression:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:id,label:translate('FEEL expression'),feel:'required',getValue:getValue,setValue:setValue,debounce:debounce});}function ResultVariable$3(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getScript(element)||{}).resultVariable;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure script
var script=getScript(element);if(!script){script=createElement('zeebe:Script',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[script])}}});}// (3) update script.resultVariable
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:script,properties:{resultVariable:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:id,label:translate('Result variable'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function getScript(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:Script')[0];}/**
 * @returns {Entry[]}
 */function SignalProps(props){var element=props.element;if(!isSignalSupported(element)){return[];}var signal=getSignal(element);var entries=[];if(signal){entries=[].concat(_toConsumableArray(entries),[{id:'signalName',component:SignalName,isEdited:_propertiesPanel.isFeelEntryEdited}]);}return entries;}function SignalName(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var signal=getSignal(element);var getValue=function getValue(){return signal.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:signal,properties:{name:value}});};return FeelEntryWithVariableContext({element:element,id:'signalName',label:translate('Name'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function TargetProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:CallActivity')){return[];}return[{id:'targetProcessId',component:TargetProcessId,isEdited:_propertiesPanel.isFeelEntryEdited}];}function TargetProcessId(props){var element=props.element,id=props.id;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate'),debounce=useService('debounceInput');var getValue=function getValue(){return getProcessId(element);};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);// (1) ensure extension elements
var extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure zeebe:calledElement
var calledElement=getCalledElement(businessObject);if(!calledElement){calledElement=createElement('zeebe:CalledElement',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[calledElement])}}});}// (3) Update processId attribute
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:calledElement,properties:{processId:value}}});// (4) Execute the commands
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:id,label:translate('Process ID'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function TaskDefinitionProps(props){var element=props.element;if(!isZeebeServiceTask(element)){return[];}return[{id:'taskDefinitionType',component:TaskDefinitionType,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'taskDefinitionRetries',component:TaskDefinitionRetries,isEdited:_propertiesPanel.isFeelEntryEdited}];}function TaskDefinitionType(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getTaskDefinition(element)||{}).type;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure task definition
var taskDefinition=getTaskDefinition(element);if(!taskDefinition){taskDefinition=createElement('zeebe:TaskDefinition',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[taskDefinition])}}});}// (3) update task definition type
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:taskDefinition,properties:{type:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:id,label:translate('Type'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function TaskDefinitionRetries(props){var element=props.element,id=props.id;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(getTaskDefinition(element)||{}).retries;};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure task definition
var taskDefinition=getTaskDefinition(element);if(!taskDefinition){taskDefinition=createElement('zeebe:TaskDefinition',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[taskDefinition])}}});}// (3) update task definition retries
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:taskDefinition,properties:{retries:value}}});commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:id,label:translate('Retries'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function getTaskDefinition(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskDefinition')[0];}function TaskScheduleProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:UserTask')){return[];}return[{id:'taskScheduleDueDate',component:DueDate$1,isEdited:_propertiesPanel.isFeelEntryEdited},{id:'taskScheduleFollowUpDate',component:FollowUpDate$1,isEdited:_propertiesPanel.isFeelEntryEdited}];}function DueDate$1(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){var taskSchedule=getTaskSchedule(element);if(!taskSchedule){return;}return taskSchedule.get('dueDate');};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure zeebe:TaskSchedule
var taskSchedule=getTaskSchedule(element);if(!taskSchedule){taskSchedule=createElement('zeebe:TaskSchedule',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[taskSchedule])}}});}// (3) update zeebe:dueDate
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:taskSchedule,properties:{dueDate:value}}});commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'taskScheduleDueDate',label:translate('Due date'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}function FollowUpDate$1(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){var taskSchedule=getTaskSchedule(element);if(!taskSchedule){return;}return taskSchedule.get('followUpDate');};var setValue=function setValue(value){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure zeebe:TaskSchedule
var taskSchedule=getTaskSchedule(element);if(!taskSchedule){taskSchedule=createElement('zeebe:TaskSchedule',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[taskSchedule])}}});}// (3) update zeebe:followUpDate
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:taskSchedule,properties:{followUpDate:value}}});commandStack.execute('properties-panel.multi-command-executor',commands);};return FeelEntryWithVariableContext({element:element,id:'taskScheduleFollowUpDate',label:translate('Follow up date'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function getTaskSchedule(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'zeebe:TaskSchedule')[0];}function TimerProps$1(props){var element=props.element,injector=props.injector;var translate=injector.get('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element),timerEventDefinition=getTimerEventDefinition(businessObject),timerEventDefinitionType=getTimerDefinitionType(timerEventDefinition);// (1) Only show for supported elements
if(!isTimerSupported(element)){return[];}var timerOptions=getTimerOptions(element,translate);var singleOption=timerOptions.length===1;var entries=[];if(!singleOption){entries.push({id:'timerEventDefinitionType',component:TimerEventDefinitionType$1,isEdited:_propertiesPanel.isSelectEntryEdited,options:timerOptions});}if(timerEventDefinitionType||singleOption){entries.push({id:'timerEventDefinitionValue',component:TimerEventDefinitionValue$1,isEdited:_propertiesPanel.isFeelEntryEdited,label:singleOption?timerOptions[0].label:undefined,timerEventDefinitionType:timerEventDefinitionType||timerOptions[0].value});}return entries;}function getTimerOptions(element,translate){var options=[];if(isTimerDefinitionTypeSupported('timeDate',element)){options.push({value:'timeDate',label:translate('Date')});}if(isTimerDefinitionTypeSupported('timeDuration',element)){options.push({value:'timeDuration',label:translate('Duration')});}if(isTimerDefinitionTypeSupported('timeCycle',element)){options.push({value:'timeCycle',label:translate('Cycle')});}return options;}/**
 * TimerEventDefinitionType - Generic select entry allowing to select a specific
 * timerEventDefintionType. To be used together with timerEventDefinitionValue.
 *
 * @param  {type} props
 * @return {SelectEntry}
 */function TimerEventDefinitionType$1(props){var element=props.element,options=props.options;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element),timerEventDefinition=getTimerEventDefinition(businessObject),timerEventDefinitionType=getTimerDefinitionType(timerEventDefinition);var getValue=function getValue(){return timerEventDefinitionType||'';};var setValue=function setValue(value){// (1) Check if value is different to current type
if(value===timerEventDefinitionType){return;}// (2) Create empty formalExpression element
var formalExpression=createTimerFormalExpression(bpmnFactory,timerEventDefinition);// (3) Set the value for selected timerEventDefinitionType
var newProps={timeDuration:undefined,timeDate:undefined,timeCycle:undefined};if(value!==''){newProps[value]=formalExpression;}// (4) Execute businessObject update
commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventDefinition,properties:newProps});};var getOptions=function getOptions(element){return[{value:'',label:translate('<none>')}].concat(_toConsumableArray(options));};return(0,_propertiesPanel.SelectEntry)({element:element,id:'timerEventDefinitionType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}/**
 * TimerEventDefinitionValue - Generic textField entry allowing to specify the
 * timerEventDefintionValue based on the set timerEventDefintionType. To be used
 * together with timerEventDefinitionType.
 *
 * @param {object} props
 * @param {ModdleElement} props.element
 * @param {'timeCycle'|'timeDate'|'timeDuration'} props.timerEventDefinitionType?
 * @param {string} props.label?
 * @return {TextFieldEntry}
 */function TimerEventDefinitionValue$1(props){var element=props.element,label=props.label,timerEventDefinitionType=props.timerEventDefinitionType;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput'),bpmnFactory=useService('bpmnFactory');var businessObject=(0,_ModelUtil.getBusinessObject)(element),timerEventDefinition=getTimerEventDefinition(businessObject),timerEventFormalExpression=timerEventDefinition.get(timerEventDefinitionType);// TODO(@barmac): remove with next major release
// support `timerEventDefinitionDurationValue` for backwards compatibility
var legacyId=getLegacyId(element);var getValue=function getValue(){return timerEventFormalExpression&&timerEventFormalExpression.get('body');};var setValue=function setValue(value){if(!timerEventFormalExpression){var expression=createTimerFormalExpression(bpmnFactory,timerEventDefinition);expression.set('body',value);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventDefinition,properties:_defineProperty({},timerEventDefinitionType,expression)});return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventFormalExpression,properties:{body:value}});};return FeelEntryWithVariableContext({element:element,id:legacyId||'timerEventDefinitionValue',label:label||translate('Value'),feel:'optional',getValue:getValue,setValue:setValue,debounce:debounce,description:getTimerEventDefinitionValueDescription$1(timerEventDefinitionType,translate)});}// helper //////////////////////////
/**
 * isTimerDefinitionTypeSupported - Checks whether a given timerDefinitionType
 * is supported for a given element
 *
 * @param  {string} timerDefinitionType
 * @param  {ModdleElement} element
 *
 * @return {boolean}
 */function isTimerDefinitionTypeSupported(timerDefinitionType,element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);switch(timerDefinitionType){case'timeDate':if((0,_ModelUtil.is)(element,'bpmn:StartEvent')){return true;}return false;case'timeCycle':if((0,_ModelUtil.is)(element,'bpmn:StartEvent')&&!isInterruptingStartEvent(businessObject)){return true;}if((0,_ModelUtil.is)(element,'bpmn:BoundaryEvent')&&!businessObject.cancelActivity){return true;}return false;case'timeDuration':if((0,_ModelUtil.is)(element,'bpmn:IntermediateCatchEvent')){return true;}if((0,_ModelUtil.is)(element,'bpmn:BoundaryEvent')){return true;}return false;default:return undefined;}}function createTimerFormalExpression(bpmnFactory,eventDefinition){var formalExpression=bpmnFactory.create('bpmn:FormalExpression',{body:undefined});formalExpression.$parent=eventDefinition;return formalExpression;}function getTimerEventDefinitionValueDescription$1(timerDefinitionType,translate){switch(timerDefinitionType){case'timeDate':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A specific point in time defined as ISO 8601 combined date and time representation.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"2019-10-01T12:00:00Z"})," - ",translate('UTC time')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"2019-10-02T08:09:40+02:00"})," - ",translate('UTC plus 2 hours zone offset')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/reference/bpmn-processes/timer-events/timer-events#time-date",target:"_blank",rel:"noopener",title:translate('Timer documentation'),children:translate('How to configure a timer')})]});case'timeCycle':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A cycle defined as ISO 8601 repeating intervals format, or a cron expression.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"R5/PT10S"})," - ",translate('every 10 seconds, up to 5 times')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"R/P1D"})," - ",translate('every day, infinitely')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"0 0 9-17 * * MON-FRI"})," - ",translate('every hour on the hour from 9-5 p.m. UTC Monday-Friday')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/reference/bpmn-processes/timer-events/timer-events#time-cycle",target:"_blank",rel:"noopener",title:translate('Timer documentation'),children:translate('How to configure a timer')})]});case'timeDuration':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A time duration defined as ISO 8601 durations format.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"PT15S"})," - ",translate('15 seconds')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"PT1H30M"})," - ",translate('1 hour and 30 minutes')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"P14D"})," - ",translate('14 days')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/reference/bpmn-processes/timer-events/timer-events#time-duration",target:"_blank",rel:"noopener",title:translate('Timer documentation'),children:translate('How to configure a timer')})]});}}function isInterruptingStartEvent(bo){return isInEventSubProcess$2(bo)&&bo.get('isInterrupting')!==false;}function isInEventSubProcess$2(bo){var parent=bo.$parent;return(0,_ModelUtil.is)(parent,'bpmn:SubProcess')&&parent.triggeredByEvent;}function getLegacyId(event){if((0,_ModelUtil.is)(event,'bpmn:IntermediateCatchEvent')||isInterruptingBoundaryEvent(event)){return'timerEventDefinitionDurationValue';}}function isInterruptingBoundaryEvent(event){var bo=(0,_ModelUtil.getBusinessObject)(event);return(0,_ModelUtil.is)(bo,'bpmn:BoundaryEvent')&&bo.get('cancelActivity')!==false;}function ExtensionProperty(props){var idPrefix=props.idPrefix,property=props.property;var entries=[{id:idPrefix+'-name',component:NameProperty$1,idPrefix:idPrefix,property:property},{id:idPrefix+'-value',component:ValueProperty$1,idPrefix:idPrefix,property:property}];return entries;}function NameProperty$1(props){var idPrefix=props.idPrefix,element=props.element,property=props.property;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:property,properties:{name:value}});};var getValue=function getValue(){return property.name;};return(0,_propertiesPanel.TextFieldEntry)({element:property,id:idPrefix+'-name',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}function ValueProperty$1(props){var idPrefix=props.idPrefix,element=props.element,property=props.property;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:property,properties:{value:value}});};var getValue=function getValue(){return property.value;};return(0,_propertiesPanel.TextFieldEntry)({element:property,id:idPrefix+'-value',label:translate('Value'),getValue:getValue,setValue:setValue,debounce:debounce});}function ExtensionPropertiesProps(_ref101){var element=_ref101.element,injector=_ref101.injector,_ref101$namespace=_ref101.namespace,namespace=_ref101$namespace===void 0?'camunda':_ref101$namespace;var businessObject=getRelevantBusinessObject(element);// do not offer for empty pools
if(!businessObject){return;}var properties=getPropertiesList(businessObject,namespace)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=properties.map(function(property,index){var id=element.id+'-extensionProperty-'+index;return{id:id,label:property.get('name')||'',entries:ExtensionProperty({idPrefix:id,element:element,property:property}),autoFocusEntry:id+'-name',remove:removeFactory$9({commandStack:commandStack,element:element,property:property,namespace:namespace})};});return{items:items,add:addFactory$6({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element,namespace:namespace}),shouldSort:false};}function removeFactory$9(_ref102){var commandStack=_ref102.commandStack,element=_ref102.element,property=_ref102.property,namespace=_ref102.namespace;return function(event){event.stopPropagation();var commands=[];var businessObject=getRelevantBusinessObject(element);var extensionElements=businessObject.get('extensionElements');var properties=getProperties(businessObject,namespace);if(!properties){return;}var propertyName=getPropertyName(namespace);var values=(0,_minDash.without)(properties.get(propertyName),property);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:properties,properties:_defineProperty({},propertyName,values)}});// remove camunda:Properties if there are no properties anymore
if(!values.length){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),properties)}}});}commandStack.execute('properties-panel.multi-command-executor',commands);};}function addFactory$6(_ref103){var bpmnFactory=_ref103.bpmnFactory,commandStack=_ref103.commandStack,element=_ref103.element,namespace=_ref103.namespace;return function(event){event.stopPropagation();var commands=[];var businessObject=getRelevantBusinessObject(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}var propertyName=getPropertyName(namespace);// (2) ensure camunda:Properties
var properties=getProperties(businessObject,namespace);if(!properties){var parent=extensionElements;properties=createElement("".concat(namespace,":Properties"),_defineProperty({},propertyName,[]),parent,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[properties])}}});}// (3) create camunda:Property
var property=createElement("".concat(namespace,":Property"),{},properties,bpmnFactory);// (4) add property to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:properties,properties:_defineProperty({},propertyName,[].concat(_toConsumableArray(properties.get(propertyName)),[property]))}});// (5) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};}// helper //////////////////
function getRelevantBusinessObject(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(element,'bpmn:Participant')){return businessObject.get('processRef');}return businessObject;}function getPropertyName(){var namespace=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'camunda';if(namespace==='zeebe'){return'properties';}return'values';}function getProperties(element){var namespace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'camunda';var businessObject=getRelevantBusinessObject(element);return getExtensionElementsList(businessObject,"".concat(namespace,":Properties"))[0];}function getPropertiesList(element){var namespace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'camunda';var businessObject=getRelevantBusinessObject(element);var properties=getProperties(businessObject,namespace);return properties&&properties.get(getPropertyName(namespace));}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */var LOW_PRIORITY$1=500;var ZEEBE_GROUPS=[BusinessRuleImplementationGroup,CalledDecisionGroup,ScriptImplementationGroup,ScriptGroup$1,TaskDefinitionGroup,AssignmentDefinitionGroup,FormGroup$1,ConditionGroup$1,TargetGroup,InputGroup$1,OutputPropagationGroup,OutputGroup$1,HeaderGroup,ExtensionPropertiesGroup$1];var ZeebePropertiesProvider$1=/*#__PURE__*/function(){function ZeebePropertiesProvider(propertiesPanel,injector){_classCallCheck(this,ZeebePropertiesProvider);propertiesPanel.registerProvider(LOW_PRIORITY$1,this);this._injector=injector;}_createClass(ZeebePropertiesProvider,[{key:"getGroups",value:function getGroups(element){var _this3=this;return function(groups){// (1) add zeebe specific groups
groups=groups.concat(_this3._getGroups(element));// (2) update existing groups with zeebe specific properties
updateErrorGroup$1(groups,element);updateEscalationGroup$1(groups,element);updateMessageGroup$1(groups,element);updateSignalGroup(groups,element);updateTimerGroup$1(groups,element,_this3._injector);updateMultiInstanceGroup$1(groups,element);// (3) remove message group when not applicable
groups=removeMessageGroup(groups,element);return groups;};}},{key:"_getGroups",value:function _getGroups(element){var _this4=this;var groups=ZEEBE_GROUPS.map(function(createGroup){return createGroup(element,_this4._injector);});return groups.filter(function(group){return group!==null;});}}]);return ZeebePropertiesProvider;}();ZeebePropertiesProvider$1.$inject=['propertiesPanel','injector'];function CalledDecisionGroup(element){var group={id:'calledDecision',label:'Called decision',entries:_toConsumableArray(CalledDecisionProps({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function ScriptGroup$1(element){var group={id:'script',label:'Script',entries:_toConsumableArray(ScriptProps$1({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function TaskDefinitionGroup(element){var group={id:'taskDefinition',label:'Task definition',entries:_toConsumableArray(TaskDefinitionProps({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function InputGroup$1(element,injector){var group=_objectSpread({id:'inputs',label:'Inputs',component:_propertiesPanel.ListGroup},InputProps$1({element:element,injector:injector}));return group.items?group:null;}function OutputGroup$1(element,injector){var group=_objectSpread({id:'outputs',label:'Outputs',component:_propertiesPanel.ListGroup},OutputProps$1({element:element,injector:injector}));return group.items?group:null;}function ConditionGroup$1(element){var group={id:'condition',label:'Condition',entries:_toConsumableArray(ConditionProps$1({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function FormGroup$1(element,injector){var group={id:'form',label:'Form',entries:_toConsumableArray(FormProps$1({element:element,injector:injector})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function TargetGroup(element){var group={id:'calledElement',label:'Called element',entries:_toConsumableArray(TargetProps({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function HeaderGroup(element,injector){var group=_objectSpread({id:'headers',label:'Headers',component:_propertiesPanel.ListGroup},HeaderProps({element:element,injector:injector}));return group.items?group:null;}function OutputPropagationGroup(element){var group={id:'outputPropagation',label:'Output propagation',entries:_toConsumableArray(OutputPropagationProps({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function BusinessRuleImplementationGroup(element){var group={id:'businessRuleImplementation',label:'Implementation',entries:_toConsumableArray(BusinessRuleImplementationProps({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function ScriptImplementationGroup(element){var group={id:'scriptImplementation',label:'Implementation',entries:_toConsumableArray(ScriptImplementationProps({element:element})),component:_propertiesPanel.Group};return group.entries.length?group:null;}function AssignmentDefinitionGroup(element){var group={id:'assignmentDefinition',label:'Assignment',entries:[].concat(_toConsumableArray(AssignmentDefinitionProps({element:element})),_toConsumableArray(TaskScheduleProps({element:element}))),component:_propertiesPanel.Group};return group.entries.length?group:null;}function ExtensionPropertiesGroup$1(element,injector){var group=_objectSpread({label:'Extension properties',id:'Zeebe__ExtensionProperties',component:_propertiesPanel.ListGroup},ExtensionPropertiesProps({element:element,injector:injector,namespace:'zeebe'}));if(group.items){return group;}return null;}function updateErrorGroup$1(groups,element){var errorGroup=findGroup$2(groups,'error');if(!errorGroup){return;}errorGroup.entries=replaceEntries(errorGroup.entries,ErrorProps$1({element:element}));}function updateEscalationGroup$1(groups,element){var escalationGroup=findGroup$2(groups,'escalation');if(!escalationGroup){return;}escalationGroup.entries=replaceEntries(escalationGroup.entries,EscalationProps$1({element:element}));}function updateSignalGroup(groups,element){var signalGroup=findGroup$2(groups,'signal');if(!signalGroup){return;}signalGroup.entries=replaceEntries(signalGroup.entries,SignalProps({element:element}));}function updateMessageGroup$1(groups,element){var messageGroup=findGroup$2(groups,'message');if(!messageGroup){return;}messageGroup.entries=replaceEntries(messageGroup.entries,MessageProps$1({element:element}));}// overwrite bpmn generic timerEventDefinition group with zeebe-specific one
function updateTimerGroup$1(groups,element,injector){var timerEventGroup=findGroup$2(groups,'timer');if(!timerEventGroup){return;}timerEventGroup.entries=_toConsumableArray(TimerProps$1({element:element,injector:injector}));}// overwrite bpmn generic multiInstance group with zeebe-specific one
function updateMultiInstanceGroup$1(groups,element){var multiInstanceGroup=findGroup$2(groups,'multiInstance');if(!multiInstanceGroup){return;}multiInstanceGroup.entries=_toConsumableArray(MultiInstanceProps$1({element:element}));}// remove message group from Message End Event & Message Throw Event
function removeMessageGroup(groups,element){var messageGroup=findGroup$2(groups,'message');if(isMessageEndEvent(element)||isMessageThrowEvent(element)){groups=groups.filter(function(g){return g!=messageGroup;});}return groups;}// helper /////////////////////
function findGroup$2(groups,id){return groups.find(function(g){return g.id===id;});}/**
 * Replace entries with the same ID.
 *s
 * @param {Entry[]} oldEntries
 * @param {Entry[]} newEntries
 *
 * @returns {Entry[]} combined entries
 */function replaceEntries(oldEntries,newEntries){var filteredEntries=oldEntries.filter(function(oldEntry){return!newEntries.find(function(newEntry){return newEntry.id===oldEntry.id;});});return[].concat(_toConsumableArray(filteredEntries),_toConsumableArray(newEntries));}var zeebePropertiesProviderModule={__init__:['zeebePropertiesProvider'],zeebePropertiesProvider:['type',ZeebePropertiesProvider$1]};exports.ZeebePropertiesProviderModule=zeebePropertiesProviderModule;function AsynchronousContinuationsProps(props){var element=props.element;var checkboxIsEditedInverted=function checkboxIsEditedInverted(node){return node&&!node.checked;};var businessObject=(0,_ModelUtil.getBusinessObject)(element);var entries=[];if((0,_ModelUtil.is)(element,'camunda:AsyncCapable')){entries.push({id:'asynchronousContinuationBefore',component:AsynchronousContinuationBefore,isEdited:_propertiesPanel.isCheckboxEntryEdited},{id:'asynchronousContinuationAfter',component:AsynchronousContinuationAfter,isEdited:_propertiesPanel.isCheckboxEntryEdited});if(isAsyncBefore$2(businessObject)||isAsyncAfter$2(businessObject)){entries.push({id:'exclusive',component:Exclusive,isEdited:checkboxIsEditedInverted});}}return entries;}function AsynchronousContinuationBefore(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return isAsyncBefore$2(businessObject);};var setValue=function setValue(value){// overwrite the legacy `async` property, we will use the more explicit `asyncBefore`
var props={'camunda:asyncBefore':value,'camunda:async':undefined};commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:props});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'asynchronousContinuationBefore',label:translate('Before'),getValue:getValue,setValue:setValue});}function AsynchronousContinuationAfter(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return isAsyncAfter$2(businessObject);};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:asyncAfter':value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'asynchronousContinuationAfter',label:translate('After'),getValue:getValue,setValue:setValue});}function Exclusive(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return isExclusive$1(businessObject);};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:exclusive':value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'exclusive',label:translate('Exclusive'),getValue:getValue,setValue:setValue});}// helper //////////////////
/**
 * Returns true if the attribute 'camunda:asyncBefore' is set
 * to true.
 *
 * @param  {ModdleElement} bo
 *
 * @return {boolean} a boolean value
 */function isAsyncBefore$2(bo){return!!(bo.get('camunda:asyncBefore')||bo.get('camunda:async'));}/**
 * Returns true if the attribute 'camunda:asyncAfter' is set
 * to true.
 *
 * @param  {ModdleElement} bo
 *
 * @return {boolean} a boolean value
 */function isAsyncAfter$2(bo){return!!bo.get('camunda:asyncAfter');}/**
 * Returns true if the attribute 'camunda:exclusive' is set
 * to true.
 *
 * @param  {ModdleElement} bo
 *
 * @return {boolean} a boolean value
 */function isExclusive$1(bo){return!!bo.get('camunda:exclusive');}var EMPTY_OPTION$2='';function BusinessKeyProps$1(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:StartEvent')||!hasFormFields(element)){return[];}return[{id:'businessKey',component:BusinessKey$1,isEdited:_propertiesPanel.isSelectEntryEdited}];}function BusinessKey$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var formData=getFormData$2(element);var getValue=function getValue(){return formData.get('camunda:businessKey')||'';};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formData,properties:{'camunda:businessKey':value}});};var getOptions=function getOptions(){var options=[{value:EMPTY_OPTION$2,label:translate('<none>')}];var fields=formData.get('fields');fields.forEach(function(field){var id=field.get('camunda:id');if(id){options.push({value:id,label:id});}});return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:'businessKey',label:translate('Key'),getValue:getValue,setValue:setValue,getOptions:getOptions});}// helper ///////////////////
function getFormData$2(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'camunda:FormData')[0];}function hasFormFields(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var formData=getFormData$2(businessObject);return formData&&formData.get('camunda:fields').length;}function CalledBpmnProps(props){var element=props.element;var entries=[{id:'calledElement',component:CalledElement,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'calledElementBinding',component:CalledElementBinding,isEdited:_propertiesPanel.isSelectEntryEdited},{id:'calledElementTenantId',component:CalledElementTenantId,isEdited:_propertiesPanel.isTextFieldEntryEdited}];var binding=(0,_ModelUtil.getBusinessObject)(element).get('camunda:calledElementBinding');if(binding==='version'){entries.splice(-1,0,{id:'calledElementVersion',component:CalledElementVersion,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(binding==='versionTag'){entries.splice(-1,0,{id:'calledElementVersionTag',component:CalledElementVersionTag,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function CalledElement(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('calledElement');};var setValue=function setValue(value){modeling.updateProperties(element,{calledElement:value||''});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElement",label:translate('Called element'),getValue:getValue,setValue:setValue,debounce:debounce});}function CalledElementBinding(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:calledElementBinding')||'latest';};var setValue=function setValue(value){modeling.updateProperties(element,{calledElementBinding:value==='latest'?undefined:value,calledElementVersion:undefined,calledElementVersionTag:undefined});};var getOptions=function getOptions(){return[{value:'latest',label:translate('latest')},{value:'deployment',label:translate('deployment')},{value:'version',label:translate('version')},{value:'versionTag',label:translate('version tag')}];};return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{element:element,id:"calledElementBinding",label:translate('Binding'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function CalledElementVersion(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:calledElementVersion');};var setValue=function setValue(value){modeling.updateProperties(element,{calledElementVersion:value});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementVersion",label:translate('Version'),getValue:getValue,setValue:setValue,debounce:debounce});}function CalledElementVersionTag(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:calledElementVersionTag');};var setValue=function setValue(value){modeling.updateProperties(element,{calledElementVersionTag:value});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementVersionTag",label:translate('Version tag'),getValue:getValue,setValue:setValue,debounce:debounce});}function CalledElementTenantId(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:calledElementTenantId');};var setValue=function setValue(value){modeling.updateProperties(element,{calledElementTenantId:value});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementTenantId",label:translate('Tenant ID'),getValue:getValue,setValue:setValue,debounce:debounce});}function CalledCmmnProps(props){var element=props.element;var entries=[{id:'calledElementCaseRef',component:CaseRef,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'calledElementCaseBinding',component:CaseBinding,isEdited:_propertiesPanel.isSelectEntryEdited},{id:'calledElementCaseTenantId',component:CaseTenantId,isEdited:_propertiesPanel.isTextFieldEntryEdited}];if((0,_ModelUtil.getBusinessObject)(element).get('camunda:caseBinding')==='version'){entries.splice(-1,0,{id:'calledElementCaseVersion',component:CaseVersion,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function CaseRef(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:caseRef');};var setValue=function setValue(value){modeling.updateProperties(element,{caseRef:value||''});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementCaseRef",label:translate('Case ref'),getValue:getValue,setValue:setValue,debounce:debounce});}function CaseBinding(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:caseBinding')||'latest';};var setValue=function setValue(value){modeling.updateProperties(element,{caseBinding:value==='latest'?undefined:value,caseVersion:undefined});};var getOptions=function getOptions(){return[{value:'latest',label:translate('latest')},{value:'deployment',label:translate('deployment')},{value:'version',label:translate('version')}];};return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{element:element,id:"calledElementCaseBinding",label:translate('Binding'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function CaseVersion(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:caseVersion');};var setValue=function setValue(value){modeling.updateProperties(element,{caseVersion:value});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementCaseVersion",label:translate('Version'),getValue:getValue,setValue:setValue,debounce:debounce});}function CaseTenantId(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:caseTenantId');};var setValue=function setValue(value){modeling.updateProperties(element,{caseTenantId:value});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementCaseTenantId",label:translate('Tenant ID'),getValue:getValue,setValue:setValue,debounce:debounce});}function DelegateVariableMappingProps(props){var element=props.element;var entries=[{id:'calledElementDelegateVariableMappingType',component:DelegateVariableMappingType,isEdited:_propertiesPanel.isSelectEntryEdited}];var type=getDelegateVariableMappingType(element);if(type==='class'){entries.push({id:'calledElementVariableMappingClass',component:VariableMappingClass,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(type==='delegateExpression'){entries.push({id:'calledElementVariableMappingDelegateExpression',component:VariableMappingDelegateExpression,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}var DEFAULT_PROPS$5={'camunda:variableMappingClass':undefined,'camunda:variableMappingDelegateExpression':undefined};function DelegateVariableMappingType(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getDelegateVariableMappingType(element);};var setValue=function setValue(value){var properties=_objectSpread({},DEFAULT_PROPS$5);if(value==='class'){properties['camunda:variableMappingClass']='';}else if(value==='delegateExpression'){properties['camunda:variableMappingDelegateExpression']='';}commandStack.execute('element.updateProperties',{element:element,properties:properties});};var getOptions=function getOptions(){return[{value:'none',label:translate('<none>')},{value:'class',label:translate('Class')},{value:'delegateExpression',label:translate('Delegate expression')}];};return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{element:element,id:"calledElementDelegateVariableMappingType",label:translate('Delegate Variable Mapping'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function VariableMappingDelegateExpression(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:variableMappingDelegateExpression');};var setValue=function setValue(value){modeling.updateProperties(element,{variableMappingDelegateExpression:value||'',variableMappingClass:undefined});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementVariableMappingDelegateExpression",label:translate('Delegate Expression'),getValue:getValue,setValue:setValue,debounce:debounce});}function VariableMappingClass(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return(0,_ModelUtil.getBusinessObject)(element).get('camunda:variableMappingClass');};var setValue=function setValue(value){modeling.updateProperties(element,{variableMappingDelegateExpression:undefined,variableMappingClass:value||''});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementVariableMappingClass",label:translate('Delegate Class'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper /////
function getDelegateVariableMappingType(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(businessObject.get('camunda:variableMappingClass')!==undefined){return'class';}else if(businessObject.get('camunda:variableMappingDelegateExpression')!==undefined){return'delegateExpression';}return'none';}function CallActivityProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:CallActivity')){return[];}var entries=[];entries.push({id:'calledElementType',component:CalledElementType,isEdited:_propertiesPanel.isSelectEntryEdited});var calledElementType=getCalledElementType(element);if(calledElementType==='bpmn'){entries.push.apply(entries,_toConsumableArray(CalledBpmnProps({element:element})).concat(_toConsumableArray(BusinessKeyProps({element:element})),_toConsumableArray(DelegateVariableMappingProps({element:element}))));}else if(calledElementType==='cmmn'){entries.push.apply(entries,_toConsumableArray(CalledCmmnProps({element:element})).concat(_toConsumableArray(BusinessKeyProps({element:element}))));}else{entries.push.apply(entries,_toConsumableArray(BusinessKeyProps({element:element})));}return entries;}var DEFAULT_PROPS$4={calledElement:undefined,'camunda:calledElementBinding':undefined,'camunda:calledElementVersion':undefined,'camunda:calledElementTenantId':undefined,'camunda:variableMappingClass':undefined,'camunda:variableMappingDelegateExpression':undefined,'camunda:caseRef':undefined,'camunda:caseBinding':undefined,'camunda:caseVersion':undefined,'camunda:caseTenantId':undefined};var DEFAULT_BUSINESS_KEY='#{execution.processBusinessKey}';function CalledElementType(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getCalledElementType(element);};var setValue=function setValue(value){var properties=_objectSpread({},DEFAULT_PROPS$4);if(value==='bpmn'){properties['calledElement']='';}else if(value==='cmmn'){properties['camunda:caseRef']='';}commandStack.execute('element.updateProperties',{element:element,properties:properties});};var getOptions=function getOptions(){return[{value:'',label:translate('<none>')},{value:'bpmn',label:translate('BPMN')},{value:'cmmn',label:translate('CMMN')}];};return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{element:element,id:"calledElementType",label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function BusinessKeyProps(props){var element=props.element;var entries=[{id:'calledElementBusinessKey',component:BusinessKey,isEdited:_propertiesPanel.isCheckboxEntryEdited}];if(hasBusinessKey(element)){entries.push({id:'calledElementBusinessKeyExpression',component:BusinessKeyExpression,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function BusinessKey(props){var element=props.element;var commandStack=useService('commandStack');var modeling=useService('modeling');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var getValue=function getValue(){return hasBusinessKey(element);};var setValue=function setValue(value){if(value){addBusinessKey();}else{removeBusinessKey();}};function addBusinessKey(){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) If there are no extension elements, create camunda:In and update element's properties
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{},businessObject,bpmnFactory);var businessKeyItem=createBusinessKey(extensionElements);extensionElements.set('values',[businessKeyItem]);modeling.updateProperties(element,{extensionElements:extensionElements});}else{// (2) Otherwise, add camunda:In to the existing values
var _businessKeyItem=createBusinessKey(extensionElements);addExtensionElements(element,businessObject,_businessKeyItem,bpmnFactory,commandStack);}}function createBusinessKey(parent){return createElement('camunda:In',{businessKey:DEFAULT_BUSINESS_KEY},parent,bpmnFactory);}function removeBusinessKey(){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var camundaInList=getExtensionElementsList(businessObject,'camunda:In');var businessKeyItems=camundaInList.filter(function(camundaIn){return camundaIn.get('businessKey')!==undefined;});removeExtensionElements(element,businessObject,businessKeyItems,commandStack);}return(0,_jsxRuntime.jsx)(_propertiesPanel.CheckboxEntry,{element:element,id:"calledElementBusinessKey",label:translate('Business key'),getValue:getValue,setValue:setValue});}function BusinessKeyExpression(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getBusinessKey(element);};var setValue=function setValue(value){var camundaIn=findCamundaInWithBusinessKey(element);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:camundaIn,properties:{businessKey:value||''}});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"calledElementBusinessKeyExpression",label:translate('Business key expression'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////
function getCalledElementType(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(businessObject.get('calledElement')!==undefined){return'bpmn';}else if(businessObject.get('camunda:caseRef')!==undefined){return'cmmn';}return'';}function hasBusinessKey(element){return getBusinessKey(element)!==undefined;}function getBusinessKey(element){var camundaIn=findCamundaInWithBusinessKey(element);if(camundaIn){return camundaIn.get('businessKey');}}function findCamundaInWithBusinessKey(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var camundaInList=getExtensionElementsList(businessObject,'camunda:In');var _iterator=_createForOfIteratorHelper(camundaInList),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var camundaIn=_step.value;var businessKey=camundaIn.get('businessKey');if(businessKey!==undefined){return camundaIn;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}function CandidateStarterProps(props){var element=props.element;var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(!(0,_ModelUtil.is)(element,'bpmn:Process')&&!((0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef'))){return[];}return[{id:'candidateStarterGroups',component:CandidateStarterGroups,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'candidateStarterUsers',component:CandidateStarterUsers,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function CandidateStarterGroups(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var process=getProcess$3(element);var getValue=function getValue(){return process.get('camunda:candidateStarterGroups')||'';};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{'camunda:candidateStarterGroups':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'candidateStarterGroups',label:translate('Candidate starter groups'),description:translate('Specify more than one group as a comma separated list.'),getValue:getValue,setValue:setValue,debounce:debounce});}function CandidateStarterUsers(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var process=getProcess$3(element);var getValue=function getValue(){return process.get('camunda:candidateStarterUsers')||'';};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{'camunda:candidateStarterUsers':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'candidateStarterUsers',label:translate('Candidate starter users'),description:translate('Specify more than one user as a comma separated list.'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////
/**
 * getProcess - get the businessObject of the process referred to by a bpmn:Process
 * or by a bpmn:Participant
 *
 * @param  {ModdleElement} element either a bpmn:Process or a bpmn:Participant
 * @return {BusinessObject}
 */function getProcess$3(element){return(0,_ModelUtil.is)(element,'bpmn:Process')?(0,_ModelUtil.getBusinessObject)(element):(0,_ModelUtil.getBusinessObject)(element).get('processRef');}function ConditionProps(props){var element=props.element;if(!((0,_ModelUtil.is)(element,'bpmn:SequenceFlow')&&isConditionalSource(element.source))&&!getConditionalEventDefinition(element)){return[];}var entries=[];if(getConditionalEventDefinition(element)){entries.push.apply(entries,_toConsumableArray(VariableEventProps({element:element})));}entries.push({id:'conditionType',component:ConditionType,isEdited:_propertiesPanel.isSelectEntryEdited});var conditionType=getConditionType(element);if(conditionType==='script'){entries.push.apply(entries,_toConsumableArray(ConditionScriptProps({element:element})));}else if(conditionType==='expression'){entries.push({id:'conditionExpression',component:ConditionExpression,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function ConditionType(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var getValue=function getValue(){return getConditionType(element);};var setValue=function setValue(value){// (1) Remove formalExpression if <none> is selected
if(value===''){updateCondition(element,commandStack,undefined);}else{// (2) Create and set formalExpression element containing the conditionExpression
var attributes={body:'',language:value==='script'?'':undefined};var formalExpressionElement=createFormalExpression(element,attributes,bpmnFactory);updateCondition(element,commandStack,formalExpressionElement);}};var getOptions=function getOptions(){return[{value:'',label:translate('<none>')},{value:'script',label:translate('Script')},{value:'expression',label:translate('Expression')}];};return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{element:element,id:"conditionType",label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function ConditionExpression(props){var element=props.element;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate'),debounce=useService('debounceInput');var getValue=function getValue(){return getConditionExpression(element).get('body');};var setValue=function setValue(value){var conditionExpression=createFormalExpression(element,{body:value},bpmnFactory);updateCondition(element,commandStack,conditionExpression);};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"conditionExpression",label:translate('Condition Expression'),getValue:getValue,setValue:setValue,debounce:debounce});}function ConditionScriptProps(props){var element=props.element;var entries=[];var scriptType=getScriptType$1(element);// (1) language
entries.push({id:'conditionScriptLanguage',component:Language,isEdited:_propertiesPanel.isTextFieldEntryEdited});// (2) type
entries.push({id:'conditionScriptType',component:ScriptType,isEdited:_propertiesPanel.isSelectEntryEdited});// (3) script
if(scriptType==='script'){entries.push({id:'conditionScriptValue',component:Script$1,isEdited:_propertiesPanel.isTextAreaEntryEdited});}else if(scriptType==='resource'){// (4) resource
entries.push({id:'conditionScriptResource',component:Resource$1,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function Language(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getConditionExpression(element).get('language');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionExpression(element),properties:{language:value||''}});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"conditionScriptLanguage",label:translate('Format'),getValue:getValue,setValue:setValue,debounce:debounce});}function ScriptType(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getScriptType$1(element);};var setValue=function setValue(value){// reset script properties on type change
var updatedProperties={'body':value==='script'?'':undefined,'camunda:resource':value==='resource'?'':undefined};commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionExpression(element),properties:updatedProperties});};var getOptions=function getOptions(){var options=[{value:'resource',label:translate('External resource')},{value:'script',label:translate('Inline script')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:'conditionScriptType',label:translate('Script type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function Script$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getConditionExpression(element).get('body');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionExpression(element),properties:{'body':value||''}});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextAreaEntry,{element:element,id:"conditionScriptValue",label:translate('Script'),getValue:getValue,setValue:setValue,debounce:debounce,monospace:true});}function Resource$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getConditionExpression(element).get('camunda:resource');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionExpression(element),properties:{'camunda:resource':value||''}});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:true,id:"conditionScriptResource",label:translate('Resource'),getValue:getValue,setValue:setValue,debounce:debounce});}function VariableEventProps(props){var element=props.element;var entries=[];entries.push({id:'conditionVariableName',component:VariableName,isEdited:_propertiesPanel.isTextFieldEntryEdited});if(!(0,_ModelUtil.is)(element,'bpmn:StartEvent')||isInEventSubProcess$1(element)){entries.push({id:'conditionVariableEvents',component:VariableEvents,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function VariableName(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getConditionalEventDefinition(element).get('variableName');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionalEventDefinition(element),properties:{variableName:value||''}});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"conditionVariableName",label:translate('Variable name'),getValue:getValue,setValue:setValue,debounce:debounce});}function VariableEvents(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return getConditionalEventDefinition(element).get('variableEvents');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionalEventDefinition(element),properties:{variableEvents:value||''}});};return(0,_jsxRuntime.jsx)(_propertiesPanel.TextFieldEntry,{element:element,id:"conditionVariableEvents",label:translate('Variable events'),description:translate('Specify more than one variable change event as a comma separated list.'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ////////////////////
var CONDITIONAL_SOURCES=['bpmn:Activity','bpmn:ExclusiveGateway','bpmn:InclusiveGateway','bpmn:ComplexGateway'];function isConditionalSource(element){return(0,_ModelingUtil.isAny)(element,CONDITIONAL_SOURCES);}function getConditionalEventDefinition(element){if(!(0,_ModelUtil.is)(element,'bpmn:Event')){return false;}return getEventDefinition$1(element,'bpmn:ConditionalEventDefinition');}function getConditionType(element){var conditionExpression=getConditionExpression(element);if(!conditionExpression){return'';}else{return conditionExpression.get('language')===undefined?'expression':'script';}}/**
 * getConditionExpression - get the body value of a condition expression for a given element
 *
 * @param  {ModdleElement} element
 *
 * @return {string|undefined}
 */function getConditionExpression(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(businessObject,'bpmn:SequenceFlow')){return businessObject.get('conditionExpression');}else if(getConditionalEventDefinition(businessObject)){return getConditionalEventDefinition(businessObject).get('condition');}}function getScriptType$1(element){var conditionExpression=getConditionExpression(element);var resource=conditionExpression.get('camunda:resource');if(typeof resource!=='undefined'){return'resource';}else{return'script';}}function updateCondition(element,commandStack){var condition=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;if((0,_ModelUtil.is)(element,'bpmn:SequenceFlow')){commandStack.execute('element.updateProperties',{element:element,properties:{conditionExpression:condition}});}else{commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:getConditionalEventDefinition(element),properties:{condition:condition}});}}function createFormalExpression(parent,attributes,bpmnFactory){return createElement('bpmn:FormalExpression',attributes,(0,_ModelUtil.is)(parent,'bpmn:SequenceFlow')?(0,_ModelUtil.getBusinessObject)(parent):getConditionalEventDefinition(parent),bpmnFactory);}function isInEventSubProcess$1(element){var bo=(0,_ModelUtil.getBusinessObject)(element),parent=bo.$parent;return(0,_ModelUtil.is)(parent,'bpmn:SubProcess')&&parent.triggeredByEvent;}/**
 * Cf. https://docs.camunda.org/manual/latest/user-guide/process-engine/scripting/
 */function ScriptProps(props){var element=props.element,script=props.script,prefix=props.prefix;var entries=[];var scriptType=getScriptType(script||element);var idPrefix=prefix||'';// (1) scriptFormat
entries.push({id:idPrefix+'scriptFormat',component:Format,isEdited:_propertiesPanel.isTextFieldEntryEdited,idPrefix:idPrefix,script:script});// (2) type
entries.push({id:idPrefix+'scriptType',component:Type$3,isEdited:_propertiesPanel.isSelectEntryEdited,idPrefix:idPrefix,script:script});// (3) script
if(scriptType==='script'){entries.push({id:idPrefix+'scriptValue',component:Script,isEdited:_propertiesPanel.isTextAreaEntryEdited,idPrefix:idPrefix,script:script});}// (4) resource
if(scriptType==='resource'){entries.push({id:idPrefix+'scriptResource',component:Resource,isEdited:_propertiesPanel.isTextFieldEntryEdited,idPrefix:idPrefix,script:script});}return entries;}function Format(props){var element=props.element,idPrefix=props.idPrefix,script=props.script;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=script||(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('scriptFormat');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{scriptFormat:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:idPrefix+'scriptFormat',label:translate('Format'),getValue:getValue,setValue:setValue,debounce:debounce});}function Type$3(props){var element=props.element,idPrefix=props.idPrefix,script=props.script;var commandStack=useService('commandStack');var translate=useService('translate');var businessObject=script||(0,_ModelUtil.getBusinessObject)(element);var scriptProperty=getScriptProperty(businessObject);var getValue=function getValue(){return getScriptType(businessObject);};var setValue=function setValue(value){var _properties5;// reset script properties on type change
var properties=(_properties5={},_defineProperty(_properties5,scriptProperty,value==='script'?'':undefined),_defineProperty(_properties5,'camunda:resource',value==='resource'?'':undefined),_properties5);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:properties});};var getOptions=function getOptions(){var options=[{value:'',label:translate('<none>')},{value:'resource',label:translate('External resource')},{value:'script',label:translate('Inline script')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:idPrefix+'scriptType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function Script(props){var element=props.element,idPrefix=props.idPrefix,script=props.script;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=script||(0,_ModelUtil.getBusinessObject)(element);var scriptProperty=getScriptProperty(businessObject);var getValue=function getValue(){return getScriptValue(businessObject);};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:_defineProperty({},scriptProperty,value||'')});};return(0,_propertiesPanel.TextAreaEntry)({element:element,id:idPrefix+'scriptValue',label:translate('Script'),getValue:getValue,setValue:setValue,debounce:debounce,monospace:true});}function Resource(props){var element=props.element,idPrefix=props.idPrefix,script=props.script;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=script||(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:resource');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:resource':value||''}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:idPrefix+'scriptResource',label:translate('Resource'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ////////////////////
function getScriptType(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var scriptValue=getScriptValue(businessObject);if(typeof scriptValue!=='undefined'){return'script';}var resource=businessObject.get('camunda:resource');if(typeof resource!=='undefined'){return'resource';}}function getScriptValue(businessObject){return businessObject.get(getScriptProperty(businessObject));}function isScript$2(element){return(0,_ModelUtil.is)(element,'camunda:Script');}function getScriptProperty(businessObject){return isScript$2(businessObject)?'value':'script';}function getElements(businessObject,type,property){var elements=getExtensionElementsList(businessObject,type);return!property?elements:(elements[0]||{})[property]||[];}function getParameters(element,prop){var inputOutput=getInputOutput(element);return inputOutput&&inputOutput.get(prop)||[];}/**
 * Get a camunda:inputOutput from the business object
 *
 * @param {djs.model.Base | ModdleElement} element
 *
 * @return {ModdleElement} the inputOutput object
 */function getInputOutput(element){if((0,_ModelUtil.is)(element,'camunda:Connector')){return element.get('inputOutput');}var businessObject=(0,_ModelUtil.getBusinessObject)(element);return(getElements(businessObject,'camunda:InputOutput')||[])[0];}/**
 * Return all input parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {djs.model.Base} element
 *
 * @return {Array} a list of input parameter objects
 */function getInputParameters(element){return getParameters(element,'inputParameters');}/**
 * Return all output parameters existing in the business object, and
 * an empty array if none exist.
 *
 * @param  {djs.model.Base} element
 *
 * @return {Array} a list of output parameter objects
 */function getOutputParameters(element){return getParameters(element,'outputParameters');}function isInputOutputSupported(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return(0,_ModelUtil.is)(businessObject,'bpmn:FlowNode')&&!((0,_ModelingUtil.isAny)(businessObject,['bpmn:StartEvent','bpmn:BoundaryEvent','bpmn:Gateway'])||(0,_ModelUtil.is)(businessObject,'bpmn:SubProcess')&&businessObject.get('triggeredByEvent'));}function areInputParametersSupported(element){return isInputOutputSupported(element);}function areOutputParametersSupported(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return isInputOutputSupported(element)&&!(0,_ModelUtil.is)(businessObject,'bpmn:EndEvent')&&!businessObject.loopCharacteristics;}function getInputOutputType(parameter){var definitionTypes={'camunda:Map':'map','camunda:List':'list','camunda:Script':'script'};var type='stringOrExpression';var definition=parameter.get('definition');if(typeof definition!=='undefined'){type=definitionTypes[definition.$type];}return type;}function CreateParameterCmd(element,type,parent,bpmnFactory){var isInput=type==='camunda:InputParameter';var newParameter=createElement(type,{name:nextId(isInput?'Input_':'Output_')},parent,bpmnFactory);var propertyName=isInput?'inputParameters':'outputParameters';return{cmd:'element.updateModdleProperties',context:{element:element,moddleElement:parent,properties:_defineProperty({},propertyName,[].concat(_toConsumableArray(parent.get(propertyName)),[newParameter]))}};}function AddParameterCmd(element,type,bpmnFactory){var commands=[];var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure inputOutput
var inputOutput=getInputOutput(element);if(!inputOutput){var parent=extensionElements;inputOutput=createElement('camunda:InputOutput',{inputParameters:[],outputParameters:[]},parent,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[inputOutput])}}});}// (3) create + add parameter
commands.push(CreateParameterCmd(element,type,inputOutput,bpmnFactory));return commands;}function ListProp(props){var element=props.element,idPrefix=props.id,index=props.index,item=props.item;var id="".concat(idPrefix,"-listItem-").concat(index);return(0,_jsxRuntime.jsx)(ListItem,{idPrefix:id,element:element,item:item});}function ListProps(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var list=parameter.get('definition');var items=list.get('items');function addItem(){var value=createElement('camunda:Value',{},parameter,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:list,properties:{items:[].concat(_toConsumableArray(list.get('items')),[value])}});}function removeItem(item){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:list,properties:{items:(0,_minDash.without)(list.get('items'),item)}});}function compareFn(item,anotherItem){var _ref104=[item.value,anotherItem.value],_ref104$=_ref104[0],value=_ref104$===void 0?'':_ref104$,_ref104$2=_ref104[1],anotherValue=_ref104$2===void 0?'':_ref104$2;return value===anotherValue?0:value>anotherValue?1:-1;}return(0,_propertiesPanel.ListEntry)({element:element,autoFocusEntry:true,compareFn:compareFn,id:idPrefix+'-list',items:items,label:translate('List values'),onAdd:addItem,onRemove:removeItem,component:ListProp});}function ListItem(props){var idPrefix=props.idPrefix,element=props.element,item=props.item;var commandStack=useService('commandStack');var translate=useService('translate');var definitionLabels={'camunda:Map':translate('Map'),'camunda:List':translate('List'),'camunda:Script':translate('Script')};var getValue=function getValue(){if(isDefinitionType$1(item)){return definitionLabels[item.$type];}return item.get('value');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:item,properties:{value:value}});};return ListValue({id:idPrefix+'-value',disabled:isDefinitionType$1(item),getValue:getValue,setValue:setValue});}function ListValue(props){var id=props.id,disabled=props.disabled,getValue=props.getValue,setValue=props.setValue;var debounce=useService('debounceInput',true);return(0,_jsxRuntime.jsx)(_propertiesPanel.SimpleEntry,{id:id,getValue:getValue,setValue:setValue,disabled:disabled,debounce:debounce});}// helper //////////////////////
function isScript$1(element){return(0,_ModelUtil.is)(element,'camunda:Script');}function isList$1(element){return(0,_ModelUtil.is)(element,'camunda:List');}function isMap$1(element){return(0,_ModelUtil.is)(element,'camunda:Map');}function isDefinitionType$1(element){return isScript$1(element)||isList$1(element)||isMap$1(element);}function MapProp(props){var element=props.element,idPrefix=props.id,index=props.index,entry=props.item,open=props.open;var id="".concat(idPrefix,"-mapEntry-").concat(index);var translate=useService('translate');return(0,_jsxRuntime.jsx)(_propertiesPanel.CollapsibleEntry,{id:id,element:element,entries:MapEntry({element:element,entry:entry,idPrefix:id}),label:entry.get('key')||translate('<empty>'),open:open});}function MapProps(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var map=parameter.get('definition');var entries=map.get('entries');function addEntry(){var entry=createElement('camunda:Entry',{},parameter,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:map,properties:{entries:[].concat(_toConsumableArray(map.get('entries')),[entry])}});}function removeEntry(entry){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:map,properties:{entries:(0,_minDash.without)(map.get('entries'),entry)}});}function compareFn(entry,anotherEntry){var _ref105=[entry.key,anotherEntry.key],_ref105$=_ref105[0],key=_ref105$===void 0?'':_ref105$,_ref105$2=_ref105[1],anotherKey=_ref105$2===void 0?'':_ref105$2;return key===anotherKey?0:key>anotherKey?1:-1;}return(0,_propertiesPanel.ListEntry)({element:element,autoFocusEntry:true,compareFn:compareFn,id:idPrefix+'-map',items:entries,label:translate('Map entries'),onAdd:addEntry,onRemove:removeEntry,component:MapProp});}function MapEntry(props){var element=props.element,entry=props.entry,idPrefix=props.idPrefix;var entries=[{id:idPrefix+'-key',component:MapKey,entry:entry,idPrefix:idPrefix,element:element},{id:idPrefix+'-value',component:MapValue,entry:entry,idPrefix:idPrefix,element:element}];return entries;}function MapKey(props){var element=props.element,entry=props.entry,idPrefix=props.idPrefix;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:entry,properties:{key:value}});};var getValue=function getValue(){return entry.get('key');};return(0,_propertiesPanel.TextFieldEntry)({element:entry,id:idPrefix+'-key',label:translate('Key'),getValue:getValue,setValue:setValue,debounce:debounce});}function MapValue(props){var element=props.element,entry=props.entry,idPrefix=props.idPrefix;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var definition=entry.get('definition');var definitionLabels={'camunda:Map':translate('Map'),'camunda:List':translate('List'),'camunda:Script':translate('Script')};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:entry,properties:{value:value}});};var getValue=function getValue(){if(isDefinitionType(definition)){return definitionLabels[definition.$type];}return entry.get('value');};return(0,_propertiesPanel.TextFieldEntry)({element:entry,id:idPrefix+'-value',label:translate('Value'),getValue:getValue,setValue:setValue,disabled:isDefinitionType(definition),debounce:debounce});}// helper ///////////////////
function isScript(element){return(0,_ModelUtil.is)(element,'camunda:Script');}function isList(element){return(0,_ModelUtil.is)(element,'camunda:List');}function isMap(element){return(0,_ModelUtil.is)(element,'camunda:Map');}function isDefinitionType(element){return isScript(element)||isList(element)||isMap(element);}var DEFAULT_PROPS$3={value:undefined,definition:undefined};function InputOutputParameter(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var inputOutputType=getInputOutputType(parameter);var entries=[{id:idPrefix+'-name',component:Name$2,isEdited:_propertiesPanel.isTextFieldEntryEdited,idPrefix:idPrefix,parameter:parameter},{id:idPrefix+'-type',component:Type$2,isEdited:_propertiesPanel.isSelectEntryEdited,idPrefix:idPrefix,parameter:parameter}];// (1) String or expression
if(inputOutputType==='stringOrExpression'){entries.push({id:idPrefix+'-stringOrExpression',component:StringOrExpression,isEdited:_propertiesPanel.isTextAreaEntryEdited,idPrefix:idPrefix,parameter:parameter});// (2) Script
}else if(inputOutputType==='script'){var script=parameter.get('definition');entries=[].concat(_toConsumableArray(entries),_toConsumableArray(ScriptProps({element:element,prefix:idPrefix+'-',script:script})));// (3) List
}else if(inputOutputType==='list'){entries.push({id:"".concat(idPrefix,"-list"),component:ListProps,idPrefix:idPrefix,parameter:parameter});// (4) Map
}else if(inputOutputType==='map'){entries.push({id:"".concat(idPrefix,"-map"),component:MapProps,idPrefix:idPrefix,parameter:parameter});}return entries;}function Name$2(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:parameter,properties:{name:value}});};var getValue=function getValue(parameter){return parameter.get('name');};return(0,_propertiesPanel.TextFieldEntry)({element:parameter,id:idPrefix+'-name',label:translate(isInput(parameter)?'Local variable name':'Process variable name'),getValue:getValue,setValue:setValue,debounce:debounce});}function Type$2(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var createDefinitionElement=function createDefinitionElement(type){return createElement(type,{},parameter,bpmnFactory);};var getValue=function getValue(mapping){return getInputOutputType(mapping);};var setValue=function setValue(value){var properties=_objectSpread({},DEFAULT_PROPS$3);if(value==='script'){properties.definition=createDefinitionElement('camunda:Script');}else if(value==='list'){properties.definition=createDefinitionElement('camunda:List');}else if(value==='map'){properties.definition=createDefinitionElement('camunda:Map');}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:parameter,properties:properties});};var getOptions=function getOptions(){var options=[{label:translate('List'),value:'list'},{label:translate('Map'),value:'map'},{label:translate('Script'),value:'script'},{label:translate('String or expression'),value:'stringOrExpression'}];return options;};return(0,_propertiesPanel.SelectEntry)({element:parameter,id:idPrefix+'-type',label:translate('Assignment type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function StringOrExpression(props){var idPrefix=props.idPrefix,element=props.element,parameter=props.parameter;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:parameter,properties:{value:value}});};var getValue=function getValue(parameter){return parameter.get('value');};return(0,_propertiesPanel.TextAreaEntry)({element:parameter,id:idPrefix+'-stringOrExpression',label:translate('Value'),description:translate('Start typing "${}" to create an expression.'),getValue:getValue,setValue:setValue,rows:1,debounce:debounce});}// helper /////////////////////
function isInput(parameter){return(0,_ModelUtil.is)(parameter,'camunda:InputParameter');}/**
 * Check whether an element is camunda:ServiceTaskLike
 *
 * @param {djs.model.Base} element
 *
 * @return {boolean} a boolean value
 */function isServiceTaskLike(element){return(0,_ModelUtil.is)(element,'camunda:ServiceTaskLike');}/**
 * Returns 'true' if the given element is 'camunda:DmnCapable'
 *
 * @param {djs.model.Base} element
 *
 * @return {boolean} a boolean value
 */function isDmnCapable(element){return(0,_ModelUtil.is)(element,'camunda:DmnCapable');}/**
 * Returns 'true' if the given element is 'camunda:ExternalCapable'
 *
 * @param {djs.model.Base} element
 *
 * @return {boolean} a boolean value
 */function isExternalCapable(element){return(0,_ModelUtil.is)(element,'camunda:ExternalCapable');}/**
 * getServiceTaskLikeBusinessObject - Get a 'camunda:ServiceTaskLike' business object.
 *
 * If the given element is not a 'camunda:ServiceTaskLike', then 'false'
 * is returned.
 *
 * @param {djs.model.Base} element
 * @return {ModdleElement} the 'camunda:ServiceTaskLike' business object
 */function getServiceTaskLikeBusinessObject(element){if((0,_ModelUtil.is)(element,'bpmn:IntermediateThrowEvent')||(0,_ModelUtil.is)(element,'bpmn:EndEvent')){// change business object to 'messageEventDefinition' when
// the element is a message intermediate throw event or message end event
// because the camunda extensions (e.g. camunda:class) are in the message
// event definition tag and not in the intermediate throw event or end event tag
var messageEventDefinition=getMessageEventDefinition$1(element);if(messageEventDefinition){element=messageEventDefinition;}}return isServiceTaskLike(element)&&(0,_ModelUtil.getBusinessObject)(element);}/**
 * Returns the implementation type of the given element.
 *
 * Possible implementation types are:
 * - dmn
 * - connector
 * - external
 * - class
 * - expression
 * - delegateExpression
 * - script
 * - or undefined, when no matching implementation type is found
 *
 * @param  {djs.model.Base} element
 *
 * @return {String} the implementation type
 */function getImplementationType(element){var businessObject=getListenerBusinessObject(element)||getServiceTaskLikeBusinessObject(element);if(!businessObject){return;}if(isDmnCapable(businessObject)){var decisionRef=businessObject.get('camunda:decisionRef');if(typeof decisionRef!=='undefined'){return'dmn';}}if(isServiceTaskLike(businessObject)){var connectors=getExtensionElementsList(businessObject,'camunda:Connector');if(connectors.length){return'connector';}}if(isExternalCapable(businessObject)){var type=businessObject.get('camunda:type');if(type==='external'){return'external';}}var cls=businessObject.get('camunda:class');if(typeof cls!=='undefined'){return'class';}var expression=businessObject.get('camunda:expression');if(typeof expression!=='undefined'){return'expression';}var delegateExpression=businessObject.get('camunda:delegateExpression');if(typeof delegateExpression!=='undefined'){return'delegateExpression';}var script=businessObject.get('script');if(typeof script!=='undefined'){return'script';}}function getListenerBusinessObject(businessObject){if((0,_ModelingUtil.isAny)(businessObject,['camunda:ExecutionListener','camunda:TaskListener'])){return businessObject;}}function areConnectorsSupported(element){var businessObject=getServiceTaskLikeBusinessObject(element);return businessObject&&getImplementationType(businessObject)==='connector';}function getConnectors$2(businessObject){return getExtensionElementsList(businessObject,'camunda:Connector');}function getConnector$1(element){var businessObject=getServiceTaskLikeBusinessObject(element);var connectors=getConnectors$2(businessObject);return connectors[0];}function ConnectorInputProps(props){var element=props.element,injector=props.injector;if(!areConnectorsSupported(element)){return null;}var connector=getConnector$1(element);var commandStack=injector.get('commandStack'),bpmnFactory=injector.get('bpmnFactory');var inputParameters=getInputParameters(connector)||[];var items=inputParameters.map(function(parameter,index){var id=element.id+'-connector-inputParameter-'+index;return{id:id,label:parameter.get('name')||'',entries:InputOutputParameter({element:element,idPrefix:id,parameter:parameter}),autoFocusEntry:id+'-name',remove:removeFactory$8({connector:connector,element:element,parameter:parameter,commandStack:commandStack})};});function add(event){event.stopPropagation();var commands=[];// (1) ensure inputOutput
var inputOutput=getInputOutput(connector);if(!inputOutput){inputOutput=createElement('camunda:InputOutput',{inputParameters:[],outputParameters:[]},connector,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:connector,properties:{inputOutput:inputOutput}}});}// (2) create + add parameter
commands.push(CreateParameterCmd(element,'camunda:InputParameter',inputOutput,bpmnFactory));// (3) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);}return{items:items,add:add};}function removeFactory$8(props){var commandStack=props.commandStack,connector=props.connector,element=props.element,parameter=props.parameter;return function(event){event.stopPropagation();var inputOutput=getInputOutput(connector);if(!inputOutput){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:{inputParameters:(0,_minDash.without)(inputOutput.get('inputParameters'),parameter)}});};}function ConnectorOutputProps(props){var element=props.element,injector=props.injector;if(!areConnectorsSupported(element)){return null;}var connector=getConnector$1(element);var commandStack=injector.get('commandStack'),bpmnFactory=injector.get('bpmnFactory');var outputParameters=getOutputParameters(connector)||[];var items=outputParameters.map(function(parameter,index){var id=element.id+'-connector-outputParameter-'+index;return{id:id,label:parameter.get('name')||'',entries:InputOutputParameter({idPrefix:id,element:element,parameter:parameter}),autoFocusEntry:id+'-name',remove:removeFactory$7({connector:connector,element:element,commandStack:commandStack,parameter:parameter})};});function add(event){event.stopPropagation();var commands=[];// (1) ensure inputOutput
var inputOutput=getInputOutput(connector);if(!inputOutput){inputOutput=createElement('camunda:InputOutput',{inputParameters:[],outputParameters:[]},connector,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:connector,properties:{inputOutput:inputOutput}}});}// (2) create + add parameter
commands.push(CreateParameterCmd(element,'camunda:OutputParameter',inputOutput,bpmnFactory));// (3) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);}return{items:items,add:add};}function removeFactory$7(props){var commandStack=props.commandStack,connector=props.connector,element=props.element,parameter=props.parameter;return function(event){event.stopPropagation();var inputOutput=getInputOutput(connector);if(!inputOutput){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:{outputParameters:(0,_minDash.without)(inputOutput.get('outputParameters'),parameter)}});};}function ErrorProps(props){var element=props.element,entries=props.entries;if(!isErrorSupported(element)){return entries;}var error=getError(element);// (1) errorMessage (error)
if(error){var idx=findPlaceToInsert(entries,'errorCode');// place below errorCode
entries.splice(idx,0,{id:'errorMessage',component:ErrorMessage$1,isEdited:_propertiesPanel.isTextFieldEntryEdited});}if(!canHaveErrorVariables(element)){return entries;}// (2) errorCodeVariable + errorMessageVariable (errorEventDefinition)
entries.push({id:'errorCodeVariable',component:ErrorCodeVariable,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'errorMessageVariable',component:ErrorMessageVariable,isEdited:_propertiesPanel.isTextFieldEntryEdited});return entries;}function ErrorMessage$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var error=getError(element);var getValue=function getValue(){return error.get('camunda:errorMessage');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{'camunda:errorMessage':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'errorMessage',label:translate('Message'),getValue:getValue,setValue:setValue,debounce:debounce});}function ErrorCodeVariable(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var errorEventDefinition=getErrorEventDefinition(element);var getValue=function getValue(){return errorEventDefinition.get('camunda:errorCodeVariable');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:errorEventDefinition,properties:{'camunda:errorCodeVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'errorCodeVariable',label:translate('Code variable'),description:translate('Define the name of the variable that will contain the error code.'),getValue:getValue,setValue:setValue,debounce:debounce});}function ErrorMessageVariable(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var errorEventDefinition=getErrorEventDefinition(element);var getValue=function getValue(){return errorEventDefinition.get('camunda:errorMessageVariable');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:errorEventDefinition,properties:{'camunda:errorMessageVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'errorMessageVariable',label:translate('Message variable'),description:translate('Define the name of the variable that will contain the error message.'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function canHaveErrorVariables(element){return(0,_ModelUtil.is)(element,'bpmn:StartEvent')||(0,_ModelUtil.is)(element,'bpmn:BoundaryEvent');}function findPlaceToInsert(entries,idx){var entryIndex=(0,_minDash.findIndex)(entries,function(entry){return entry.id===idx;});return entryIndex>=0?entryIndex+1:entries.length;}var EMPTY_OPTION$1='';var CREATE_NEW_OPTION$1='create-new';function Error$1(props){var idPrefix=props.idPrefix,errorEventDefinition=props.errorEventDefinition;var entries=[{id:idPrefix+'-errorRef',component:ErrorRef,isEdited:_propertiesPanel.isSelectEntryEdited,errorEventDefinition:errorEventDefinition,idPrefix:idPrefix}];var error=errorEventDefinition.get('errorRef');if(error){entries=[].concat(_toConsumableArray(entries),[{id:idPrefix+'-errorName',component:ErrorName,isEdited:_propertiesPanel.isTextFieldEntryEdited,error:error,errorEventDefinition:errorEventDefinition,idPrefix:idPrefix},{id:idPrefix+'-errorCode',component:ErrorCode,isEdited:_propertiesPanel.isTextFieldEntryEdited,error:error,errorEventDefinition:errorEventDefinition,idPrefix:idPrefix},{id:idPrefix+'-errorMessage',component:ErrorMessage,isEdited:_propertiesPanel.isTextFieldEntryEdited,error:error,errorEventDefinition:errorEventDefinition,idPrefix:idPrefix}]);}entries.push({id:idPrefix+'-expression',component:Expression$2,errorEventDefinition:errorEventDefinition,idPrefix:idPrefix});return entries;}function ErrorRef(props){var element=props.element,errorEventDefinition=props.errorEventDefinition,idPrefix=props.idPrefix;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){var error=errorEventDefinition.get('errorRef');if(error){return error.get('id');}return EMPTY_OPTION$1;};var setValue=function setValue(value){var root=getRoot(businessObject);var commands=[];var error;// (1) create new error
if(value===CREATE_NEW_OPTION$1){error=createElement('bpmn:Error',{name:nextId('Error_')},root,bpmnFactory);value=error.get('id');commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:root,properties:{rootElements:[].concat(_toConsumableArray(root.get('rootElements')),[error])}}});}// (2) update (or remove) errorRef
error=error||findRootElementById(businessObject,'bpmn:Error',value);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:errorEventDefinition,properties:{errorRef:error}}});// (3) commit all updates
return commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){var options=[{value:EMPTY_OPTION$1,label:translate('<none>')},{value:CREATE_NEW_OPTION$1,label:translate('Create new ...')}];var errors=findRootElementsByType((0,_ModelUtil.getBusinessObject)(element),'bpmn:Error');sortByName$2(errors).forEach(function(error){options.push({value:error.get('id'),label:error.get('name')||error.get('id')});});return options;};return ReferenceSelectEntry({element:element,id:idPrefix+'-errorRef',label:translate('Global error reference'),autoFocusEntry:idPrefix+'-errorName',getValue:getValue,setValue:setValue,getOptions:getOptions});}function ErrorName(props){var element=props.element,error=props.error,idPrefix=props.idPrefix;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return error.get('name');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{name:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:idPrefix+'-errorName',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}function ErrorCode(props){var element=props.element,error=props.error,idPrefix=props.idPrefix;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return error.get('errorCode');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{errorCode:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:idPrefix+'-errorCode',label:translate('Code'),getValue:getValue,setValue:setValue,debounce:debounce});}function ErrorMessage(props){var element=props.element,error=props.error,idPrefix=props.idPrefix;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return error.get('errorMessage');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:error,properties:{errorMessage:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:idPrefix+'-errorMessage',label:translate('Message'),getValue:getValue,setValue:setValue,debounce:debounce});}function Expression$2(props){var element=props.element,errorEventDefinition=props.errorEventDefinition,idPrefix=props.idPrefix;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:errorEventDefinition,properties:{'camunda:expression':value}});};var getValue=function getValue(){return errorEventDefinition.get('camunda:expression');};return(0,_propertiesPanel.TextFieldEntry)({element:errorEventDefinition,id:idPrefix+'-expression',label:translate('Throw expression'),getValue:getValue,setValue:setValue,debounce:debounce});}// helpers //////////
function sortByName$2(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}function ErrorsProps(_ref106){var element=_ref106.element,injector=_ref106.injector;var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(!(0,_ModelUtil.is)(element,'bpmn:ServiceTask')||getImplementationType(element)!=='external'){return null;}var errorEventDefinitions=getExtensionElementsList(businessObject,'camunda:ErrorEventDefinition');var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=errorEventDefinitions.map(function(errorEventDefinition,index){var id=element.id+'-error-'+index;return{id:id,label:getErrorLabel(errorEventDefinition),entries:Error$1({idPrefix:id,element:element,errorEventDefinition:errorEventDefinition}),autoFocusEntry:id+'-errorRef',remove:removeFactory$6({commandStack:commandStack,element:element,errorEventDefinition:errorEventDefinition})};});return{items:items,add:addFactory$5({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element}),shouldSort:false};}function removeFactory$6(_ref107){var commandStack=_ref107.commandStack,element=_ref107.element,errorEventDefinition=_ref107.errorEventDefinition;return function(event){event.stopPropagation();var businessObject=(0,_ModelUtil.getBusinessObject)(element);removeExtensionElements(element,businessObject,errorEventDefinition,commandStack);};}function addFactory$5(_ref108){var bpmnFactory=_ref108.bpmnFactory,commandStack=_ref108.commandStack,element=_ref108.element;return function(event){event.stopPropagation();var businessObject=(0,_ModelUtil.getBusinessObject)(element);var error=createElement('camunda:ErrorEventDefinition',{},undefined,bpmnFactory);addExtensionElements(element,businessObject,error,bpmnFactory,commandStack);};}// helpers //////////
function getErrorLabel(errorEventDefinition){var error=errorEventDefinition.get('errorRef');if(!error){return'<no reference>';}var errorCode=error.get('errorCode'),name=error.get('name')||'<unnamed>';if(errorCode){return"".concat(name," (code = ").concat(errorCode,")");}return name;}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function EscalationProps(props){var element=props.element,entries=props.entries;if(!(isEscalationSupported(element)&&canHaveEscalationVariables(element))){return entries;}entries.push({id:'escalationCodeVariable',component:EscalationCodeVariable,isEdited:_propertiesPanel.isTextFieldEntryEdited});return entries;}function EscalationCodeVariable(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var escalationEventDefinition=getEscalationEventDefinition(element);var getValue=function getValue(){return escalationEventDefinition.get('camunda:escalationCodeVariable');};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:escalationEventDefinition,properties:{'camunda:escalationCodeVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'escalationCodeVariable',label:translate('Code variable'),description:translate('Define the name of the variable that will contain the escalation code.'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////////
function canHaveEscalationVariables(element){return(0,_ModelUtil.is)(element,'bpmn:StartEvent')||(0,_ModelUtil.is)(element,'bpmn:BoundaryEvent');}function ExternalTaskPriorityProps(props){var element=props.element;var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(!(0,_ModelUtil.is)(element,'bpmn:Process')&&!((0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef'))&&!isExternalTaskLike(element)){return[];}return[{id:'externalTaskPriority',component:ExternalTaskPriority,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function ExternalTaskPriority(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var businessObject;if((0,_ModelUtil.is)(element,'bpmn:Participant')){businessObject=(0,_ModelUtil.getBusinessObject)(element).get('processRef');}else if(isExternalTaskLike(element)){businessObject=getServiceTaskLikeBusinessObject(element);}else{businessObject=(0,_ModelUtil.getBusinessObject)(element);}var getValue=function getValue(){return businessObject.get('camunda:taskPriority');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:taskPriority':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'externalTaskPriority',label:translate('Priority'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////
function isExternalTaskLike(element){var bo=getServiceTaskLikeBusinessObject(element),type=bo&&bo.get('camunda:type');return(0,_ModelUtil.is)(bo,'camunda:ServiceTaskLike')&&type&&type==='external';}var DEFAULT_PROPS$2={'stringValue':undefined,'string':undefined,'expression':undefined};function FieldInjection(props){var element=props.element,idPrefix=props.idPrefix,field=props.field;var entries=[{id:idPrefix+'-name',component:NameProperty,field:field,idPrefix:idPrefix,element:element},{id:idPrefix+'-type',component:TypeProperty,field:field,idPrefix:idPrefix,element:element},{id:idPrefix+'-value',component:ValueProperty,field:field,idPrefix:idPrefix,element:element}];return entries;}function NameProperty(props){var idPrefix=props.idPrefix,element=props.element,field=props.field;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:field,properties:{name:value}});};var getValue=function getValue(field){return field.name;};return(0,_propertiesPanel.TextFieldEntry)({element:field,id:idPrefix+'-name',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}function TypeProperty(props){var idPrefix=props.idPrefix,element=props.element,field=props.field;var commandStack=useService('commandStack'),translate=useService('translate');var getValue=function getValue(field){return determineType(field);};var setValue=function setValue(value){var properties=Object.assign({},DEFAULT_PROPS$2);properties[value]='';commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:field,properties:properties});};var getOptions=function getOptions(element){var options=[{value:'string',label:translate('String')},{value:'expression',label:translate('Expression')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:field,id:idPrefix+'-type',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function ValueProperty(props){var idPrefix=props.idPrefix,element=props.element,field=props.field;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){// (1) determine which type we have set
var type=determineType(field);// (2) set property accordingly
var properties=Object.assign({},DEFAULT_PROPS$2);properties[type]=value||'';// (3) execute the update command
commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:field,properties:properties});};var getValue=function getValue(field){return field.string||field.stringValue||field.expression;};return(0,_propertiesPanel.TextFieldEntry)({element:field,id:idPrefix+'-value',label:translate('Value'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////
/**
 * determineType - get the type of a fieldInjection based on the attributes
 * set on it
 *
 * @param  {ModdleElement} field
 * @return {('string'|'expression')}
 */function determineType(field){// string is the default type
return'string'in field&&'string'||'expression'in field&&'expression'||'stringValue'in field&&'string'||'string';}function FieldInjectionProps(_ref109){var element=_ref109.element,injector=_ref109.injector;var businessObject=getServiceTaskLikeBusinessObject(element);if(!businessObject){return null;}var fieldInjections=getExtensionElementsList(businessObject,'camunda:Field');var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=fieldInjections.map(function(field,index){var id=element.id+'-fieldInjection-'+index;return{id:id,label:getFieldLabel(field),entries:FieldInjection({idPrefix:id,element:element,field:field}),autoFocusEntry:id+'-name',remove:removeFactory$5({commandStack:commandStack,element:element,field:field})};});return{items:items,add:addFactory$4({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element})};}function removeFactory$5(_ref110){var commandStack=_ref110.commandStack,element=_ref110.element,field=_ref110.field;return function(event){event.stopPropagation();var businessObject=getServiceTaskLikeBusinessObject(element);removeExtensionElements(element,businessObject,field,commandStack);};}function addFactory$4(_ref111){var bpmnFactory=_ref111.bpmnFactory,commandStack=_ref111.commandStack,element=_ref111.element;return function(event){event.stopPropagation();var businessObject=getServiceTaskLikeBusinessObject(element);var fieldInjection=createElement('camunda:Field',{name:undefined,string:'',// string is the default type
stringValue:undefined},null,bpmnFactory);addExtensionElements(element,businessObject,fieldInjection,bpmnFactory,commandStack);};}// helper ///////////////
function getFieldLabel(field){return field.name||'<empty>';}function FormFieldConstraint(props){var constraint=props.constraint,element=props.element,idPrefix=props.idPrefix;var entries=[{id:idPrefix+'-name',component:Name$1,constraint:constraint,idPrefix:idPrefix,element:element},{id:idPrefix+'-config',component:Config,constraint:constraint,idPrefix:idPrefix,element:element}];return entries;}function Name$1(props){var idPrefix=props.idPrefix,element=props.element,constraint=props.constraint;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:constraint,properties:{name:value}});};var getValue=function getValue(){return constraint.name;};return(0,_propertiesPanel.TextFieldEntry)({element:constraint,id:idPrefix+'-name',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}function Config(props){var idPrefix=props.idPrefix,element=props.element,constraint=props.constraint;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:constraint,properties:{config:value}});};var getValue=function getValue(){return constraint.config;};return(0,_propertiesPanel.TextFieldEntry)({element:constraint,id:idPrefix+'-config',label:translate('Config'),getValue:getValue,setValue:setValue,debounce:debounce});}function FormFieldProperty(props){var element=props.element,idPrefix=props.idPrefix,property=props.property;var entries=[{id:idPrefix+'-id',component:Id$2,idPrefix:idPrefix,property:property,element:element},{id:idPrefix+'-value',component:Value$1,idPrefix:idPrefix,property:property,element:element}];return entries;}function Id$2(props){var idPrefix=props.idPrefix,element=props.element,property=props.property;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:property,properties:{id:value}});};var getValue=function getValue(){return property.id;};return(0,_propertiesPanel.TextFieldEntry)({element:property,id:idPrefix+'-id',label:translate('ID'),getValue:getValue,setValue:setValue,debounce:debounce});}function Value$1(props){var idPrefix=props.idPrefix,element=props.element,property=props.property;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:property,properties:{value:value}});};var getValue=function getValue(){return property.value;};return(0,_propertiesPanel.TextFieldEntry)({element:property,id:idPrefix+'-value',label:translate('Value'),getValue:getValue,setValue:setValue,debounce:debounce});}function FormFieldValue(props){var element=props.element,idPrefix=props.idPrefix,value=props.value;var entries=[{id:idPrefix+'-id',component:Id$1,idPrefix:idPrefix,value:value,element:element},{id:idPrefix+'-name',component:Name,idPrefix:idPrefix,value:value,element:element}];return entries;}function Id$1(props){var idPrefix=props.idPrefix,element=props.element,value=props.value;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(val){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:value,properties:{id:val}});};var getValue=function getValue(){return value.id;};return(0,_propertiesPanel.TextFieldEntry)({element:value,id:idPrefix+'-id',label:translate('ID'),getValue:getValue,setValue:setValue,debounce:debounce});}function Name(props){var idPrefix=props.idPrefix,element=props.element,value=props.value;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var setValue=function setValue(val){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:value,properties:{name:val}});};var getValue=function getValue(){return value.name;};return(0,_propertiesPanel.TextFieldEntry)({element:value,id:idPrefix+'-name',label:translate('Name'),getValue:getValue,setValue:setValue,debounce:debounce});}var CUSTOM_TYPE_VALUE='',DEFINED_TYPE_VALUES=['boolean','date','enum','long','string',undefined];function FormField(props){var idPrefix=props.idPrefix,formField=props.formField;var entries=[{id:idPrefix+'-formFieldID',component:Id,idPrefix:idPrefix,formField:formField},{id:idPrefix+'-formFieldLabel',component:Label,idPrefix:idPrefix,formField:formField},{id:idPrefix+'-formFieldType',component:Type$1,idPrefix:idPrefix,formField:formField}];if(!DEFINED_TYPE_VALUES.includes(formField.get('type'))){entries.push({id:idPrefix+'-formFieldCustomType',component:CustomType,idPrefix:idPrefix,formField:formField});}entries.push({id:idPrefix+'-formFieldDefaultValue',component:DefaultValue,idPrefix:idPrefix,formField:formField});if(formField.get('type')==='enum'){entries.push({id:idPrefix+'-formFieldValues',component:ValueList,formField:formField,idPrefix:idPrefix});}entries.push({id:idPrefix+'-formFieldConstraints',component:ConstraintList,formField:formField,idPrefix:idPrefix},{id:idPrefix+'-formFieldProperties',component:PropertiesList,formField:formField,idPrefix:idPrefix});return entries;}function Id(props){var idPrefix=props.idPrefix,element=props.element,formField=props.formField;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{id:value}});};var getValue=function getValue(){return formField.get('id');};return(0,_propertiesPanel.TextFieldEntry)({element:formField,id:idPrefix+'-formFieldID',label:translate('ID'),description:translate('Refers to the process variable name'),getValue:getValue,setValue:setValue,debounce:debounce});}function Label(props){var idPrefix=props.idPrefix,element=props.element,formField=props.formField;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{label:value}});};var getValue=function getValue(){return formField.get('label');};return(0,_propertiesPanel.TextFieldEntry)({element:formField,id:idPrefix+'-formFieldLabel',label:translate('Label'),getValue:getValue,setValue:setValue,debounce:debounce});}function Type$1(props){var idPrefix=props.idPrefix,element=props.element,formField=props.formField;var commandStack=useService('commandStack');var translate=useService('translate');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{type:value}});};var getValue=function getValue(){var type=formField.get('type');return DEFINED_TYPE_VALUES.includes(type)?type:CUSTOM_TYPE_VALUE;};var getOptions=function getOptions(){var options=[{label:translate('boolean'),value:'boolean'},{label:translate('date'),value:'date'},{label:translate('enum'),value:'enum'},{label:translate('long'),value:'long'},{label:translate('string'),value:'string'},{label:translate('<custom type>'),value:CUSTOM_TYPE_VALUE}];// for the initial state only, we want to show an empty state
if(formField.get('type')===undefined){options.unshift({label:translate('<none>'),value:''});}return options;};return(0,_propertiesPanel.SelectEntry)({element:formField,id:idPrefix+'-formFieldType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function CustomType(props){var idPrefix=props.idPrefix,element=props.element,formField=props.formField;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){var type=value||'';commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{type:type}});};var getValue=function getValue(){return formField.get('type');};return(0,_propertiesPanel.TextFieldEntry)({element:formField,id:idPrefix+'-formFieldCustomType',label:translate('Custom type'),getValue:getValue,setValue:setValue,debounce:debounce});}function DefaultValue(props){var idPrefix=props.idPrefix,element=props.element,formField=props.formField;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{defaultValue:value}});};var getValue=function getValue(){return formField.get('defaultValue');};return(0,_propertiesPanel.TextFieldEntry)({element:formField,id:idPrefix+'-formFieldDefaultValue',label:translate('Default value'),getValue:getValue,setValue:setValue,debounce:debounce});}function Value(props){var element=props.element,idPrefix=props.id,index=props.index,value=props.item,open=props.open;var translate=useService('translate');var id="".concat(idPrefix,"-value-").concat(index);return(0,_jsxRuntime.jsx)(_propertiesPanel.CollapsibleEntry,{id:id,element:element,entries:FormFieldValue({idPrefix:id,element:element,value:value}),label:value.get('id')||translate('<empty>'),open:open});}function ValueList(props){var element=props.element,formField=props.formField,idPrefix=props.idPrefix;var id="".concat(idPrefix,"-formFieldValues");var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var values=formField.get('values')||[];function addValue(){var value=createElement('camunda:Value',{id:undefined,name:undefined},formField,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{values:[].concat(_toConsumableArray(formField.get('values')),[value])}});}function removeValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formField,properties:{values:(0,_minDash.without)(formField.get('values'),value)}});}return(0,_jsxRuntime.jsx)(_propertiesPanel.ListEntry,{element:element,autoFocusEntry:"[data-entry-id=\"".concat(id,"-value-").concat(values.length-1,"\"] input"),id:id,label:translate('Values'),items:values,component:Value,onAdd:addValue,onRemove:removeValue});}function Constraint(props){var element=props.element,idPrefix=props.id,index=props.index,constraint=props.item,open=props.open;var translate=useService('translate');var id="".concat(idPrefix,"-constraint-").concat(index);return(0,_jsxRuntime.jsx)(_propertiesPanel.CollapsibleEntry,{id:id,element:element,entries:FormFieldConstraint({constraint:constraint,element:element,idPrefix:id}),label:constraint.get('name')||translate('<empty>'),open:open});}function ConstraintList(props){var element=props.element,formField=props.formField,idPrefix=props.idPrefix;var id="".concat(idPrefix,"-formFieldConstraints");var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var validation=formField.get('validation');var constraints=validation&&validation.get('constraints')||[];function addConstraint(){var commands=[];// (1) ensure validation
if(!validation){validation=createElement('camunda:Validation',{},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:formField,properties:{validation:validation}}});}// (2) add constraint
var constraint=createElement('camunda:Constraint',{name:undefined,config:undefined},validation,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:validation,properties:{constraints:[].concat(_toConsumableArray(validation.get('constraints')),[constraint])}}});// (3) commit updates
commandStack.execute('properties-panel.multi-command-executor',commands);}function removeConstraint(constraint){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:validation,properties:{constraints:(0,_minDash.without)(validation.get('constraints'),constraint)}});}return(0,_jsxRuntime.jsx)(_propertiesPanel.ListEntry,{element:element,autoFocusEntry:"[data-entry-id=\"".concat(id,"-constraint-").concat(constraints.length-1,"\"] input"),id:id,label:translate('Constraints'),items:constraints,component:Constraint,onAdd:addConstraint,onRemove:removeConstraint});}function Property(props){var element=props.element,idPrefix=props.id,index=props.index,property=props.item,open=props.open;var translate=useService('translate');var id="".concat(idPrefix,"-property-").concat(index);return(0,_jsxRuntime.jsx)(_propertiesPanel.CollapsibleEntry,{id:id,element:element,entries:FormFieldProperty({element:element,idPrefix:id,property:property}),label:property.get('id')||translate('<empty>'),open:open});}function PropertiesList(props){var element=props.element,formField=props.formField,idPrefix=props.idPrefix;var id="".concat(idPrefix,"-formFieldProperties");var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var properties=formField.get('properties');var propertyEntries=properties&&properties.get('values')||[];function addProperty(){var commands=[];// (1) ensure properties
if(!properties){properties=createElement('camunda:Properties',{},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:formField,properties:{properties:properties}}});}// (2) add property
var property=createElement('camunda:Property',{id:undefined,value:undefined},properties,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:properties,properties:{values:[].concat(_toConsumableArray(properties.get('values')),[property])}}});// (3) commit updates
commandStack.execute('properties-panel.multi-command-executor',commands);}function removeProperty(property){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:properties,properties:{values:(0,_minDash.without)(properties.get('values'),property)}});}return(0,_jsxRuntime.jsx)(_propertiesPanel.ListEntry,{element:element,autoFocusEntry:true,id:id,compareFn:createAlphanumericCompare('id'),label:translate('Properties'),items:propertyEntries,component:Property,onAdd:addProperty,onRemove:removeProperty});}// helper //////////////////
function createAlphanumericCompare(field){return function(entry,anotherEntry){var _ref112=[entry[field],anotherEntry[field]],_ref112$=_ref112[0],key=_ref112$===void 0?'':_ref112$,_ref112$2=_ref112[1],anotherKey=_ref112$2===void 0?'':_ref112$2;return key===anotherKey?0:key>anotherKey?1:-1;};}function FormDataProps(_ref113){var element=_ref113.element,injector=_ref113.injector;if(!isFormDataSupported(element)){return;}var formFields=getFormFieldsList(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=formFields.map(function(formField,index){var id=element.id+'-formField-'+index;return{id:id,label:formField.get('id')||'',entries:FormField({idPrefix:id,element:element,formField:formField}),autoFocusEntry:id+'-formFieldID',remove:removeFactory$4({commandStack:commandStack,element:element,formField:formField})};});return{items:items,add:addFactory$3({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element}),shouldSort:false};}function addFactory$3(_ref114){var bpmnFactory=_ref114.bpmnFactory,commandStack=_ref114.commandStack,element=_ref114.element;return function(event){event.stopPropagation();var commands=[];// (1) get camunda:FormData
var formData=getFormData$1(element);// (2) create camunda:FormField
var formField=createElement('camunda:FormField',{},formData,bpmnFactory);// (3) add formField to list
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:formData,properties:{fields:[].concat(_toConsumableArray(formData.get('fields')),[formField])}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};}function removeFactory$4(_ref115){var commandStack=_ref115.commandStack,element=_ref115.element,formField=_ref115.formField;return function(event){event.stopPropagation();var formData=getFormData$1(element),formFields=getFormFieldsList(element);if(!formFields||!formFields.length){return;}var fields=(0,_minDash.without)(formData.get('fields'),formField);// update formData
commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:formData,properties:{fields:fields}});};}// helper ///////////////////////////////
function isFormDataSupported(element){var formData=getFormData$1(element);return((0,_ModelUtil.is)(element,'bpmn:StartEvent')&&!(0,_ModelUtil.is)(element.parent,'bpmn:SubProcess')||(0,_ModelUtil.is)(element,'bpmn:UserTask'))&&formData;}function getFormData$1(element){var bo=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(bo,'camunda:FormData')[0];}function getFormFieldsList(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var formData=getFormData$1(businessObject);return formData&&formData.fields;}var FORM_KEY_PROPS={'camunda:formRef':undefined,'camunda:formRefBinding':undefined,'camunda:formRefVersion':undefined};var FORM_REF_PROPS={'camunda:formKey':undefined};function FormTypeProps(props){return[{id:'formType',component:FormType,isEdited:_propertiesPanel.isSelectEntryEdited}];}function FormType(props){var element=props.element;var translate=useService('translate');var bpmnFactory=useService('bpmnFactory');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var commandStack=useService('commandStack');var extensionElements=businessObject.get('extensionElements');var getValue=function getValue(){if((0,_minDash.isDefined)(businessObject.get('camunda:formKey'))){return'formKey';}else if((0,_minDash.isDefined)(businessObject.get('camunda:formRef'))){return'formRef';}else if(getFormData(element)){return'formData';}return'';};var setValue=function setValue(value){var commands=removePropertiesCommands(element);if(value==='formData'){// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) create camunda:FormData
var parent=extensionElements;var formData=createElement('camunda:FormData',{fields:[]},parent,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[formData])}}});}else if(value==='formKey'){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{'camunda:formKey':''}}});}else if(value==='formRef'){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{'camunda:formRef':''}}});}commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){return[{value:'',label:translate('<none>')},{value:'formRef',label:translate('Camunda Forms')},{value:'formKey',label:translate('Embedded or External Task Forms')},{value:'formData',label:translate('Generated Task Forms')}];};return(0,_propertiesPanel.SelectEntry)({element:element,id:'formType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function getFormData(element){var bo=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(bo,'camunda:FormData')[0];}function removePropertiesCommands(element,commandStack){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');var commands=[];// (1) reset formKey and formRef
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:_objectSpread(_objectSpread({},FORM_KEY_PROPS),FORM_REF_PROPS)}});// (2) remove formData if defined
if(extensionElements&&getFormData(element)){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),getFormData(element))}}});}return commands;}function getFormRefBinding(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return businessObject.get('camunda:formRefBinding')||'latest';}function getFormType(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_minDash.isDefined)(businessObject.get('camunda:formKey'))){return'formKey';}else if((0,_minDash.isDefined)(businessObject.get('camunda:formRef'))){return'formRef';}}function isFormSupported(element){return(0,_ModelUtil.is)(element,'bpmn:StartEvent')&&!(0,_ModelUtil.is)(element.parent,'bpmn:SubProcess')||(0,_ModelUtil.is)(element,'bpmn:UserTask');}function FormProps(props){var element=props.element;if(!isFormSupported(element)){return[];}var formType=getFormType(element),bindingType=getFormRefBinding(element);// (1) display form type select
var entries=_toConsumableArray(FormTypeProps());// (2) display form properties based on type
if(formType==='formKey'){entries.push({id:'formKey',component:FormKey,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(formType==='formRef'){entries.push({id:'formRef',component:FormRef,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'formRefBinding',component:Binding$1,isEdited:_propertiesPanel.isSelectEntryEdited});if(bindingType==='version'){entries.push({id:'formRefVersion',component:Version$1,isEdited:_propertiesPanel.isTextFieldEntryEdited});}}return entries;}function FormKey(props){var element=props.element;var debounce=useService('debounceInput');var modeling=useService('modeling');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:formKey');};var setValue=function setValue(value){modeling.updateProperties(element,{'camunda:formKey':value});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'formKey',label:translate('Form key'),getValue:getValue,setValue:setValue,debounce:debounce});}function FormRef(props){var element=props.element;var debounce=useService('debounceInput');var modeling=useService('modeling');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:formRef');};var setValue=function setValue(value){modeling.updateProperties(element,{'camunda:formRef':value});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'formRef',label:translate('Form reference'),getValue:getValue,setValue:setValue,debounce:debounce});}function Binding$1(props){var element=props.element;var modeling=useService('modeling');var translate=useService('translate');var getValue=function getValue(){return getFormRefBinding(element);};var setValue=function setValue(value){modeling.updateProperties(element,{'camunda:formRefBinding':value});};// Note: default is "latest",
// cf. https://docs.camunda.org/manual/develop/reference/bpmn20/custom-extensions/extension-attributes/#formrefbinding
var getOptions=function getOptions(){var options=[{value:'deployment',label:translate('deployment')},{value:'latest',label:translate('latest')},{value:'version',label:translate('version')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:'formRefBinding',label:translate('Binding'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function Version$1(props){var element=props.element;var debounce=useService('debounceInput');var modeling=useService('modeling');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:formRefVersion');};var setValue=function setValue(value){modeling.updateProperties(element,{'camunda:formRefVersion':value});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'formRefVersion',label:translate('Version'),getValue:getValue,setValue:setValue,debounce:debounce});}function HistoryCleanupProps(props){var element=props.element;var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(!(0,_ModelUtil.is)(element,'bpmn:Process')&&!((0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef'))){return[];}return[{id:'historyTimeToLive',component:HistoryTimeToLive,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function HistoryTimeToLive(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var process=getProcess$2(element);var getValue=function getValue(){return process.get('camunda:historyTimeToLive')||'';};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{'camunda:historyTimeToLive':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'historyTimeToLive',label:translate('Time to live'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////
function getProcess$2(element){return(0,_ModelUtil.is)(element,'bpmn:Process')?(0,_ModelUtil.getBusinessObject)(element):(0,_ModelUtil.getBusinessObject)(element).get('processRef');}function DmnImplementationProps(props){var element=props.element;var entries=[];var implementationType=getImplementationType(element);var bindingType=getDecisionRefBinding(element);if(implementationType!=='dmn'){return entries;}// (1) decisionRef
entries.push({id:'decisionRef',component:DecisionRef,isEdited:_propertiesPanel.isTextFieldEntryEdited});// (2) binding
entries.push({id:'decisionRefBinding',component:Binding,isEdited:_propertiesPanel.isSelectEntryEdited});// (3) version
if(bindingType==='version'){entries.push({id:'decisionRefVersion',component:Version,isEdited:_propertiesPanel.isTextFieldEntryEdited});}// (4) versionTag
if(bindingType==='versionTag'){entries.push({id:'decisionRefVersionTag',component:VersionTag$1,isEdited:_propertiesPanel.isTextFieldEntryEdited});}// (5) tenantId
entries.push({id:'decisionRefTenantId',component:TenantId,isEdited:_propertiesPanel.isTextFieldEntryEdited});// (6) resultVariable
entries.push({id:'decisionRefResultVariable',component:ResultVariable$2,isEdited:_propertiesPanel.isTextFieldEntryEdited});// (7) mapDecisionResult
if(getResultVariable(element)){entries.push({id:'mapDecisionResult',component:MapDecisionResult,isEdited:_propertiesPanel.isSelectEntryEdited});}return entries;}function DecisionRef(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:decisionRef');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:decisionRef':value||''}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'decisionRef',label:translate('Decision reference'),getValue:getValue,setValue:setValue,debounce:debounce});}function Binding(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getDecisionRefBinding(element);};var setValue=function setValue(value){var businessObject=(0,_ModelUtil.getBusinessObject)(element);// reset version properties on binding type change
var updatedProperties={'camunda:decisionRefVersion':undefined,'camunda:decisionRefVersionTag':undefined,'camunda:decisionRefBinding':value};commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:updatedProperties});};// Note: default is "latest",
// cf. https://docs.camunda.org/manual/latest/reference/bpmn20/custom-extensions/extension-attributes/#decisionrefbinding
var getOptions=function getOptions(){var options=[{value:'deployment',label:translate('deployment')},{value:'latest',label:translate('latest')},{value:'version',label:translate('version')},{value:'versionTag',label:translate('versionTag')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:'decisionRefBinding',label:translate('Binding'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function Version(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:decisionRefVersion');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:decisionRefVersion':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'decisionRefVersion',label:translate('Version'),getValue:getValue,setValue:setValue,debounce:debounce});}function VersionTag$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:decisionRefVersionTag');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:decisionRefVersionTag':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'decisionRefVersionTag',label:translate('Version tag'),getValue:getValue,setValue:setValue,debounce:debounce});}function TenantId(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:decisionRefTenantId');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:decisionRefTenantId':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'decisionRefTenantId',label:translate('Tenant ID'),getValue:getValue,setValue:setValue,debounce:debounce});}function ResultVariable$2(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return getResultVariable(businessObject);};// Note: camunda:mapDecisionResult got cleaned up in modeling behavior
// cf. https://github.com/camunda/camunda-bpmn-js/blob/main/lib/camunda-platform/features/modeling/behavior/UpdateResultVariableBehavior.js
var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:resultVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'decisionRefResultVariable',label:translate('Result variable'),getValue:getValue,setValue:setValue,debounce:debounce});}function MapDecisionResult(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:mapDecisionResult')||'resultList';};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:mapDecisionResult':value}});};// Note: default is "resultList",
// cf. https://docs.camunda.org/manual/latest/reference/bpmn20/custom-extensions/extension-attributes/#mapdecisionresult
var getOptions=function getOptions(){var options=[{value:'collectEntries',label:translate('collectEntries (List<Object>)')},{value:'resultList',label:translate('resultList (List<Map<String, Object>>)')},{value:'singleEntry',label:translate('singleEntry (TypedValue)')},{value:'singleResult',label:translate('singleResult (Map<String, Object>)')}];return options;};return(0,_propertiesPanel.SelectEntry)({element:element,id:'mapDecisionResult',label:translate('Map decision result'),getValue:getValue,setValue:setValue,getOptions:getOptions});}// helper ////////////////////
function getDecisionRefBinding(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return businessObject.get('camunda:decisionRefBinding')||'latest';}function getResultVariable(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return businessObject.get('camunda:resultVariable');}var DELEGATE_PROPS={'camunda:class':undefined,'camunda:expression':undefined,'camunda:delegateExpression':undefined,'camunda:resultVariable':undefined};var DMN_CAPABLE_PROPS={'camunda:decisionRef':undefined,'camunda:decisionRefBinding':'latest','camunda:decisionRefVersion':undefined,'camunda:mapDecisionResult':'resultList','camunda:decisionRefTenantId':undefined};var EXTERNAL_CAPABLE_PROPS={'camunda:type':undefined,'camunda:topic':undefined};var IMPLEMENTATION_TYPE_NONE_LABEL='<none>',IMPLEMENTATION_TYPE_JAVA_LABEL='Java class',IMPLEMENTATION_TYPE_EXPRESSION_LABEL='Expression',IMPLEMENTATION_TYPE_DELEGATE_LABEL='Delegate expression',IMPLEMENTATION_TYPE_DMN_LABEL='DMN',IMPLEMENTATION_TYPE_EXTERNAL_LABEL='External',IMPLEMENTATION_TYPE_CONNECTOR_LABEL='Connector';function ImplementationTypeProps(props){return[{id:'implementationType',component:ImplementationType,isEdited:_propertiesPanel.isSelectEntryEdited}];}function ImplementationType(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return getImplementationType(element)||'';};var setValue=function setValue(value){var oldType=getImplementationType(element);var businessObject=getServiceTaskLikeBusinessObject(element);var commands=[];var updatedProperties=DELEGATE_PROPS;var extensionElements=businessObject.get('extensionElements');// (1) class, expression, delegateExpression
if(isDelegateType(value)){updatedProperties=_objectSpread(_objectSpread({},updatedProperties),{},_defineProperty({},value,isDelegateType(oldType)?businessObject.get("camunda:".concat(oldType)):''));}// (2) dmn
if(isDmnCapable(businessObject)){updatedProperties=_objectSpread(_objectSpread({},updatedProperties),DMN_CAPABLE_PROPS);if(value==='dmn'){updatedProperties=_objectSpread(_objectSpread({},updatedProperties),{},{'camunda:decisionRef':''});}}// (3) external
// Note: error event definition elements got cleaned up in modeling behavior
// cf. https://github.com/camunda/camunda-bpmn-js/blob/main/lib/camunda-platform/features/modeling/behavior/DeleteErrorEventDefinitionBehavior.js
if(isExternalCapable(businessObject)){updatedProperties=_objectSpread(_objectSpread({},updatedProperties),EXTERNAL_CAPABLE_PROPS);if(value==='external'){updatedProperties=_objectSpread(_objectSpread({},updatedProperties),{},{'camunda:type':'external','camunda:topic':''});}}// (4) connector
if(isServiceTaskLike(businessObject)){// (4.1) remove all connectors on type change
var connectors=getConnectors$1(businessObject);if(connectors.length){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),function(value){return connectors.includes(value);})}}});}// (4.2) create connector
if(value==='connector'){// ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push(UpdateModdlePropertiesCommand(element,businessObject,{extensionElements:extensionElements}));}var connector=createElement('camunda:Connector',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[connector])}}});}}// (5) collect all property updates
commands.push(UpdateModdlePropertiesCommand(element,businessObject,updatedProperties));// (6) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};var getOptions=function getOptions(){var businessObject=getServiceTaskLikeBusinessObject(element);var options=[{value:'',label:translate(IMPLEMENTATION_TYPE_NONE_LABEL)},{value:'class',label:translate(IMPLEMENTATION_TYPE_JAVA_LABEL)},{value:'expression',label:translate(IMPLEMENTATION_TYPE_EXPRESSION_LABEL)},{value:'delegateExpression',label:translate(IMPLEMENTATION_TYPE_DELEGATE_LABEL)}];if(isDmnCapable(businessObject)){options.push({value:'dmn',label:translate(IMPLEMENTATION_TYPE_DMN_LABEL)});}if(isExternalCapable(businessObject)){options.push({value:'external',label:translate(IMPLEMENTATION_TYPE_EXTERNAL_LABEL)});}if(isServiceTaskLike(businessObject)){options.push({value:'connector',label:translate(IMPLEMENTATION_TYPE_CONNECTOR_LABEL)});}return sortByPriority(options);};return(0,_propertiesPanel.SelectEntry)({element:element,id:'implementationType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}// helper ///////////////////////
function isDelegateType(type){return['class','expression','delegateExpression'].includes(type);}function getConnectors$1(businessObject){return getExtensionElementsList(businessObject,'camunda:Connector');}function UpdateModdlePropertiesCommand(element,businessObject,newProperties){return{cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:newProperties}};}function sortByPriority(options){var _priorities;var priorities=(_priorities={},_defineProperty(_priorities,IMPLEMENTATION_TYPE_NONE_LABEL,0),_defineProperty(_priorities,IMPLEMENTATION_TYPE_JAVA_LABEL,3),_defineProperty(_priorities,IMPLEMENTATION_TYPE_EXPRESSION_LABEL,4),_defineProperty(_priorities,IMPLEMENTATION_TYPE_DELEGATE_LABEL,5),_defineProperty(_priorities,IMPLEMENTATION_TYPE_DMN_LABEL,1),_defineProperty(_priorities,IMPLEMENTATION_TYPE_EXTERNAL_LABEL,2),_defineProperty(_priorities,IMPLEMENTATION_TYPE_CONNECTOR_LABEL,6),_priorities);return(0,_minDash.sortBy)(options,function(o){return priorities[o.label];});}function ImplementationProps(props){var element=props.element;if(!getServiceTaskLikeBusinessObject(element)){return[];}var implementationType=getImplementationType(element);// (1) display implementation type select
var entries=_toConsumableArray(ImplementationTypeProps());// (2) display implementation properties based on type
if(implementationType==='class'){entries.push({id:'javaClass',component:JavaClass,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(implementationType==='expression'){entries.push({id:'expression',component:Expression$1,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'expressionResultVariable',component:ResultVariable$1,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(implementationType==='delegateExpression'){entries.push({id:'delegateExpression',component:DelegateExpression,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(implementationType==='dmn'){entries.push.apply(entries,_toConsumableArray(DmnImplementationProps({element:element})));}else if(implementationType==='external'){entries.push({id:'externalTopic',component:Topic,isEdited:_propertiesPanel.isTextFieldEntryEdited});}else if(implementationType==='connector'){entries.push({id:'connectorId',component:ConnectorId,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function JavaClass(props){var element=props.element,_props$businessObject=props.businessObject,businessObject=_props$businessObject===void 0?getServiceTaskLikeBusinessObject(element):_props$businessObject,_props$id=props.id,id=_props$id===void 0?'javaClass':_props$id;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return businessObject.get('camunda:class');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:class':value||''}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:id,label:translate('Java class'),getValue:getValue,setValue:setValue,debounce:debounce});}function Expression$1(props){var element=props.element,_props$businessObject2=props.businessObject,businessObject=_props$businessObject2===void 0?getServiceTaskLikeBusinessObject(element):_props$businessObject2,_props$id2=props.id,id=_props$id2===void 0?'expression':_props$id2;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return businessObject.get('camunda:expression');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:expression':value||''}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:id,label:translate('Expression'),getValue:getValue,setValue:setValue,debounce:debounce});}function ResultVariable$1(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=getServiceTaskLikeBusinessObject(element);var getValue=function getValue(){return businessObject.get('camunda:resultVariable');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:resultVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'expressionResultVariable',label:translate('Result variable'),getValue:getValue,setValue:setValue,debounce:debounce});}function DelegateExpression(props){var element=props.element,_props$businessObject3=props.businessObject,businessObject=_props$businessObject3===void 0?getServiceTaskLikeBusinessObject(element):_props$businessObject3,_props$id3=props.id,id=_props$id3===void 0?'delegateExpression':_props$id3;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var getValue=function getValue(){return businessObject.get('camunda:delegateExpression');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:delegateExpression':value||''}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:id,label:translate('Delegate expression'),getValue:getValue,setValue:setValue,debounce:debounce});}function Topic(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=getServiceTaskLikeBusinessObject(element);var getValue=function getValue(){return businessObject.get('camunda:topic');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:topic':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'externalTopic',label:translate('Topic'),getValue:getValue,setValue:setValue,debounce:debounce});}function ConnectorId(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var connector=getConnector(element);var getValue=function getValue(){return connector.get('camunda:connectorId');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:connector,properties:{'camunda:connectorId':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'connectorId',label:translate('Connector ID'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////
function getConnectors(businessObject){return getExtensionElementsList(businessObject,'camunda:Connector');}function getConnector(element){var businessObject=getServiceTaskLikeBusinessObject(element);var connectors=getConnectors(businessObject);return connectors[0];}function InitiatorProps(props){var element=props.element;if(!isInitiator(element)){return[];}return[{id:'initiator',component:Initiator,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function Initiator(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:initiator');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:initiator':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'initiator',label:translate('Initiator'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ///////////////////
function isInitiator(element){return(0,_ModelUtil.is)(element,'camunda:Initiator')&&!(0,_ModelUtil.is)(element.parent,'bpmn:SubProcess');}/**
 * Cf. https://docs.camunda.org/manual/7.15/reference/bpmn20/subprocesses/call-activity/#passing-variables
 */function InMappingPropagationProps(props){var element=props.element;if(!areInMappingsSupported$1(element)){return[];}var entries=[{id:'inMapping-propagation',component:PropagateAll$1,isEdited:_propertiesPanel.isCheckboxEntryEdited}];if(isPropagateAll$1(element)){entries.push({id:'inMapping-propagation-local',component:Local$2,isEdited:_propertiesPanel.isCheckboxEntryEdited});}return entries;}function PropagateAll$1(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var getValue=function getValue(){return isPropagateAll$1(element);};var setValue=function setValue(value){if(value){addInMapping();}else{removeInMapping();}};function addInMapping(){var businessObject=getSignalEventDefinition$1(element)||(0,_ModelUtil.getBusinessObject)(element);var mapping=createElement('camunda:In',{variables:'all'},null,bpmnFactory);addExtensionElements(element,businessObject,mapping,bpmnFactory,commandStack);}function removeInMapping(){var businessObject=getSignalEventDefinition$1(element)||(0,_ModelUtil.getBusinessObject)(element);var mappings=findRelevantInMappings(element);removeExtensionElements(element,businessObject,mappings,commandStack);}return(0,_propertiesPanel.CheckboxEntry)({id:'inMapping-propagation',label:translate('Propagate all variables'),getValue:getValue,setValue:setValue});}function Local$2(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var mapping=findRelevantInMappings(element)[0];var getValue=function getValue(){return mapping.get('camunda:local');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:{local:value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'inMapping-propagation-local',label:translate('Local'),getValue:getValue,setValue:setValue});}// helper //////////////////////////
function areInMappingsSupported$1(element){var signalEventDefinition=getSignalEventDefinition$1(element);if(signalEventDefinition){return(0,_ModelingUtil.isAny)(element,['bpmn:IntermediateThrowEvent','bpmn:EndEvent']);}return(0,_ModelUtil.is)(element,'bpmn:CallActivity');}function getInMappings$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var signalEventDefinition=getSignalEventDefinition$1(businessObject);return getExtensionElementsList(signalEventDefinition||businessObject,'camunda:In');}function findRelevantInMappings(element){var inMappings=getInMappings$1(element);return(0,_minDash.filter)(inMappings,function(mapping){var variables=mapping.get('variables');return variables&&variables==='all';});}function isPropagateAll$1(element){var mappings=findRelevantInMappings(element);return!!mappings.length;}var DEFAULT_PROPS$1={'source':undefined,'sourceExpression':undefined};function InOutMapping(props){var idPrefix=props.idPrefix,mapping=props.mapping;var type=getInOutType(mapping);var entries=[];// (1) Type
entries.push({id:idPrefix+'-type',component:Type,idPrefix:idPrefix,mapping:mapping});// (2) Source
if(type==='source'){entries.push({id:idPrefix+'-source',component:Source,idPrefix:idPrefix,mapping:mapping});}// (3) Source expression
if(type==='sourceExpression'){entries.push({id:idPrefix+'-sourceExpression',component:SourceExpression,idPrefix:idPrefix,mapping:mapping});}// (4) Target
entries.push({id:idPrefix+'-target',component:Target,idPrefix:idPrefix,mapping:mapping});// (5) Local
entries.push({id:idPrefix+'-local',component:Local$1,idPrefix:idPrefix,mapping:mapping});return entries;}function Type(props){var idPrefix=props.idPrefix,element=props.element,mapping=props.mapping;var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(mapping){return getInOutType(mapping);};var setValue=function setValue(value){var properties=_objectSpread(_objectSpread({},DEFAULT_PROPS$1),{},_defineProperty({},value,''));commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:properties});};var getOptions=function getOptions(){var options=[{label:translate('Source'),value:'source'},{label:translate('Source expression'),value:'sourceExpression'}];return options;};return(0,_propertiesPanel.SelectEntry)({element:mapping,id:idPrefix+'-type',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function Source(props){var idPrefix=props.idPrefix,element=props.element,mapping=props.mapping;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:{source:value}});};var getValue=function getValue(mapping){return mapping.get('camunda:source');};return(0,_propertiesPanel.TextFieldEntry)({element:mapping,id:idPrefix+'-source',label:translate('Source'),getValue:getValue,setValue:setValue,debounce:debounce});}function SourceExpression(props){var idPrefix=props.idPrefix,element=props.element,mapping=props.mapping;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:{sourceExpression:value}});};var getValue=function getValue(mapping){return mapping.get('camunda:sourceExpression');};return(0,_propertiesPanel.TextFieldEntry)({element:mapping,id:idPrefix+'-sourceExpression',label:translate('Source expression'),getValue:getValue,setValue:setValue,debounce:debounce});}function Target(props){var idPrefix=props.idPrefix,element=props.element,mapping=props.mapping;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:{target:value}});};var getValue=function getValue(mapping){return mapping.get('camunda:target');};return(0,_propertiesPanel.TextFieldEntry)({element:mapping,id:idPrefix+'-target',label:translate('Target'),getValue:getValue,setValue:setValue,debounce:debounce});}function Local$1(props){var idPrefix=props.idPrefix,element=props.element,mapping=props.mapping;var commandStack=useService('commandStack');var translate=useService('translate');var getValue=function getValue(){return mapping.get('camunda:local');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:{local:value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:idPrefix+'-local',label:translate('Local'),getValue:getValue,setValue:setValue});}// helper ///////////////////
function getInOutType(mapping){var inOutType='';if(typeof mapping.source!=='undefined'){inOutType='source';}else if(typeof mapping.sourceExpression!=='undefined'){inOutType='sourceExpression';}return inOutType;}/**
 * Cf. https://docs.camunda.org/manual/latest/reference/bpmn20/custom-extensions/extension-elements/#in
 */function InMappingProps(_ref116){var element=_ref116.element,injector=_ref116.injector;if(!areInMappingsSupported(element)){return null;}var variableMappings=getInMappings(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=variableMappings.map(function(mapping,index){var id=element.id+'-inMapping-'+index;return{id:id,label:mapping.get('target')||'',entries:InOutMapping({idPrefix:id,element:element,mapping:mapping}),autoFocusEntry:id+'-target',remove:removeFactory$3({commandStack:commandStack,element:element,mapping:mapping})};});return{items:items,add:addFactory$2({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element})};}function removeFactory$3(_ref117){var commandStack=_ref117.commandStack,element=_ref117.element,mapping=_ref117.mapping;return function(event){event.stopPropagation();var businessObject=getSignalEventDefinition$1(element)||(0,_ModelUtil.getBusinessObject)(element);removeExtensionElements(element,businessObject,mapping,commandStack);};}function addFactory$2(_ref118){var bpmnFactory=_ref118.bpmnFactory,commandStack=_ref118.commandStack,element=_ref118.element;return function(event){event.stopPropagation();var businessObject=getSignalEventDefinition$1(element)||(0,_ModelUtil.getBusinessObject)(element);var newMapping=createElement('camunda:In',{source:''// source is the default type
},null,bpmnFactory);addExtensionElements(element,businessObject,newMapping,bpmnFactory,commandStack);};}// helper ///////////////
function getInMappings(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var signalEventDefinition=getSignalEventDefinition$1(businessObject);var mappings=getExtensionElementsList(signalEventDefinition||businessObject,'camunda:In');// only retrieve relevant mappings here, others are handled in other groups
// mapping.businessKey => camunda-platform/CallAvtivityProps
// mapping.variables => camunda-platform/InMappingPropagationProps
return(0,_minDash.filter)(mappings,function(mapping){return!mapping.businessKey&&!(mapping.variables&&mapping.variables==='all');});}function areInMappingsSupported(element){var signalEventDefinition=getSignalEventDefinition$1(element);if(signalEventDefinition){return(0,_ModelingUtil.isAny)(element,['bpmn:IntermediateThrowEvent','bpmn:EndEvent']);}return(0,_ModelUtil.is)(element,'bpmn:CallActivity');}function InputProps(props){var element=props.element,injector=props.injector;if(!areInputParametersSupported(element)){return null;}var inputParameters=getInputParameters(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=inputParameters.map(function(parameter,index){var id=element.id+'-inputParameter-'+index;return{id:id,label:parameter.get('name')||'',entries:InputOutputParameter({idPrefix:id,element:element,parameter:parameter}),autoFocusEntry:id+'-name',remove:removeFactory$2({element:element,commandStack:commandStack,parameter:parameter})};});function add(event){event.stopPropagation();commandStack.execute('properties-panel.multi-command-executor',AddParameterCmd(element,'camunda:InputParameter',bpmnFactory));}return{items:items,add:add,shouldSort:false};}function removeFactory$2(props){var commandStack=props.commandStack,element=props.element,parameter=props.parameter;return function(event){event.stopPropagation();var inputOutput=getInputOutput(element);if(!inputOutput){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:{inputParameters:(0,_minDash.without)(inputOutput.get('inputParameters'),parameter)}});};}function JobExecutionProps(props){var element=props.element;var businessObject=(0,_ModelUtil.getBusinessObject)(element);var entries=[];// (1) add retryTimeCycle field for camunda:asyncCapable enabled Elements
// or TimerEvents
if((0,_ModelUtil.is)(element,'camunda:AsyncCapable')&&isAsync$1(businessObject)||isTimerEvent(element)){entries.push({id:'retryTimeCycle',component:RetryTimeCycle,isEdited:_propertiesPanel.isTextFieldEntryEdited});}// (2) add jobPriority field for camunda:jobPriorized with async enabled
//  or Processes
//  or Processes referred to by participants
//  or TimerEvents
if((0,_ModelUtil.is)(element,'camunda:JobPriorized')&&isAsync$1(businessObject)||(0,_ModelUtil.is)(element,'bpmn:Process')||(0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef')||isTimerEvent(element)){entries.push({id:'jobPriority',component:JobPriority,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function JobPriority(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.is)(element,'bpmn:Participant')?(0,_ModelUtil.getBusinessObject)(element).get('processRef'):(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:jobPriority');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:jobPriority':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'jobPriority',label:translate('Priority'),getValue:getValue,setValue:setValue,debounce:debounce});}function RetryTimeCycle(props){var element=props.element;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){var failedJobRetryTimeCycle=getExtensionElementsList(businessObject,'camunda:FailedJobRetryTimeCycle')[0];return failedJobRetryTimeCycle&&failedJobRetryTimeCycle.body;};var setValue=function setValue(value){var commands=[];var extensionElements=businessObject.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}// (2) ensure failedJobRetryTimeCycle
var failedJobRetryTimeCycle=getExtensionElementsList(businessObject,'camunda:FailedJobRetryTimeCycle')[0];if(!failedJobRetryTimeCycle){failedJobRetryTimeCycle=createElement('camunda:FailedJobRetryTimeCycle',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[failedJobRetryTimeCycle])}}});}// (3) update failedJobRetryTimeCycle value
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:failedJobRetryTimeCycle,properties:{body:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'retryTimeCycle',label:translate('Retry time cycle'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////
/**
 * @param  {ModdleElement} bo
 * @return {boolean} a boolean value
 */function isAsyncBefore$1(bo){return!!(bo.get('camunda:asyncBefore')||bo.get('camunda:async'));}/**
 * @param  {ModdleElement} bo
 * @return {boolean}
 */function isAsyncAfter$1(bo){return!!bo.get('camunda:asyncAfter');}/**
 * isAsync - returns true if the attribute 'camunda:asyncAfter' or 'camunda:asyncBefore'
 * is set to true.
 *
 * @param  {ModdleElement} bo
 * @return {boolean}
 */function isAsync$1(bo){return isAsyncAfter$1(bo)||isAsyncBefore$1(bo);}/**
 * isTimerEvent - returns true if the element is a bpmn:Event with a timerEventDefinition
 *
 * @param  {ModdleElement} element
 * @return {boolean}
 */function isTimerEvent(element){return(0,_ModelUtil.is)(element,'bpmn:Event')&&getTimerEventDefinition$1(element);}/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function MultiInstanceProps(props){var element=props.element;var loopCharacteristics=getLoopCharacteristics(element);var entries=props.entries||[];if(!isMultiInstanceSupported(element)){return entries;}entries.push({id:'collection',component:Collection,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'elementVariable',component:ElementVariable,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'multiInstanceAsynchronousBefore',component:MultiInstanceAsynchronousBefore,isEdited:_propertiesPanel.isCheckboxEntryEdited},{id:'multiInstanceAsynchronousAfter',component:MultiInstanceAsynchronousAfter,isEdited:_propertiesPanel.isCheckboxEntryEdited});if(isAsync(loopCharacteristics)){entries.push({id:'multiInstanceExclusive',component:MultiInstanceExclusive,isEdited:checkboxIsEditedInverted},{id:'multiInstanceRetryTimeCycle',component:MultiInstanceRetryTimeCycle,isEdited:_propertiesPanel.isTextFieldEntryEdited});}return entries;}function Collection(props){var element=props.element;var debounce=useService('debounceInput');var commandStack=useService('commandStack');var translate=useService('translate');var loopCharacteristics=getLoopCharacteristics(element);var getValue=function getValue(){return getCollection(element);};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:loopCharacteristics,properties:{'camunda:collection':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'collection',label:translate('Collection'),getValue:getValue,setValue:setValue,debounce:debounce});}function ElementVariable(props){var element=props.element;var debounce=useService('debounceInput');var commandStack=useService('commandStack');var translate=useService('translate');var loopCharacteristics=getLoopCharacteristics(element);var getValue=function getValue(){return getElementVariable(element);};var setValue=function setValue(value){return commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:loopCharacteristics,properties:{'camunda:elementVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'elementVariable',label:translate('Element variable'),getValue:getValue,setValue:setValue,debounce:debounce});}function MultiInstanceAsynchronousBefore(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var loopCharacteristics=getLoopCharacteristics(element);var getValue=function getValue(){return isAsyncBefore(loopCharacteristics);};var setValue=function setValue(value){// overwrite the legacy `async` property, we will use the more explicit `asyncBefore`
var properties={'camunda:asyncBefore':value,'camunda:async':undefined};commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:loopCharacteristics,properties:properties});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'multiInstanceAsynchronousBefore',label:translate('Asynchronous before'),getValue:getValue,setValue:setValue});}function MultiInstanceAsynchronousAfter(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var loopCharacteristics=getLoopCharacteristics(element);var getValue=function getValue(){return isAsyncAfter(loopCharacteristics);};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:loopCharacteristics,properties:{'camunda:asyncAfter':value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'multiInstanceAsynchronousAfter',label:translate('Asynchronous after'),getValue:getValue,setValue:setValue});}function MultiInstanceExclusive(props){var element=props.element;var commandStack=useService('commandStack'),translate=useService('translate');var loopCharacteristics=getLoopCharacteristics(element);var getValue=function getValue(){return isExclusive(loopCharacteristics);};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:loopCharacteristics,properties:{'camunda:exclusive':value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'multiInstanceExclusive',label:translate('Exclusive'),getValue:getValue,setValue:setValue});}function MultiInstanceRetryTimeCycle(props){var element=props.element;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var loopCharacteristics=getLoopCharacteristics(element);var getValue=function getValue(){var failedJobRetryTimeCycle=getExtensionElementsList(loopCharacteristics,'camunda:FailedJobRetryTimeCycle')[0];return failedJobRetryTimeCycle&&failedJobRetryTimeCycle.body;};var setValue=function setValue(value){var commands=[];var extensionElements=loopCharacteristics.get('extensionElements');// (1) ensure extension elements
if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{values:[]},loopCharacteristics,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:loopCharacteristics,properties:{extensionElements:extensionElements}}});}// (2) ensure failedJobRetryTimeCycle
var failedJobRetryTimeCycle=getExtensionElementsList(loopCharacteristics,'camunda:FailedJobRetryTimeCycle')[0];if(!failedJobRetryTimeCycle){failedJobRetryTimeCycle=createElement('camunda:FailedJobRetryTimeCycle',{},extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:loopCharacteristics,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[failedJobRetryTimeCycle])}}});}// (3) update failedJobRetryTimeCycle value
commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:failedJobRetryTimeCycle,properties:{body:value}}});// (4) commit all updates
commandStack.execute('properties-panel.multi-command-executor',commands);};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'multiInstanceRetryTimeCycle',label:translate('Retry time cycle'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper ////////////////////////////
// generic ///////////////////////////
/**
 * isMultiInstanceSupported - check whether given element supports camunda specific props
 * for multiInstance (ref. <camunda:Cllectable>).
 *
 * @param {djs.model.Base} element
 * @return {boolean}
 */function isMultiInstanceSupported(element){var loopCharacteristics=getLoopCharacteristics(element);return!!loopCharacteristics&&(0,_ModelUtil.is)(loopCharacteristics,'camunda:Collectable');}/**
 * getProperty - get a property value of the loop characteristics.
 *
 * @param {djs.model.Base} element
 * @param {string} propertyName
 *
 * @return {any} the property value
 */function getProperty(element,propertyName){var loopCharacteristics=getLoopCharacteristics(element);return loopCharacteristics&&loopCharacteristics.get(propertyName);}/**
 * getLoopCharacteristics - get loopCharacteristics of a given element.
 *
 * @param {djs.model.Base} element
 * @return {ModdleElement<bpmn:MultiInstanceLoopCharacteristics> | undefined}
 */function getLoopCharacteristics(element){var bo=(0,_ModelUtil.getBusinessObject)(element);return bo.loopCharacteristics;}// collection
/**
 * getCollection - get the 'camunda:collection' attribute value of the loop characteristics.
 *
 * @param {djs.model.Base} element
 *
 * @return {string} the 'camunda:collection' value
 */function getCollection(element){return getProperty(element,'camunda:collection');}// elementVariable
/**
 * getElementVariable - get the 'camunda:elementVariable' attribute value of the loop characteristics.
 *
 * @param {djs.model.Base} element
 *
 * @return {string} the 'camunda:elementVariable' value
 */function getElementVariable(element){return getProperty(element,'camunda:elementVariable');}// asyncBefore asyncAfter
/**
 * Returns true if the attribute 'camunda:asyncBefore' is set
 * to true.
 *
 * @param  {ModdleElement} bo
 *
 * @return {boolean} a boolean value
 */function isAsyncBefore(bo){return!!(bo.get('camunda:asyncBefore')||bo.get('camunda:async'));}/**
 * Returns true if the attribute 'camunda:asyncAfter' is set
 * to true.
 *
 * @param  {ModdleElement} bo
 *
 * @return {boolean} a boolean value
 */function isAsyncAfter(bo){return!!bo.get('camunda:asyncAfter');}/**
 * Returns true if the attribute 'camunda:exclusive' is set
 * to true.
 *
 * @param  {ModdleElement} bo
 *
 * @return {boolean} a boolean value
 */function isExclusive(bo){return!!bo.get('camunda:exclusive');}/**
 * isAsync - returns true if the attribute 'camunda:asyncAfter' or 'camunda:asyncBefore'
 * is set to true.
 *
 * @param  {ModdleElement} bo
 * @return {boolean}
 */function isAsync(bo){return isAsyncAfter(bo)||isAsyncBefore(bo);}// Checkbox
function checkboxIsEditedInverted(node){return node&&!node.checked;}/**
 * Cf. https://docs.camunda.org/manual/7.15/reference/bpmn20/subprocesses/call-activity/#passing-variables
 */function OutMappingPropagationProps(props){var element=props.element;if(!areOutMappingsSupported$1(element)){return[];}var entries=[{id:'outMapping-propagation',component:PropagateAll,isEdited:_propertiesPanel.isCheckboxEntryEdited}];if(isPropagateAll(element)){entries.push({id:'outMapping-propagation-local',component:Local,isEdited:_propertiesPanel.isCheckboxEntryEdited});}return entries;}function PropagateAll(props){var element=props.element;var commandStack=useService('commandStack');var bpmnFactory=useService('bpmnFactory');var translate=useService('translate');var getValue=function getValue(){return isPropagateAll(element);};var setValue=function setValue(value){if(value){addOutMapping();}else{removeOutMapping();}};function addOutMapping(){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var mapping=createElement('camunda:Out',{variables:'all'},null,bpmnFactory);addExtensionElements(element,businessObject,mapping,bpmnFactory,commandStack);}function removeOutMapping(){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var mappings=findRelevantOutMappings(element);removeExtensionElements(element,businessObject,mappings,commandStack);}return(0,_propertiesPanel.CheckboxEntry)({id:'outMapping-propagation',label:translate('Propagate all variables'),getValue:getValue,setValue:setValue});}function Local(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var mapping=findRelevantOutMappings(element)[0];var getValue=function getValue(){return mapping.get('camunda:local');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:mapping,properties:{local:value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'outMapping-propagation-local',label:translate('Local'),getValue:getValue,setValue:setValue});}// helper //////////////////////////
function areOutMappingsSupported$1(element){return(0,_ModelUtil.is)(element,'bpmn:CallActivity');}function getOutMappings$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return getExtensionElementsList(businessObject,'camunda:Out');}function findRelevantOutMappings(element){var inMappings=getOutMappings$1(element);return(0,_minDash.filter)(inMappings,function(mapping){var variables=mapping.get('variables');return variables&&variables==='all';});}function isPropagateAll(element){var mappings=findRelevantOutMappings(element);return!!mappings.length;}/**
 * Cf. https://docs.camunda.org/manual/latest/reference/bpmn20/custom-extensions/extension-elements/#out
 */function OutMappingProps(_ref119){var element=_ref119.element,injector=_ref119.injector;if(!areOutMappingsSupported(element)){return null;}var variableMappings=getOutMappings(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=variableMappings.map(function(mapping,index){var id=element.id+'-outMapping-'+index;return{id:id,label:mapping.get('target')||'',entries:InOutMapping({idPrefix:id,element:element,mapping:mapping}),autoFocusEntry:id+'-target',remove:removeFactory$1({commandStack:commandStack,element:element,mapping:mapping})};});return{items:items,add:addFactory$1({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element})};}function removeFactory$1(_ref120){var commandStack=_ref120.commandStack,element=_ref120.element,mapping=_ref120.mapping;return function(event){event.stopPropagation();var businessObject=(0,_ModelUtil.getBusinessObject)(element);removeExtensionElements(element,businessObject,mapping,commandStack);};}function addFactory$1(_ref121){var bpmnFactory=_ref121.bpmnFactory,commandStack=_ref121.commandStack,element=_ref121.element;return function(event){event.stopPropagation();var businessObject=(0,_ModelUtil.getBusinessObject)(element);var newMapping=createElement('camunda:Out',{source:''// source is the default type
},null,bpmnFactory);addExtensionElements(element,businessObject,newMapping,bpmnFactory,commandStack);};}// helper ///////////////
function getOutMappings(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var mappings=getExtensionElementsList(businessObject,'camunda:Out');// only retrieve relevant mappings here, others are handled in other groups
// mapping.businessKey => camunda-platform/CallAvtivityProps
// mapping.variables => camunda-platform/OutMappingPropagationProps
return(0,_minDash.filter)(mappings,function(mapping){return!mapping.businessKey&&!(mapping.variables&&mapping.variables==='all');});}function areOutMappingsSupported(element){return(0,_ModelUtil.is)(element,'bpmn:CallActivity');}function OutputProps(_ref122){var element=_ref122.element,injector=_ref122.injector;if(!areOutputParametersSupported(element)){return null;}var outputParameters=getOutputParameters(element)||[];var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var items=outputParameters.map(function(parameter,index){var id=element.id+'-outputParameter-'+index;return{id:id,label:parameter.get('name')||'',entries:InputOutputParameter({idPrefix:id,element:element,parameter:parameter}),autoFocusEntry:id+'-name',remove:removeFactory({commandStack:commandStack,element:element,parameter:parameter})};});return{items:items,add:addFactory({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element}),shouldSort:false};}function removeFactory(_ref123){var commandStack=_ref123.commandStack,element=_ref123.element,parameter=_ref123.parameter;return function(event){event.stopPropagation();var inputOutput=getInputOutput(element);if(!inputOutput){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:{outputParameters:(0,_minDash.without)(inputOutput.get('outputParameters'),parameter)}});};}function addFactory(_ref124){var bpmnFactory=_ref124.bpmnFactory,commandStack=_ref124.commandStack,element=_ref124.element;return function(event){event.stopPropagation();commandStack.execute('properties-panel.multi-command-executor',AddParameterCmd(element,'camunda:OutputParameter',bpmnFactory));};}function TimerProps(props){var element=props.element,listener=props.listener,idPrefix=props.idPrefix;var timerEventDefinition=props.timerEventDefinition;if(!timerEventDefinition){var businessObject=(0,_ModelUtil.getBusinessObject)(element);timerEventDefinition=getTimerEventDefinition(businessObject);}var timerEventDefinitionType=getTimerDefinitionType(timerEventDefinition);// (1) Only show for supported elements
if(!isTimerSupported(element)&&!isTimerSupportedOnListener(listener)){return[];}// (2) Provide entries, have a value only if selection was made
var entries=[];entries.push({id:getId(idPrefix,'timerEventDefinitionType'),component:TimerEventDefinitionType,isEdited:_propertiesPanel.isSelectEntryEdited,timerEventDefinition:timerEventDefinition,timerEventDefinitionType:timerEventDefinitionType});if(timerEventDefinitionType){entries.push({id:getId(idPrefix,'timerEventDefinitionValue'),component:TimerEventDefinitionValue,isEdited:_propertiesPanel.isTextFieldEntryEdited,timerEventDefinition:timerEventDefinition,timerEventDefinitionType:timerEventDefinitionType});}return entries;}/**
 * TimerEventDefinitionType - Generic select entry allowing to select a specific
 * timerEventDefintionType. To be used together with timerEventDefinitionValue.
 *
 * @param  {type} props
 * @return {SelectEntry}
 */function TimerEventDefinitionType(props){var element=props.element,timerEventDefinition=props.timerEventDefinition,timerEventDefinitionType=props.timerEventDefinitionType;var commandStack=useService('commandStack'),bpmnFactory=useService('bpmnFactory'),translate=useService('translate');var getValue=function getValue(){return timerEventDefinitionType||'';};var setValue=function setValue(value){// (1) Check if value is different to current type
if(value===timerEventDefinitionType){return;}// (2) Create empty formalExpression element
var formalExpression=bpmnFactory.create('bpmn:FormalExpression',{body:undefined});formalExpression.$parent=timerEventDefinition;// (3) Set the value for selected timerEventDefinitionType
var newProps={timeDuration:undefined,timeDate:undefined,timeCycle:undefined};if(value!==''){newProps[value]=formalExpression;}// (4) Execute businessObject update
commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventDefinition,properties:newProps});};var getOptions=function getOptions(element){return[{value:'',label:translate('<none>')},{value:'timeDate',label:translate('Date')},{value:'timeDuration',label:translate('Duration')},{value:'timeCycle',label:translate('Cycle')}];};return(0,_propertiesPanel.SelectEntry)({element:element,id:'timerEventDefinitionType',label:translate('Type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}/**
 * TimerEventDefinitionValue - Generic textField entry allowing to specify the
 * timerEventDefintionValue based on the set timerEventDefintionType. To be used
 * together with timerEventDefinitionType.
 *
 * @param  {type} props
 * @return {TextFieldEntry}
 */function TimerEventDefinitionValue(props){var element=props.element,timerEventDefinition=props.timerEventDefinition,timerEventDefinitionType=props.timerEventDefinitionType;var commandStack=useService('commandStack'),translate=useService('translate'),debounce=useService('debounceInput');var timerEventFormalExpression=timerEventDefinition.get(timerEventDefinitionType);var getValue=function getValue(){return timerEventFormalExpression&&timerEventFormalExpression.get('body');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:timerEventFormalExpression,properties:{body:value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'timerEventDefinitionValue',label:translate('Value'),getValue:getValue,setValue:setValue,debounce:debounce,description:getTimerEventDefinitionValueDescription(timerEventDefinitionType,translate)});}// helper //////////////////////////
function getTimerEventDefinitionValueDescription(timerDefinitionType,translate){switch(timerDefinitionType){case'timeDate':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A specific point in time defined as ISO 8601 combined date and time representation.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"2019-10-01T12:00:00Z"})," - ",translate('UTC time')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"2019-10-02T08:09:40+02:00"})," - ",translate('UTC plus 2 hours zone offset')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-date",target:"_blank",rel:"noopener",children:translate('Documentation: Timer events')})]});case'timeCycle':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A cycle defined as ISO 8601 repeating intervals format, or a cron expression.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"R5/PT10S"})," - ",translate('every 10 seconds, up to 5 times')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"R/P1D"})," - ",translate('every day, infinitely')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"0 0 9-17 * * MON-FRI"})," - ",translate('every hour on the hour from 9-5 p.m. UTC Monday-Friday')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-cycle",target:"_blank",rel:"noopener",children:translate('Documentation: Timer events')})]});case'timeDuration':return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("p",{children:translate('A time duration defined as ISO 8601 durations format.')}),(0,_jsxRuntime.jsxs)("ul",{children:[(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"PT15S"})," - ",translate('15 seconds')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"PT1H30M"})," - ",translate('1 hour and 30 minutes')]}),(0,_jsxRuntime.jsxs)("li",{children:[(0,_jsxRuntime.jsx)("code",{children:"P14D"})," - ",translate('14 days')]})]}),(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-duration",target:"_blank",rel:"noopener",children:translate('Documentation: Timer events')})]});}}function isTimerSupportedOnListener(listener){return listener&&(0,_ModelUtil.is)(listener,'camunda:TaskListener')&&getTimerEventDefinition(listener);}function getId(idPrefix,id){return idPrefix?idPrefix+id:id;}var LISTENER_ALLOWED_TYPES=['bpmn:Activity','bpmn:Event','bpmn:Gateway','bpmn:SequenceFlow','bpmn:Process','bpmn:Participant'];var SCRIPT_PROPS={'script':undefined,'resource':undefined,'scriptFormat':undefined};var CLASS_PROPS={'class':undefined};var EXPRESSION_PROPS={'expression':undefined};var DELEGATE_EXPRESSION_PROPS={'delegateExpression':undefined};var DEFAULT_PROPS=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},SCRIPT_PROPS),CLASS_PROPS),EXPRESSION_PROPS),DELEGATE_EXPRESSION_PROPS);var DEFAULT_EVENT_PROPS={'eventDefinitions':undefined,'event':undefined};var IMPLEMENTATION_TYPE_TO_LABEL={"class":'Java class',expression:'Expression',delegateExpression:'Delegate expression',script:'Script'};var EVENT_TO_LABEL={start:'Start',end:'End',take:'Take',create:'Create',assignment:'Assignment',complete:'Complete',"delete":'Delete',update:'Update',timeout:'Timeout'};/**
 * Cf. https://docs.camunda.org/manual/latest/user-guide/process-engine/delegation-code/#execution-listener
 */function ExecutionListenerProps(_ref125){var element=_ref125.element,injector=_ref125.injector;if(!(0,_ModelingUtil.isAny)(element,LISTENER_ALLOWED_TYPES)){return;}var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');if((0,_ModelUtil.is)(element,'bpmn:Participant')&&!element.businessObject.processRef){return;}var businessObject=getListenersContainer(element);var listeners=getExtensionElementsList(businessObject,'camunda:ExecutionListener');return{items:listeners.map(function(listener,index){var id="".concat(element.id,"-executionListener-").concat(index);// @TODO(barmac): Find a way to pass translate for internationalized label.
return{id:id,label:getListenerLabel(listener),entries:ExecutionListener({idPrefix:id,element:element,listener:listener}),remove:removeListenerFactory({element:element,listener:listener,commandStack:commandStack})};}),add:addExecutionListenerFactory({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element})};}function ExecutionListener(props){var idPrefix=props.idPrefix,element=props.element,listener=props.listener;return[{id:"".concat(idPrefix,"-eventType"),component:EventType,listener:listener},{id:"".concat(idPrefix,"-listenerType"),component:ListenerType,listener:listener}].concat(_toConsumableArray(ImplementationDetails({idPrefix:idPrefix,element:element,listener:listener})),[{id:"".concat(idPrefix,"-fields"),component:Fields,listener:listener}]);}function TaskListenerProps(_ref126){var element=_ref126.element,injector=_ref126.injector;if(!(0,_ModelUtil.is)(element,'bpmn:UserTask')){return;}var bpmnFactory=injector.get('bpmnFactory'),commandStack=injector.get('commandStack');var businessObject=getListenersContainer(element);var listeners=getExtensionElementsList(businessObject,'camunda:TaskListener');return{items:listeners.map(function(listener,index){var id="".concat(element.id,"-taskListener-").concat(index);// @TODO(barmac): Find a way to pass translate for internationalized label.
return{id:id,label:getListenerLabel(listener),entries:TaskListener({idPrefix:id,element:element,listener:listener}),remove:removeListenerFactory({element:element,listener:listener,commandStack:commandStack})};}),add:addTaskListenerFactory({bpmnFactory:bpmnFactory,commandStack:commandStack,element:element})};}function TaskListener(props){var idPrefix=props.idPrefix,element=props.element,listener=props.listener;return[{id:"".concat(idPrefix,"-eventType"),component:EventType,listener:listener},{id:"".concat(idPrefix,"-listenerId"),component:ListenerId,listener:listener},{id:"".concat(idPrefix,"-listenerType"),component:ListenerType,listener:listener}].concat(_toConsumableArray(ImplementationDetails({idPrefix:idPrefix,element:element,listener:listener})),_toConsumableArray(EventTypeDetails({idPrefix:idPrefix,element:element,listener:listener})),[{id:"".concat(idPrefix,"-fields"),component:Fields,listener:listener}]);}function removeListenerFactory(_ref127){var element=_ref127.element,listener=_ref127.listener,commandStack=_ref127.commandStack;return function removeListener(event){event.stopPropagation();removeExtensionElements(element,getListenersContainer(element),listener,commandStack);};}function EventType(_ref128){var id=_ref128.id,element=_ref128.element,listener=_ref128.listener;var translate=useService('translate');var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');function getValue(){return listener.get('event');}function setValue(value){var properties=getDefaultEventTypeProperties(value,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:listener,properties:properties});}function getOptions(){if((0,_ModelUtil.is)(listener,'camunda:TaskListener')){return[{value:'create',label:translate('create')},{value:'assignment',label:translate('assignment')},{value:'complete',label:translate('complete')},{value:'delete',label:translate('delete')},{value:'update',label:translate('update')},{value:'timeout',label:translate('timeout')}];}if((0,_ModelUtil.is)(element,'bpmn:SequenceFlow')){return[{value:'take',label:translate('take')}];}return[{value:'start',label:translate('start')},{value:'end',label:translate('end')}];}return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{id:id,label:translate('Event type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function ListenerId(_ref129){var id=_ref129.id,element=_ref129.element,listener=_ref129.listener;var translate=useService('translate');var debounce=useService('debounceInput');var commandStack=useService('commandStack');var options={element:element,id:id,label:translate('Listener ID'),debounce:debounce,isEdited:_propertiesPanel.isTextFieldEntryEdited,setValue:function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:listener,properties:{'camunda:id':value}});},getValue:function getValue(){return listener.get('camunda:id');}};return(0,_propertiesPanel.TextFieldEntry)(options);}function ListenerType(_ref130){var id=_ref130.id,element=_ref130.element,listener=_ref130.listener;var modeling=useService('modeling');var translate=useService('translate');var bpmnFactory=useService('bpmnFactory');function getValue(){return getListenerType(listener);}function setValue(value){var properties=getDefaultImplementationProperties(value,bpmnFactory);modeling.updateModdleProperties(element,listener,properties);}function getOptions(){return getListenerTypeOptions(translate);}return(0,_jsxRuntime.jsx)(_propertiesPanel.SelectEntry,{id:id,label:translate('Listener type'),getValue:getValue,setValue:setValue,getOptions:getOptions});}function ImplementationDetails(props){var idPrefix=props.idPrefix,element=props.element,listener=props.listener;var type=getListenerType(listener);if(type==='class'){return[{id:getPrefixedId(idPrefix,'javaClass'),component:JavaClass,businessObject:listener}];}else if(type==='expression'){return[{id:getPrefixedId(idPrefix,'expression'),component:Expression$1,businessObject:listener}];}else if(type==='delegateExpression'){return[{id:getPrefixedId(idPrefix,'delegateExpression'),component:DelegateExpression,businessObject:listener}];}else if(type==='script'){return ScriptProps({element:element,script:listener.get('script'),prefix:idPrefix});}// should never happen
return[];}function EventTypeDetails(props){var idPrefix=props.idPrefix,element=props.element,listener=props.listener;var type=listener.get('event');if(type==='timeout'){return TimerProps({element:element,listener:listener,timerEventDefinition:getTimerEventDefinition$1(listener),idPrefix:idPrefix});}return[];}function Field(props){var element=props.element,idPrefix=props.id,index=props.index,field=props.item,open=props.open;var fieldId="".concat(idPrefix,"-field-").concat(index);return(0,_jsxRuntime.jsx)(_propertiesPanel.CollapsibleEntry,{id:fieldId,element:element,entries:FieldInjection({element:element,field:field,idPrefix:fieldId}),label:field.get('name')||'<empty>',open:open});}function Fields(props){var id=props.id,element=props.element,listener=props.listener;var bpmnFactory=useService('bpmnFactory');var commandStack=useService('commandStack');var translate=useService('translate');var fields=listener.get('fields');function addField(){var field=createElement('camunda:Field',{},listener,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:listener,properties:{fields:[].concat(_toConsumableArray(listener.get('fields')),[field])}});}function removeField(field){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:listener,properties:{fields:(0,_minDash.without)(listener.get('fields'),field)}});}return(0,_jsxRuntime.jsx)(_propertiesPanel.ListEntry,{id:id,element:element,label:translate('Field injection'),items:fields,component:Field,onAdd:addField,onRemove:removeField,compareFn:compareName,autoFocusEntry:true});}function addListenerFactory(_ref131){var bpmnFactory=_ref131.bpmnFactory,commandStack=_ref131.commandStack,element=_ref131.element,listenerGroup=_ref131.listenerGroup;return function(event){event.stopPropagation();var listener=bpmnFactory.create(listenerGroup,{event:getDefaultEvent(element,listenerGroup),"class":''});var businessObject=getListenersContainer(element);addExtensionElements(element,businessObject,listener,bpmnFactory,commandStack);};}function addTaskListenerFactory(props){return addListenerFactory(_objectSpread(_objectSpread({},props),{},{listenerGroup:'camunda:TaskListener'}));}function addExecutionListenerFactory(props){return addListenerFactory(_objectSpread(_objectSpread({},props),{},{listenerGroup:'camunda:ExecutionListener'}));}// helper
/**
 * Get a readable label for a listener.
 *
 * @param {ModdleElement} listener
 * @param {string => string} [translate]
 */function getListenerLabel(listener){var translate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(value){return value;};var event=listener.get('event');var implementationType=getListenerType(listener);return"".concat(translate(EVENT_TO_LABEL[event]),": ").concat(translate(IMPLEMENTATION_TYPE_TO_LABEL[implementationType]));}function getListenerTypeOptions(translate){return Object.entries(IMPLEMENTATION_TYPE_TO_LABEL).map(function(_ref132){var _ref133=_slicedToArray(_ref132,2),value=_ref133[0],label=_ref133[1];return{value:value,label:translate(label)};});}function getListenerType(listener){return getImplementationType(listener);}function getDefaultEvent(element,listenerGroup){if(listenerGroup==='camunda:TaskListener')return'create';return(0,_ModelUtil.is)(element,'bpmn:SequenceFlow')?'take':'start';}function getDefaultImplementationProperties(type,bpmnFactory){switch(type){case'class':return _objectSpread(_objectSpread({},DEFAULT_PROPS),{},{'class':''});case'expression':return _objectSpread(_objectSpread({},DEFAULT_PROPS),{},{'expression':''});case'delegateExpression':return _objectSpread(_objectSpread({},DEFAULT_PROPS),{},{'delegateExpression':''});case'script':return _objectSpread(_objectSpread({},DEFAULT_PROPS),{},{'script':bpmnFactory.create('camunda:Script')});}}function getDefaultEventTypeProperties(type,bpmnFactory){switch(type){case'timeout':return _objectSpread(_objectSpread({},DEFAULT_EVENT_PROPS),{},{eventDefinitions:[bpmnFactory.create('bpmn:TimerEventDefinition')],event:type});default:return _objectSpread(_objectSpread({},DEFAULT_EVENT_PROPS),{},{event:type});}}function getPrefixedId(prefix,id){return"".concat(prefix,"-").concat(id);}function compareName(field,anotherField){var _ref134=[field.name,anotherField.name],_ref134$=_ref134[0],name=_ref134$===void 0?'':_ref134$,_ref134$2=_ref134[1],anotherName=_ref134$2===void 0?'':_ref134$2;return name===anotherName?0:name>anotherName?1:-1;}function getListenersContainer(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return businessObject.get('processRef')||businessObject;}function ProcessVariablesEntry(props){var element=props.element;var _useState7=(0,_hooks.useState)([]),_useState8=_slicedToArray(_useState7,2),variables=_useState8[0],setVariables=_useState8[1];(0,_hooks.useEffect)(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var businessObject,rootElement,scope,rawVariables,withName;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:businessObject=(0,_ModelUtil.getBusinessObject)(element);rootElement=getRootElement(businessObject);scope=getScope(element);_context2.next=5;return(0,_extractProcessVariables.getVariablesForScope)(scope,rootElement);case 5:rawVariables=_context2.sent;withName=populateElementNames(sortByName$1(rawVariables));setVariables(withName);case 8:case"end":return _context2.stop();}},_callee2);})),[element]);if(!variables.length){return null;}var byScope=groupByScope(variables);var multiScope=isMultiScope(byScope);var variableItems=[];// (2) get variables to display
if(multiScope){// (2a) multiple scopes, sub scopes first
// assumption: variables extractor fetches parent variables first
var reversed=(0,_minDash.map)(reverse((0,_minDash.keys)(byScope)),function(scopeKey){return byScope[scopeKey];});variableItems=(0,_minDash.flatten)(reversed);}else{// (2b) single scope
variableItems=variables;}var items=variableItems.map(function(variable,index){var id=element.id+'-variable-'+index;return{id:id,label:variable.name,entries:_toConsumableArray(ProcessVariableItem({idPrefix:id,multiScope:multiScope,variable:variable}))};});return(0,_jsxRuntime.jsx)(_propertiesPanel.ListGroup,_objectSpread(_objectSpread({},props),{},{items:items,shouldSort:false}));}function ProcessVariablesProps(props){var element=props.element;if(!canHaveProcessVariables(element)){return null;}return{component:ProcessVariablesEntry,shouldSort:false};}function ProcessVariableItem(props){var idPrefix=props.idPrefix,multiScope=props.multiScope,variable=props.variable;var entries=[];if(multiScope){entries.push({id:idPrefix+'-scope',component:Scope,idPrefix:idPrefix,variable:variable});}entries.push({id:idPrefix+'-createdIn',component:CreatedIn,idPrefix:idPrefix,variable:variable});return entries;}function Scope(props){var idPrefix=props.idPrefix,variable=props.variable;var translate=useService('translate');var id=idPrefix+'-scope';return(0,_jsxRuntime.jsxs)("div",{"data-entry-id":id,"class":"bio-properties-panel-entry",children:[(0,_jsxRuntime.jsx)("b",{style:"font-weight: bold","class":"bio-properties-panel-label",children:translate('Scope')}),(0,_jsxRuntime.jsx)("label",{id:prefixId(id),"class":"bio-properties-panel-label",children:variable.scope})]});}function CreatedIn(props){var idPrefix=props.idPrefix,variable=props.variable;var translate=useService('translate');var id=idPrefix+'-createdIn';var origin=variable.origin.join(', ');return(0,_jsxRuntime.jsxs)("div",{"data-entry-id":id,"class":"bio-properties-panel-entry",children:[(0,_jsxRuntime.jsx)("b",{style:"font-weight: bold","class":"bio-properties-panel-label",children:translate('Created in')}),(0,_jsxRuntime.jsx)("label",{id:prefixId(id),"class":"bio-properties-panel-label",children:origin})]});}// helper //////////////////////
function canHaveProcessVariables(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);return(0,_ModelingUtil.isAny)(element,['bpmn:Process','bpmn:SubProcess'])||(0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef');}function getRootElement(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(businessObject,'bpmn:Participant')){return businessObject.processRef;}if((0,_ModelUtil.is)(businessObject,'bpmn:Process')){return businessObject;}var parent=businessObject;while(parent.$parent&&!(0,_ModelUtil.is)(parent,'bpmn:Process')){parent=parent.$parent;}return parent;}function getScope(element){var bo=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(element,'bpmn:Participant')){return bo.processRef.id;}return bo.id;}function sortByName$1(variables){return(0,_minDash.sortBy)(variables,function(variable){return variable.name;});}function groupByScope(variables){return(0,_minDash.groupBy)(variables,'scope');}function populateElementNames(variables){(0,_minDash.forEach)(variables,function(variable){var names=(0,_minDash.map)(variable.origin,function(element){return element.name||element.id;});variable.origin=names;variable.scope=variable.scope.name||variable.scope.id;});return variables;}function isMultiScope(scopedVariables){return(0,_minDash.keys)(scopedVariables).length>1;}function reverse(array){return(0,_minDash.map)(array,function(a,i){return array[array.length-1-i];});}function prefixId(id){return"bio-properties-panel-".concat(id);}function ScriptTaskProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'bpmn:ScriptTask')){return[];}var entries=_toConsumableArray(ScriptProps({element:element}));entries.push({id:'scriptResultVariable',component:ResultVariable,isEdited:_propertiesPanel.isTextFieldEntryEdited});return entries;}function ResultVariable(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:resultVariable');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:resultVariable':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'scriptResultVariable',label:translate('Result variable'),getValue:getValue,setValue:setValue,debounce:debounce});}function TasklistProps(props){var element=props.element;var businessObject=(0,_ModelUtil.getBusinessObject)(element);var isEdited=function isEdited(node){return node&&!node.checked;};if(!(0,_ModelUtil.is)(element,'bpmn:Process')&&!((0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef'))){return[];}return[{id:'isStartableInTasklist',component:Startable,isEdited:isEdited}];}function Startable(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var process=getProcess$1(element);var getValue=function getValue(){return process.get('camunda:isStartableInTasklist');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{'camunda:isStartableInTasklist':value}});};return(0,_propertiesPanel.CheckboxEntry)({element:element,id:'isStartableInTasklist',label:translate('Startable'),getValue:getValue,setValue:setValue});}// helper //////////////////
function getProcess$1(element){return(0,_ModelUtil.is)(element,'bpmn:Process')?(0,_ModelUtil.getBusinessObject)(element):(0,_ModelUtil.getBusinessObject)(element).get('processRef');}/**
 * Cf. https://docs.camunda.org/manual/latest/reference/bpmn20/tasks/user-task/
 */function UserAssignmentProps(props){var element=props.element;if(!(0,_ModelUtil.is)(element,'camunda:Assignable')){return[];}return[{id:'assignee',component:Assignee,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'candidateGroups',component:CandidateGroups,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'candidateUsers',component:CandidateUsers,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'dueDate',component:DueDate,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'followUpDate',component:FollowUpDate,isEdited:_propertiesPanel.isTextFieldEntryEdited},{id:'priority',component:Priority,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function Assignee(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:assignee');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:assignee':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'assignee',label:translate('Assignee'),getValue:getValue,setValue:setValue,debounce:debounce});}function CandidateUsers(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:candidateUsers');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:candidateUsers':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'candidateUsers',label:translate('Candidate users'),getValue:getValue,setValue:setValue,debounce:debounce});}function CandidateGroups(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:candidateGroups');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:candidateGroups':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'candidateGroups',label:translate('Candidate groups'),getValue:getValue,setValue:setValue,debounce:debounce});}function DueDate(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:dueDate');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:dueDate':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'dueDate',label:translate('Due date'),description:translate('The due date as an EL expression (e.g. ${someDate}) or an ISO date (e.g. 2015-06-26T09:54:00).'),getValue:getValue,setValue:setValue,debounce:debounce});}function FollowUpDate(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:followUpDate');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:followUpDate':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'followUpDate',label:translate('Follow up date'),description:translate('The follow up date as an EL expression (e.g. ${someDate}) or an '+'ISO date (e.g. 2015-06-26T09:54:00).'),getValue:getValue,setValue:setValue,debounce:debounce});}function Priority(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var businessObject=(0,_ModelUtil.getBusinessObject)(element);var getValue=function getValue(){return businessObject.get('camunda:priority');};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{'camunda:priority':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'priority',label:translate('Priority'),getValue:getValue,setValue:setValue,debounce:debounce});}function VersionTagProps(props){var element=props.element;var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(!(0,_ModelUtil.is)(element,'bpmn:Process')&&!((0,_ModelUtil.is)(element,'bpmn:Participant')&&businessObject.get('processRef'))){return[];}return[{id:'versionTag',component:VersionTag,isEdited:_propertiesPanel.isTextFieldEntryEdited}];}function VersionTag(props){var element=props.element;var commandStack=useService('commandStack');var translate=useService('translate');var debounce=useService('debounceInput');var process=getProcess(element);var getValue=function getValue(){return process.get('camunda:versionTag')||'';};var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:process,properties:{'camunda:versionTag':value}});};return(0,_propertiesPanel.TextFieldEntry)({element:element,id:'versionTag',label:translate('Version tag'),getValue:getValue,setValue:setValue,debounce:debounce});}// helper //////////////////
function getProcess(element){return(0,_ModelUtil.is)(element,'bpmn:Process')?(0,_ModelUtil.getBusinessObject)(element):(0,_ModelUtil.getBusinessObject)(element).get('processRef');}var LOW_PRIORITY=500;var CAMUNDA_PLATFORM_GROUPS=[HistoryCleanupGroup,TasklistGroup,CandidateStarterGroup,ImplementationGroup,ExternalTaskGroup,ProcessVariablesGroup,ErrorsGroup,UserAssignmentGroup,FormGroup,FormDataGroup,TaskListenerGroup,StartInitiatorGroup,ScriptGroup,ConditionGroup,CallActivityGroup,AsynchronousContinuationsGroup,JobExecutionGroup,InMappingPropagationGroup,InMappingGroup,InputGroup,ConnectorInputGroup,OutMappingPropagationGroup,OutMappingGroup,OutputGroup,ConnectorOutputGroup,ExecutionListenerGroup,ExtensionPropertiesGroup,FieldInjectionGroup,BusinessKeyGroup];/**
 * Provides `camunda` namespace properties.
 *
 * @example
 * ```javascript
 * import BpmnModeler from 'bpmn-js/lib/Modeler';
 * import {
 *   BpmnPropertiesPanelModule,
 *   BpmnPropertiesProviderModule,
 *   CamundaPlatformPropertiesProviderModule
 * } from 'bpmn-js-properties-panel';
 *
 * const modeler = new BpmnModeler({
 *   container: '#canvas',
 *   propertiesPanel: {
 *     parent: '#properties'
 *   },
 *   additionalModules: [
 *     BpmnPropertiesPanelModule,
 *     BpmnPropertiesProviderModule,
 *     CamundaPlatformPropertiesProviderModule
 *   ]
 * });
 * ```
 */var CamundaPlatformPropertiesProvider=/*#__PURE__*/function(){function CamundaPlatformPropertiesProvider(propertiesPanel,injector){_classCallCheck(this,CamundaPlatformPropertiesProvider);propertiesPanel.registerProvider(LOW_PRIORITY,this);this._injector=injector;}_createClass(CamundaPlatformPropertiesProvider,[{key:"getGroups",value:function getGroups(element){var _this5=this;return function(groups){// (1) add Camunda Platform specific groups
groups=groups.concat(_this5._getGroups(element));// (2) update existing groups with Camunda Platform specific properties
updateGeneralGroup(groups,element);updateErrorGroup(groups,element);updateEscalationGroup(groups,element);updateMultiInstanceGroup(groups,element);updateTimerGroup(groups,element);// (3) move groups given specific priorities
moveImplementationGroup(groups);return groups;};}},{key:"_getGroups",value:function _getGroups(element){var _this6=this;var groups=CAMUNDA_PLATFORM_GROUPS.map(function(createGroup){return createGroup(element,_this6._injector);});// contract: if a group returns null, it should not be displayed at all
return groups.filter(function(group){return group!==null;});}}]);return CamundaPlatformPropertiesProvider;}();CamundaPlatformPropertiesProvider.$inject=['propertiesPanel','injector'];/**
 * This ensures the <Implementation> group always locates after <Documentation>
 */function moveImplementationGroup(groups){var documentationGroupIdx=findGroupIndex(groups,'documentation');if(documentationGroupIdx<0){return;}return moveGroup(groups,'CamundaPlatform__Implementation',documentationGroupIdx+1);}function updateGeneralGroup(groups,element){var generalGroup=findGroup$1(groups,'general');if(!generalGroup){return;}var entries=generalGroup.entries;// (1) add version tag before executable (if existing)
var executableEntry=(0,_minDash.findIndex)(entries,function(entry){return entry.id==='isExecutable';});var insertIndex=executableEntry>=0?executableEntry:entries.length;entries.splice.apply(entries,[insertIndex,0].concat(_toConsumableArray(VersionTagProps({element:element}))));}function updateErrorGroup(groups,element){var errorGroup=findGroup$1(groups,'error');if(!errorGroup){return;}var entries=errorGroup.entries;ErrorProps({element:element,entries:entries});}function updateMultiInstanceGroup(groups,element){var multiInstanceGroup=findGroup$1(groups,'multiInstance');if(!multiInstanceGroup){return;}var entries=multiInstanceGroup.entries;MultiInstanceProps({element:element,entries:entries});}function updateEscalationGroup(groups,element){var escalationGroup=findGroup$1(groups,'escalation');if(!escalationGroup){return;}var entries=escalationGroup.entries;EscalationProps({element:element,entries:entries});}function updateTimerGroup(groups,element){var timerEventGroup=findGroup$1(groups,'timer');if(!timerEventGroup){return;}timerEventGroup.entries=_toConsumableArray(TimerProps({element:element}));}function ImplementationGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Implementation'),id:'CamundaPlatform__Implementation',component:_propertiesPanel.Group,entries:_toConsumableArray(ImplementationProps({element:element}))};if(group.entries.length){return group;}return null;}function ErrorsGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Errors'),id:'CamundaPlatform__Errors',component:_propertiesPanel.ListGroup},ErrorsProps({element:element,injector:injector}));if(group.items){return group;}return null;}function UserAssignmentGroup(element,injector){var translate=injector.get('translate');var group={label:translate('User assignment'),id:'CamundaPlatform__UserAssignment',component:_propertiesPanel.Group,entries:_toConsumableArray(UserAssignmentProps({element:element}))};if(group.entries.length){return group;}return null;}function ScriptGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Script'),id:'CamundaPlatform__Script',component:_propertiesPanel.Group,entries:_toConsumableArray(ScriptTaskProps({element:element}))};if(group.entries.length){return group;}return null;}function CallActivityGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Called element'),id:'CamundaPlatform__CallActivity',component:_propertiesPanel.Group,entries:_toConsumableArray(CallActivityProps({element:element}))};if(group.entries.length){return group;}return null;}function ConditionGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Condition'),id:'CamundaPlatform__Condition',component:_propertiesPanel.Group,entries:_toConsumableArray(ConditionProps({element:element}))};if(group.entries.length){return group;}return null;}function StartInitiatorGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Start initiator'),id:'CamundaPlatform__StartInitiator',component:_propertiesPanel.Group,entries:_toConsumableArray(InitiatorProps({element:element}))};if(group.entries.length){return group;}return null;}function ExternalTaskGroup(element,injector){var translate=injector.get('translate');var group={label:translate('External task'),id:'CamundaPlatform__ExternalTask',component:_propertiesPanel.Group,entries:_toConsumableArray(ExternalTaskPriorityProps({element:element}))};if(group.entries.length){return group;}return null;}function AsynchronousContinuationsGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Asynchronous continuations'),id:'CamundaPlatform__AsynchronousContinuations',component:_propertiesPanel.Group,entries:_toConsumableArray(AsynchronousContinuationsProps({element:element}))};if(group.entries.length){return group;}return null;}function JobExecutionGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Job execution'),id:'CamundaPlatform__JobExecution',component:_propertiesPanel.Group,entries:_toConsumableArray(JobExecutionProps({element:element}))};if(group.entries.length){return group;}return null;}function CandidateStarterGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Candidate starter'),id:'CamundaPlatform__CandidateStarter',component:_propertiesPanel.Group,entries:_toConsumableArray(CandidateStarterProps({element:element}))};if(group.entries.length){return group;}return null;}function FieldInjectionGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Field injections'),id:'CamundaPlatform__FieldInjection',component:_propertiesPanel.ListGroup},FieldInjectionProps({element:element,injector:injector}));if(group.items){return group;}return null;}function HistoryCleanupGroup(element,injector){var translate=injector.get('translate');var group={label:translate('History cleanup'),id:'CamundaPlatform__HistoryCleanup',component:_propertiesPanel.Group,entries:_toConsumableArray(HistoryCleanupProps({element:element}))};if(group.entries.length){return group;}return null;}function TasklistGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Tasklist'),id:'CamundaPlatform__Tasklist',component:_propertiesPanel.Group,entries:_toConsumableArray(TasklistProps({element:element}))};if(group.entries.length){return group;}return null;}function InMappingGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('In mappings'),id:'CamundaPlatform__InMapping',component:_propertiesPanel.ListGroup},InMappingProps({element:element,injector:injector}));if(group.items){return group;}return null;}function InMappingPropagationGroup(element,injector){var translate=injector.get('translate');var group={label:translate('In mapping propagation'),id:'CamundaPlatform__InMappingPropagation',component:_propertiesPanel.Group,entries:_toConsumableArray(InMappingPropagationProps({element:element}))};if(group.entries.length){return group;}return null;}function OutMappingGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Out mappings'),id:'CamundaPlatform__OutMapping',component:_propertiesPanel.ListGroup},OutMappingProps({element:element,injector:injector}));if(group.items){return group;}return null;}function OutMappingPropagationGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Out mapping propagation'),id:'CamundaPlatform__OutMappingPropagation',component:_propertiesPanel.Group,entries:_toConsumableArray(OutMappingPropagationProps({element:element}))};if(group.entries.length){return group;}return null;}function ProcessVariablesGroup(element,injector){var translate=injector.get('translate');var variableProps=ProcessVariablesProps({element:element,injector:injector});if(!variableProps){return null;}var group=_objectSpread({label:translate('Process variables'),id:'CamundaPlatform__ProcessVariables'},variableProps);return group;}function FormDataGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Form fields'),id:'CamundaPlatform__FormData',component:_propertiesPanel.ListGroup},FormDataProps({element:element,injector:injector}));if(group.items){return group;}return null;}function BusinessKeyGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Business key'),id:'CamundaPlatform__BusinessKey',component:_propertiesPanel.Group,entries:_toConsumableArray(BusinessKeyProps$1({element:element}))};if(group.entries.length){return group;}return null;}function FormGroup(element,injector){var translate=injector.get('translate');var group={label:translate('Forms'),id:'CamundaPlatform__Form',component:_propertiesPanel.Group,entries:_toConsumableArray(FormProps({element:element}))};if(group.entries.length){return group;}return null;}function ExecutionListenerGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Execution listeners'),id:'CamundaPlatform__ExecutionListener',component:_propertiesPanel.ListGroup},ExecutionListenerProps({element:element,injector:injector}));if(group.items){return group;}return null;}function TaskListenerGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Task listeners'),id:'CamundaPlatform__TaskListener',component:_propertiesPanel.ListGroup},TaskListenerProps({element:element,injector:injector}));if(group.items){return group;}return null;}function InputGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Inputs'),id:'CamundaPlatform__Input',component:_propertiesPanel.ListGroup},InputProps({element:element,injector:injector}));if(group.items){return group;}return null;}function OutputGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Outputs'),id:'CamundaPlatform__Output',component:_propertiesPanel.ListGroup},OutputProps({element:element,injector:injector}));if(group.items){return group;}return null;}function ConnectorInputGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Connector inputs'),id:'CamundaPlatform__ConnectorInput',component:_propertiesPanel.ListGroup},ConnectorInputProps({element:element,injector:injector}));if(group.items){return group;}return null;}function ConnectorOutputGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Connector outputs'),id:'CamundaPlatform__ConnectorOutput',component:_propertiesPanel.ListGroup},ConnectorOutputProps({element:element,injector:injector}));if(group.items){return group;}return null;}function ExtensionPropertiesGroup(element,injector){var translate=injector.get('translate');var group=_objectSpread({label:translate('Extension properties'),id:'CamundaPlatform__ExtensionProperties',component:_propertiesPanel.ListGroup},ExtensionPropertiesProps({element:element,injector:injector}));if(group.items){return group;}return null;}// helper /////////////////////
function findGroup$1(groups,id){return groups.find(function(g){return g.id===id;});}function findGroupIndex(groups,id){return(0,_minDash.findIndex)(groups,function(g){return g.id===id;});}function moveGroup(groups,id,position){var groupIndex=findGroupIndex(groups,id);if(position<0||groupIndex<0){return;}return(0,_arrayMove.mutate)(groups,groupIndex,position);}var camundaPlatformPropertiesProviderModule={__init__:['camundaPlatformPropertiesProvider'],camundaPlatformPropertiesProvider:['type',CamundaPlatformPropertiesProvider]};exports.CamundaPlatformPropertiesProviderModule=camundaPlatformPropertiesProviderModule;var PROPERTY_TYPE$1='property';var ZEBBE_PROPERTY_TYPE='zeebe:property';var ZEBBE_INPUT_TYPE='zeebe:input';var ZEEBE_OUTPUT_TYPE='zeebe:output';var ZEEBE_PROPERTY_TYPE='zeebe:property';var ZEEBE_TASK_DEFINITION_TYPE_TYPE='zeebe:taskDefinition:type';var ZEEBE_TASK_HEADER_TYPE='zeebe:taskHeader';var MESSAGE_PROPERTY_TYPE='bpmn:Message#property';var MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE='bpmn:Message#zeebe:subscription#property';var EXTENSION_BINDING_TYPES$1=[MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE,ZEBBE_INPUT_TYPE,ZEEBE_OUTPUT_TYPE,ZEEBE_PROPERTY_TYPE,ZEEBE_TASK_DEFINITION_TYPE_TYPE,ZEEBE_TASK_HEADER_TYPE];var TASK_DEFINITION_TYPES=[ZEEBE_TASK_DEFINITION_TYPE_TYPE];var IO_BINDING_TYPES$1=[ZEBBE_INPUT_TYPE,ZEEBE_OUTPUT_TYPE];var MESSAGE_BINDING_TYPES=[MESSAGE_PROPERTY_TYPE,MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE];var PROPERTY_BINDING_TYPES=[PROPERTY_TYPE$1,MESSAGE_PROPERTY_TYPE];/**
 * The BPMN 2.0 extension attribute name under
 * which the element template ID is stored.
 *
 * @type {String}
 */var TEMPLATE_ID_ATTR$1='zeebe:modelerTemplate';/**
 * The BPMN 2.0 extension attribute name under
 * which the element template version is stored.
 *
 * @type {String}
 */var TEMPLATE_VERSION_ATTR$1='zeebe:modelerTemplateVersion';/**
 * Get template id for a given diagram element.
 *
 * @param {djs.model.Base} element
 *
 * @return {String}
 */function getTemplateId$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(businessObject){return businessObject.get(TEMPLATE_ID_ATTR$1);}}/**
 * Get template version for a given diagram element.
 *
 * @param {djs.model.Base} element
 *
 * @return {String}
 */function getTemplateVersion$1(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(businessObject){return businessObject.get(TEMPLATE_VERSION_ATTR$1);}}/**
 * Find extension with given type in
 * BPMN element, diagram element or ExtensionElement.
 *
 * @param {ModdleElement|djs.model.Base} element
 * @param {String} type
 *
 * @return {ModdleElement} the extension
 */function findExtension$1(element,type){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements;if((0,_ModelUtil.is)(businessObject,'bpmn:ExtensionElements')){extensionElements=businessObject;}else{extensionElements=businessObject.get('extensionElements');}if(!extensionElements){return;}return extensionElements.get('values').find(function(value){return(0,_ModelUtil.is)(value,type);});}function findZeebeProperty(zeebeProperties,binding){return zeebeProperties.get('properties').find(function(value){return value.name===binding.name;});}function findInputParameter$1(ioMapping,binding){var parameters=ioMapping.get('inputParameters');return parameters.find(function(parameter){return parameter.target===binding.name;});}function findOutputParameter$1(ioMapping,binding){var parameters=ioMapping.get('outputParameters');return parameters.find(function(parameter){return parameter.source===binding.source;});}function findTaskHeader(taskHeaders,binding){var headers=taskHeaders.get('values');return headers.find(function(header){return header.key===binding.key;});}function findMessage(businessObject){if((0,_ModelUtil.is)(businessObject,'bpmn:Event')){var eventDefinitions=businessObject.get('eventDefinitions');if(!eventDefinitions||!eventDefinitions.length){return;}businessObject=eventDefinitions[0];}return businessObject.get('messageRef');}function findZeebeSubscription(message){return findExtension$1(message,'zeebe:Subscription');}function getDefaultValue(property){if(property.value!==undefined){return property.value;}if(property.generatedValue){var type=property.generatedValue.type;if(type==='uuid'){return(0,_uuid.v4)();}}}/**
 * Create an input parameter representing the given
 * binding and value.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createInputParameter$1(binding,value,bpmnFactory){var name=binding.name;return bpmnFactory.create('zeebe:Input',{source:value,target:name});}/**
 * Create an output parameter representing the given
 * binding and value.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createOutputParameter$1(binding,value,bpmnFactory){var source=binding.source;return bpmnFactory.create('zeebe:Output',{source:source,target:value});}/**
 * Create a task header representing the given
 * binding and value.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createTaskHeader(binding,value,bpmnFactory){var key=binding.key;return bpmnFactory.create('zeebe:Header',{key:key,value:value});}/**
 * Create a task definition representing the given value.
 *
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createTaskDefinitionWithType(value,bpmnFactory){return bpmnFactory.create('zeebe:TaskDefinition',{type:value});}/**
 * Create zeebe:Property from the given binding.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createZeebeProperty(binding){var value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var bpmnFactory=arguments.length>2?arguments[2]:undefined;var name=binding.name;return bpmnFactory.create('zeebe:Property',{name:name,value:value});}/**
 * Retrieves whether an element should be updated for a given property.
 *
 * That matches once
 * a) the property value is not empty, or
 * b) the property is not optional
 *
 * @param {String} value
 * @param {Object} property
 * @returns {Boolean}
 */function shouldUpdate(value,property){var optional=property.optional;return value||!optional;}/**
 * Gets or, in case not existent, creates extension element for given element.
 *
 * @param {djs.model.Base} element
 * @param {String} type
 * @param {BpmnFactory} bpmnFactory
 * @returns {ModdleElement}
 */function ensureExtension(element,type,bpmnFactory){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',{},businessObject,bpmnFactory);businessObject.set('extensionElements',extensionElements);}var extension=findExtension$1(extensionElements,type);if(!extension){extension=bpmnFactory.create(type);extension.$parent=extensionElements;extensionElements.get('values').push(extension);}return extension;}var PRIMITIVE_MODDLE_TYPES$1=['Boolean','Integer','String'];function getPropertyValue$1(element,property,scope){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var defaultValue='';var binding=property.binding;var name=binding.name,type=binding.type;// property
if(type==='property'){var value=businessObject.get(name);if(!(0,_minDash.isUndefined)(value)){return value;}return defaultValue;}// zeebe:taskDefinition
if(TASK_DEFINITION_TYPES.includes(type)){var taskDefinition=findExtension$1(businessObject,'zeebe:TaskDefinition');if(taskDefinition){if(type===ZEEBE_TASK_DEFINITION_TYPE_TYPE){return taskDefinition.get('type');}}return defaultValue;}if(IO_BINDING_TYPES$1.includes(type)){var ioMapping=findExtension$1(businessObject,'zeebe:IoMapping');if(!ioMapping){return defaultValue;}// zeebe:Input
if(type===ZEBBE_INPUT_TYPE){var inputParameter=findInputParameter$1(ioMapping,binding);if(inputParameter){return inputParameter.get('source');}return defaultValue;}// zeebe:Output
if(type===ZEEBE_OUTPUT_TYPE){var outputParameter=findOutputParameter$1(ioMapping,binding);if(outputParameter){return outputParameter.get('target');}return defaultValue;}}// zeebe:taskHeaders
if(type===ZEEBE_TASK_HEADER_TYPE){var taskHeaders=findExtension$1(businessObject,'zeebe:TaskHeaders');if(!taskHeaders){return defaultValue;}var header=findTaskHeader(taskHeaders,binding);if(header){return header.get('value');}return defaultValue;}// zeebe:Property
if(type===ZEEBE_PROPERTY_TYPE){var zeebeProperties=findExtension$1(businessObject,'zeebe:Properties');if(zeebeProperties){var zeebeProperty=findZeebeProperty(zeebeProperties,binding);if(zeebeProperty){return zeebeProperty.get('value');}}return defaultValue;}// bpmn:Message#property
if(type===MESSAGE_PROPERTY_TYPE){var message=findMessage(businessObject);var _value=message?message.get(name):undefined;if(!(0,_minDash.isUndefined)(_value)){return _value;}return defaultValue;}// bpmn:Message#zeebe:subscription#property
if(type===MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE){var _message=findMessage(businessObject);if(_message){var subscription=findExtension$1(_message,'zeebe:Subscription');var _value2=subscription?subscription.get(name):undefined;if(!(0,_minDash.isUndefined)(_value2)){return subscription.get(name);}}return defaultValue;}// should never throw as templates are validated beforehand
throw unknownBindingError$1(element,property);}var NO_OP=null;function setPropertyValue(bpmnFactory,commandStack,element,property,value){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var binding=property.binding;var name=binding.name,type=binding.type;var extensionElements;var propertyValue;var commands=[];var context={element:element,property:property};// ensure message exists
if(MESSAGE_BINDING_TYPES.includes(type)){if((0,_ModelUtil.is)(businessObject,'bpmn:Event')){businessObject=businessObject.get('eventDefinitions')[0];}var message=findMessage(businessObject);if(!message){message=bpmnFactory.create('bpmn:Message',{'zeebe:modelerTemplate':getTemplateId$1(element)});commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:businessObject,properties:{messageRef:message}})});}businessObject=message;}// ensure extension elements
if(EXTENSION_BINDING_TYPES$1.includes(type)){extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',null,businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:businessObject,properties:{extensionElements:extensionElements}})});}else{commands.push(NO_OP);}}// property
if(PROPERTY_BINDING_TYPES.includes(type)){var propertyDescriptor=businessObject.$descriptor.propertiesByName[name];// if property not created yet
if(!propertyDescriptor){// make sure we create the property
propertyValue=value||'';}else{var propertyType=propertyDescriptor.type;// do not override non-primitive types
if(!PRIMITIVE_MODDLE_TYPES$1.includes(propertyType)){throw new Error("cannot set property of type <".concat(propertyType,">"));}if(propertyType==='Boolean'){propertyValue=!!value;}else if(propertyType==='Integer'){propertyValue=parseInt(value,10);if(isNaN(propertyValue)){// do not set NaN value
propertyValue=undefined;}}else{// make sure we don't remove the property
propertyValue=value||'';}}if(!(0,_minDash.isUndefined)(propertyValue)){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:businessObject,properties:_defineProperty({},name,propertyValue)})});}else{commands.push(NO_OP);}}// zeebe:taskDefinition
if(TASK_DEFINITION_TYPES.includes(type)){var oldTaskDefinition=findExtension$1(extensionElements,'zeebe:TaskDefinition');var newTaskDefinition;if(type===ZEEBE_TASK_DEFINITION_TYPE_TYPE){newTaskDefinition=createTaskDefinitionWithType(value,bpmnFactory);}else{throw unknownBindingError$1(element,property);}var _values2=extensionElements.get('values').filter(function(value){return value!==oldTaskDefinition;});commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(_values2),[newTaskDefinition])}})});}if(IO_BINDING_TYPES$1.includes(type)){var ioMapping=findExtension$1(extensionElements,'zeebe:IoMapping');if(!ioMapping){ioMapping=createElement('zeebe:IoMapping',null,businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[ioMapping])}})});}// zeebe:Input
if(type===ZEBBE_INPUT_TYPE){var oldZeebeInputParameter=findInputParameter$1(ioMapping,binding);var _values3=ioMapping.get('inputParameters').filter(function(value){return value!==oldZeebeInputParameter;});// do not persist empty parameters when configured as <optional>
if(shouldUpdate(value,property)){var newZeebeInputParameter=createInputParameter$1(binding,value,bpmnFactory);_values3.push(newZeebeInputParameter);}commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:ioMapping,properties:{inputParameters:_toConsumableArray(_values3)}})});}// zeebe:Output
if(type===ZEEBE_OUTPUT_TYPE){var oldZeebeOutputParameter=findOutputParameter$1(ioMapping,binding);var _values4=ioMapping.get('outputParameters').filter(function(value){return value!==oldZeebeOutputParameter;});// do not persist empty parameters when configured as <optional>
if(shouldUpdate(value,property)){var newZeebeOutputParameter=createOutputParameter$1(binding,value,bpmnFactory);_values4.push(newZeebeOutputParameter);}commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:ioMapping,properties:{'outputParameters':_toConsumableArray(_values4)}})});}}// zeebe:taskHeaders
if(type===ZEEBE_TASK_HEADER_TYPE){var taskHeaders=findExtension$1(extensionElements,'zeebe:TaskHeaders');if(!taskHeaders){taskHeaders=createElement('zeebe:TaskHeaders',null,businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[taskHeaders])}})});}var oldTaskHeader=findTaskHeader(taskHeaders,binding);var _values5=taskHeaders.get('values').filter(function(value){return value!==oldTaskHeader;});// do not persist task headers with empty value
if(!value){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:taskHeaders,properties:{values:_values5}})});}else{var newTaskHeader=createTaskHeader(binding,value,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:taskHeaders,properties:{values:[].concat(_toConsumableArray(_values5),[newTaskHeader])}})});}}// zeebe:Property
if(type===ZEEBE_PROPERTY_TYPE){var zeebeProperties=findExtension$1(extensionElements,'zeebe:Properties');if(!zeebeProperties){zeebeProperties=createElement('zeebe:Properties',null,businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[zeebeProperties])}}});}var oldZeebeProperty=findZeebeProperty(zeebeProperties,binding);var properties=zeebeProperties.get('properties').filter(function(property){return property!==oldZeebeProperty;});if(shouldUpdate(value,property)){var newZeebeProperty=createZeebeProperty(binding,value,bpmnFactory);properties.push(newZeebeProperty);}commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:zeebeProperties,properties:{properties:properties}}});}// bpmn:Message#zeebe:subscription#property
if(type===MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE){var subscription=findExtension$1(extensionElements,'zeebe:Subscription');if(!subscription){subscription=createElement('zeebe:Subscription',null,extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[subscription])}})});}commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:subscription,properties:_defineProperty({},name,value||'')}});}if(commands.length){var commandsToExecute=commands.filter(function(command){return command!==NO_OP;});commandsToExecute.length&&commandStack.execute('properties-panel.multi-command-executor',commandsToExecute);return;}// should never throw as templates are validated beforehand
throw unknownBindingError$1(element,property);}function unsetProperty(commandStack,element,property){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var binding=property.binding;var type=binding.type;var extensionElements;var commands=[];var context={element:element,property:property};if(MESSAGE_BINDING_TYPES.includes(type)){businessObject=findMessage(businessObject);if(!businessObject){return;}}if(EXTENSION_BINDING_TYPES$1.includes(type)){extensionElements=businessObject.get('extensionElements');if(!extensionElements)return;}// zeebe:taskDefinition
if(TASK_DEFINITION_TYPES.includes(type)){var oldTaskDefinition=findExtension$1(extensionElements,'zeebe:TaskDefinition');commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),oldTaskDefinition)}})});}// zeebe:IoMapping
if(IO_BINDING_TYPES$1.includes(type)){var ioMapping=findExtension$1(extensionElements,'zeebe:IoMapping');if(!ioMapping)return;// zeebe:Input
if(type===ZEBBE_INPUT_TYPE){var oldZeebeInputParameter=findInputParameter$1(ioMapping,binding);var _values6=ioMapping.get('inputParameters').filter(function(value){return value!==oldZeebeInputParameter;});if(ioMapping.get('outputParameters').length==0&&_values6.length==0){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),ioMapping)}})});}else{commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:ioMapping,properties:{inputParameters:_toConsumableArray(_values6)}})});}}// zeebe:Output
if(type===ZEEBE_OUTPUT_TYPE){var oldZeebeOutputParameter=findOutputParameter$1(ioMapping,binding);var _values7=ioMapping.get('outputParameters').filter(function(value){return value!==oldZeebeOutputParameter;});if(ioMapping.get('inputParameters').length==0&&_values7.length==0){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),ioMapping)}})});}commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:ioMapping,properties:{'outputParameters':_toConsumableArray(_values7)}})});}}// zeebe:taskHeaders
if(type===ZEEBE_TASK_HEADER_TYPE){var taskHeaders=findExtension$1(extensionElements,'zeebe:TaskHeaders');if(!taskHeaders)return;var oldTaskHeader=findTaskHeader(taskHeaders,binding);var _values8=taskHeaders.get('values').filter(function(value){return value!==oldTaskHeader;});if(_values8.length===0){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),taskHeaders)}})});}else{commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:taskHeaders,properties:{values:_toConsumableArray(_values8)}})});}}// zeebe:Property
if(type===ZEEBE_PROPERTY_TYPE){var zeebeProperties=findExtension$1(extensionElements,'zeebe:Properties');if(!zeebeProperties)return;var oldZeebeProperty=findZeebeProperty(zeebeProperties,binding);var properties=zeebeProperties.get('properties').filter(function(property){return property!==oldZeebeProperty;});if(!properties.length){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),zeebeProperties)}})});}else{commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:zeebeProperties,properties:{properties:_toConsumableArray(properties)}})});}}// bpmn:Message#property
if(type===MESSAGE_PROPERTY_TYPE){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:businessObject,properties:_defineProperty({},binding.name,undefined)})});}// bpmn:Message#property
if(type===MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE){var subscription=findZeebeSubscription(businessObject);if(!subscription){return;}commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:subscription,properties:_defineProperty({},binding.name,undefined)})});}if(commands.length){commandStack.execute('properties-panel.multi-command-executor',commands);return;}}// helpers
function unknownBindingError$1(element,property){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var id=businessObject.get('id');var binding=property.binding;var type=binding.type;return new Error("unknown binding <".concat(type,"> for element <").concat(id,">, this should never happen"));}/**
 * Based on conditions, remove properties from the template.
 */function applyConditions(element,elementTemplate){var properties=elementTemplate.properties;var filteredProperties=properties.filter(function(property){return isConditionMet(element,properties,property);});return _objectSpread(_objectSpread({},elementTemplate),{},{properties:filteredProperties});}function isConditionMet(element,properties,property){var condition=property.condition;// If no condition is defined, return true.
if(!condition){return true;}// multiple ("and") conditions
if(condition.allMatch){var conditions=condition.allMatch;return conditions.every(function(condition){return isSimpleConditionMet(element,properties,condition);});}// single condition
return isSimpleConditionMet(element,properties,condition);}function isSimpleConditionMet(element,properties,condition){var property=condition.property,equals=condition.equals,oneOf=condition.oneOf;var propertyValue=getValue(element,properties,property);if(equals){return propertyValue===equals;}if(oneOf){return oneOf.includes(propertyValue);}return false;}function getValue(element,properties,propertyId){var property=properties.find(function(p){return p.id===propertyId;});if(!property){return;}return getPropertyValue$1(element,property);}/**
 * Checks the conditions of an element template and sets/resets the
 * corresponding properties on the element.
 */var ElementTemplatesConditionChecker=/*#__PURE__*/function(_CommandInterceptor){_inherits(ElementTemplatesConditionChecker,_CommandInterceptor);var _super=_createSuper(ElementTemplatesConditionChecker);function ElementTemplatesConditionChecker(eventBus,elementTemplates,commandStack,bpmnFactory){var _this7;_classCallCheck(this,ElementTemplatesConditionChecker);_this7=_super.call(this,eventBus);_this7._eventBus=eventBus;_this7._elementTemplates=elementTemplates;_this7._commandStack=commandStack;_this7._bpmnFactory=bpmnFactory;_this7.preExecute(['element.updateProperties','element.updateModdleProperties'],_this7._saveConditionalState,true,_assertThisInitialized(_this7));_this7.postExecute(['element.updateProperties','element.updateModdleProperties','propertiesPanel.zeebe.changeTemplate'],_this7._applyConditions,true,_assertThisInitialized(_this7));return _this7;}_createClass(ElementTemplatesConditionChecker,[{key:"_saveConditionalState",value:function _saveConditionalState(context){var element=context.element;var template=this._elementTemplates.get(element);if(!template){return;}context.oldTemplate=applyConditions(element,template);}},{key:"_applyConditions",value:function _applyConditions(context){var _this8=this;var element=context.element,oldTemplate=context.oldTemplate;var template=this._elementTemplates.get(element);if(!template||!oldTemplate||template.id!==oldTemplate.id){return;}var newTemplate=applyConditions(element,template);var propertiesToAdd=getMissingProperties(oldTemplate,newTemplate);var propertiesToRemove=getPropertiesToRemove(newTemplate,oldTemplate);propertiesToAdd.forEach(function(property){return setPropertyValue(_this8._bpmnFactory,_this8._commandStack,element,property,property.value);});propertiesToRemove.forEach(function(property){return unsetProperty(_this8._commandStack,element,property);});}}]);return ElementTemplatesConditionChecker;}(_CommandInterceptor7["default"]);ElementTemplatesConditionChecker.$inject=['eventBus','elementTemplates','commandStack','bpmnFactory'];// helpers
function getMissingProperties(sourceTemplate,targetTemplate){var properties=targetTemplate.properties;return properties.filter(function(targetProp){return!sourceTemplate.properties.find(function(sourceProp){return compareProps(sourceProp,targetProp);});});}function compareProps(sourceProp,targetProp){return equals(sourceProp.binding,targetProp.binding)&&equals(sourceProp.condition,targetProp.condition);}function findPropertyWithBinding(template,prop1){return template.properties.some(function(prop2){return equals(prop1.binding,prop2.binding);});}function getPropertiesToRemove(newTemplate,oldTemplate){var oldProperties=getMissingProperties(newTemplate,oldTemplate);// ensure XML properties are mantained for properties with
// different conditions but same bindings
return oldProperties.filter(function(property){return!findPropertyWithBinding(newTemplate,property);});}function normalizeReplacer$1(key,value){if((0,_minDash.isObject)(value)){var _keys=Object.keys(value).sort();return _keys.reduce(function(obj,key){obj[key]=value[key];return obj;},{});}return value;}function equals(a,b){return JSON.stringify(a,normalizeReplacer$1)===JSON.stringify(b,normalizeReplacer$1);}/**
 * The BPMN 2.0 extension attribute name under
 * which the element template ID is stored.
 *
 * @type {String}
 */var TEMPLATE_ID_ATTR='camunda:modelerTemplate';/**
 * The BPMN 2.0 extension attribute name under
 * which the element template version is stored.
 *
 * @type {String}
 */var TEMPLATE_VERSION_ATTR='camunda:modelerTemplateVersion';/**
 * Get template id for a given diagram element.
 *
 * @param {djs.model.Base} element
 *
 * @return {String}
 */function getTemplateId(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(businessObject){return businessObject.get(TEMPLATE_ID_ATTR);}}/**
 * Get template version for a given diagram element.
 *
 * @param {djs.model.Base} element
 *
 * @return {String}
 */function getTemplateVersion(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if(businessObject){return businessObject.get(TEMPLATE_VERSION_ATTR);}}/**
 * Find extension with given type in
 * BPMN element, diagram element or ExtensionElement.
 *
 * @param {ModdleElement|djs.model.Base} element
 * @param {String} type
 *
 * @return {ModdleElement} the extension
 */function findExtension(element,type){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements;if((0,_ModelUtil.is)(businessObject,'bpmn:ExtensionElements')){extensionElements=businessObject;}else{extensionElements=businessObject.get('extensionElements');}if(!extensionElements){return null;}return extensionElements.get('values').find(function(value){return(0,_ModelUtil.is)(value,type);});}function findExtensions(element,types){var extensionElements=getExtensionElements(element);if(!extensionElements){return[];}return extensionElements.get('values').filter(function(value){return(0,_ModelingUtil.isAny)(value,types);});}function findCamundaInOut(element,binding){var extensionElements=getExtensionElements(element);if(!extensionElements){return;}var type=binding.type;var matcher;if(type==='camunda:in'){matcher=function matcher(element){return(0,_ModelUtil.is)(element,'camunda:In')&&isInOut(element,binding);};}else if(type==='camunda:out'){matcher=function matcher(element){return(0,_ModelUtil.is)(element,'camunda:Out')&&isInOut(element,binding);};}else if(type==='camunda:in:businessKey'){matcher=function matcher(element){return(0,_ModelUtil.is)(element,'camunda:In')&&'businessKey'in element;};}return extensionElements.get('values').find(matcher);}function findCamundaProperty(camundaProperties,binding){return camundaProperties.get('values').find(function(value){return value.name===binding.name;});}function findInputParameter(inputOutput,binding){var parameters=inputOutput.get('inputParameters');return parameters.find(function(parameter){return parameter.name===binding.name;});}function findOutputParameter(inputOutput,binding){var parameters=inputOutput.get('outputParameters');return parameters.find(function(parameter){var value=parameter.value;if(!binding.scriptFormat){return value===binding.source;}var definition=parameter.get('camunda:definition');if(!definition||binding.scriptFormat!==definition.get('camunda:scriptFormat')){return false;}return definition.get('camunda:value')===binding.source;});}function findCamundaErrorEventDefinition(element,errorRef){var errorEventDefinitions=findExtensions(element,['camunda:ErrorEventDefinition']);var error;// error ID has to start with <Error_${ errorRef }_>
return errorEventDefinitions.find(function(definition){error=definition.get('bpmn:errorRef');if(error){return error.get('bpmn:id').startsWith("Error_".concat(errorRef));}});}// helpers //////////
function getExtensionElements(element){var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(businessObject,'bpmn:ExtensionElements')){return businessObject;}else{return businessObject.get('extensionElements');}}function isInOut(element,binding){if(binding.type==='camunda:in'){// find based on target attribute
if(binding.target){return element.target===binding.target;}}if(binding.type==='camunda:out'){// find based on source / sourceExpression
if(binding.source){return element.source===binding.source;}if(binding.sourceExpression){return element.sourceExpression===binding.sourceExpression;}}// find based variables / local combination
if(binding.variables){return element.variables==='all'&&(binding.variables!=='local'||element.local);}}/**
 * Registry for element templates.
 */var ElementTemplates$1=/*#__PURE__*/function(){function ElementTemplates(commandStack){_classCallCheck(this,ElementTemplates);this._commandStack=commandStack;this._templates={};}/**
   * Get template with given ID and optional version or for element.
   *
   * @param {String|djs.model.Base} id
   * @param {number} [version]
   *
   * @return {ElementTemplate}
   */_createClass(ElementTemplates,[{key:"get",value:function get(id,version){var templates=this._templates;var element;if((0,_minDash.isUndefined)(id)){return null;}else if((0,_minDash.isString)(id)){if((0,_minDash.isUndefined)(version)){version='_';}if(templates[id]&&templates[id][version]){return templates[id][version];}else{return null;}}else{element=id;return this.get(this._getTemplateId(element),this._getTemplateVersion(element));}}/**
   * Get default template for given element.
   *
   * @param {djs.model.Base} element
   *
   * @return {ElementTemplate}
   */},{key:"getDefault",value:function getDefault(element){return(0,_minDash.find)(this.getAll(element),function(template){return template.isDefault;})||null;}/**
   * Get all templates (with given ID or applicable to element).
   *
   * @param {string|djs.model.Base} [id]
   * @return {Array<ElementTemplate>}
   */},{key:"getAll",value:function getAll(id){return this._getTemplateVerions(id,{includeDeprecated:true});}/**
   * Get all templates (with given ID or applicable to element) with the latest
   * version.
   *
   * @param {String|djs.model.Base} [id]
   * @param {{ deprecated?: boolean }} [options]
   *
   * @return {Array<ElementTemplate>}
   */},{key:"getLatest",value:function getLatest(id){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this._getTemplateVerions(id,_objectSpread(_objectSpread({},options),{},{latest:true}));}/**
   * Set templates.
   *
   * @param {Array<ElementTemplate>} templates
   */},{key:"set",value:function set(templates){var _this9=this;this._templates={};templates.forEach(function(template){var id=template.id,version=(0,_minDash.isUndefined)(template.version)?'_':template.version;if(!_this9._templates[id]){_this9._templates[id]={latest:template};}_this9._templates[id][version]=template;var latestVerions=_this9._templates[id].latest.version;if((0,_minDash.isUndefined)(latestVerions)||template.version>latestVerions){_this9._templates[id].latest=template;}});}/**
   * @param {object|string|null} id
   * @param { { latest?: boolean, deprecated?: boolean } [options]
   *
   * @return {Array<ElementTemplate>}
   */},{key:"_getTemplateVerions",value:function _getTemplateVerions(id){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var latestOnly=options.latest,includeDeprecated=options.deprecated;var templates=this._templates;var getVersions=function getVersions(template){var latest=template.latest,versions=_objectWithoutProperties(template,_excluded90);return latestOnly?!includeDeprecated&&latest.deprecated?[]:[latest]:(0,_minDash.values)(versions);};if((0,_minDash.isNil)(id)){return(0,_minDash.flatten)((0,_minDash.values)(templates).map(getVersions));}if((0,_minDash.isObject)(id)){var element=id;return(0,_minDash.filter)(this._getTemplateVerions(null,options),function(template){return(0,_ModelingUtil.isAny)(element,template.appliesTo);})||[];}if((0,_minDash.isString)(id)){return templates[id]&&getVersions(templates[id]);}throw new Error('argument must be of type {string|djs.model.Base|undefined}');}},{key:"_getTemplateId",value:function _getTemplateId(element){return getTemplateId(element);}},{key:"_getTemplateVersion",value:function _getTemplateVersion(element){return getTemplateVersion(element);}/**
   * Apply element template to a given element.
   *
   * @param {djs.model.Base} element
   * @param {ElementTemplate} newTemplate
   *
   * @return {djs.model.Base} the updated element
   */},{key:"applyTemplate",value:function applyTemplate(element,newTemplate){var oldTemplate=this.get(element);var context={element:element,newTemplate:newTemplate,oldTemplate:oldTemplate};this._commandStack.execute('propertiesPanel.camunda.changeTemplate',context);return context.element;}}]);return ElementTemplates;}();ElementTemplates$1.$inject=['commandStack'];/**
 * Registry for element templates.
 */var ElementTemplates=/*#__PURE__*/function(_ElementTemplates$){_inherits(ElementTemplates,_ElementTemplates$);var _super2=_createSuper(ElementTemplates);function ElementTemplates(templateElementFactory,commandStack){var _this10;_classCallCheck(this,ElementTemplates);_this10=_super2.call(this,commandStack);_this10._commandStack=commandStack;_this10._templateElementFactory=templateElementFactory;return _this10;}_createClass(ElementTemplates,[{key:"_getTemplateId",value:function _getTemplateId(element){return getTemplateId$1(element);}},{key:"_getTemplateVersion",value:function _getTemplateVersion(element){return getTemplateVersion$1(element);}/**
   * Create an element based on an element template.
   *
   * @param {ElementTemplate} template
   * @returns {djs.model.Base}
   */},{key:"createElement",value:function createElement(template){if(!template){throw new Error('template is missing');}var element=this._templateElementFactory.create(template);return element;}/**
   * Apply element template to a given element.
   *
   * @param {djs.model.Base} element
   * @param {ElementTemplate} newTemplate
   *
   * @return {djs.model.Base} the updated element
   */},{key:"applyTemplate",value:function applyTemplate(element,newTemplate){var oldTemplate=this.get(element);var context={element:element,newTemplate:newTemplate,oldTemplate:oldTemplate};this._commandStack.execute('propertiesPanel.zeebe.changeTemplate',context);return context.element;}}]);return ElementTemplates;}(ElementTemplates$1);ElementTemplates.$inject=['templateElementFactory','commandStack'];var SUPPORTED_SCHEMA_VERSION$1=(0,_elementTemplatesValidator.getSchemaVersion)();var MORPHABLE_TYPES=['bpmn:Activity','bpmn:Event','bpmn:Gateway'];/**
 * A element template validator.
 */var Validator$1=/*#__PURE__*/function(){function Validator(moddle){_classCallCheck(this,Validator);this._templatesById={};this._validTemplates=[];this._errors=[];this._moddle=moddle;}/**
   * Adds the templates.
   *
   * @param {Array<TemplateDescriptor>} templates
   *
   * @return {Validator}
   */_createClass(Validator,[{key:"addAll",value:function addAll(templates){if(!(0,_minDash.isArray)(templates)){this._logError('templates must be []');}else{templates.forEach(this.add,this);}return this;}/**
   * Add the given element template, if it is valid.
   *
   * @param {TemplateDescriptor} template
   *
   * @return {Validator}
   */},{key:"add",value:function add(template){var err=this._validateTemplate(template);var id,version;if(!err){id=template.id;version=template.version||'_';if(!this._templatesById[id]){this._templatesById[id]={};}this._templatesById[id][version]=template;this._validTemplates.push(template);}return this;}/**
   * Validate given template and return error (if any).
   *
   * @param {TemplateDescriptor} template
   *
   * @return {Error} validation error, if any
   */},{key:"_validateTemplate",value:function _validateTemplate(template){var _this11=this;var err;var id=template.id,version=template.version||'_',schemaVersion=template.$schema&&getSchemaVersion(template.$schema);// (1) compatibility
if(schemaVersion&&(0,_semverCompare["default"])(SUPPORTED_SCHEMA_VERSION$1,schemaVersion)<0){return this._logError("unsupported element template schema version <".concat(schemaVersion,">. Your installation only supports up to version <").concat(SUPPORTED_SCHEMA_VERSION$1,">. Please update your installation"),template);}// (2) versioning
if(this._templatesById[id]&&this._templatesById[id][version]){if(version==='_'){return this._logError("template id <".concat(id,"> already used"),template);}else{return this._logError("template id <".concat(id,"> and version <").concat(version,"> already used"),template);}}// (3) elementType validation
var elementTypeError=this._validateElementType(template);if(elementTypeError){return elementTypeError;}// (4) JSON schema compliance
var validationResult=(0,_elementTemplatesValidator.validate)(template);var errors=validationResult.errors,valid=validationResult.valid;if(!valid){err=new Error('invalid template');filteredSchemaErrors(errors).forEach(function(error){_this11._logError(error.message,template);});}return err;}/**
   * Validate elementType for given template and return error (if any).
   *
   * @param {TemplateDescriptor} template
   *
   * @return {Error} validation error, if any
   */},{key:"_validateElementType",value:function _validateElementType(template){var _this12=this;if(template.elementType&&template.appliesTo){var elementType=template.elementType.value,appliesTo=template.appliesTo;// (3.1) template can be applied to elementType
// prevents cases where the elementType is not part of appliesTo
if(!appliesTo.find(function(type){return _this12._isType(elementType,type);})){return this._logError("template does not apply to requested element type <".concat(elementType,">"),template);}// (3.2) template only applies to same type of element
// prevent elementTemplates to morph into incompatible types, e.g. Task -> SequenceFlow
var _iterator2=_createForOfIteratorHelper(appliesTo),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var sourceType=_step2.value;if(!this._canMorph(sourceType,elementType)){return this._logError("can not morph <".concat(sourceType,"> into <").concat(elementType,">"),template);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}/**
   * Check if given type is a subtype of given base type.
   *
   * @param {String} type
   * @param {String} baseType
   * @returns {Boolean}
   */},{key:"_isType",value:function _isType(type,baseType){var moddleType=this._moddle.getType(type);return moddleType&&baseType in this._moddle.getElementDescriptor(moddleType).allTypesByName;}/**
   * Checks if a given type can be morphed into another type.
   *
   * @param {String} sourceType
   * @param {String} targetType
   * @returns {Boolean}
   */},{key:"_canMorph",value:function _canMorph(sourceType,targetType){var _this13=this;if(sourceType===targetType){return true;}var baseType=MORPHABLE_TYPES.find(function(type){return _this13._isType(sourceType,type);});if(!baseType){return false;}return this._isType(targetType,baseType);}/**
   * Log an error for the given template
   *
   * @param {(String|Error)} err
   * @param {TemplateDescriptor} template
   *
   * @return {Error} logged validation errors
   */},{key:"_logError",value:function _logError(err,template){if((0,_minDash.isString)(err)){if(template){var id=template.id,name=template.name;err="template(id: <".concat(id,">, name: <").concat(name,">): ").concat(err);}err=new Error(err);}this._errors.push(err);return err;}},{key:"getErrors",value:function getErrors(){return this._errors;}},{key:"getValidTemplates",value:function getValidTemplates(){return this._validTemplates;}}]);return Validator;}();// helpers //////////
/**
 * Extract schema version from schema URI
 *
 * @param {String} schemaUri - for example https://unpkg.com/@camunda/element-templates-json-schema@99.99.99/resources/schema.json
 *
 * @return {String} for example '99.99.99'
 */function getSchemaVersion(schemaUri){var re=/\d+\.\d+\.\d+/g;var match=schemaUri.match(re);return match===null?undefined:match[0];}/**
 * Extract only relevant errors of the validation result.
 *
 * The JSON Schema we use under the hood produces more errors than we need for a
 * detected schema violation (for example, unmatched sub-schemas, if-then-rules,
 * `oneOf`-definitions ...).
 *
 * We call these errors "relevant" that have a custom error message defined by us OR
 * are basic data type errors.
 *
 * @param {Array} schemaErrors
 *
 * @return {Array}
 */function filteredSchemaErrors(schemaErrors){return(0,_minDash.filter)(schemaErrors,function(err){var dataPath=err.dataPath,keyword=err.keyword;// (1) regular errors are customized from the schema
if(keyword==='errorMessage'){return true;}// (2) data type errors
// ignore type errors nested in scopes
if(keyword==='type'&&dataPath&&!dataPath.startsWith('/scopes/')){return true;}return false;});}var SUPPORTED_SCHEMA_VERSION=(0,_elementTemplatesValidator.getZeebeSchemaVersion)();var SUPPORTED_SCHEMA_PACKAGE=(0,_elementTemplatesValidator.getZeebeSchemaPackage)();/**
 * A Camunda Cloud element template validator.
 */var Validator=/*#__PURE__*/function(_Validator$){_inherits(Validator,_Validator$);var _super3=_createSuper(Validator);function Validator(moddle){_classCallCheck(this,Validator);return _super3.call(this,moddle);}/**
   * Validate given template and return error (if any).
   *
   * @param {TemplateDescriptor} template
   *
   * @return {Error} validation error, if any
   */_createClass(Validator,[{key:"_validateTemplate",value:function _validateTemplate(template){var _this14=this;var err;var id=template.id,version=template.version||'_',schema=template.$schema,schemaVersion=schema&&getSchemaVersion(schema);// (1) $schema attribute defined
if(!schema){return this._logError('missing $schema attribute.',template);}if(!this.isSchemaValid(schema)){return this._logError("unsupported $schema attribute <".concat(schema,">."),template);}// (2) compatibility
if(schemaVersion&&(0,_semverCompare["default"])(SUPPORTED_SCHEMA_VERSION,schemaVersion)<0){return this._logError("unsupported element template schema version <".concat(schemaVersion,">. Your installation only supports up to version <").concat(SUPPORTED_SCHEMA_VERSION,">. Please update your installation"),template);}// (3) versioning
if(this._templatesById[id]&&this._templatesById[id][version]){if(version==='_'){return this._logError("template id <".concat(id,"> already used"),template);}else{return this._logError("template id <".concat(id,"> and version <").concat(version,"> already used"),template);}}// (4) elementType validation
var elementTypeError=this._validateElementType(template);if(elementTypeError){return elementTypeError;}// (5) JSON schema compliance
var validationResult=(0,_elementTemplatesValidator.validateZeebe)(template);var errors=validationResult.errors,valid=validationResult.valid;if(!valid){err=new Error('invalid template');filteredSchemaErrors(errors).forEach(function(error){_this14._logError(error.message,template);});}return err;}},{key:"isSchemaValid",value:function isSchemaValid(schema){return schema&&schema.includes(SUPPORTED_SCHEMA_PACKAGE);}}]);return Validator;}(Validator$1);/**
 * The guy responsible for template loading.
 *
 * Provide the actual templates via the `config.elementTemplates`.
 *
 * That configuration can either be an array of template
 * descriptors or a node style callback to retrieve
 * the templates asynchronously.
 *
 * @param {Array<TemplateDescriptor>|Function} loadTemplates
 * @param {EventBus} eventBus
 * @param {ElementTemplates} elementTemplates
 * @param {Moddle} moddle
 */exports.CloudElementTemplatesValidator=Validator;var ElementTemplatesLoader$1=/*#__PURE__*/function(){function ElementTemplatesLoader(loadTemplates,eventBus,elementTemplates,moddle){var _this15=this;_classCallCheck(this,ElementTemplatesLoader);this._loadTemplates=loadTemplates;this._eventBus=eventBus;this._elementTemplates=elementTemplates;this._moddle=moddle;eventBus.on('diagram.init',function(){_this15.reload();});}_createClass(ElementTemplatesLoader,[{key:"reload",value:function reload(){var _this16=this;var loadTemplates=this._loadTemplates;// no templates specified
if((0,_minDash.isUndefined)(loadTemplates)){return;}// template loader function specified
if((0,_minDash.isFunction)(loadTemplates)){return loadTemplates(function(err,templates){if(err){return _this16.templateErrors([err]);}_this16.setTemplates(templates);});}// templates array specified
if(loadTemplates.length){return this.setTemplates(loadTemplates);}}},{key:"setTemplates",value:function setTemplates(templates){var elementTemplates=this._elementTemplates,moddle=this._moddle;var validator=new Validator$1(moddle).addAll(templates);var errors=validator.getErrors(),validTemplates=validator.getValidTemplates();elementTemplates.set(validTemplates);if(errors.length){this.templateErrors(errors);}this.templatesChanged();}},{key:"templatesChanged",value:function templatesChanged(){this._eventBus.fire('elementTemplates.changed');}},{key:"templateErrors",value:function templateErrors(errors){this._eventBus.fire('elementTemplates.errors',{errors:errors});}}]);return ElementTemplatesLoader;}();ElementTemplatesLoader$1.$inject=['config.elementTemplates','eventBus','elementTemplates','moddle'];var ElementTemplatesLoader=/*#__PURE__*/function(_ElementTemplatesLoad){_inherits(ElementTemplatesLoader,_ElementTemplatesLoad);var _super4=_createSuper(ElementTemplatesLoader);function ElementTemplatesLoader(loadTemplates,eventBus,elementTemplates,moddle){var _this17;_classCallCheck(this,ElementTemplatesLoader);_this17=_super4.call(this,loadTemplates,eventBus,elementTemplates,moddle);_this17._elementTemplates=elementTemplates;return _this17;}_createClass(ElementTemplatesLoader,[{key:"setTemplates",value:function setTemplates(templates){var elementTemplates=this._elementTemplates,moddle=this._moddle;var validator=new Validator(moddle).addAll(templates);var errors=validator.getErrors(),validTemplates=validator.getValidTemplates();elementTemplates.set(validTemplates);if(errors.length){this.templateErrors(errors);}this.templatesChanged();}}]);return ElementTemplatesLoader;}(ElementTemplatesLoader$1);ElementTemplatesLoader.$inject=['config.elementTemplates','eventBus','elementTemplates','moddle'];function unlinkTemplate$1(element,injector){var modeling=injector.get('modeling'),eventBus=injector.get('eventBus');eventBus.fire('elementTemplates.unlink',{element:element});modeling.updateProperties(element,{'camunda:modelerTemplate':null,'camunda:modelerTemplateVersion':null});}function removeTemplate(element,injector){var replace=injector.get('replace'),selection=injector.get('selection'),eventBus=injector.get('eventBus');eventBus.fire('elementTemplates.remove',{element:element});var businessObject=(0,_ModelUtil.getBusinessObject)(element);var type=businessObject.$type,eventDefinitionType=getEventDefinitionType(businessObject);var newBusinessObject=createBlankBusinessObject(element,injector);var newElement=replace.replaceElement(element,{type:type,businessObject:newBusinessObject,eventDefinitionType:eventDefinitionType});selection.select(newElement);}function updateTemplate$1(element,newTemplate,injector){var elementTemplates=injector.get('elementTemplates'),eventBus=injector.get('eventBus');eventBus.fire('elementTemplates.update',{element:element,newTemplate:newTemplate});return elementTemplates.applyTemplate(element,newTemplate);}function getVersionOrDateFromTemplate(template){var metadata=template.metadata,version=template.version;if(metadata){if(!(0,_minDash.isUndefined)(metadata.created)){return toDateString(metadata.created);}else if(!(0,_minDash.isUndefined)(metadata.updated)){return toDateString(metadata.updated);}}if((0,_minDash.isUndefined)(version)){return null;}return version;}// helper ///////////
function getEventDefinitionType(businessObject){if(!businessObject.eventDefinitions){return null;}var eventDefinition=businessObject.eventDefinitions[0];if(!eventDefinition){return null;}return eventDefinition.$type;}/**
 * Example: 01.01.1900 01:01
 *
 * @param {number} timestamp
 * @returns {string}
 */function toDateString(timestamp){var date=new Date(timestamp);var year=date.getFullYear();var month=withLeadingZeros(String(date.getMonth()+1));var day=withLeadingZeros(String(date.getDate()));var hours=withLeadingZeros(String(date.getHours()));var minutes=withLeadingZeros(String(date.getMinutes()));return day+'.'+month+'.'+year+' '+hours+':'+minutes;}function withLeadingZeros(string){return leftPad(string,2,'0');}function leftPad(string,length,character){while(string.length<length){string=character+string;}return string;}function createBlankBusinessObject(element,injector){var bpmnFactory=injector.get('bpmnFactory');var bo=(0,_ModelUtil.getBusinessObject)(element),newBo=bpmnFactory.create(bo.$type),label=(0,_LabelUtil.getLabel)(element);if(!label){return newBo;}if((0,_ModelUtil.is)(element,'bpmn:Group')){newBo.categoryValueRef=bpmnFactory.create('bpmn:CategoryValue');}(0,_LabelUtil.setLabel)({businessObject:newBo},label);return newBo;}function unlinkTemplate(element,injector){var modeling=injector.get('modeling'),eventBus=injector.get('eventBus');eventBus.fire('elementTemplates.unlink',{element:element});// remove template attributes
modeling.updateProperties(element,{'zeebe:modelerTemplate':null,'zeebe:modelerTemplateVersion':null,'zeebe:modelerTemplateIcon':null});}function updateTemplate(element,newTemplate,injector){var elementTemplates=injector.get('elementTemplates'),eventBus=injector.get('eventBus');eventBus.fire('elementTemplates.update',{element:element,newTemplate:newTemplate});return elementTemplates.applyTemplate(element,newTemplate);}/**
 * This Behavior checks if the new element's type is in
 * the list of elements the template applies to and unlinks
 * it if not.
 */var ReplaceBehavior$1=/*#__PURE__*/function(_CommandInterceptor2){_inherits(ReplaceBehavior,_CommandInterceptor2);var _super5=_createSuper(ReplaceBehavior);function ReplaceBehavior(elementTemplates,injector){var _this18;_classCallCheck(this,ReplaceBehavior);_this18=_super5.call(this,injector.get('eventBus'));_this18.postExecuted('shape.replace',function(e){var context=e.context,oldShape=context.oldShape,oldBo=(0,_ModelUtil.getBusinessObject)(oldShape),newShape=context.newShape,newBo=(0,_ModelUtil.getBusinessObject)(newShape);if(!oldBo.modelerTemplate){return;}var template=newBo.modelerTemplate;var version=newBo.modelerTemplateVersion;var elementTemplate=elementTemplates.get(template,version);if(!elementTemplate){unlinkTemplate(newShape,injector);return;}var appliesTo=elementTemplate.appliesTo,elementType=elementTemplate.elementType;if(elementType){if(!(0,_ModelUtil.is)(newShape,elementType.value)||shouldUnlinkEvent(newShape,elementType)){unlinkTemplate(newShape,injector);}return;}var allowed=appliesTo.reduce(function(allowed,type){return allowed||(0,_ModelUtil.is)(newBo,type);},false);if(!allowed){unlinkTemplate(newShape,injector);}});return _this18;}return _createClass(ReplaceBehavior);}(_CommandInterceptor7["default"]);ReplaceBehavior$1.$inject=['elementTemplates','injector'];function shouldUnlinkEvent(newShape,elementType){if(!(0,_ModelUtil.is)(newShape,'bpmn:Event')){return false;}var eventDefinition=elementType.eventDefinition,bo=(0,_ModelUtil.getBusinessObject)(newShape),eventDefinitions=bo.get('eventDefinitions');if(!eventDefinition){return eventDefinitions.length!==0;}return!(0,_ModelUtil.is)(eventDefinitions[0],eventDefinition);}/**
 * Applies an element template to an element. Sets `zeebe:modelerTemplate` and
 * `zeebe:modelerTemplateVersion`.
 */var ChangeElementTemplateHandler$1=/*#__PURE__*/function(){function ChangeElementTemplateHandler(bpmnFactory,bpmnReplace,commandStack,modeling){_classCallCheck(this,ChangeElementTemplateHandler);this._bpmnFactory=bpmnFactory;this._bpmnReplace=bpmnReplace;this._commandStack=commandStack;this._modeling=modeling;}/**
   * Change an element's template and update its properties as specified in `newTemplate`. Specify
   * `oldTemplate` to update from one template to another. If `newTemplate` isn't specified the
   * `zeebe:modelerTemplate` and `zeebe:modelerTemplateVersion` properties will be removed from
   * the element.
   *
   * @param {Object} context
   * @param {Object} context.element
   * @param {Object} [context.oldTemplate]
   * @param {Object} [context.newTemplate]
   */_createClass(ChangeElementTemplateHandler,[{key:"preExecute",value:function preExecute(context){var newTemplate=context.newTemplate,oldTemplate=context.oldTemplate;var element=context.element;// update zeebe:modelerTemplate attribute
this._updateZeebeModelerTemplate(element,newTemplate);// update zeebe:modelerTemplateIcon
this._updateZeebeModelerTemplateIcon(element,newTemplate);if(newTemplate){// do not apply properties that don't meet conditions
newTemplate=applyConditions(element,newTemplate);// update element type
element=context.element=this._updateElementType(element,newTemplate);// update properties
this._updateProperties(element,oldTemplate,newTemplate);// update zeebe:TaskDefinition
this._updateZeebeTaskDefinition(element,oldTemplate,newTemplate);// update zeebe:Input and zeebe:Output properties
this._updateZeebeInputOutputParameterProperties(element,oldTemplate,newTemplate);// update zeebe:Header properties
this._updateZeebeTaskHeaderProperties(element,oldTemplate,newTemplate);// update zeebe:Property properties
this._updateZeebePropertyProperties(element,oldTemplate,newTemplate);// update bpmn:Message properties
this._updateMessageProperties(element,oldTemplate,newTemplate);// update bpmn:Message zeebe:subscription properties
this._updateMessageZeebeSubscriptionProperties(element,oldTemplate,newTemplate);this._updateZeebeModelerTemplateOnReferencedElement(element,oldTemplate,newTemplate);}}},{key:"_getOrCreateExtensionElements",value:function _getOrCreateExtensionElements(element){var businessObject=arguments.length>1&&arguments[1]!==undefined?arguments[1]:(0,_ModelUtil.getBusinessObject)(element);var bpmnFactory=this._bpmnFactory,modeling=this._modeling;var extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=bpmnFactory.create('bpmn:ExtensionElements',{values:[]});extensionElements.$parent=businessObject;modeling.updateModdleProperties(element,businessObject,{extensionElements:extensionElements});}return extensionElements;}},{key:"_updateZeebeModelerTemplate",value:function _updateZeebeModelerTemplate(element,newTemplate){var modeling=this._modeling;modeling.updateProperties(element,{'zeebe:modelerTemplate':newTemplate&&newTemplate.id,'zeebe:modelerTemplateVersion':newTemplate&&newTemplate.version});}},{key:"_updateZeebeModelerTemplateIcon",value:function _updateZeebeModelerTemplateIcon(element,newTemplate){var modeling=this._modeling;var icon=newTemplate&&newTemplate.icon;modeling.updateProperties(element,{'zeebe:modelerTemplateIcon':icon&&icon.contents});}},{key:"_updateProperties",value:function _updateProperties(element,oldTemplate,newTemplate){var commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='property';});if(!newProperties.length){return;}var businessObject=(0,_ModelUtil.getBusinessObject)(element);newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),newBinding=newProperty.binding,newBindingName=newBinding.name,newPropertyValue=getDefaultValue(newProperty),changedElement=businessObject;var properties={};if(shouldKeepValue(changedElement,oldProperty,newProperty)){return;}properties[newBindingName]=newPropertyValue;commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:properties});});}/**
   * Update `zeebe:TaskDefinition` properties of specified business object. This
   * can only exist in `bpmn:ExtensionElements`.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateZeebeTaskDefinition",value:function _updateZeebeTaskDefinition(element,oldTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='zeebe:taskDefinition:type';});// (1) do not override old task definition if no new properties specified
if(!newProperties.length){return;}var businessObject=this._getOrCreateExtensionElements(element);newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),oldBinding=oldProperty&&oldProperty.binding,oldBindingType=oldBinding&&oldBinding.type,oldTaskDefinition=findBusinessObject(businessObject,newProperty),newPropertyValue=getDefaultValue(newProperty),newBinding=newProperty.binding,newBindingType=newBinding.type;// (2) update old task definition
if(oldTaskDefinition){if(!shouldKeepValue(oldTaskDefinition,oldProperty,newProperty)){// TODO(pinussilvestrus): for now we only support <type>
// this needs to be adjusted once we support more
var properties={};if(oldBindingType==='zeebe:taskDefinition:type'||!oldBindingType){properties={type:newPropertyValue};}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldTaskDefinition,properties:properties});}}// (3) add new task definition
else{var newTaskDefinition;// TODO(pinussilvestrus): for now we only support <type>
// this needs to be adjusted once we support more
if(newBindingType==='zeebe:taskDefinition:type'){newTaskDefinition=createTaskDefinitionWithType(newPropertyValue,bpmnFactory);}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:[].concat(_toConsumableArray(businessObject.get('values')),[newTaskDefinition])}});}});}/**
   * Update `zeebe:Input` and `zeebe:Output` properties of specified business
   * object. Both can only exist in `zeebe:ioMapping` which can exist in `bpmn:ExtensionElements`.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateZeebeInputOutputParameterProperties",value:function _updateZeebeInputOutputParameterProperties(element,oldTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='zeebe:input'||newBindingType==='zeebe:output';});var businessObject=this._getOrCreateExtensionElements(element);var ioMapping=findExtension$1(businessObject,'zeebe:IoMapping');// (1) remove old mappings if no new specified
if(!newProperties.length){if(!ioMapping){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:(0,_minDash.without)(businessObject.get('values'),ioMapping)}});}if(!ioMapping){ioMapping=bpmnFactory.create('zeebe:IoMapping');commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:[].concat(_toConsumableArray(businessObject.get('values')),[ioMapping])}});}var oldInputs=ioMapping.get('zeebe:inputParameters')?ioMapping.get('zeebe:inputParameters').slice():[];var oldOutputs=ioMapping.get('zeebe:outputParameters')?ioMapping.get('zeebe:outputParameters').slice():[];var propertyName;newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),inputOrOutput=findBusinessObject(businessObject,newProperty),newPropertyValue=getDefaultValue(newProperty),newBinding=newProperty.binding,newBindingType=newBinding.type;var newInputOrOutput,properties;// (2) update old inputs and outputs
if(inputOrOutput){// (2a) exclude old inputs and outputs from cleanup, unless
// a) optional and has empty value, and
// b) not changed
if(shouldUpdate(newPropertyValue,newProperty)||shouldKeepValue(inputOrOutput,oldProperty,newProperty)){if((0,_ModelUtil.is)(inputOrOutput,'zeebe:Input')){remove$1(oldInputs,inputOrOutput);}else{remove$1(oldOutputs,inputOrOutput);}}// (2a) do updates (unless changed)
if(!shouldKeepValue(inputOrOutput,oldProperty,newProperty)){if((0,_ModelUtil.is)(inputOrOutput,'zeebe:Input')){properties={source:newPropertyValue};}else{properties={target:newPropertyValue};}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOrOutput,properties:properties});}}// (3) add new inputs and outputs (unless optional)
else if(shouldUpdate(newPropertyValue,newProperty)){if(newBindingType==='zeebe:input'){propertyName='inputParameters';newInputOrOutput=createInputParameter$1(newBinding,newPropertyValue,bpmnFactory);}else{propertyName='outputParameters';newInputOrOutput=createOutputParameter$1(newBinding,newPropertyValue,bpmnFactory);}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:ioMapping,properties:_defineProperty({},propertyName,[].concat(_toConsumableArray(ioMapping.get(propertyName)),[newInputOrOutput]))});}});// (4) remove old inputs and outputs
if(oldInputs.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:ioMapping,properties:{inputParameters:(0,_minDash.without)(ioMapping.get('inputParameters'),function(inputParameter){return oldInputs.includes(inputParameter);})}});}if(oldOutputs.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:ioMapping,properties:{outputParameters:(0,_minDash.without)(ioMapping.get('outputParameters'),function(outputParameter){return oldOutputs.includes(outputParameter);})}});}}/**
   * Update `zeebe:Header` properties of specified business
   * object. Those can only exist in `zeebe:taskHeaders` which can exist in `bpmn:ExtensionElements`.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateZeebeTaskHeaderProperties",value:function _updateZeebeTaskHeaderProperties(element,oldTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='zeebe:taskHeader';});var businessObject=this._getOrCreateExtensionElements(element);var taskHeaders=findExtension$1(businessObject,'zeebe:TaskHeaders');// (1) remove old headers if no new specified
if(!newProperties.length){if(!taskHeaders){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:(0,_minDash.without)(businessObject.get('values'),taskHeaders)}});}if(!taskHeaders){taskHeaders=bpmnFactory.create('zeebe:TaskHeaders');commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:[].concat(_toConsumableArray(businessObject.get('values')),[taskHeaders])}});}var oldHeaders=taskHeaders.get('zeebe:values')?taskHeaders.get('zeebe:values').slice():[];newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),oldHeader=findBusinessObject(businessObject,newProperty),newPropertyValue=getDefaultValue(newProperty),newBinding=newProperty.binding;// (2) update old headers
if(oldHeader){if(!shouldKeepValue(oldHeader,oldProperty,newProperty)){var properties={value:newPropertyValue};commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldHeader,properties:properties});}remove$1(oldHeaders,oldHeader);}// (3) add new (non-empty) headers
else if(newPropertyValue){var newHeader=createTaskHeader(newBinding,newPropertyValue,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:taskHeaders,properties:{values:[].concat(_toConsumableArray(taskHeaders.get('values')),[newHeader])}});}});// (4) remove old headers
if(oldHeaders.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:taskHeaders,properties:{values:(0,_minDash.without)(taskHeaders.get('values'),function(header){return oldHeaders.includes(header);})}});}}/**
   * Update zeebe:Property properties of zeebe:Properties extension element.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateZeebePropertyProperties",value:function _updateZeebePropertyProperties(element,oldTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='zeebe:property';});var businessObject=this._getOrCreateExtensionElements(element);var zeebeProperties=findExtension$1(businessObject,'zeebe:Properties');// (1) remove old zeebe:Properties if no new zeebe:Property properties
if(!newProperties.length){if(!zeebeProperties){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:(0,_minDash.without)(businessObject.get('values'),zeebeProperties)}});}if(!zeebeProperties){zeebeProperties=bpmnFactory.create('zeebe:Properties');commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:[].concat(_toConsumableArray(businessObject.get('values')),[zeebeProperties])}});}var oldZeebeProperties=zeebeProperties.get('properties')?zeebeProperties.get('properties').slice():[];newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),oldZeebeProperty=findBusinessObject(businessObject,newProperty),newPropertyValue=getDefaultValue(newProperty),newBinding=newProperty.binding;// (2) update old zeebe:Property
if(oldZeebeProperty){if(shouldUpdate(newPropertyValue,newProperty)||shouldKeepValue(oldZeebeProperty,oldProperty,newProperty)){remove$1(oldZeebeProperties,oldZeebeProperty);}if(!shouldKeepValue(oldZeebeProperty,oldProperty,newProperty)){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldZeebeProperty,properties:{value:newPropertyValue}});}}// (3) add new zeebe:Property
else if(shouldUpdate(newPropertyValue,newProperty)){var _newProperty=createZeebeProperty(newBinding,newPropertyValue,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:zeebeProperties,properties:{properties:[].concat(_toConsumableArray(zeebeProperties.get('properties')),[_newProperty])}});}});// (4) remove old zeebe:Property
if(oldZeebeProperties.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:zeebeProperties,properties:{properties:(0,_minDash.without)(zeebeProperties.get('properties'),function(zeebeProperty){return oldZeebeProperties.includes(zeebeProperty);})}});}}/**
   * Update bpmn:Message properties.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateMessageProperties",value:function _updateMessageProperties(element,oldTemplate,newTemplate){var _this19=this;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType===MESSAGE_PROPERTY_TYPE;});if(!newProperties.length){return;}var message=this._getOrCreateMessage(element,newTemplate);newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),newBinding=newProperty.binding,newBindingName=newBinding.name,newPropertyValue=getDefaultValue(newProperty),changedElement=message;var properties={};if(shouldKeepValue(changedElement,oldProperty,newProperty)){return;}properties[newBindingName]=newPropertyValue;_this19._modeling.updateModdleProperties(element,changedElement,properties);});}/**
   * Update bpmn:Message#zeebe:subscription properties.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateMessageZeebeSubscriptionProperties",value:function _updateMessageZeebeSubscriptionProperties(element,oldTemplate,newTemplate){var _this20=this;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType===MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE;});if(!newProperties.length){return;}var message=this._getOrCreateMessage(element,newTemplate);var zeebeSubscription=this._getOrCreateExtension(element,message,'zeebe:Subscription');newProperties.forEach(function(newProperty){var oldProperty=findOldProperty$1(oldTemplate,newProperty),newBinding=newProperty.binding,newBindingName=newBinding.name,newPropertyValue=getDefaultValue(newProperty),changedElement=zeebeSubscription;var properties={};if(shouldKeepValue(changedElement,oldProperty,newProperty)){return;}properties[newBindingName]=newPropertyValue;_this20._modeling.updateModdleProperties(element,changedElement,properties);});}},{key:"_updateZeebeModelerTemplateOnReferencedElement",value:function _updateZeebeModelerTemplateOnReferencedElement(element,oldTemplate,newTemplate){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var message=findMessage(businessObject);if(!message){return;}if(getTemplateId$1(message)===newTemplate.id){return;}this._modeling.updateModdleProperties(element,message,{'zeebe:modelerTemplate':newTemplate.id});}},{key:"_getOrCreateExtension",value:function _getOrCreateExtension(element,bo,type){var extensionElements=this._getOrCreateExtensionElements(element,bo);var extension=findExtension$1(extensionElements,type);if(extension){return extension;}var newExtension=createElement(type,{},bo,this._bpmnFactory);this._modeling.updateModdleProperties(element,extensionElements,{values:[].concat(_toConsumableArray(extensionElements.get('values')),[newExtension])});return newExtension;}},{key:"_getOrCreateMessage",value:function _getOrCreateMessage(element,template){var bo=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(bo,'bpmn:Event')){bo=bo.get('eventDefinitions')[0];}var message=bo.get('messageRef');if(!message){message=this._bpmnFactory.create('bpmn:Message',{'zeebe:modelerTemplate':template.id});this._modeling.updateModdleProperties(element,bo,{messageRef:message});}return message;}/**
   * Replaces the element with the specified elementType.
   * Takes into account the eventDefinition for events.
   *
   * @param {djs.model.Base} element
   * @param {Object} newTemplate
   */},{key:"_updateElementType",value:function _updateElementType(element,newTemplate){// determine new task type
var newType=newTemplate.elementType;if(!newType){return element;}var replacement={type:newType.value};if(newType.eventDefinition){replacement.eventDefinitionType=newType.eventDefinition;}var replacedElement=this._bpmnReplace.replaceElement(element,replacement);return replacedElement;}}]);return ChangeElementTemplateHandler;}();ChangeElementTemplateHandler$1.$inject=['bpmnFactory','bpmnReplace','commandStack','modeling'];// helpers //////////
/**
 * Find business object matching specified property.
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {Object} property
 *
 * @returns {ModdleElement}
 */function findBusinessObject(element,property){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var binding=property.binding,bindingType=binding.type;if(bindingType==='zeebe:taskDefinition:type'){return findExtension$1(businessObject,'zeebe:TaskDefinition');}if(bindingType==='zeebe:input'||bindingType==='zeebe:output'){var extensionElements=findExtension$1(businessObject,'zeebe:IoMapping');if(!extensionElements){return;}if(bindingType==='zeebe:input'){return(0,_minDash.find)(extensionElements.get('zeebe:inputParameters'),function(input){return input.get('zeebe:target')===binding.name;});}else{return(0,_minDash.find)(extensionElements.get('zeebe:outputParameters'),function(output){return output.get('zeebe:source')===binding.source;});}}if(bindingType==='zeebe:taskHeader'){var _extensionElements=findExtension$1(businessObject,'zeebe:TaskHeaders');if(!_extensionElements){return;}return(0,_minDash.find)(_extensionElements.get('zeebe:values'),function(value){return value.get('zeebe:key')===binding.key;});}if(bindingType==='zeebe:property'){var zeebeProperties=findExtension$1(businessObject,'zeebe:Properties');if(!zeebeProperties){return;}return zeebeProperties.get('properties').find(function(value){return value.get('name')===binding.name;});}}/**
 * Find old property matching specified new property.
 *
 * @param {Object} oldTemplate
 * @param {Object} newProperty
 *
 * @returns {Object}
 */function findOldProperty$1(oldTemplate,newProperty){if(!oldTemplate){return;}var oldProperties=oldTemplate.properties,newBinding=newProperty.binding,newBindingName=newBinding.name,newBindingType=newBinding.type;if(newBindingType==='property'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type;return oldBindingType==='property'&&oldBindingName===newBindingName;});}if(newBindingType==='zeebe:taskDefinition:type'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;return oldBindingType==='zeebe:taskDefinition:type';});}if(newBindingType==='zeebe:input'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type;if(oldBindingType!=='zeebe:input'){return;}return oldBindingName===newBindingName;});}if(newBindingType==='zeebe:output'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!=='zeebe:output'){return;}return oldBinding.source===newBinding.source;});}if(newBindingType==='zeebe:taskHeader'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!=='zeebe:taskHeader'){return;}return oldBinding.key===newBinding.key;});}if(newBindingType==='zeebe:property'){return oldProperties.find(function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!=='zeebe:property'){return;}return oldBinding.name===newBinding.name;});}if(newBindingType===MESSAGE_PROPERTY_TYPE){return oldProperties.find(function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!==MESSAGE_PROPERTY_TYPE){return;}return oldBinding.name===newBinding.name;});}if(newBindingType===MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE){return oldProperties.find(function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!==MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE){return;}return oldBinding.name===newBinding.name;});}}/**
 * Check whether the existing property should be keept. This is the case if
 *  - an old template was set and the value differs from the default
 *  - no template was set but the property was set manually
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {Object} oldProperty
 * @param {Object} newProperty
 *
 * @returns {boolean}
 */function shouldKeepValue(element,oldProperty,newProperty){// "Hidden" values are treated as a constant
if(newProperty.type==='Hidden'){return false;}// Dropdowns should keep existing configuration
// cf. https://github.com/bpmn-io/bpmn-js-properties-panel/issues/767
if(newProperty.type==='Dropdown'){var currentValue=getPropertyValue(element,newProperty);// only keep value if old value is a valid option
return newProperty.choices&&newProperty.choices.some(function(choice){return choice.value===currentValue;});}// keep existing old property if
// user changed it from the original
if(oldProperty){return propertyChanged$1(element,oldProperty);}// keep existing property value
return!!getPropertyValue(element,newProperty);}/**
 * Check whether property was changed after being set by template.
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {Object} oldProperty
 *
 * @returns {boolean}
 */function propertyChanged$1(element,oldProperty){var oldPropertyValue=oldProperty.value;return getPropertyValue(element,oldProperty)!==oldPropertyValue;}function getPropertyValue(element,property){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var binding=property.binding,bindingName=binding.name,bindingType=binding.type;if(bindingType==='property'){return businessObject.get(bindingName);}if(bindingType==='zeebe:taskDefinition:type'){return businessObject.get('zeebe:type');}if(bindingType==='zeebe:input'){return businessObject.get('zeebe:source');}if(bindingType==='zeebe:output'){return businessObject.get('zeebe:target');}if(bindingType==='zeebe:taskHeader'){return businessObject.get('zeebe:value');}if(bindingType==='zeebe:property'){return businessObject.get('zeebe:value');}if(bindingType===MESSAGE_PROPERTY_TYPE){return businessObject.get(bindingName);}if(bindingType===MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE){return businessObject.get(bindingName);}}function remove$1(array,item){var index=array.indexOf(item);if((0,_minDash.isUndefined)(index)){return array;}array.splice(index,1);return array;}function registerHandlers$1(commandStack,elementTemplates,eventBus){commandStack.registerHandler('propertiesPanel.zeebe.changeTemplate',ChangeElementTemplateHandler$1);// apply default element templates on shape creation
eventBus.on(['commandStack.shape.create.postExecuted'],function(event){var _event$context=event.context,_event$context$hints=_event$context.hints,hints=_event$context$hints===void 0?{}:_event$context$hints,shape=_event$context.shape;if(hints.createElementsBehavior!==false){applyDefaultTemplate$1(shape,elementTemplates,commandStack);}});// apply default element templates on connection creation
eventBus.on(['commandStack.connection.create.postExecuted'],function(event){var _event$context2=event.context,_event$context2$hints=_event$context2.hints,hints=_event$context2$hints===void 0?{}:_event$context2$hints,connection=_event$context2.connection;if(hints.createElementsBehavior!==false){applyDefaultTemplate$1(connection,elementTemplates,commandStack);}});}registerHandlers$1.$inject=['commandStack','elementTemplates','eventBus'];var commandsModule$1={__init__:[registerHandlers$1]};function applyDefaultTemplate$1(element,elementTemplates,commandStack){if(!elementTemplates.get(element)&&elementTemplates.getDefault(element)){var command='propertiesPanel.zeebe.changeTemplate';var commandContext={element:element,newTemplate:elementTemplates.getDefault(element)};commandStack.execute(command,commandContext);}}var PropertyBindingProvider=/*#__PURE__*/function(){function PropertyBindingProvider(){_classCallCheck(this,PropertyBindingProvider);}_createClass(PropertyBindingProvider,null,[{key:"create",value:function create(element,options){var property=options.property;var binding=property.binding;var name=binding.name;var value=getDefaultValue(property);var businessObject=(0,_ModelUtil.getBusinessObject)(element);businessObject[name]=value;}}]);return PropertyBindingProvider;}();var TaskDefinitionTypeBindingProvider=/*#__PURE__*/function(){function TaskDefinitionTypeBindingProvider(){_classCallCheck(this,TaskDefinitionTypeBindingProvider);}_createClass(TaskDefinitionTypeBindingProvider,null,[{key:"create",value:function create(element,options){var property=options.property,bpmnFactory=options.bpmnFactory;var value=getDefaultValue(property);var taskDefinition=ensureExtension(element,'zeebe:TaskDefinition',bpmnFactory);taskDefinition.set('type',value);}}]);return TaskDefinitionTypeBindingProvider;}();var InputBindingProvider=/*#__PURE__*/function(){function InputBindingProvider(){_classCallCheck(this,InputBindingProvider);}_createClass(InputBindingProvider,null,[{key:"create",value:function create(element,options){var property=options.property,bpmnFactory=options.bpmnFactory;var binding=property.binding;var value=getDefaultValue(property);var ioMapping=ensureExtension(element,'zeebe:IoMapping',bpmnFactory);if(!shouldUpdate(value,property)){return;}var input=createInputParameter$1(binding,value,bpmnFactory);input.$parent=ioMapping;ioMapping.get('inputParameters').push(input);}}]);return InputBindingProvider;}();var OutputBindingProvider=/*#__PURE__*/function(){function OutputBindingProvider(){_classCallCheck(this,OutputBindingProvider);}_createClass(OutputBindingProvider,null,[{key:"create",value:function create(element,options){var property=options.property,bpmnFactory=options.bpmnFactory;var binding=property.binding;var value=getDefaultValue(property);var ioMapping=ensureExtension(element,'zeebe:IoMapping',bpmnFactory);if(!shouldUpdate(value,property)){return;}var output=createOutputParameter$1(binding,value,bpmnFactory);output.$parent=ioMapping;ioMapping.get('outputParameters').push(output);}}]);return OutputBindingProvider;}();var TaskHeaderBindingProvider=/*#__PURE__*/function(){function TaskHeaderBindingProvider(){_classCallCheck(this,TaskHeaderBindingProvider);}_createClass(TaskHeaderBindingProvider,null,[{key:"create",value:function create(element,options){var property=options.property,bpmnFactory=options.bpmnFactory;var binding=property.binding;var value=getDefaultValue(property);var taskHeaders=ensureExtension(element,'zeebe:TaskHeaders',bpmnFactory);var header=createTaskHeader(binding,value,bpmnFactory);header.$parent=taskHeaders;taskHeaders.get('values').push(header);}}]);return TaskHeaderBindingProvider;}();var ZeebePropertiesProvider=/*#__PURE__*/function(){function ZeebePropertiesProvider(){_classCallCheck(this,ZeebePropertiesProvider);}_createClass(ZeebePropertiesProvider,null,[{key:"create",value:function create(element,options){var property=options.property,bpmnFactory=options.bpmnFactory;var binding=property.binding;var value=getDefaultValue(property);var zeebeProperties=ensureExtension(element,'zeebe:Properties',bpmnFactory);if(!shouldUpdate(value,property)){return;}var zeebeProperty=createZeebeProperty(binding,value,bpmnFactory);zeebeProperty.$parent=zeebeProperties;zeebeProperties.get('properties').push(zeebeProperty);}}]);return ZeebePropertiesProvider;}();var MessagePropertyBindingProvider=/*#__PURE__*/function(){function MessagePropertyBindingProvider(){_classCallCheck(this,MessagePropertyBindingProvider);}_createClass(MessagePropertyBindingProvider,null,[{key:"create",value:function create(element,options){var bpmnFactory=options.bpmnFactory,property=options.property;var binding=property.binding;var name=binding.name;var value=getDefaultValue(property);var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(businessObject,'bpmn:Event')){businessObject=businessObject.get('eventDefinitions')[0];}var message=businessObject.get('messageRef');if(!message){message=bpmnFactory.create('bpmn:Message',{'zeebe:modelerTemplate':getTemplateId$1(element)});businessObject.set('messageRef',message);}message.set(name,value);}}]);return MessagePropertyBindingProvider;}();var MessageZeebeSubscriptionBindingProvider=/*#__PURE__*/function(){function MessageZeebeSubscriptionBindingProvider(){_classCallCheck(this,MessageZeebeSubscriptionBindingProvider);}_createClass(MessageZeebeSubscriptionBindingProvider,null,[{key:"create",value:function create(element,options){var bpmnFactory=options.bpmnFactory,property=options.property;var binding=property.binding;var name=binding.name;var value=getDefaultValue(property);var businessObject=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(businessObject,'bpmn:Event')){businessObject=businessObject.get('eventDefinitions')[0];}var message=businessObject.get('messageRef');if(!message){message=bpmnFactory.create('bpmn:Message',{'zeebe:modelerTemplate':getTemplateId$1(element)});businessObject.set('messageRef',message);}var subscription=ensureExtension(message,'zeebe:Subscription',bpmnFactory);if(!shouldUpdate(value,property)){return;}subscription.set(name,value);}}]);return MessageZeebeSubscriptionBindingProvider;}();var TemplateElementFactory=/*#__PURE__*/function(){function TemplateElementFactory(bpmnFactory,elementFactory){var _this$_providers;_classCallCheck(this,TemplateElementFactory);this._bpmnFactory=bpmnFactory;this._elementFactory=elementFactory;this._providers=(_this$_providers={},_defineProperty(_this$_providers,PROPERTY_TYPE$1,PropertyBindingProvider),_defineProperty(_this$_providers,ZEEBE_TASK_DEFINITION_TYPE_TYPE,TaskDefinitionTypeBindingProvider),_defineProperty(_this$_providers,ZEBBE_PROPERTY_TYPE,ZeebePropertiesProvider),_defineProperty(_this$_providers,ZEBBE_INPUT_TYPE,InputBindingProvider),_defineProperty(_this$_providers,ZEEBE_OUTPUT_TYPE,OutputBindingProvider),_defineProperty(_this$_providers,ZEEBE_TASK_HEADER_TYPE,TaskHeaderBindingProvider),_defineProperty(_this$_providers,MESSAGE_PROPERTY_TYPE,MessagePropertyBindingProvider),_defineProperty(_this$_providers,MESSAGE_ZEEBE_SUBSCRIPTION_PROPERTY_TYPE,MessageZeebeSubscriptionBindingProvider),_this$_providers);}/**
   * Create an element based on an element template.
   *
   * @param {ElementTemplate} template
   * @returns {djs.model.Base}
   */_createClass(TemplateElementFactory,[{key:"create",value:function create(template){var properties=template.properties;// (1) base shape
var element=this._createShape(template);// (2) apply template
this._setModelerTemplate(element,template);// (3) apply icon
if(hasIcon(template)){this._setModelerTemplateIcon(element,template);}// (4) apply properties
this._applyProperties(element,properties);return element;}},{key:"_createShape",value:function _createShape(template){var appliesTo=template.appliesTo,_template$elementType=template.elementType,elementType=_template$elementType===void 0?{}:_template$elementType;var elementFactory=this._elementFactory;var attrs={type:elementType.value||appliesTo[0]};// apply eventDefinition
if(elementType.eventDefinition){attrs.eventDefinitionType=elementType.eventDefinition;}var element=elementFactory.createShape(attrs);return element;}},{key:"_ensureExtensionElements",value:function _ensureExtensionElements(element){var bpmnFactory=this._bpmnFactory;var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=bpmnFactory.create('bpmn:ExtensionElements',{values:[]});extensionElements.$parent=businessObject;businessObject.set('extensionElements',extensionElements);}return extensionElements;}},{key:"_setModelerTemplate",value:function _setModelerTemplate(element,template){var id=template.id,version=template.version;var businessObject=(0,_ModelUtil.getBusinessObject)(element);businessObject.set('zeebe:modelerTemplate',id);businessObject.set('zeebe:modelerTemplateVersion',version);}},{key:"_setModelerTemplateIcon",value:function _setModelerTemplateIcon(element,template){var icon=template.icon;var contents=icon.contents;var businessObject=(0,_ModelUtil.getBusinessObject)(element);businessObject.set('zeebe:modelerTemplateIcon',contents);}/**
   * Apply properties to a given element.
   *
   * @param {djs.model.Base} element
   * @param {Array<Object>} properties
   */},{key:"_applyProperties",value:function _applyProperties(element,properties){var _this21=this;var processedProperties=[];properties.forEach(function(property){return _this21._applyProperty(element,property,properties,processedProperties);});}/**
   * Apply a property and its parent properties to an element based on conditions.
   *
   * @param {djs.model.Base} element
   * @param {Object} property
   * @param {Array<Object>} properties
   * @param {Array<Object>} processedProperties
   */},{key:"_applyProperty",value:function _applyProperty(element,property,properties,processedProperties){var _this22=this;// skip if already processed
if(processedProperties.includes(property)){return;}// apply dependant property first if not already applied
var dependentProperties=findDependentProperties(property,properties);dependentProperties.forEach(function(property){return _this22._applyProperty(element,property,properties,processedProperties);});// check condition and apply property if condition is met
if(isConditionMet(element,properties,property)){this._bindProperty(property,element);}processedProperties.push(property);}/**
   * Bind property to element.
   * @param {Object} property
   * @param {djs.Model.Base} element
   */},{key:"_bindProperty",value:function _bindProperty(property,element){var binding=property.binding;var bindingType=binding.type;var bindingProvider=this._providers[bindingType];bindingProvider.create(element,{property:property,bpmnFactory:this._bpmnFactory});}}]);return TemplateElementFactory;}();TemplateElementFactory.$inject=['bpmnFactory','elementFactory'];// helper ////////////////
function hasIcon(template){var icon=template.icon;return!!(icon&&icon.contents);}function findDependentProperties(property,properties){var condition=property.condition;if(!condition){return[];}var dependentProperty=findProperyById(properties,condition.property);if(dependentProperty){return[dependentProperty];}return[];}function findProperyById(properties,id){return(0,_minDash.find)(properties,function(property){return property.id===id;});}var templateElementFactoryModule={__init__:['templateElementFactory'],templateElementFactory:['type',TemplateElementFactory]};function createElementTemplatesGroup(){var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _props$getTemplateId=props.getTemplateId,getTemplateId$1=_props$getTemplateId===void 0?getTemplateId:_props$getTemplateId,_props$unlinkTemplate=props.unlinkTemplate,unlinkTemplate=_props$unlinkTemplate===void 0?unlinkTemplate$1:_props$unlinkTemplate,_props$updateTemplate=props.updateTemplate,updateTemplate=_props$updateTemplate===void 0?updateTemplate$1:_props$updateTemplate;return function ElementTemplatesGroup(props){var id=props.id,label=props.label,element=props.element,_props$entries=props.entries,entries=_props$entries===void 0?[]:_props$entries;var _useLayoutState=(0,_propertiesPanel.useLayoutState)(['groups',id,'open'],false),_useLayoutState2=_slicedToArray(_useLayoutState,2),open=_useLayoutState2[0],setOpen=_useLayoutState2[1];var empty=!entries.length;var toggleOpen=function toggleOpen(){return!empty&&setOpen(!open);};return(0,_jsxRuntime.jsxs)("div",{"class":"bio-properties-panel-group bio-properties-panel-templates-group","data-group-id":'group-'+id,children:[(0,_jsxRuntime.jsxs)("div",{"class":(0,_classnames["default"])('bio-properties-panel-group-header',{empty:empty,open:open&&!empty}),onClick:toggleOpen,children:[(0,_jsxRuntime.jsx)("div",{title:label,"class":"bio-properties-panel-group-header-title",children:label}),(0,_jsxRuntime.jsxs)("div",{"class":"bio-properties-panel-group-header-buttons",children:[(0,_jsxRuntime.jsx)(TemplateGroupButtons,{element:element,getTemplateId:getTemplateId$1,unlinkTemplate:unlinkTemplate,updateTemplate:updateTemplate}),!empty&&(0,_jsxRuntime.jsx)(SectionToggle,{open:open})]})]}),(0,_jsxRuntime.jsx)("div",{"class":(0,_classnames["default"])('bio-properties-panel-group-entries',{open:open&&!empty}),children:entries.map(function(entry){var Component=entry.component,id=entry.id;return(0,_preact.createElement)(Component,_objectSpread(_objectSpread({},entry),{},{key:id,element:element}));})})]});};}function SectionToggle(_ref136){var open=_ref136.open;return(0,_jsxRuntime.jsx)(_propertiesPanel.HeaderButton,{title:"Toggle section","class":"bio-properties-panel-arrow",children:(0,_jsxRuntime.jsx)(_propertiesPanel.ArrowIcon,{"class":open?'bio-properties-panel-arrow-down':'bio-properties-panel-arrow-right'})});}/**
 *
 * @param {object} props
 * @param {object} props.element
 * @param {function} props.getTemplateId
 * @param {function} props.unlinkTemplate
 * @param {function} props.updateTemplate
 */function TemplateGroupButtons(_ref137){var element=_ref137.element,getTemplateId=_ref137.getTemplateId,unlinkTemplate=_ref137.unlinkTemplate,updateTemplate=_ref137.updateTemplate;var elementTemplates=useService('elementTemplates');var templateState=getTemplateState(elementTemplates,element,getTemplateId);if(templateState.type==='NO_TEMPLATE'){return(0,_jsxRuntime.jsx)(SelectEntryTemplate,{element:element});}else if(templateState.type==='KNOWN_TEMPLATE'){return(0,_jsxRuntime.jsx)(AppliedTemplate,{element:element,unlinkTemplate:unlinkTemplate});}else if(templateState.type==='UNKNOWN_TEMPLATE'){return(0,_jsxRuntime.jsx)(UnknownTemplate,{element:element,unlinkTemplate:unlinkTemplate});}else if(templateState.type==='OUTDATED_TEMPLATE'){return(0,_jsxRuntime.jsx)(OutdatedTemplate,{element:element,templateState:templateState,unlinkTemplate:unlinkTemplate,updateTemplate:updateTemplate});}}function SelectEntryTemplate(_ref138){var element=_ref138.element;var translate=useService('translate');var eventBus=useService('eventBus');var selectTemplate=function selectTemplate(){return eventBus.fire('elementTemplates.select',{element:element});};return(0,_jsxRuntime.jsxs)(_propertiesPanel.HeaderButton,{title:"Select a template","class":"bio-properties-panel-select-template-button",onClick:selectTemplate,children:[(0,_jsxRuntime.jsx)(_propertiesPanel.CreateIcon,{}),(0,_jsxRuntime.jsx)("span",{children:translate('Select')})]});}function AppliedTemplate(_ref139){var element=_ref139.element,unlinkTemplate=_ref139.unlinkTemplate;var translate=useService('translate'),injector=useService('injector');var menuItems=[{entry:translate('Unlink'),action:function action(){return unlinkTemplate(element,injector);}},{entry:(0,_jsxRuntime.jsx)(RemoveTemplate,{}),action:function action(){return removeTemplate(element,injector);}}];return(0,_jsxRuntime.jsx)(_propertiesPanel.DropdownButton,{menuItems:menuItems,"class":"bio-properties-panel-applied-template-button",children:(0,_jsxRuntime.jsxs)(_propertiesPanel.HeaderButton,{children:[(0,_jsxRuntime.jsx)("span",{children:translate('Applied')}),(0,_jsxRuntime.jsx)(_propertiesPanel.ArrowIcon,{"class":"bio-properties-panel-arrow-down"})]})});}function RemoveTemplate(){var translate=useService('translate');return(0,_jsxRuntime.jsx)("span",{"class":"bio-properties-panel-remove-template",children:translate('Remove')});}function UnknownTemplate(_ref140){var element=_ref140.element,unlinkTemplate=_ref140.unlinkTemplate;var translate=useService('translate'),injector=useService('injector');var menuItems=[{entry:(0,_jsxRuntime.jsx)(NotFoundText,{})},{separator:true},{entry:translate('Unlink'),action:function action(){return unlinkTemplate(element,injector);}},{entry:(0,_jsxRuntime.jsx)(RemoveTemplate,{}),action:function action(){return removeTemplate(element,injector);}}];return(0,_jsxRuntime.jsx)(_propertiesPanel.DropdownButton,{menuItems:menuItems,"class":"bio-properties-panel-template-not-found",children:(0,_jsxRuntime.jsxs)(_propertiesPanel.HeaderButton,{children:[(0,_jsxRuntime.jsx)("span",{children:translate('Not found')}),(0,_jsxRuntime.jsx)(_propertiesPanel.ArrowIcon,{"class":"bio-properties-panel-arrow-down"})]})});}function NotFoundText(){var translate=useService('translate');return(0,_jsxRuntime.jsx)("div",{"class":"bio-properties-panel-template-not-found-text",children:translate('The template applied was not found. Therefore, its properties cannot be shown. Unlink to access the data.')});}/**
 *
 * @param {object} props
 * @param {object} element
 * @param {UnknownTemplate} templateState
 * @param {function} unlinkTemplate
 * @param {function} updateTemplate
 */function OutdatedTemplate(_ref141){var element=_ref141.element,templateState=_ref141.templateState,unlinkTemplate=_ref141.unlinkTemplate,updateTemplate=_ref141.updateTemplate;var newerTemplate=templateState.newerTemplate;var translate=useService('translate'),injector=useService('injector');var menuItems=[{entry:(0,_jsxRuntime.jsx)(UpdateAvailableText,{newerTemplate:newerTemplate})},{separator:true},{entry:translate('Update'),action:function action(){return updateTemplate(element,newerTemplate,injector);}},{entry:translate('Unlink'),action:function action(){return unlinkTemplate(element,injector);}},{entry:(0,_jsxRuntime.jsx)(RemoveTemplate,{}),action:function action(){return removeTemplate(element,injector);}}];return(0,_jsxRuntime.jsx)(_propertiesPanel.DropdownButton,{menuItems:menuItems,"class":"bio-properties-panel-template-update-available",children:(0,_jsxRuntime.jsxs)(_propertiesPanel.HeaderButton,{children:[(0,_jsxRuntime.jsx)("span",{children:translate('Update available')}),(0,_jsxRuntime.jsx)(_propertiesPanel.ArrowIcon,{"class":"bio-properties-panel-arrow-down"})]})});}function UpdateAvailableText(_ref142){var newerTemplate=_ref142.newerTemplate;var translate=useService('translate');var text=translate('A new version of the template is available: {templateVersion}',{templateVersion:getVersionOrDateFromTemplate(newerTemplate)});return(0,_jsxRuntime.jsx)("div",{"class":"bio-properties-panel-template-update-available-text",children:text});}// helper //////
/**
 * Determine template state in the current element.
 *
 * @param {object} elementTemplates
 * @param {object} element
 * @param {function} getTemplateId
 * @returns {TemplateState}
 */function getTemplateState(elementTemplates,element,getTemplateId){var templateId=getTemplateId(element),template=elementTemplates.get(element);if(!templateId){return{type:'NO_TEMPLATE'};}if(!template){return{type:'UNKNOWN_TEMPLATE',templateId:templateId};}var newerTemplate=elementTemplates.getLatest(templateId,{deprecated:true})[0];if(newerTemplate!==template){return{type:'OUTDATED_TEMPLATE',template:template,newerTemplate:newerTemplate};}return{type:'KNOWN_TEMPLATE',template:template};}function TemplateProps(_ref143){var element=_ref143.element,elementTemplates=_ref143.elementTemplates;var template=elementTemplates.get(element);if(!template){return[];}return[{id:'template-name',component:TemplateName,template:template},{id:'template-version',component:TemplateVersion,template:template},{id:'template-description',component:TemplateDescription,template:template}].filter(function(entry){return!!entry.component;});}function TemplateName(_ref144){var id=_ref144.id,template=_ref144.template;var translate=useService('translate');return(0,_jsxRuntime.jsx)(TextEntry,{id:id,label:translate('Name'),content:template.name});}function TemplateVersion(_ref145){var id=_ref145.id,template=_ref145.template;var translate=useService('translate');var version=getVersionOrDateFromTemplate(template);return version?(0,_jsxRuntime.jsx)(TextEntry,{id:id,label:translate('Version'),content:version}):null;}function TemplateDescription(_ref146){var id=_ref146.id,template=_ref146.template;var translate=useService('translate');var description=template.description;return description?(0,_jsxRuntime.jsx)(TextEntry,{id:id,label:translate('Description'),content:template.description}):null;}function TextEntry(_ref147){var id=_ref147.id,label=_ref147.label,content=_ref147.content;return(0,_jsxRuntime.jsxs)("div",{"data-entry-id":id,"class":"bio-properties-panel-entry bio-properties-panel-text-entry",children:[(0,_jsxRuntime.jsx)("span",{"class":"bio-properties-panel-label",children:label}),(0,_jsxRuntime.jsx)("span",{"class":"bio-properties-panel-text-entry__content",children:content})]});}var e,o={};function n(r,t,e){if(3===r.nodeType){var o="textContent"in r?r.textContent:r.nodeValue||"";if(!1!==n.options.trim){var a=0===t||t===e.length-1;if((!(o=o.match(/^[\s\n]+$/g)&&"all"!==n.options.trim?" ":o.replace(/(^[\s\n]+|[\s\n]+$)/g,"all"===n.options.trim||a?"":" "))||" "===o)&&e.length>1&&a)return null;}return o;}if(1!==r.nodeType)return null;var p=String(r.nodeName).toLowerCase();if("script"===p&&!n.options.allowScripts)return null;var l,s,u=n.h(p,function(r){var t=r&&r.length;if(!t)return null;for(var e={},o=0;o<t;o++){var a=r[o],i=a.name,p=a.value;"on"===i.substring(0,2)&&n.options.allowEvents&&(p=new Function(p)),e[i]=p;}return e;}(r.attributes),(s=(l=r.childNodes)&&Array.prototype.map.call(l,n).filter(i))&&s.length?s:null);return n.visitor&&n.visitor(u),u;}var a,i=function i(r){return r;},p={};function l(r){var t=(r.type||"").toLowerCase(),e=l.map;e&&e.hasOwnProperty(t)?(r.type=e[t],r.props=Object.keys(r.props||{}).reduce(function(t,e){var o;return t[(o=e,o.replace(/-(.)/g,function(r,t){return t.toUpperCase();}))]=r.props[e],t;},{})):r.type=t.replace(/[^a-z0-9-]/i,"");}var Markup=function(t){function i(){t.apply(this,arguments);}return t&&(i.__proto__=t),(i.prototype=Object.create(t&&t.prototype)).constructor=i,i.setReviver=function(r){a=r;},i.prototype.shouldComponentUpdate=function(r){var t=this.props;return r.wrap!==t.wrap||r.type!==t.type||r.markup!==t.markup;},i.prototype.setComponents=function(r){if(this.map={},r)for(var t in r)if(r.hasOwnProperty(t)){var e=t.replace(/([A-Z]+)([A-Z][a-z0-9])|([a-z0-9]+)([A-Z])/g,"$1$3-$2$4").toLowerCase();this.map[e]=r[t];}},i.prototype.render=function(t){var i=t.wrap;void 0===i&&(i=!0);var s,u=t.type,c=t.markup,m=t.components,v=t.reviver,f=t.onError,d=t["allow-scripts"],h$1=t["allow-events"],y=t.trim,w=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&-1===t.indexOf(o)&&(e[o]=r[o]);return e;}(t,["wrap","type","markup","components","reviver","onError","allow-scripts","allow-events","trim"]),C=v||this.reviver||this.constructor.prototype.reviver||a||_preact.h;this.setComponents(m);var g={allowScripts:d,allowEvents:h$1,trim:y};try{s=function(r,t,a,i,s){var u=function(r,t){var o,n,a,i,p="html"===t?"text/html":"application/xml";"html"===t?(i="body",a="<!DOCTYPE html>\n<html><body>"+r+"</body></html>"):(i="xml",a='<?xml version="1.0" encoding="UTF-8"?>\n<xml>'+r+"</xml>");try{o=new DOMParser().parseFromString(a,p);}catch(r){n=r;}if(o||"html"!==t||((o=e||(e=function(){if(document.implementation&&document.implementation.createHTMLDocument)return document.implementation.createHTMLDocument("");var r=document.createElement("iframe");return r.style.cssText="position:absolute; left:0; top:-999em; width:1px; height:1px; overflow:hidden;",r.setAttribute("sandbox","allow-forms"),document.body.appendChild(r),r.contentWindow.document;}())).open(),o.write(a),o.close()),o){var l=o.getElementsByTagName(i)[0],s=l.firstChild;return r&&!s&&(l.error="Document parse failed."),s&&"parsererror"===String(s.nodeName).toLowerCase()&&(s.removeChild(s.firstChild),s.removeChild(s.lastChild),l.error=s.textContent||s.nodeValue||n||"Unknown error",l.removeChild(s)),l;}}(r,t);if(u&&u.error)throw new Error(u.error);var c=u&&u.body||u;l.map=i||p;var m=c&&function(r,t,e,a){return n.visitor=t,n.h=e,n.options=a||o,n(r);}(c,l,a,s);return l.map=null,m&&m.props&&m.props.children||null;}(c,u,C,this.map,g);}catch(r){f?f({error:r}):"undefined"!=typeof console&&console.error&&console.error("preact-markup: "+r);}if(!1===i)return s||null;var x=w.hasOwnProperty("className")?"className":"class",b=w[x];return b?b.splice?b.splice(0,0,"markup"):"string"==typeof b?w[x]+=" markup":"object"==_typeof(b)&&(b.markup=!0):w[x]="markup",C("div",w,s||null);},i;}(_preact.Component);/**
 * Copied from existing form-js#Sanitizer
 * cf. https://github.com/bpmn-io/form-js/blob/master/packages/form-js-viewer/src/render/components/Sanitizer.js
 */var NODE_TYPE_TEXT=3,NODE_TYPE_ELEMENT=1;var ALLOWED_NODES=['h1','h2','h3','h4','h5','span','em','a','p','div','ul','ol','li','hr','blockquote','img','pre','code','br','strong'];var ALLOWED_ATTRIBUTES=['align','alt','class','href','id','name','rel','target','src'];var ALLOWED_URI_PATTERN=/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;// eslint-disable-line no-useless-escape
var ATTR_WHITESPACE_PATTERN=/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g;// eslint-disable-line no-control-regex
var FORM_ELEMENT=document.createElement('form');/**
 * Sanitize a HTML string and return the cleaned, safe version.
 *
 * @param {string} html
 * @return {string}
 */function sanitizeHTML(html){var doc=new DOMParser().parseFromString("<!DOCTYPE html>\n<html><body><div>".concat(html),'text/html');doc.normalize();var element=doc.body.firstChild;if(element){sanitizeNode(/** @type Element */element);return new XMLSerializer().serializeToString(element);}else{// handle the case that document parsing
// does not work at all, due to HTML gibberish
return'';}}/**
 * Recursively sanitize a HTML node, potentially
 * removing it, its children or attributes.
 *
 * Inspired by https://github.com/developit/snarkdown/issues/70
 * and https://github.com/cure53/DOMPurify. Simplified
 * for our use-case.
 *
 * @param {Element} node
 */function sanitizeNode(node){// allow text nodes
if(node.nodeType===NODE_TYPE_TEXT){return;}// disallow all other nodes but Element
if(node.nodeType!==NODE_TYPE_ELEMENT){return node.remove();}var lcTag=node.tagName.toLowerCase();// disallow non-whitelisted tags
if(!ALLOWED_NODES.includes(lcTag)){return node.remove();}var attributes=node.attributes;// clean attributes
for(var _i2=attributes.length;_i2--;){var attribute=attributes[_i2];var name=attribute.name;var lcName=name.toLowerCase();// normalize node value
var value=attribute.value.trim();node.removeAttribute(name);var valid=isValidAttribute(lcTag,lcName,value);if(valid){node.setAttribute(name,value);}}// force noopener on target="_blank" links
if(lcTag==='a'&&node.getAttribute('target')==='_blank'&&node.getAttribute('rel')!=='noopener'){node.setAttribute('rel','noopener');}for(var _i3=node.childNodes.length;_i3--;){sanitizeNode(/** @type Element */node.childNodes[_i3]);}}/**
 * Validates attributes for validity.
 *
 * @param {string} lcTag
 * @param {string} lcName
 * @param {string} value
 * @return {boolean}
 */function isValidAttribute(lcTag,lcName,value){// disallow most attributes based on whitelist
if(!ALLOWED_ATTRIBUTES.includes(lcName)){return false;}// disallow "DOM clobbering" / polution of document and wrapping form elements
if((lcName==='id'||lcName==='name')&&(value in document||value in FORM_ELEMENT)){return false;}if(lcName==='target'&&value!=='_blank'){return false;}// allow valid url links only
if(lcName==='href'&&!ALLOWED_URI_PATTERN.test(value.replace(ATTR_WHITESPACE_PATTERN,''))){return false;}return true;}function PropertyDescription(props){var description=props.description;return description&&(0,_jsxRuntime.jsx)(Markup,{markup:sanitizeHTML(description),trim:false});}var DEFAULT_CUSTOM_GROUP$1={id:'ElementTemplates__CustomProperties',label:'Custom properties'};function CustomProperties$1(props){var element=props.element,elementTemplate=props.elementTemplate;var groups=[];var id=elementTemplate.id,properties=elementTemplate.properties,propertyGroups=elementTemplate.groups;// (1) group properties by group id
var groupedProperties=groupByGroupId$1(properties);var defaultProps=[];(0,_minDash.forEach)(groupedProperties,function(properties,groupId){var group=findCustomGroup$1(propertyGroups,groupId);if(!group){return defaultProps.push.apply(defaultProps,_toConsumableArray(properties));}addCustomGroup$1(groups,{element:element,id:"ElementTemplates__CustomProperties-".concat(groupId),label:group.label,properties:properties,templateId:"".concat(id,"-").concat(groupId)});});// (2) add default custom props
if(defaultProps.length){addCustomGroup$1(groups,_objectSpread(_objectSpread({},DEFAULT_CUSTOM_GROUP$1),{},{element:element,properties:defaultProps,templateId:id}));}return groups;}function addCustomGroup$1(groups,props){var element=props.element,id=props.id,label=props.label,properties=props.properties,templateId=props.templateId;var customPropertiesGroup={id:id,label:label,component:_propertiesPanel.Group,entries:[],shouldOpen:true};properties.forEach(function(property,index){var entry=createCustomEntry$1("custom-entry-".concat(templateId,"-").concat(index),element,property);if(entry){customPropertiesGroup.entries.push(entry);}});if(customPropertiesGroup.entries.length){groups.push(customPropertiesGroup);}}function createCustomEntry$1(id,element,property){var type=property.type,feel=property.feel;if(!type){type=getDefaultType$1(property);}if(type==='Boolean'){return{id:id,component:BooleanProperty$1,isEdited:_propertiesPanel.isCheckboxEntryEdited,property:property};}if(type==='Dropdown'){return{id:id,component:DropdownProperty$1,isEdited:_propertiesPanel.isSelectEntryEdited,property:property};}if(type==='String'){if(feel){return{id:id,component:FeelProperty,isEdited:_propertiesPanel.isFeelEntryEdited,property:property};}return{id:id,component:StringProperty$1,isEdited:_propertiesPanel.isTextFieldEntryEdited,property:property};}if(type==='Text'){if(feel){return{id:id,component:FeelTextAreaProperty,isEdited:_propertiesPanel.isFeelEntryEdited,property:property};}return{id:id,component:TextAreaProperty$1,isEdited:_propertiesPanel.isTextAreaEntryEdited,property:property};}}function getDefaultType$1(property){var binding=property.binding;var type=binding.type;if([PROPERTY_TYPE$1,ZEEBE_TASK_DEFINITION_TYPE_TYPE,ZEBBE_INPUT_TYPE,ZEEBE_OUTPUT_TYPE,ZEEBE_PROPERTY_TYPE,ZEEBE_TASK_HEADER_TYPE].includes(type)){return'String';}}function BooleanProperty$1(props){var element=props.element,id=props.id,property=props.property;var description=property.description,editable=property.editable,label=property.label;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack');return(0,_propertiesPanel.CheckboxEntry)({element:element,getValue:propertyGetter$1(element,property),id:id,label:label,description:PropertyDescription({description:description}),setValue:propertySetter$1(bpmnFactory,commandStack,element,property),disabled:editable===false});}function DropdownProperty$1(props){var element=props.element,id=props.id,property=props.property;var description=property.description,editable=property.editable,label=property.label;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),translate=useService('translate');var getOptions=function getOptions(){var choices=property.choices,optional=property.optional;var dropdownOptions=[];dropdownOptions=choices.map(function(_ref148){var name=_ref148.name,value=_ref148.value;return{label:name,value:value};});if(optional){dropdownOptions=[{label:'',value:undefined}].concat(_toConsumableArray(dropdownOptions));}return dropdownOptions;};return(0,_propertiesPanel.SelectEntry)({element:element,id:id,label:label,getOptions:getOptions,description:PropertyDescription({description:description}),getValue:propertyGetter$1(element,property),setValue:propertySetter$1(bpmnFactory,commandStack,element,property),validate:propertyValidator$1(translate,property),disabled:editable===false});}function FeelTextAreaProperty(props){var element=props.element,id=props.id,property=props.property;var description=property.description,editable=property.editable,label=property.label,feel=property.feel;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),debounce=useService('debounceInput'),translate=useService('translate');var TextAreaComponent=!isExternalProperty(property)?FeelTextAreaEntryWithVariableContext:FeelTextAreaEntry;return TextAreaComponent({debounce:debounce,element:element,getValue:propertyGetter$1(element,property),id:id,label:label,feel:feel,description:PropertyDescription({description:description}),setValue:propertySetter$1(bpmnFactory,commandStack,element,property),validate:propertyValidator$1(translate,property),disabled:editable===false});}function FeelProperty(props){var element=props.element,id=props.id,property=props.property;var description=property.description,editable=property.editable,label=property.label,feel=property.feel;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),debounce=useService('debounceInput'),translate=useService('translate');var TextFieldComponent=!isExternalProperty(property)?FeelEntryWithVariableContext:FeelEntry;return TextFieldComponent({debounce:debounce,element:element,getValue:propertyGetter$1(element,property),id:id,label:label,feel:feel,description:PropertyDescription({description:description}),setValue:propertySetter$1(bpmnFactory,commandStack,element,property),validate:propertyValidator$1(translate,property),disabled:editable===false});}function StringProperty$1(props){var element=props.element,id=props.id,property=props.property;var description=property.description,editable=property.editable,label=property.label,feel=property.feel;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),debounce=useService('debounceInput'),translate=useService('translate');return(0,_propertiesPanel.TextFieldEntry)({debounce:debounce,element:element,getValue:propertyGetter$1(element,property),id:id,label:label,feel:feel,description:PropertyDescription({description:description}),setValue:propertySetter$1(bpmnFactory,commandStack,element,property),validate:propertyValidator$1(translate,property),disabled:editable===false});}function TextAreaProperty$1(props){var element=props.element,id=props.id,property=props.property;var description=property.description,editable=property.editable,label=property.label,feel=property.feel,language=property.language;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),debounce=useService('debounceInput'),translate=useService('translate');return(0,_propertiesPanel.TextAreaEntry)({debounce:debounce,element:element,id:id,label:label,feel:feel,monospace:!!language,autoResize:true,description:PropertyDescription({description:description}),getValue:propertyGetter$1(element,property),setValue:propertySetter$1(bpmnFactory,commandStack,element,property),validate:propertyValidator$1(translate,property),disabled:editable===false});}function propertyGetter$1(element,property){return function getValue(){return getPropertyValue$1(element,property);};}function propertySetter$1(bpmnFactory,commandStack,element,property){return function getValue(value){return setPropertyValue(bpmnFactory,commandStack,element,property,value);};}function propertyValidator$1(translate,property){return function validate(value){var _property$constraints=property.constraints,constraints=_property$constraints===void 0?{}:_property$constraints;var maxLength=constraints.maxLength,minLength=constraints.minLength,notEmpty=constraints.notEmpty;if(notEmpty&&isEmpty(value)){return translate('Must not be empty.');}if(maxLength&&(value||'').length>maxLength){return translate('Must have max length {maxLength}.',{maxLength:maxLength});}if(minLength&&(value||'').length<minLength){return translate('Must have min length {minLength}.',{minLength:minLength});}var pattern=constraints.pattern;if(pattern){var message;if(!(0,_minDash.isString)(pattern)){message=pattern.message;pattern=pattern.value;}if(!matchesPattern$1(value,pattern)){return message||translate('Must match pattern {pattern}.',{pattern:pattern});}}};}function isEmpty(value){if(typeof value==='string'){return!value.trim().length;}return value===undefined;}function matchesPattern$1(string,pattern){return new RegExp(pattern).test(string);}function groupByGroupId$1(properties){return(0,_minDash.groupBy)(properties,'group');}function findCustomGroup$1(groups,id){return(0,_minDash.find)(groups,function(g){return g.id===id;});}/**
 * Is the given property executed by the engine?
 *
 * @param { { binding: { type: string } } } property
 * @return {boolean}
 */function isExternalProperty(property){return['zeebe:property','zeebe:taskHeader'].includes(property.binding.type);}var EMPTY_OPTION='';var CREATE_NEW_OPTION='create-new';/**
 * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
 */ /**
 * @returns {Array<Entry>} entries
 */function MessageProps(props){var element=props.element;if(!isMessageSupported(element)){return[];}return[{id:'messageRef',component:MessageRef,isEdited:_propertiesPanel.isSelectEntryEdited}];}function MessageRef(props){var element=props.element;var bpmnFactory=useService('bpmnFactory');var modeling=useService('modeling');var translate=useService('translate');var messageEventDefinition=getMessageEventDefinition(element);var getValue=function getValue(){var message=getMessage(element);if(message){return message.get('id');}return EMPTY_OPTION;};var setValue=function setValue(value){var root=getRoot(messageEventDefinition);var message;// (1) create new message
if(value===CREATE_NEW_OPTION){var id=nextId('Message_');message=createElement('bpmn:Message',{id:id,name:id},root,bpmnFactory);value=message.get('id');}// (2) update (or remove) messageRef
message=findRootElementById(messageEventDefinition,'bpmn:Message',value)||message;// (3) commit all updates
return modeling.updateModdleProperties(element,messageEventDefinition,{messageRef:message});};var getOptions=function getOptions(){var options=[{value:EMPTY_OPTION,label:translate('<none>')},{value:CREATE_NEW_OPTION,label:translate('Create new ...')}];var messages=findRootElementsByType((0,_ModelUtil.getBusinessObject)(element),'bpmn:Message');var filteredMessages=withoutTemplatedMessages(messages);sortByName(filteredMessages).forEach(function(message){options.push({value:message.get('id'),label:message.get('name')});});return options;};return ReferenceSelectEntry({element:element,id:'messageRef',label:translate('Global message reference'),autoFocusEntry:'messageName',getValue:getValue,setValue:setValue,getOptions:getOptions});}function withoutTemplatedMessages(messages){return messages.filter(function(message){return!message.get('zeebe:modelerTemplate');});}// helper /////////////////////////
function sortByName(elements){return(0,_minDash.sortBy)(elements,function(e){return(e.name||'').toLowerCase();});}var LOWER_PRIORITY$1=300;var ElementTemplatesPropertiesProvider$1=/*#__PURE__*/function(){function ElementTemplatesPropertiesProvider(elementTemplates,propertiesPanel,injector){_classCallCheck(this,ElementTemplatesPropertiesProvider);propertiesPanel.registerProvider(LOWER_PRIORITY$1,this);this._elementTemplates=elementTemplates;this._injector=injector;}_createClass(ElementTemplatesPropertiesProvider,[{key:"getGroups",value:function getGroups(element){var _this23=this;return function(groups){updateMessageGroup(groups,element);if(!_this23._shouldShowTemplateProperties(element)){return groups;}// (0) Copy provided groups
groups=groups.slice();var templatesGroup={element:element,id:'ElementTemplates__Template',label:'Template',component:createElementTemplatesGroup({getTemplateId:getTemplateId$1,unlinkTemplate:unlinkTemplate,updateTemplate:updateTemplate}),entries:TemplateProps({element:element,elementTemplates:_this23._elementTemplates})};// (1) Add templates group
addGroupsAfter$1('documentation',groups,[templatesGroup]);var elementTemplate=_this23._elementTemplates.get(element);if(elementTemplate){elementTemplate=applyConditions(element,elementTemplate);var templateSpecificGroups=[].concat(CustomProperties$1({element:element,elementTemplate:elementTemplate}));// (2) add template-specific properties groups
addGroupsAfter$1('ElementTemplates__Template',groups,templateSpecificGroups);}// (3) apply entries visible
if(getTemplateId$1(element)){groups=filterWithEntriesVisible$1(elementTemplate||{},groups);}return groups;};}},{key:"_shouldShowTemplateProperties",value:function _shouldShowTemplateProperties(element){return getTemplateId$1(element)||this._elementTemplates.getAll(element).length;}}]);return ElementTemplatesPropertiesProvider;}();ElementTemplatesPropertiesProvider$1.$inject=['elementTemplates','propertiesPanel','injector'];// helper /////////////////////
function updateMessageGroup(groups,element){var messageGroup=findGroup(groups,'message');if(!messageGroup){return;}messageGroup.entries=overrideGenericEntries(messageGroup.entries,MessageProps({element:element}));}function findGroup(groups,id){return groups.find(function(g){return g.id===id;});}function overrideGenericEntries(oldEntries,newEntries){return oldEntries.map(function(oldEntry){return newEntries.find(function(newEntry){return newEntry.id===oldEntry.id;})||oldEntry;});}/**
 *
 * @param {string} id
 * @param {Array<{ id: string }} groups
 * @param {Array<{ id: string }>} groupsToAdd
 */function addGroupsAfter$1(id,groups,groupsToAdd){var index=groups.findIndex(function(group){return group.id===id;});if(index!==-1){groups.splice.apply(groups,[index+1,0].concat(_toConsumableArray(groupsToAdd)));}else{// add in the beginning if group with provided id is missing
groups.unshift.apply(groups,_toConsumableArray(groupsToAdd));}}function filterWithEntriesVisible$1(template,groups){if(!template.entriesVisible){return groups.filter(function(group){return group.id==='general'||group.id.startsWith('ElementTemplates__');});}return groups;}/**
 * Restores the original order of the template properties
 * on the moddle element.
 */var UpdateTemplatePropertiesOrder=/*#__PURE__*/function(_CommandInterceptor3){_inherits(UpdateTemplatePropertiesOrder,_CommandInterceptor3);var _super6=_createSuper(UpdateTemplatePropertiesOrder);function UpdateTemplatePropertiesOrder(eventBus,elementTemplates,commandStack,bpmnFactory){var _this24;_classCallCheck(this,UpdateTemplatePropertiesOrder);_this24=_super6.call(this,eventBus);_this24._eventBus=eventBus;_this24._elementTemplates=elementTemplates;_this24._commandStack=commandStack;_this24._bpmnFactory=bpmnFactory;_this24.postExecute(['element.updateProperties','element.updateModdleProperties'],_this24._updatePropertiesOrder,true,_assertThisInitialized(_this24));return _this24;}_createClass(UpdateTemplatePropertiesOrder,[{key:"_updatePropertiesOrder",value:function _updatePropertiesOrder(context){var element=context.element;var template=this._elementTemplates.get(element);var businessObject=element.businessObject;var commands=[];if(!template){return;}var templateProperties=applyConditions(element,template).properties;// zeebe:Property
var zeebeProperties=findExtension$1(businessObject,'zeebe:Properties');if(zeebeProperties){this._updateZeebePropertiesOrder(zeebeProperties,templateProperties,commands,context);}// zeebe:IoMapping
var ioMapping=findExtension$1(businessObject,'zeebe:IoMapping');if(ioMapping){// zeebe:Input
this._updateInputOrder(ioMapping,templateProperties,commands,context);// zeebe:Output
this._updateOutputOrder(ioMapping,templateProperties,commands,context);}// zeebe:TaskHeaders
var taskHeaders=findExtension$1(businessObject,'zeebe:TaskHeaders');if(taskHeaders){this._updateTaskHeadersOrder(taskHeaders,templateProperties,commands,context);}if(commands.length){var commandsToExecute=commands.filter(function(command){return command!==null;});commandsToExecute.length&&this._commandStack.execute('properties-panel.multi-command-executor',commandsToExecute);return;}}},{key:"_updateZeebePropertiesOrder",value:function _updateZeebePropertiesOrder(zeebeProperties,templateProperties,commands,context){var findIndex=function findIndex(properties,propertyToFind){return properties.findIndex(function(prop){return prop.binding.type=='zeebe:property'&&prop.binding.name===propertyToFind.get('name');});};var properties=zeebeProperties.get('properties');if(properties.length<1)return;var newPropertiesOrder=_toConsumableArray(properties);sortProperties(newPropertiesOrder,findIndex,templateProperties);if(!arrayEquals(newPropertiesOrder,properties)){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:zeebeProperties,properties:{properties:newPropertiesOrder}})});}}},{key:"_updateInputOrder",value:function _updateInputOrder(ioMapping,templateProperties,commands,context){var findIndex=function findIndex(properties,propertyToFind){return properties.findIndex(function(prop){return prop.binding.type=='zeebe:input'&&prop.binding.name===propertyToFind.get('target');});};var inputParameters=ioMapping.get('inputParameters');if(inputParameters.length<1)return;var newInputOrder=_toConsumableArray(inputParameters);sortProperties(newInputOrder,findIndex,templateProperties);if(!arrayEquals(newInputOrder,inputParameters)){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:ioMapping,properties:{inputParameters:newInputOrder}})});}}},{key:"_updateOutputOrder",value:function _updateOutputOrder(ioMapping,templateProperties,commands,context){var findIndex=function findIndex(properties,propertyToFind){return properties.findIndex(function(prop){return prop.binding.type=='zeebe:output'&&prop.binding.source===propertyToFind.get('source');});};var outputParameters=ioMapping.get('outputParameters');if(outputParameters.length<1)return;var newOutputOrder=_toConsumableArray(outputParameters);sortProperties(newOutputOrder,findIndex,templateProperties);if(!arrayEquals(newOutputOrder,outputParameters)){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:ioMapping,properties:{outputParameters:newOutputOrder}})});}}},{key:"_updateTaskHeadersOrder",value:function _updateTaskHeadersOrder(taskHeaders,templateProperties,commands,context){var findIndex=function findIndex(properties,propertyToFind){return properties.findIndex(function(prop){return prop.binding.type=='zeebe:taskHeader'&&prop.binding.key===propertyToFind.get('key');});};var headers=taskHeaders.get('zeebe:values');if(headers.length<1)return;var newHeadersOrder=_toConsumableArray(headers);sortProperties(newHeadersOrder,findIndex,templateProperties);if(!arrayEquals(newHeadersOrder,headers)){commands.push({cmd:'element.updateModdleProperties',context:_objectSpread(_objectSpread({},context),{},{moddleElement:taskHeaders,properties:{values:newHeadersOrder}})});}}}]);return UpdateTemplatePropertiesOrder;}(_CommandInterceptor7["default"]);UpdateTemplatePropertiesOrder.$inject=['eventBus','elementTemplates','commandStack','bpmnFactory'];// helpers
function normalizeReplacer(key,value){if((0,_minDash.isObject)(value)){var _keys2=Object.keys(value).sort();return _keys2.reduce(function(obj,key){obj[key]=value[key];return obj;},{});}return value;}function objectEquals(a,b){return JSON.stringify(a,normalizeReplacer)===JSON.stringify(b,normalizeReplacer);}function arrayEquals(a,b){return a.every(function(element,idx){return objectEquals(element,b[idx]);});}function sortProperties(array,findIndex,templateProperties){return array.sort(function(a,b){var aIndex=findIndex(templateProperties,a);var bIndex=findIndex(templateProperties,b);return aIndex-bIndex;});}/**
 * Handles referenced elements.
 */var ReferencedElementBehavior=/*#__PURE__*/function(_CommandInterceptor4){_inherits(ReferencedElementBehavior,_CommandInterceptor4);var _super7=_createSuper(ReferencedElementBehavior);function ReferencedElementBehavior(eventBus,elementTemplates,modeling,canvas,bpmnjs,moddleCopy,bpmnFactory){var _this25;_classCallCheck(this,ReferencedElementBehavior);_this25=_super7.call(this,eventBus);_this25._eventBus=eventBus;_this25._elementTemplates=elementTemplates;_this25._modeling=modeling;_this25._canvas=canvas;_this25._bpmnjs=bpmnjs;_this25.postExecuted(['element.updateProperties','element.updateModdleProperties'],_this25._handlePropertiesUpdate,true,_assertThisInitialized(_this25));_this25.postExecuted('shape.replace',_this25._handleReplacement,true,_assertThisInitialized(_this25));_this25.postExecuted('shape.delete',_this25._handleRemoval,true,_assertThisInitialized(_this25));// copy templated root element when pasting
eventBus.on('copyPaste.pasteElement',function(context){var referencedRootElement=context.descriptor.referencedRootElement;if(!referencedRootElement){return;}if(!getTemplateId$1(referencedRootElement)){return;}context.descriptor.referencedRootElement=moddleCopy.copyElement(referencedRootElement,bpmnFactory.create(referencedRootElement.$type));});return _this25;}/**
   * Unlink referenced element when template is unlinked.
   */_createClass(ReferencedElementBehavior,[{key:"_handlePropertiesUpdate",value:function _handlePropertiesUpdate(context){var element=context.element,properties=context.properties;if(!canHaveReferencedElement(element)){return;}if(!(TEMPLATE_ID_ATTR$1 in properties)||(0,_minDash.isString)(properties[TEMPLATE_ID_ATTR$1])){return;}var bo=(0,_ModelUtil.getBusinessObject)(element);var message=findMessage(bo);if(message&&getTemplateId$1(message)){this._modeling.updateModdleProperties(element,message,_defineProperty({},TEMPLATE_ID_ATTR$1,null));}}/**
   * Remove referenced element when template is removed.
   * Keep referenced element when template is replaced.
   */},{key:"_handleReplacement",value:function _handleReplacement(context){var oldShape=context.oldShape,newShape=context.newShape;var oldTemplate=getTemplateId$1(oldShape),newTemplate=getTemplateId$1(newShape);if(!canHaveReferencedElement(oldShape)||!oldTemplate){return;}var bo=(0,_ModelUtil.getBusinessObject)(oldShape);var message=findMessage(bo);if(!message||!getTemplateId$1(message)){return;}if(!canHaveReferencedElement(newShape)||!newTemplate){this._removeRootElement(message);return;}this._addMessage(newShape,message);}},{key:"_handleRemoval",value:function _handleRemoval(context){var shape=context.shape;if(isLabel(shape)){return;}if(!canHaveReferencedElement(shape)){return;}if(!getTemplateId$1(shape)){return;}var bo=(0,_ModelUtil.getBusinessObject)(shape);var message=findMessage(bo);if(message&&getTemplateId$1(message)){this._removeRootElement(message);}}},{key:"_removeRootElement",value:function _removeRootElement(rootElement){var element=this._canvas.getRootElement();var definitions=this._bpmnjs.getDefinitions();var rootElements=definitions.get('rootElements');this._modeling.updateModdleProperties(element,definitions,{rootElements:rootElements.filter(function(e){return e!==rootElement;})});}},{key:"_addMessage",value:function _addMessage(element,message){var bo=getReferringElement(element);this._modeling.updateModdleProperties(element,bo,{'messageRef':message});}}]);return ReferencedElementBehavior;}(_CommandInterceptor7["default"]);ReferencedElementBehavior.$inject=['eventBus','elementTemplates','modeling','canvas','bpmnjs','moddleCopy','bpmnFactory'];function canHaveReferencedElement(element){return(0,_ModelUtil.isAny)(element,['bpmn:ReceiveTask','bpmn:SendTask','bpmn:Event']);}function getReferringElement(element){var bo=(0,_ModelUtil.getBusinessObject)(element);if((0,_ModelUtil.is)(bo,'bpmn:Event')){return bo.get('eventDefinitions')[0];}return bo;}function isLabel(element){return element.type==='label';}/**
 * Handles generated value properties.
 */var GeneratedValueBehavior=/*#__PURE__*/function(_CommandInterceptor5){_inherits(GeneratedValueBehavior,_CommandInterceptor5);var _super8=_createSuper(GeneratedValueBehavior);function GeneratedValueBehavior(eventBus,elementTemplates,modeling,commandStack,bpmnFactory){var _this26;_classCallCheck(this,GeneratedValueBehavior);_this26=_super8.call(this,eventBus);_this26._eventBus=eventBus;_this26._elementTemplates=elementTemplates;_this26._modeling=modeling;_this26.preExecute('shape.create',function(context){var element=context.shape;var template=elementTemplates.get(element);if(!template){return;}var generatedProps=template.properties.filter(function(p){return p.generatedValue;});generatedProps.forEach(function(p){if(!getPropertyValue$1(element,p)){return;}var value=getDefaultValue(p);setPropertyValue(bpmnFactory,commandStack,element,p,value);});},true);return _this26;}return _createClass(GeneratedValueBehavior);}(_CommandInterceptor7["default"]);GeneratedValueBehavior.$inject=['eventBus','elementTemplates','modeling','commandStack','bpmnFactory'];var index$1={__depends__:[commandsModule$1,templateElementFactoryModule,_translate["default"],zeebePropertiesProviderModule],__init__:['elementTemplatesLoader','replaceBehavior','elementTemplatesPropertiesProvider','elementTemplatesConditionChecker','generatedValueBehavior','referencedElementBehavior','updateTemplatePropertiesOrder'],elementTemplates:['type',ElementTemplates],elementTemplatesLoader:['type',ElementTemplatesLoader],replaceBehavior:['type',ReplaceBehavior$1],elementTemplatesPropertiesProvider:['type',ElementTemplatesPropertiesProvider$1],elementTemplatesConditionChecker:['type',ElementTemplatesConditionChecker],generatedValueBehavior:['type',GeneratedValueBehavior],referencedElementBehavior:['type',ReferencedElementBehavior],updateTemplatePropertiesOrder:['type',UpdateTemplatePropertiesOrder]};/**
 * This Behavior checks if the new element's type is in
 * the list of elements the template applies to and unlinks
 * it if not.
 */exports.CloudElementTemplatesPropertiesProviderModule=index$1;var ReplaceBehavior=/*#__PURE__*/function(_CommandInterceptor6){_inherits(ReplaceBehavior,_CommandInterceptor6);var _super9=_createSuper(ReplaceBehavior);function ReplaceBehavior(elementTemplates,injector){var _this27;_classCallCheck(this,ReplaceBehavior);_this27=_super9.call(this,injector.get('eventBus'));_this27.postExecuted('shape.replace',function(e){var context=e.context,oldShape=context.oldShape,oldBo=(0,_ModelUtil.getBusinessObject)(oldShape),newShape=context.newShape,newBo=(0,_ModelUtil.getBusinessObject)(newShape);if(!oldBo.modelerTemplate){return;}var template=newBo.modelerTemplate;var version=newBo.modelerTemplateVersion;var elementTemplate=elementTemplates.get(template,version);if(!elementTemplate){unlinkTemplate$1(newShape,injector);return;}var appliesTo=elementTemplate.appliesTo,elementType=elementTemplate.elementType;if(elementType){if(!(0,_ModelUtil.is)(newShape,elementType.value)){unlinkTemplate$1(newShape,injector);}return;}var allowed=appliesTo.reduce(function(allowed,type){return allowed||(0,_ModelUtil.is)(newBo,type);},false);if(!allowed){unlinkTemplate$1(newShape,injector);}});return _this27;}return _createClass(ReplaceBehavior);}(_CommandInterceptor7["default"]);ReplaceBehavior.$inject=['elementTemplates','injector'];/**
 * Converts legacy scopes descriptor to newer supported array structure.
 *
 * For example, it transforms
 *
 * scopes: {
 *   'camunda:Connector':
 *     { properties: []
 *   }
 * }
 *
 * to
 *
 * scopes: [
 *   {
 *     type: 'camunda:Connector',
 *     properties: []
 *   }
 * ]
 *
 * @param {ScopesDescriptor} scopes
 *
 * @returns {Array}
 */function handleLegacyScopes(){var scopes=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var scopesAsArray=[];if(!(0,_minDash.isObject)(scopes)){return scopes;}(0,_minDash.forEach)((0,_minDash.keys)(scopes),function(scopeName){scopesAsArray.push((0,_minDash.assign)({type:scopeName},scopes[scopeName]));});return scopesAsArray;}/**
 * Create an input parameter representing the given
 * binding and value.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createInputParameter(binding,value,bpmnFactory){var name=binding.name,scriptFormat=binding.scriptFormat;var parameterValue,parameterDefinition;if(scriptFormat){parameterDefinition=bpmnFactory.create('camunda:Script',{scriptFormat:scriptFormat,value:value});}else{parameterValue=value;}return bpmnFactory.create('camunda:InputParameter',{name:name,value:parameterValue,definition:parameterDefinition});}/**
 * Create an output parameter representing the given
 * binding and value.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createOutputParameter(binding,value,bpmnFactory){var scriptFormat=binding.scriptFormat,source=binding.source;var parameterValue,parameterDefinition;if(scriptFormat){parameterDefinition=bpmnFactory.create('camunda:Script',{scriptFormat:scriptFormat,value:source});}else{parameterValue=source;}return bpmnFactory.create('camunda:OutputParameter',{name:value,value:parameterValue,definition:parameterDefinition});}/**
 * Create camunda property from the given binding.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaProperty(binding){var value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var bpmnFactory=arguments.length>2?arguments[2]:undefined;var name=binding.name;return bpmnFactory.create('camunda:Property',{name:name,value:value});}/**
 * Create camunda:in element from given binding.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaIn(binding,value,bpmnFactory){var attrs=createCamundaInOutAttrs(binding,value);return bpmnFactory.create('camunda:In',attrs);}/**
 * Create camunda:in with businessKey element from given binding.
 *
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaInWithBusinessKey(value,bpmnFactory){return bpmnFactory.create('camunda:In',{businessKey:value});}/**
 * Create camunda:out element from given binding.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaOut(binding,value,bpmnFactory){var attrs=createCamundaInOutAttrs(binding,value);return bpmnFactory.create('camunda:Out',attrs);}/**
 * Create camunda:executionListener element containing an inline script from given binding.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaExecutionListenerScript(binding,value,bpmnFactory){var event=binding.event,scriptFormat=binding.scriptFormat;var parameterValue,parameterDefinition;if(scriptFormat){parameterDefinition=bpmnFactory.create('camunda:Script',{scriptFormat:scriptFormat,value:value});}else{parameterValue=value;}return bpmnFactory.create('camunda:ExecutionListener',{event:event,value:parameterValue,script:parameterDefinition});}/**
 * Create camunda:field element containing string or expression from given binding.
 *
 * @param {PropertyBinding} binding
 * @param {String} value
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaFieldInjection(binding,value,bpmnFactory){var DEFAULT_PROPS={'string':undefined,'expression':undefined,'name':undefined};var props=(0,_minDash.assign)({},DEFAULT_PROPS);var expression=binding.expression,name=binding.name;if(!expression){props.string=value;}else{props.expression=value;}props.name=name;return bpmnFactory.create('camunda:Field',props);}/**
 * Create camunda:errorEventDefinition element containing expression and errorRef
 * from given binding.
 *
 * @param {String} expression
 * @param {ModdleElement} errorRef
 * @param {ModdleElement} parent
 * @param {BpmnFactory} bpmnFactory
 *
 * @return {ModdleElement}
 */function createCamundaErrorEventDefinition(expression,errorRef,parent,bpmnFactory){var errorEventDefinition=bpmnFactory.create('camunda:ErrorEventDefinition',{errorRef:errorRef,expression:expression});errorEventDefinition.$parent=parent;return errorEventDefinition;}/**
 * Create bpmn:error element containing a specific error id given by a binding.
 *
 * @param {String} bindingErrorRef
 * @param {ModdleElement} parent
 * @param {BpmnFactory} bpmnFactory
 *
 * @return { ModdleElement }
 */function createError(bindingErrorRef,parent,bpmnFactory){var error=bpmnFactory.create('bpmn:Error',{// we need to later retrieve the error from a binding
id:nextId('Error_'+bindingErrorRef+'_')});error.$parent=parent;return error;}// helpers //////////
/**
 * Create properties for camunda:in and camunda:out types.
 */function createCamundaInOutAttrs(binding,value){var properties={};var expression=binding.expression,source=binding.source,sourceExpression=binding.sourceExpression,target=binding.target,type=binding.type,variables=binding.variables;// explicitly cover all conditions as specified here:
// https://github.com/camunda/camunda-modeler/blob/develop/docs/element-templates/README.md#camundain
if(type==='camunda:in'){if(target&&!expression&&!variables){properties.target=target;properties.source=value;}else if(target&&expression===true&&!variables){properties.target=target;properties.sourceExpression=value;}else if(!target&&!expression&&variables==='local'){properties.local=true;properties.variables='all';}else if(target&&!expression&&variables==='local'){properties.local=true;properties.source=value;properties.target=target;}else if(target&&expression&&variables==='local'){properties.local=true;properties.sourceExpression=value;properties.target=target;}else if(!target&&!expression&&variables==='all'){properties.variables='all';}else{throw new Error('invalid configuration for camunda:in element template binding');}}// explicitly cover all conditions as specified here:
// https://github.com/camunda/camunda-modeler/blob/develop/docs/element-templates/README.md#camundaout
if(type==='camunda:out'){if(source&&!sourceExpression&&!variables){properties.target=value;properties.source=source;}else if(!source&&sourceExpression&&!variables){properties.target=value;properties.sourceExpression=sourceExpression;}else if(!source&&!sourceExpression&&variables==='all'){properties.variables='all';}else if(source&&!sourceExpression&&variables==='local'){properties.local=true;properties.source=source;properties.target=value;}else if(!source&&sourceExpression&&variables==='local'){properties.local=true;properties.sourceExpression=sourceExpression;properties.target=value;}else if(!source&&!sourceExpression&&variables==='local'){properties.local=true;properties.variables='all';}else{throw new Error('invalid configuration for camunda:out element template binding');}}return properties;}var CAMUNDA_SERVICE_TASK_LIKE=['camunda:class','camunda:delegateExpression','camunda:expression'];/**
 * Applies an element template to an element. Sets `camunda:modelerTemplate` and
 * `camunda:modelerTemplateVersion`.
 */var ChangeElementTemplateHandler=/*#__PURE__*/function(){function ChangeElementTemplateHandler(bpmnFactory,bpmnReplace,commandStack,modeling){_classCallCheck(this,ChangeElementTemplateHandler);this._bpmnFactory=bpmnFactory;this._bpmnReplace=bpmnReplace;this._commandStack=commandStack;this._modeling=modeling;}/**
   * Change an element's template and update its properties as specified in `newTemplate`. Specify
   * `oldTemplate` to update from one template to another. If `newTemplate` isn't specified the
   * `camunda:modelerTemplate` and `camunda:modelerTemplateVersion` properties will be removed from
   * the element.
   *
   * @param {Object} context
   * @param {Object} context.element
   * @param {Object} [context.oldTemplate]
   * @param {Object} [context.newTemplate]
   */_createClass(ChangeElementTemplateHandler,[{key:"preExecute",value:function preExecute(context){var _this28=this;var newTemplate=context.newTemplate,oldTemplate=context.oldTemplate;var element=context.element;// update camunda:modelerTemplate attribute
this._updateCamundaModelerTemplate(element,newTemplate);if(newTemplate){element=context.element=this._updateTaskType(element,newTemplate);// update properties
this._updateProperties(element,oldTemplate,newTemplate);// update camunda:ExecutionListener properties
this._updateCamundaExecutionListenerProperties(element,newTemplate);// update camunda:Field properties
this._updateCamundaFieldProperties(element,oldTemplate,newTemplate);// update camunda:In and camunda:Out properties
this._updateCamundaInOutProperties(element,oldTemplate,newTemplate);// update camunda:InputParameter and camunda:OutputParameter properties
this._updateCamundaInputOutputParameterProperties(element,oldTemplate,newTemplate);// update camunda:Property properties
this._updateCamundaPropertyProperties(element,oldTemplate,newTemplate);// update camunda:ErrorEventDefinition properties
this._updateCamundaErrorEventDefinitionProperties(element,oldTemplate,newTemplate);// update properties for each scope
handleLegacyScopes(newTemplate.scopes).forEach(function(newScopeTemplate){_this28._updateScopeProperties(element,oldTemplate,newScopeTemplate,newTemplate);});}}},{key:"_getOrCreateExtensionElements",value:function _getOrCreateExtensionElements(element){var bpmnFactory=this._bpmnFactory,modeling=this._modeling;var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=bpmnFactory.create('bpmn:ExtensionElements',{values:[]});extensionElements.$parent=businessObject;modeling.updateProperties(element,{extensionElements:extensionElements});}return extensionElements;}/**
   * Update `camunda:ErrorEventDefinition` properties of specified business object. Event
   * definitions can only exist in `bpmn:ExtensionElements`.
   *
   * Ensures an bpmn:Error exists for the event definition.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateCamundaErrorEventDefinitionProperties",value:function _updateCamundaErrorEventDefinitionProperties(element,oldTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='camunda:errorEventDefinition';});// (1) do not override if no updates
if(!newProperties.length){return;}var extensionElements=this._getOrCreateExtensionElements(element);var oldErrorEventDefinitions=findExtensions(element,['camunda:ErrorEventDefinition']);newProperties.forEach(function(newProperty){var oldProperty=findOldProperty(oldTemplate,newProperty),oldEventDefinition=oldProperty&&findOldBusinessObject(extensionElements,oldProperty),newBinding=newProperty.binding;// (2) update old event definitions
if(oldProperty&&oldEventDefinition){if(!propertyChanged(oldEventDefinition,oldProperty)){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldEventDefinition,properties:{expression:newProperty.value}});}remove(oldErrorEventDefinitions,oldEventDefinition);}// (3) create new event definition + error
else{var rootElement=getRoot((0,_ModelUtil.getBusinessObject)(element)),newError=createError(newBinding.errorRef,rootElement,bpmnFactory),newEventDefinition=createCamundaErrorEventDefinition(newProperty.value,newError,extensionElements,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:rootElement,properties:{rootElements:[].concat(_toConsumableArray(rootElement.get('rootElements')),[newError])}});commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[newEventDefinition])}});}});// (4) remove old event definitions
if(oldErrorEventDefinitions.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),function(value){return oldErrorEventDefinitions.includes(value);})}});}}/**
   * Update `camunda:ExecutionListener` properties of specified business object. Execution listeners
   * will always be overridden. Execution listeners can only exist in `bpmn:ExtensionElements`.
   *
   * @param {djs.model.Base} element
   * @param {Object} newTemplate
   */},{key:"_updateCamundaExecutionListenerProperties",value:function _updateCamundaExecutionListenerProperties(element,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='camunda:executionListener';});// (1) do not override old execution listeners if no new execution listeners specified
if(!newProperties.length){return;}var extensionElements=this._getOrCreateExtensionElements(element);// (2) remove old execution listeners
var oldExecutionListeners=findExtensions(element,['camunda:ExecutionListener']);// (3) add new execution listeners
var newExecutionListeners=newProperties.map(function(newProperty){var newBinding=newProperty.binding,propertyValue=newProperty.value;return createCamundaExecutionListenerScript(newBinding,propertyValue,bpmnFactory);});commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray((0,_minDash.without)(extensionElements.get('values'),function(value){return oldExecutionListeners.includes(value);})),_toConsumableArray(newExecutionListeners))}});}/**
   * Update `camunda:Field` properties of specified business object.
   * If business object is `camunda:ExecutionListener` or `camunda:TaskListener` `fields` property
   * will be updated. Otherwise `extensionElements.values` property will be updated.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   * @param {ModdleElement} businessObject
   */},{key:"_updateCamundaFieldProperties",value:function _updateCamundaFieldProperties(element,oldTemplate,newTemplate,businessObject){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='camunda:field';});// (1) do not override old fields if no new fields specified
if(!newProperties.length){return;}if(!businessObject){businessObject=this._getOrCreateExtensionElements(element);}var propertyName=(0,_ModelingUtil.isAny)(businessObject,['camunda:ExecutionListener','camunda:TaskListener'])?'fields':'values';var oldFields=findExtensions(element,['camunda:Field']);newProperties.forEach(function(newProperty){var oldProperty=findOldProperty(oldTemplate,newProperty),oldField=oldProperty&&findOldBusinessObject(businessObject,oldProperty),newBinding=newProperty.binding;// (2) update old fields
if(oldProperty&&oldField){if(!propertyChanged(oldField,oldProperty)){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldField,properties:{string:newProperty.value}});}remove(oldFields,oldField);}// (3) add new fields
else{var newCamundaFieldInjection=createCamundaFieldInjection(newBinding,newProperty.value,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:_defineProperty({},propertyName,[].concat(_toConsumableArray(businessObject.get(propertyName)),[newCamundaFieldInjection]))});}});// (4) remove old fields
if(oldFields.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:_defineProperty({},propertyName,(0,_minDash.without)(businessObject.get(propertyName),function(value){return oldFields.includes(value);}))});}}/**
   * Update `camunda:In` and `camunda:Out` properties of specified business object. Only
   * `bpmn:CallActivity` and events with `bpmn:SignalEventDefinition` can have ins. Only
   * `camunda:CallActivity` can have outs.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateCamundaInOutProperties",value:function _updateCamundaInOutProperties(element,oldTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='camunda:in'||newBindingType==='camunda:in:businessKey'||newBindingType==='camunda:out';});// (1) do not override old fields if no new fields specified
if(!newProperties.length){return;}// get extension elements of either signal event definition or call activity
var extensionElements=this._getOrCreateExtensionElements(getSignalEventDefinition$1(element)||element);var oldInsAndOuts=findExtensions(extensionElements,['camunda:In','camunda:Out']);newProperties.forEach(function(newProperty){var oldProperty=findOldProperty(oldTemplate,newProperty),oldBinding=oldProperty&&oldProperty.binding,oldInOurOut=oldProperty&&findOldBusinessObject(extensionElements,oldProperty),newPropertyValue=newProperty.value,newBinding=newProperty.binding,newBindingType=newBinding.type,properties={};var newInOrOut;// (2) update old ins and outs
if(oldProperty&&oldInOurOut){if(!propertyChanged(oldInOurOut,oldProperty)){if(newBindingType==='camunda:in'){if(newBinding.expression){properties['camunda:sourceExpression']=newPropertyValue;}else{properties['camunda:source']=newPropertyValue;}}else if(newBindingType==='camunda:in:businessKey'){properties['camunda:businessKey']=newPropertyValue;}else if(newBindingType==='camunda:out'){properties['camunda:target']=newPropertyValue;}}// update camunda:local property if it changed
if(oldBinding.local&&!newBinding.local||!oldBinding.local&&newBinding.local){properties.local=newBinding.local;}if((0,_minDash.keys)(properties)){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldInOurOut,properties:properties});}remove(oldInsAndOuts,oldInOurOut);}// (3) add new ins and outs
else{if(newBindingType==='camunda:in'){newInOrOut=createCamundaIn(newBinding,newPropertyValue,bpmnFactory);}else if(newBindingType==='camunda:out'){newInOrOut=createCamundaOut(newBinding,newPropertyValue,bpmnFactory);}else if(newBindingType==='camunda:in:businessKey'){newInOrOut=createCamundaInWithBusinessKey(newPropertyValue,bpmnFactory);}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[newInOrOut])}});}});// (4) remove old ins and outs
if(oldInsAndOuts.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:(0,_minDash.without)(extensionElements.get('values'),function(value){return oldInsAndOuts.includes(value);})}});}}/**
   * Update `camunda:InputParameter` and `camunda:OutputParameter` properties of specified business
   * object. Both can only exist in `camunda:InputOutput` which can exist in `bpmn:ExtensionElements`
   * or `camunda:Connector`.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   */},{key:"_updateCamundaInputOutputParameterProperties",value:function _updateCamundaInputOutputParameterProperties(element,oldTemplate,newTemplate,businessObject){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='camunda:inputParameter'||newBindingType==='camunda:outputParameter';});// (1) do not override old inputs and outputs if no new inputs and outputs specified
if(!newProperties.length){return;}if(!businessObject){businessObject=this._getOrCreateExtensionElements(element);}var inputOutput;if((0,_ModelUtil.is)(businessObject,'camunda:Connector')){inputOutput=businessObject.get('camunda:inputOutput');if(!inputOutput){inputOutput=bpmnFactory.create('camunda:InputOutput');commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{inputOutput:inputOutput}});}}else{inputOutput=findExtension(businessObject,'camunda:InputOutput');if(!inputOutput){inputOutput=bpmnFactory.create('camunda:InputOutput');commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:[].concat(_toConsumableArray(businessObject.get('values')),[inputOutput])}});}}var oldInputs=inputOutput.get('camunda:inputParameters')?inputOutput.get('camunda:inputParameters').slice():[];var oldOutputs=inputOutput.get('camunda:outputParameters')?inputOutput.get('camunda:outputParameters').slice():[];var propertyName;newProperties.forEach(function(newProperty){var oldProperty=findOldProperty(oldTemplate,newProperty),oldInputOrOutput=oldProperty&&findOldBusinessObject(businessObject,oldProperty),newPropertyValue=newProperty.value,newBinding=newProperty.binding,newBindingType=newBinding.type;var newInputOrOutput,properties;// (2) update old inputs and outputs
if(oldProperty&&oldInputOrOutput){if(!propertyChanged(oldInputOrOutput,oldProperty)){if((0,_ModelUtil.is)(oldInputOrOutput,'camunda:InputParameter')){properties={value:newPropertyValue};}else{properties={name:newPropertyValue};}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldInputOrOutput,properties:properties});}if((0,_ModelUtil.is)(oldInputOrOutput,'camunda:InputParameter')){remove(oldInputs,oldInputOrOutput);}else{remove(oldOutputs,oldInputOrOutput);}}// (3) add new inputs and outputs
else{if(newBindingType==='camunda:inputParameter'){propertyName='inputParameters';newInputOrOutput=createInputParameter(newBinding,newPropertyValue,bpmnFactory);}else{propertyName='outputParameters';newInputOrOutput=createOutputParameter(newBinding,newPropertyValue,bpmnFactory);}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:_defineProperty({},propertyName,[].concat(_toConsumableArray(inputOutput.get(propertyName)),[newInputOrOutput]))});}});// (4) remove old inputs and outputs
if(oldInputs.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:{inputParameters:(0,_minDash.without)(inputOutput.get('inputParameters'),function(inputParameter){return oldInputs.includes(inputParameter);})}});}if(oldOutputs.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:inputOutput,properties:{outputParameters:(0,_minDash.without)(inputOutput.get('outputParameters'),function(outputParameter){return oldOutputs.includes(outputParameter);})}});}}},{key:"_updateCamundaModelerTemplate",value:function _updateCamundaModelerTemplate(element,newTemplate){var modeling=this._modeling;modeling.updateProperties(element,{'camunda:modelerTemplate':newTemplate&&newTemplate.id,'camunda:modelerTemplateVersion':newTemplate&&newTemplate.version});}/**
   * Update `camunda:Property` properties of specified business object. `camunda:Property` can only
   * exist in `camunda:Properties`.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newTemplate
   * @param {ModdleElement} businessObject
   */},{key:"_updateCamundaPropertyProperties",value:function _updateCamundaPropertyProperties(element,oldTemplate,newTemplate,businessObject){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='camunda:property';});// (1) do not override old properties if no new properties specified
if(!newProperties.length){return;}if(businessObject){businessObject=this._getOrCreateExtensionElements(businessObject);}else{businessObject=this._getOrCreateExtensionElements(element);}var camundaProperties=findExtension(businessObject,'camunda:Properties');if(!camundaProperties){camundaProperties=bpmnFactory.create('camunda:Properties');commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:{values:[].concat(_toConsumableArray(businessObject.get('values')),[camundaProperties])}});}var oldCamundaProperties=camundaProperties.get('camunda:values')?camundaProperties.get('camunda:values').slice():[];newProperties.forEach(function(newProperty){var oldProperty=findOldProperty(oldTemplate,newProperty),oldCamundaProperty=oldProperty&&findOldBusinessObject(businessObject,oldProperty),newPropertyValue=newProperty.value,newBinding=newProperty.binding;// (2) update old properties
if(oldProperty&&oldCamundaProperty){if(!propertyChanged(oldCamundaProperty,oldProperty)){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:oldCamundaProperty,properties:{value:newPropertyValue}});}remove(oldCamundaProperties,oldCamundaProperty);}// (3) add new properties
else{var newCamundaProperty=createCamundaProperty(newBinding,newPropertyValue,bpmnFactory);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:camundaProperties,properties:{values:[].concat(_toConsumableArray(camundaProperties.get('values')),[newCamundaProperty])}});}});// (4) remove old properties
if(oldCamundaProperties.length){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:camundaProperties,properties:{values:(0,_minDash.without)(camundaProperties.get('values'),function(value){return oldCamundaProperties.includes(value);})}});}}/**
   * Update `bpmn:conditionExpression` property of specified element. Since condition expression is
   * is not primitive it needs special handling.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldProperty
   * @param {Object} newProperty
   */},{key:"_updateConditionExpression",value:function _updateConditionExpression(element,oldProperty,newProperty){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack,modeling=this._modeling;var newBinding=newProperty.binding,newPropertyValue=newProperty.value;if(!oldProperty){modeling.updateProperties(element,{conditionExpression:bpmnFactory.create('bpmn:FormalExpression',{body:newPropertyValue,language:newBinding.scriptFormat})});return;}var oldBinding=oldProperty.binding,oldPropertyValue=oldProperty.value;var businessObject=(0,_ModelUtil.getBusinessObject)(element),conditionExpression=businessObject.get('bpmn:conditionExpression');var properties={};if(conditionExpression.get('body')===oldPropertyValue){properties.body=newPropertyValue;}if(conditionExpression.get('language')===oldBinding.scriptFormat){properties.language=newBinding.scriptFormat;}if(!(0,_minDash.keys)(properties).length){return;}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:conditionExpression,properties:properties});}},{key:"_updateProperties",value:function _updateProperties(element,oldTemplate,newTemplate,businessObject){var _this29=this;var commandStack=this._commandStack;var newProperties=newTemplate.properties.filter(function(newProperty){var newBinding=newProperty.binding,newBindingType=newBinding.type;return newBindingType==='property';});if(!newProperties.length){return;}if(!businessObject){businessObject=(0,_ModelUtil.getBusinessObject)(element);}newProperties.forEach(function(newProperty){var oldProperty=findOldProperty(oldTemplate,newProperty),newBinding=newProperty.binding,newBindingName=newBinding.name,newPropertyValue=newProperty.value;var changedElement,properties;if(newBindingName==='conditionExpression'){_this29._updateConditionExpression(element,oldProperty,newProperty);}else{if((0,_ModelUtil.is)(businessObject,'bpmn:Error')){changedElement=businessObject;}else{changedElement=element;}if(oldProperty&&propertyChanged(changedElement,oldProperty)){return;}properties={};properties[newBindingName]=newPropertyValue;// only one of `camunda:class`, `camunda:delegateExpression` and `camunda:expression` can be set
// TODO(philippfromme): ensuring only one of these properties is set at a time should be
// implemented in a behavior and not in this handler and properties panel UI
if(CAMUNDA_SERVICE_TASK_LIKE.indexOf(newBindingName)!==-1){CAMUNDA_SERVICE_TASK_LIKE.forEach(function(camundaServiceTaskLikeProperty){if(camundaServiceTaskLikeProperty!==newBindingName){properties[camundaServiceTaskLikeProperty]=undefined;}});}commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:businessObject,properties:properties});}});}/**
   * Update properties for a specified scope.
   *
   * @param {djs.model.Base} element
   * @param {Object} oldTemplate
   * @param {Object} newScopeTemplate
   * @param {Object} newTemplate
   */},{key:"_updateScopeProperties",value:function _updateScopeProperties(element,oldTemplate,newScopeTemplate,newTemplate){var bpmnFactory=this._bpmnFactory,commandStack=this._commandStack;var scopeName=newScopeTemplate.type;var scopeElement;scopeElement=findOldScopeElement(element,newScopeTemplate,newTemplate);if(!scopeElement){scopeElement=bpmnFactory.create(scopeName);}var oldScopeTemplate=findOldScopeTemplate(newScopeTemplate,oldTemplate);// update properties
this._updateProperties(element,oldScopeTemplate,newScopeTemplate,scopeElement);// update camunda:ExecutionListener properties
this._updateCamundaExecutionListenerProperties(element,newScopeTemplate);// update camunda:In and camunda:Out properties
this._updateCamundaInOutProperties(element,oldScopeTemplate,newScopeTemplate);// update camunda:InputParameter and camunda:OutputParameter properties
this._updateCamundaInputOutputParameterProperties(element,oldScopeTemplate,newScopeTemplate,scopeElement);// update camunda:Field properties
this._updateCamundaFieldProperties(element,oldScopeTemplate,newScopeTemplate,scopeElement);// update camunda:Property properties
this._updateCamundaPropertyProperties(element,oldScopeTemplate,newScopeTemplate,scopeElement);// assume that root elements were already created in root by referenced event definition binding
if(isRootElementScope(scopeName)){return;}var extensionElements=this._getOrCreateExtensionElements(element);commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[scopeElement])}});}/**
   * Replaces the element with the specified elementType
   *
   * @param {djs.model.Base} element
   * @param {Object} newTemplate
   */},{key:"_updateTaskType",value:function _updateTaskType(element,newTemplate){// determine new task type
var newType=newTemplate.elementType;if(!newType){return element;}// don't replace Task that is already the correct type
if(element.$type===newType.value){return element;}return this._bpmnReplace.replaceElement(element,{type:newType.value});}}]);return ChangeElementTemplateHandler;}();ChangeElementTemplateHandler.$inject=['bpmnFactory','bpmnReplace','commandStack','modeling'];// helpers //////////
/**
 * Find old business object matching specified old property.
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {Object} oldProperty
 *
 * @returns {ModdleElement}
 */function findOldBusinessObject(element,oldProperty){var businessObject=(0,_ModelUtil.getBusinessObject)(element),propertyName;var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType==='camunda:field'){if((0,_ModelingUtil.isAny)(businessObject,['camunda:ExecutionListener','camunda:TaskListener'])){propertyName='camunda:fields';}else{propertyName='bpmn:values';}if(!businessObject||!businessObject.get(propertyName)||!businessObject.get(propertyName).length){return;}return(0,_minDash.find)(businessObject.get(propertyName),function(oldBusinessObject){return oldBusinessObject.get('camunda:name')===oldBinding.name;});}if(oldBindingType==='camunda:in'){return(0,_minDash.find)(businessObject.get('values'),function(oldBusinessObject){return oldBusinessObject.get('target')===oldBinding.target;});}if(oldBindingType==='camunda:in:businessKey'){return(0,_minDash.find)(businessObject.get('values'),function(oldBusinessObject){return(0,_minDash.isString)(oldBusinessObject.get('businessKey'));});}if(oldBindingType==='camunda:out'){return(0,_minDash.find)(businessObject.get('values'),function(oldBusinessObject){return oldBusinessObject.get('source')===oldBinding.source||oldBusinessObject.get('sourceExpression')||oldBinding.sourceExpression;});}if(oldBindingType==='camunda:inputParameter'||oldBindingType==='camunda:outputParameter'){if((0,_ModelUtil.is)(businessObject,'camunda:Connector')){businessObject=businessObject.get('camunda:inputOutput');if(!businessObject){return;}}else{businessObject=findExtension(businessObject,'camunda:InputOutput');if(!businessObject){return;}}if(oldBindingType==='camunda:inputParameter'){return(0,_minDash.find)(businessObject.get('camunda:inputParameters'),function(oldBusinessObject){return oldBusinessObject.get('camunda:name')===oldBinding.name;});}else{return(0,_minDash.find)(businessObject.get('camunda:outputParameters'),function(oldBusinessObject){if(oldBinding.scriptFormat){var definition=oldBusinessObject.get('camunda:definition');return definition&&definition.get('camunda:value')===oldBinding.source;}else{return oldBusinessObject.get('camunda:value')===oldBinding.source;}});}}if(oldBindingType==='camunda:property'){if(!businessObject||!businessObject.get('values')||!businessObject.get('values').length){return;}businessObject=findExtension(businessObject,'camunda:Properties');if(!businessObject){return;}return(0,_minDash.find)(businessObject.get('values'),function(oldBusinessObject){return oldBusinessObject.get('camunda:name')===oldBinding.name;});}if(oldBindingType==='camunda:errorEventDefinition'){return findCamundaErrorEventDefinition(element,oldBinding.errorRef);}}/**
 * Find old property matching specified new property.
 *
 * @param {Object} oldTemplate
 * @param {Object} newProperty
 *
 * @returns {Object}
 */function findOldProperty(oldTemplate,newProperty){if(!oldTemplate){return;}var oldProperties=oldTemplate.properties,newBinding=newProperty.binding,newBindingName=newBinding.name,newBindingType=newBinding.type;if(newBindingType==='property'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type;return oldBindingType==='property'&&oldBindingName===newBindingName;});}if(newBindingType==='camunda:field'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type;return oldBindingType==='camunda:field'&&oldBindingName===newBindingName;});}if(newBindingType==='camunda:in'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!=='camunda:in'){return;}// always override if change from source to source expression or vice versa
if(oldBinding.expression&&!newBinding.expression||!oldBinding.expression&&newBinding.expression){return;}return oldBinding.target===newBinding.target;});}if(newBindingType==='camunda:in:businessKey'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;return oldBindingType==='camunda:in:businessKey';});}if(newBindingType==='camunda:out'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;return oldBindingType==='camunda:out'&&(oldBinding.source===newBinding.source||oldBinding.sourceExpression===newBinding.sourceExpression);});}if(newBindingType==='camunda:inputParameter'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type;if(oldBindingType!=='camunda:inputParameter'){return;}return oldBindingName===newBindingName&&oldBinding.scriptFormat===newBinding.scriptFormat;});}if(newBindingType==='camunda:outputParameter'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingType=oldBinding.type;if(oldBindingType!=='camunda:outputParameter'){return;}return oldBinding.source===newBinding.source&&oldBinding.scriptFormat===newBinding.scriptFormat;});}if(newBindingType==='camunda:property'){return(0,_minDash.find)(oldProperties,function(oldProperty){var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type;return oldBindingType==='camunda:property'&&oldBindingName===newBindingName;});}if(newBindingType==='camunda:errorEventDefinition'){return(0,_minDash.find)(oldProperties,function(oldProperty){var newBindingRef=newBinding.errorRef,oldBinding=oldProperty.binding,oldBindingRef=oldBinding.errorRef,oldBindingType=oldBinding.type;return oldBindingType==='camunda:errorEventDefinition'&&oldBindingRef===newBindingRef;});}}function findOldScopeElement(element,scopeTemplate,template){var scopeName=scopeTemplate.type,id=scopeTemplate.id;if(scopeName==='camunda:Connector'){return findExtension(element,'camunda:Connector');}if(scopeName==='bpmn:Error'){// (1) find by error event definition binding
var errorEventDefinitionBinding=findErrorEventDefinitionBinding(template,id);if(!errorEventDefinitionBinding){return;}// (2) find error event definition
var errorEventDefinition=findOldBusinessObject(element,errorEventDefinitionBinding);if(!errorEventDefinition){return;}// (3) retrieve referenced error
return errorEventDefinition.errorRef;}}function isRootElementScope(scopeName){return['bpmn:Error'].includes(scopeName);}function findOldScopeTemplate(scopeTemplate,oldTemplate){var scopeName=scopeTemplate.type,scopeId=scopeTemplate.id,scopes=oldTemplate&&handleLegacyScopes(oldTemplate.scopes);return scopes&&(0,_minDash.find)(scopes,function(scope){if(isRootElementScope(scopeName)){return scope.id===scopeId;}return scope.type===scopeName;});}function findErrorEventDefinitionBinding(template,templateErrorId){return(0,_minDash.find)(template.properties,function(property){return property.binding.errorRef===templateErrorId;});}/**
 * Check whether property was changed after being set by template.
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {Object} oldProperty
 *
 * @returns {boolean}
 */function propertyChanged(element,oldProperty){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var oldBinding=oldProperty.binding,oldBindingName=oldBinding.name,oldBindingType=oldBinding.type,oldPropertyValue=oldProperty.value;var conditionExpression,definition;if(oldBindingType==='property'){if(oldBindingName==='conditionExpression'){conditionExpression=businessObject.get('bpmn:conditionExpression');return conditionExpression.get('bpmn:body')!==oldPropertyValue;}return businessObject.get(oldBindingName)!==oldPropertyValue;}if(oldBindingType==='camunda:field'){return businessObject.get('camunda:string')!==oldPropertyValue;}if(oldBindingType==='camunda:in'){if(oldBinding.expression){return businessObject.get('sourceExpression')!==oldPropertyValue;}else{return businessObject.get('camunda:source')!==oldPropertyValue;}}if(oldBindingType==='camunda:in:businessKey'){return businessObject.get('camunda:businessKey')!==oldPropertyValue;}if(oldBindingType==='camunda:out'){return businessObject.get('camunda:target')!==oldPropertyValue;}if(oldBindingType==='camunda:inputParameter'){if(oldBinding.scriptFormat){definition=businessObject.get('camunda:definition');return definition&&definition.get('camunda:value')!==oldPropertyValue;}else{return businessObject.get('camunda:value')!==oldPropertyValue;}}if(oldBindingType==='camunda:outputParameter'){return businessObject.get('camunda:name')!==oldPropertyValue;}if(oldBindingType==='camunda:property'){return businessObject.get('camunda:value')!==oldPropertyValue;}if(oldBindingType==='camunda:errorEventDefinition'){return businessObject.get('expression')!==oldPropertyValue;}}function remove(array,item){var index=array.indexOf(item);if((0,_minDash.isUndefined)(index)){return array;}array.splice(index,1);return array;}function registerHandlers(commandStack,elementTemplates,eventBus){commandStack.registerHandler('propertiesPanel.camunda.changeTemplate',ChangeElementTemplateHandler);// apply default element templates on shape creation
eventBus.on(['commandStack.shape.create.postExecuted'],function(event){var _event$context3=event.context,_event$context3$hints=_event$context3.hints,hints=_event$context3$hints===void 0?{}:_event$context3$hints,shape=_event$context3.shape;if(hints.createElementsBehavior!==false){applyDefaultTemplate(shape,elementTemplates,commandStack);}});// apply default element templates on connection creation
eventBus.on(['commandStack.connection.create.postExecuted'],function(event){var _event$context4=event.context,_event$context4$hints=_event$context4.hints,hints=_event$context4$hints===void 0?{}:_event$context4$hints,connection=_event$context4.connection;if(hints.createElementsBehavior!==false){applyDefaultTemplate(connection,elementTemplates,commandStack);}});}registerHandlers.$inject=['commandStack','elementTemplates','eventBus'];var commandsModule={__init__:[registerHandlers]};function applyDefaultTemplate(element,elementTemplates,commandStack){if(!elementTemplates.get(element)&&elementTemplates.getDefault(element)){var command='propertiesPanel.camunda.changeTemplate';var commandContext={element:element,newTemplate:elementTemplates.getDefault(element)};commandStack.execute(command,commandContext);}}var CAMUNDA_ERROR_EVENT_DEFINITION_TYPE$1='camunda:errorEventDefinition';var CAMUNDA_EXECUTION_LISTENER_TYPE='camunda:executionListener';var CAMUNDA_FIELD_TYPE='camunda:field';var CAMUNDA_IN_BUSINESS_KEY_TYPE='camunda:in:businessKey';var CAMUNDA_IN_TYPE='camunda:in';var CAMUNDA_INPUT_PARAMETER_TYPE$1='camunda:inputParameter';var CAMUNDA_OUT_TYPE='camunda:out';var CAMUNDA_OUTPUT_PARAMETER_TYPE$1='camunda:outputParameter';var CAMUNDA_PROPERTY_TYPE='camunda:property';var PROPERTY_TYPE='property';var EXTENSION_BINDING_TYPES=[CAMUNDA_ERROR_EVENT_DEFINITION_TYPE$1,CAMUNDA_FIELD_TYPE,CAMUNDA_IN_TYPE,CAMUNDA_IN_BUSINESS_KEY_TYPE,CAMUNDA_INPUT_PARAMETER_TYPE$1,CAMUNDA_OUT_TYPE,CAMUNDA_OUTPUT_PARAMETER_TYPE$1,CAMUNDA_PROPERTY_TYPE];var IO_BINDING_TYPES=[CAMUNDA_INPUT_PARAMETER_TYPE$1,CAMUNDA_OUTPUT_PARAMETER_TYPE$1];var IN_OUT_BINDING_TYPES=[CAMUNDA_IN_BUSINESS_KEY_TYPE,CAMUNDA_IN_TYPE,CAMUNDA_OUT_TYPE];var PRIMITIVE_MODDLE_TYPES=['Boolean','Integer','String'];var DEFAULT_CUSTOM_GROUP={id:'ElementTemplates__CustomProperties',label:'Custom properties'};function CustomProperties(props){var element=props.element,elementTemplate=props.elementTemplate;var groups=[];var id=elementTemplate.id,properties=elementTemplate.properties,propertyGroups=elementTemplate.groups,scopes=elementTemplate.scopes;// (1) group properties by group id
var groupedProperties=groupByGroupId(properties);var defaultProps=[];(0,_minDash.forEach)(groupedProperties,function(properties,groupId){var group=findCustomGroup(propertyGroups,groupId);if(!group){return defaultProps.push.apply(defaultProps,_toConsumableArray(properties));}addCustomGroup(groups,{element:element,id:"ElementTemplates__CustomProperties-".concat(groupId),label:group.label,properties:properties,templateId:"".concat(id,"-").concat(groupId)});});// (2) add default custom props
if(defaultProps.length){addCustomGroup(groups,_objectSpread(_objectSpread({},DEFAULT_CUSTOM_GROUP),{},{element:element,properties:defaultProps,templateId:id}));}// (3) add custom scopes props
if((0,_minDash.isArray)(scopes)){scopes.forEach(function(scope){var properties=scope.properties,type=scope.type;var id=type.replace(/:/g,'-');addCustomGroup(groups,{element:element,id:"ElementTemplates__CustomGroup-".concat(id),label:"Custom properties for scope <".concat(type,">"),properties:properties,templateId:id,scope:scope});});}return groups;}function addCustomGroup(groups,props){var element=props.element,id=props.id,label=props.label,properties=props.properties,scope=props.scope,templateId=props.templateId;var customPropertiesGroup={id:id,label:label,component:_propertiesPanel.Group,entries:[],shouldOpen:true};properties.forEach(function(property,index){var entry=createCustomEntry("custom-entry-".concat(templateId,"-").concat(index),element,property,scope);if(entry){customPropertiesGroup.entries.push(entry);}});if(customPropertiesGroup.entries.length){groups.push(customPropertiesGroup);}}function createCustomEntry(id,element,property,scope){var type=property.type;if(!type){type=getDefaultType(property);}if(type==='Boolean'){return{id:id,component:BooleanProperty,isEdited:_propertiesPanel.isCheckboxEntryEdited,property:property,scope:scope};}if(type==='Dropdown'){return{id:id,component:DropdownProperty,isEdited:_propertiesPanel.isSelectEntryEdited,property:property,scope:scope};}if(type==='String'){return{id:id,component:StringProperty,isEdited:_propertiesPanel.isTextFieldEntryEdited,property:property,scope:scope};}if(type==='Text'){return{id:id,component:TextAreaProperty,isEdited:_propertiesPanel.isTextAreaEntryEdited,property:property,scope:scope};}}function getDefaultType(property){var binding=property.binding;var type=binding.type;if([PROPERTY_TYPE,CAMUNDA_PROPERTY_TYPE,CAMUNDA_IN_TYPE,CAMUNDA_IN_BUSINESS_KEY_TYPE,CAMUNDA_OUT_TYPE,CAMUNDA_FIELD_TYPE].includes(type)){return'String';}if(type===CAMUNDA_EXECUTION_LISTENER_TYPE){return'Hidden';}}function BooleanProperty(props){var element=props.element,id=props.id,property=props.property,scope=props.scope;var description=property.description,editable=property.editable,label=property.label;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack');return(0,_propertiesPanel.CheckboxEntry)({element:element,getValue:propertyGetter(element,property,scope),id:id,label:label,description:PropertyDescription({description:description}),setValue:propertySetter(bpmnFactory,commandStack,element,property,scope),disabled:editable===false});}function DropdownProperty(props){var element=props.element,id=props.id,property=props.property,scope=props.scope;var description=property.description,editable=property.editable,label=property.label;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack');var getOptions=function getOptions(){var choices=property.choices;return choices.map(function(_ref149){var name=_ref149.name,value=_ref149.value;return{label:name,value:value};});};return(0,_propertiesPanel.SelectEntry)({element:element,id:id,label:label,getOptions:getOptions,description:PropertyDescription({description:description}),getValue:propertyGetter(element,property,scope),setValue:propertySetter(bpmnFactory,commandStack,element,property,scope),disabled:editable===false});}function StringProperty(props){var element=props.element,id=props.id,property=props.property,scope=props.scope;var description=property.description,editable=property.editable,label=property.label;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),debounce=useService('debounceInput'),translate=useService('translate');return(0,_propertiesPanel.TextFieldEntry)({debounce:debounce,element:element,getValue:propertyGetter(element,property,scope),id:id,label:label,description:PropertyDescription({description:description}),setValue:propertySetter(bpmnFactory,commandStack,element,property,scope),validate:propertyValidator(translate,property),disabled:editable===false});}function TextAreaProperty(props){var element=props.element,id=props.id,property=props.property,scope=props.scope;var description=property.description,editable=property.editable,label=property.label;var bpmnFactory=useService('bpmnFactory'),commandStack=useService('commandStack'),debounce=useService('debounceInput');return(0,_propertiesPanel.TextAreaEntry)({debounce:debounce,element:element,id:id,label:label,description:PropertyDescription({description:description}),getValue:propertyGetter(element,property,scope),setValue:propertySetter(bpmnFactory,commandStack,element,property,scope),disabled:editable===false});}function propertyGetter(element,property,scope){return function getValue(){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var binding=property.binding,_property$value=property.value,defaultValue=_property$value===void 0?'':_property$value;var name=binding.name,type=binding.type;if(scope){businessObject=getScopeBusinessObject(businessObject,scope);if(!businessObject){return defaultValue;}}// property
if(type==='property'){var value=businessObject.get(name);if(name==='conditionExpression'){if(value){return value.get('body');}return defaultValue;}else{if(!(0,_minDash.isUndefined)(value)){return value;}return defaultValue;}}// camunda:ErrorEventDefinition
if(type===CAMUNDA_ERROR_EVENT_DEFINITION_TYPE$1){var errorRef=binding.errorRef;var errorEventDefinition=findCamundaErrorEventDefinition(businessObject,errorRef);if(errorEventDefinition){return errorEventDefinition.get('camunda:expression');}else{return'';}}// camunda:Field
if(type===CAMUNDA_FIELD_TYPE){var camundaFields=findExtensions(businessObject,['camunda:Field']);var camundaField=camundaFields.find(function(camundaField){return camundaField.get('camunda:name')===name;});if(camundaField){return camundaField.get('camunda:string')||camundaField.get('camunda:expression');}else{return'';}}// camunda:Property
if(type===CAMUNDA_PROPERTY_TYPE){var camundaProperties;if(scope){// TODO(philippfromme): as only bpmn:Error and camunda:Connector are supported this code is practically dead
camundaProperties=businessObject.get('properties');}else{camundaProperties=findExtension(businessObject,'camunda:Properties');}if(camundaProperties){var camundaProperty=findCamundaProperty(camundaProperties,binding);if(camundaProperty){return camundaProperty.get('camunda:value');}}return defaultValue;}if(IO_BINDING_TYPES.includes(type)){var inputOutput;if(scope){inputOutput=businessObject.get('inputOutput');}else{inputOutput=findExtension(businessObject,'camunda:InputOutput');}if(!inputOutput){return defaultValue;}// camunda:InputParameter
if(type===CAMUNDA_INPUT_PARAMETER_TYPE$1){var inputParameter=findInputParameter(inputOutput,binding);if(inputParameter){var scriptFormat=binding.scriptFormat;if(scriptFormat){var definition=inputParameter.get('camunda:definition');if(definition){return definition.get('camunda:value');}}else{return inputParameter.get('value')||'';}}return defaultValue;}// camunda:OutputParameter
if(type===CAMUNDA_OUTPUT_PARAMETER_TYPE$1){var outputParameter=findOutputParameter(inputOutput,binding);if(outputParameter){return outputParameter.get('camunda:name');}return defaultValue;}}// camunda:In and camunda:Out
if(IN_OUT_BINDING_TYPES.includes(type)){var camundaInOut=findCamundaInOut(businessObject,binding);if(camundaInOut){if(type===CAMUNDA_IN_BUSINESS_KEY_TYPE){return camundaInOut.get('camunda:businessKey');}else if(type===CAMUNDA_OUT_TYPE){return camundaInOut.get('camunda:target');}else if(type===CAMUNDA_IN_TYPE){var expression=binding.expression;if(expression){return camundaInOut.get('camunda:sourceExpression');}else{return camundaInOut.get('camunda:source');}}}return defaultValue;}// should never throw as templates are validated beforehand
throw unknownBindingError(element,property);};}function propertySetter(bpmnFactory,commandStack,element,property,scope){return function setValue(value){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var binding=property.binding;var name=binding.name,type=binding.type;var rootElement=getRoot(businessObject);var extensionElements;var propertyValue;var commands=[];if(EXTENSION_BINDING_TYPES.includes(type)){extensionElements=businessObject.get('extensionElements');if(!extensionElements){extensionElements=createElement('bpmn:ExtensionElements',null,businessObject,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{extensionElements:extensionElements}}});}}if(scope){businessObject=getScopeBusinessObject(businessObject,scope);if(!businessObject){// bpmn:Error
if(scope.type==='bpmn:Error'){businessObject=createError(scope.id,rootElement,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:rootElement,properties:{rootElements:[].concat(_toConsumableArray(rootElement.get('rootElements')),[businessObject])}}});}else{businessObject=createElement(scope.type,null,element,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[businessObject])}}});}}}// property
if(type==='property'){if(name==='conditionExpression'){var scriptFormat=binding.scriptFormat;propertyValue=createElement('bpmn:FormalExpression',{body:value,language:scriptFormat},businessObject,bpmnFactory);}else{var propertyDescriptor=businessObject.$descriptor.propertiesByName[name];var propertyType=propertyDescriptor.type;// do not override non-primitive types
if(!PRIMITIVE_MODDLE_TYPES.includes(propertyType)){throw new Error("cannot set property of type <".concat(propertyType,">"));}if(propertyType==='Boolean'){propertyValue=!!value;}else if(propertyType==='Integer'){propertyValue=parseInt(value,10);if(isNaN(propertyValue)){// do not set NaN value
propertyValue=undefined;}}else{// make sure we don't remove the property
propertyValue=value||'';}}if(!(0,_minDash.isUndefined)(propertyValue)){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:_defineProperty({},name,propertyValue)}});}}// camunda:ErrorEventDefinition
if(type===CAMUNDA_ERROR_EVENT_DEFINITION_TYPE$1){var errorRef=binding.errorRef;var oldCamundaErrorEventDefinition=findCamundaErrorEventDefinition(businessObject,errorRef);if(oldCamundaErrorEventDefinition){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:oldCamundaErrorEventDefinition,properties:{'camunda:expression':value}}});}else{var newError=createError(binding.errorRef,rootElement,bpmnFactory),newCamundaErrorEventDefinition=createCamundaErrorEventDefinition(value,newError,extensionElements,bpmnFactory);commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:rootElement,properties:{rootElements:[].concat(_toConsumableArray(rootElement.get('rootElements')),[newError])}}});commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[newCamundaErrorEventDefinition])}}});}}// camunda:Field
if(type===CAMUNDA_FIELD_TYPE){var oldCamundaFields=findExtensions(businessObject,['camunda:Field']);var newCamundaFields=[];if(oldCamundaFields.length){oldCamundaFields.forEach(function(camundaField){if(camundaField.name===name){newCamundaFields.push(createCamundaFieldInjection(binding,value,bpmnFactory));}else{newCamundaFields.push(camundaField);}});}else{newCamundaFields.push(createCamundaFieldInjection(binding,value,bpmnFactory));}var _values9=extensionElements.get('values').filter(function(value){return!oldCamundaFields.includes(value);});commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(_values9),newCamundaFields)}}});}// camunda:Property
if(type===CAMUNDA_PROPERTY_TYPE){var camundaProperties;if(scope){camundaProperties=businessObject.get('properties');}else{camundaProperties=findExtension(extensionElements,'camunda:Properties');}if(!camundaProperties){camundaProperties=createElement('camunda:Properties',null,businessObject,bpmnFactory);if(scope){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{properties:camundaProperties}}});}else{commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[camundaProperties])}}});}}var oldCamundaProperty=findCamundaProperty(camundaProperties,binding);var newCamundaProperty=createCamundaProperty(binding,value,bpmnFactory);var _values10=camundaProperties.get('values').filter(function(value){return value!==oldCamundaProperty;});commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:camundaProperties,properties:{values:[].concat(_toConsumableArray(_values10),[newCamundaProperty])}}});}if(IO_BINDING_TYPES.includes(type)){var inputOutput;if(scope){inputOutput=businessObject.get('inputOutput');}else{inputOutput=findExtension(extensionElements,'camunda:InputOutput');}if(!inputOutput){inputOutput=createElement('camunda:InputOutput',null,businessObject,bpmnFactory);if(scope){commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:businessObject,properties:{inputOutput:inputOutput}}});}else{commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(extensionElements.get('values')),[inputOutput])}}});}}// camunda:InputParameter
if(type===CAMUNDA_INPUT_PARAMETER_TYPE$1){var oldCamundaInputParameter=findInputParameter(inputOutput,binding);var newCamundaInputParameter=createInputParameter(binding,value,bpmnFactory);var _values11=inputOutput.get('camunda:inputParameters').filter(function(value){return value!==oldCamundaInputParameter;});commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:inputOutput,properties:{'camunda:inputParameters':[].concat(_toConsumableArray(_values11),[newCamundaInputParameter])}}});}// camunda:OutputParameter
if(type===CAMUNDA_OUTPUT_PARAMETER_TYPE$1){var oldCamundaOutputParameter=findOutputParameter(inputOutput,binding);var newCamundaOutputParameter=createOutputParameter(binding,value,bpmnFactory);var _values12=inputOutput.get('camunda:outputParameters').filter(function(value){return value!==oldCamundaOutputParameter;});commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:inputOutput,properties:{'camunda:outputParameters':[].concat(_toConsumableArray(_values12),[newCamundaOutputParameter])}}});}}// camunda:In and camunda:Out
if(IN_OUT_BINDING_TYPES.includes(type)){var oldCamundaInOut=findCamundaInOut(businessObject,binding);var newCamundaInOut;if(type===CAMUNDA_IN_TYPE){newCamundaInOut=createCamundaIn(binding,value,bpmnFactory);}else if(type===CAMUNDA_OUT_TYPE){newCamundaInOut=createCamundaOut(binding,value,bpmnFactory);}else{newCamundaInOut=createCamundaInWithBusinessKey(value,bpmnFactory);}var _values13=extensionElements.get('values').filter(function(value){return value!==oldCamundaInOut;});commands.push({cmd:'element.updateModdleProperties',context:{element:element,moddleElement:extensionElements,properties:{values:[].concat(_toConsumableArray(_values13),[newCamundaInOut])}}});}if(commands.length){commandStack.execute('properties-panel.multi-command-executor',commands);return;}// should never throw as templates are validated beforehand
throw unknownBindingError(element,property);};}function propertyValidator(translate,property){return function validate(value){var _property$constraints2=property.constraints,constraints=_property$constraints2===void 0?{}:_property$constraints2;var maxLength=constraints.maxLength,minLength=constraints.minLength,notEmpty=constraints.notEmpty;if(notEmpty&&isEmptyString(value)){return translate('Must not be empty.');}if(maxLength&&value.length>maxLength){return translate('Must have max length {maxLength}.',{maxLength:maxLength});}if(minLength&&value.length<minLength){return translate('Must have min length {minLength}.',{minLength:minLength});}var pattern=constraints.pattern;if(pattern){var message;if(!(0,_minDash.isString)(pattern)){message=pattern.message;pattern=pattern.value;}if(!matchesPattern(value,pattern)){return message||translate('Must match pattern {pattern}.',{pattern:pattern});}}};}function getScopeBusinessObject(businessObject,scope){var id=scope.id,type=scope.type;if(type==='bpmn:Error'){// retrieve error through referenced error event definition
var errorEventDefinition=findCamundaErrorEventDefinition(businessObject,id);if(errorEventDefinition){return errorEventDefinition.get('errorRef');}}return findExtension(businessObject,type);}function unknownBindingError(element,property){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var id=businessObject.get('id');var binding=property.binding;var type=binding.type;return new Error("unknown binding <".concat(type,"> for element <").concat(id,">, this should never happen"));}function isEmptyString(string){return!string||!string.trim().length;}function matchesPattern(string,pattern){return new RegExp(pattern).test(string);}function groupByGroupId(properties){return(0,_minDash.groupBy)(properties,'group');}function findCustomGroup(groups,id){return(0,_minDash.find)(groups,function(g){return g.id===id;});}function ErrorProperties(props){var element=props.element,index=props.index,property=props.property;var binding=property.binding,label=property.label;var errorRef=binding.errorRef;var businessObject=(0,_ModelUtil.getBusinessObject)(element),errorEventDefinitions=findExtensions(businessObject,['camunda:ErrorEventDefinition']);if(!errorEventDefinitions.length){return;}var errorEventDefinition=findCamundaErrorEventDefinition(element,errorRef);var id="".concat(element.id,"-errorEventDefinition-").concat(index);var entries=[];entries=Error$1({idPrefix:id,element:element,errorEventDefinition:errorEventDefinition});// (1) remove global error referenced entry
// entries.shift();
entries=removeEntry$1(entries,'-errorRef');// (2) remove throw expression input
// entries.pop();
entries=removeEntry$1(entries,'-expression');// (3) add disabled throw expression input
entries.push({id:"".concat(id,"-expression"),component:Expression,errorEventDefinition:errorEventDefinition,property:property});var item={id:id,label:label||getErrorLabel(errorEventDefinition),entries:entries};return item;}function Expression(props){var errorEventDefinition=props.errorEventDefinition,id=props.id;var translate=useService('translate');var debounce=useService('debounceInput');var setValue=function setValue(){};var getValue=function getValue(){return errorEventDefinition.get('camunda:expression');};return(0,_propertiesPanel.TextFieldEntry)({element:errorEventDefinition,id:id,label:translate('Throw expression'),getValue:getValue,setValue:setValue,debounce:debounce,disabled:true});}function removeEntry$1(entries,suffix){var entry=entries.find(function(_ref150){var id=_ref150.id;return id.endsWith(suffix);});return(0,_minDash.without)(entries,entry);}function InputProperties(props){var element=props.element,index=props.index,property=props.property;var binding=property.binding,description=property.description,label=property.label;var name=binding.name;var businessObject=(0,_ModelUtil.getBusinessObject)(element),inputOutput=findExtension(businessObject,'camunda:InputOutput');var inputParameter=inputOutput&&findInputParameter(inputOutput,binding);var id="".concat(element.id,"-inputParameter-").concat(index);var entries=[];if(inputParameter){entries=InputOutputParameter({idPrefix:id,element:element,parameter:inputParameter});// (1) remove name entry
entries=removeEntry(entries,'-name');}// (2) add local variable assignment entry
entries.unshift({id:"".concat(id,"-local-variable-assignment"),component:LocalVariableAssignment,inputParameter:inputParameter,property:property});// (3) add description entry
if(description){entries.unshift({id:"".concat(id,"-description"),component:Description$1,text:description});}// @barmac: binding#name is required so there is no third option
var item={id:id,label:label||name,entries:entries};return item;}// TODO(philippfromme): add text entry to properties-panel
function Description$1(props){var id=props.id,text=props.text;return(0,_jsxRuntime.jsx)("div",{"class":"bio-properties-panel-entry","data-entry-id":id,children:(0,_jsxRuntime.jsx)("div",{"class":"bio-properties-panel-description",children:(0,_jsxRuntime.jsx)(PropertyDescription,{description:text})})});}function LocalVariableAssignment(props){var element=props.element,id=props.id,property=props.property,inputParameter=props.inputParameter;var binding=property.binding;var bpmnFactory=useService('bpmnFactory'),modeling=useService('modeling'),translate=useService('translate');var getValue=function getValue(){return inputParameter;};var setValue=function setValue(value){if(value){addInputParameter(element,property,bpmnFactory,modeling);}else{removeInputParameter(element,binding,modeling);}};return(0,_propertiesPanel.ToggleSwitchEntry)({id:id,label:translate('Local variable assignment'),switcherLabel:inputParameter?translate('On'):translate('Off'),description:inputParameter?'':translate('Parameter won\'t be created as local variable.'),getValue:getValue,setValue:setValue});}function addInputParameter(element,property,bpmnFactory,modeling){var binding=property.binding,value=property.value;var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');var inputOutput=findExtension(businessObject,'camunda:InputOutput');var updatedBusinessObject,update;if(!extensionElements){updatedBusinessObject=businessObject;var _extensionElements2=createExtensionElements$1(businessObject,bpmnFactory),_inputOutput=createInputOutput$1(binding,value,bpmnFactory,_extensionElements2);_extensionElements2.values.push(_inputOutput);update={extensionElements:_extensionElements2};}else if(!inputOutput){updatedBusinessObject=extensionElements;var _inputOutput2=createInputOutput$1(binding,value,bpmnFactory,extensionElements);update={values:extensionElements.get('values').concat(_inputOutput2)};}else{updatedBusinessObject=inputOutput;var inputParameter=createInputParameter(binding,value,bpmnFactory);inputParameter.$parent=inputOutput;update={inputParameters:inputOutput.get('camunda:inputParameters').concat(inputParameter)};}modeling.updateModdleProperties(element,updatedBusinessObject,update);}function removeInputParameter(element,binding,modeling){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var inputOutput=findExtension(businessObject,'camunda:InputOutput'),inputParameters=inputOutput.get('camunda:inputParameters');var inputParameter=findInputParameter(inputOutput,binding);modeling.updateModdleProperties(element,inputOutput,{inputParameters:(0,_minDash.without)(inputParameters,inputParameter)});}function removeEntry(entries,suffix){var entry=entries.find(function(_ref151){var id=_ref151.id;return id.endsWith(suffix);});return(0,_minDash.without)(entries,entry);}function createExtensionElements$1(businessObject,bpmnFactory){return createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);}function createInputOutput$1(binding,value,bpmnFactory,extensionElements){var inputParameter=createInputParameter(binding,value,bpmnFactory);var inputOutput=createElement('camunda:InputOutput',{inputParameters:[inputParameter],outputParameters:[]},extensionElements,bpmnFactory);inputParameter.$parent=inputOutput;return inputOutput;}function OutputProperties(props){var element=props.element,index=props.index,injector=props.injector,property=props.property;var binding=property.binding,description=property.description,label=property.label;var name=binding.name;var businessObject=(0,_ModelUtil.getBusinessObject)(element),inputOutput=findExtension(businessObject,'camunda:InputOutput');var translate=injector.get('translate');var outputParameter=inputOutput&&findOutputParameter(inputOutput,binding);var id="".concat(element.id,"-outputParameter-").concat(index);var entries=[];// (1) add description entry
if(description){entries.push({id:"".concat(id,"-description"),component:Description,text:description});}// (2) add local variable assignment entry
entries.push({id:"".concat(id,"-local-variable-assignment"),component:ProcessVariableAssignment,outputParameter:outputParameter,property:property});if(outputParameter){// (3) add assign to process variable entry
entries.push({id:"".concat(id,"-assign-to-process-variable"),component:AssignToProcessVariable,property:property});}var item={id:id,label:label||name||translate('<unnamed>'),entries:entries};return item;}// TODO(philippfromme): add text entry to properties-panel
function Description(props){var id=props.id,text=props.text;return(0,_jsxRuntime.jsx)("div",{"class":"bio-properties-panel-entry","data-entry-id":id,children:(0,_jsxRuntime.jsx)("div",{"class":"bio-properties-panel-description",children:(0,_jsxRuntime.jsx)(PropertyDescription,{description:text})})});}function ProcessVariableAssignment(props){var element=props.element,id=props.id,property=props.property,outputParameter=props.outputParameter;var binding=property.binding;var bpmnFactory=useService('bpmnFactory'),modeling=useService('modeling'),translate=useService('translate');var getValue=function getValue(){return outputParameter;};var setValue=function setValue(value){if(value){addOutputParameter(element,property,bpmnFactory,modeling);}else{removeOutputParameter(element,binding,modeling);}};return(0,_propertiesPanel.ToggleSwitchEntry)({id:id,label:translate('Process variable assignment'),switcherLabel:outputParameter?translate('On'):translate('Off'),description:outputParameter?'':translate('Parameter won\'t be available in process scope.'),getValue:getValue,setValue:setValue});}function AssignToProcessVariable(props){var element=props.element,id=props.id,property=props.property;var binding=property.binding;var inputOutput=findExtension(element,'camunda:InputOutput'),outputParameter=findOutputParameter(inputOutput,binding);var commandStack=useService('commandStack'),debounce=useService('debounceInput'),translate=useService('translate');var setValue=function setValue(value){commandStack.execute('element.updateModdleProperties',{element:element,moddleElement:outputParameter,properties:{name:value}});};var getValue=function getValue(){return outputParameter.get('camunda:name');};var validate=function validate(value){if(!value){return translate('Process variable name must not be empty.');}else if(containsSpace(value)){return translate('Process variable name must not contain spaces.');}};return(0,_propertiesPanel.TextFieldEntry)({debounce:debounce,element:outputParameter,id:id,label:translate('Assign to process variable'),getValue:getValue,setValue:setValue,validate:validate});}function addOutputParameter(element,property,bpmnFactory,modeling){var binding=property.binding,value=property.value;var businessObject=(0,_ModelUtil.getBusinessObject)(element);var extensionElements=businessObject.get('extensionElements');var inputOutput=findExtension(businessObject,'camunda:InputOutput');var updatedBusinessObject,update;if(!extensionElements){updatedBusinessObject=businessObject;var _extensionElements3=createExtensionElements(businessObject,bpmnFactory),_inputOutput3=createInputOutput(binding,value,bpmnFactory,_extensionElements3);_extensionElements3.values.push(_inputOutput3);update={extensionElements:_extensionElements3};}else if(!inputOutput){updatedBusinessObject=extensionElements;var _inputOutput4=createInputOutput(binding,value,bpmnFactory,extensionElements);update={values:extensionElements.get('values').concat(_inputOutput4)};}else{updatedBusinessObject=inputOutput;var outputParameter=createOutputParameter(binding,value,bpmnFactory);outputParameter.$parent=inputOutput;update={outputParameters:inputOutput.get('camunda:outputParameters').concat(outputParameter)};}modeling.updateModdleProperties(element,updatedBusinessObject,update);}function removeOutputParameter(element,binding,modeling){var businessObject=(0,_ModelUtil.getBusinessObject)(element);var inputOutput=findExtension(businessObject,'camunda:InputOutput'),outputParameters=inputOutput.get('camunda:outputParameters');var outputParameter=findOutputParameter(inputOutput,binding);modeling.updateModdleProperties(element,inputOutput,{outputParameters:(0,_minDash.without)(outputParameters,outputParameter)});}function createExtensionElements(businessObject,bpmnFactory){return createElement('bpmn:ExtensionElements',{values:[]},businessObject,bpmnFactory);}function createInputOutput(binding,value,bpmnFactory,extensionElements){var outputParameter=createOutputParameter(binding,value,bpmnFactory);var inputOutput=createElement('camunda:InputOutput',{inputParameters:[],outputParameters:[outputParameter]},extensionElements,bpmnFactory);outputParameter.$parent=inputOutput;return inputOutput;}var CAMUNDA_ERROR_EVENT_DEFINITION_TYPE='camunda:errorEventDefinition',CAMUNDA_INPUT_PARAMETER_TYPE='camunda:inputParameter',CAMUNDA_OUTPUT_PARAMETER_TYPE='camunda:outputParameter';var LOWER_PRIORITY=300;var ElementTemplatesPropertiesProvider=/*#__PURE__*/function(){function ElementTemplatesPropertiesProvider(elementTemplates,propertiesPanel,injector){_classCallCheck(this,ElementTemplatesPropertiesProvider);propertiesPanel.registerProvider(LOWER_PRIORITY,this);this._elementTemplates=elementTemplates;this._injector=injector;}_createClass(ElementTemplatesPropertiesProvider,[{key:"getGroups",value:function getGroups(element){var _this30=this;return function(groups){var injector=_this30._injector;if(!_this30._shouldShowTemplateProperties(element)){return groups;}// (0) Copy provided groups
groups=groups.slice();var templatesGroup={element:element,id:'ElementTemplates__Template',label:'Template',component:createElementTemplatesGroup(),entries:TemplateProps({element:element,elementTemplates:_this30._elementTemplates})};// (1) Add templates group
addGroupsAfter('documentation',groups,[templatesGroup]);var elementTemplate=_this30._elementTemplates.get(element);if(elementTemplate){var templateSpecificGroups=[].concat(createInputGroup(element,elementTemplate,injector)||[],createOutputGroup(element,elementTemplate,injector)||[],createErrorGroup(element,elementTemplate,injector)||[],CustomProperties({element:element,elementTemplate:elementTemplate}));// (2) add template-specific properties groups
addGroupsAfter('ElementTemplates__Template',groups,templateSpecificGroups);}// (3) apply entries visible
if(getTemplateId(element)){groups=filterWithEntriesVisible(elementTemplate||{},groups);}return groups;};}},{key:"_shouldShowTemplateProperties",value:function _shouldShowTemplateProperties(element){return getTemplateId(element)||this._elementTemplates.getAll(element).length;}}]);return ElementTemplatesPropertiesProvider;}();ElementTemplatesPropertiesProvider.$inject=['elementTemplates','propertiesPanel','injector'];// helper /////////////////////
function createInputGroup(element,elementTemplate,injector){var translate=injector.get('translate');var group={label:translate('Inputs'),id:'ElementTemplates__Input',component:_propertiesPanel.ListGroup,items:[]};var properties=elementTemplate.properties.filter(function(_ref152){var binding=_ref152.binding,type=_ref152.type;return!type&&binding.type===CAMUNDA_INPUT_PARAMETER_TYPE;});properties.forEach(function(property,index){var item=InputProperties({element:element,index:index,property:property});if(item){group.items.push(item);}});// remove if empty
if(!group.items.length){return null;}return group;}function createOutputGroup(element,elementTemplate,injector){var translate=injector.get('translate');var group={label:translate('Outputs'),id:'ElementTemplates__Output',component:_propertiesPanel.ListGroup,items:[]};var properties=elementTemplate.properties.filter(function(_ref153){var binding=_ref153.binding,type=_ref153.type;return!type&&binding.type===CAMUNDA_OUTPUT_PARAMETER_TYPE;});properties.forEach(function(property,index){var item=OutputProperties({element:element,index:index,property:property,injector:injector});if(item){group.items.push(item);}});// remove if empty
if(!group.items.length){return null;}return group;}function createErrorGroup(element,elementTemplate,injector){var translate=injector.get('translate');var group={label:translate('Errors'),id:'ElementTemplates__Error',component:_propertiesPanel.ListGroup,items:[]};var properties=elementTemplate.properties.filter(function(_ref154){var binding=_ref154.binding,type=_ref154.type;return!type&&binding.type===CAMUNDA_ERROR_EVENT_DEFINITION_TYPE;});properties.forEach(function(property,index){var item=ErrorProperties({element:element,index:index,property:property});if(item){group.items.push(item);}});// remove if empty
if(!group.items.length){return null;}return group;}/**
 *
 * @param {string} id
 * @param {Array<{ id: string }} groups
 * @param {Array<{ id: string }>} groupsToAdd
 */function addGroupsAfter(id,groups,groupsToAdd){var index=groups.findIndex(function(group){return group.id===id;});if(index!==-1){groups.splice.apply(groups,[index+1,0].concat(_toConsumableArray(groupsToAdd)));}else{// add in the beginning if group with provided id is missing
groups.unshift.apply(groups,_toConsumableArray(groupsToAdd));}}function filterWithEntriesVisible(template,groups){if(!template.entriesVisible){return groups.filter(function(group){return group.id==='general'||group.id.startsWith('ElementTemplates__');});}return groups;}var index={__depends__:[commandsModule,_translate["default"],camundaPlatformPropertiesProviderModule],__init__:['elementTemplatesLoader','replaceBehavior','elementTemplatesPropertiesProvider'],elementTemplates:['type',ElementTemplates$1],elementTemplatesLoader:['type',ElementTemplatesLoader$1],replaceBehavior:['type',ReplaceBehavior],elementTemplatesPropertiesProvider:['type',ElementTemplatesPropertiesProvider]};/* eslint-disable react-hooks/rules-of-hooks */exports.ElementTemplatesPropertiesProviderModule=index;var DescriptionProvider={assignmentDefinitionAssignee:function assignmentDefinitionAssignee(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/user-tasks/#assignments",target:"_blank",rel:"noopener",title:translate('User task documentation'),children:translate('How to configure a user task')});},conditionExpression:function conditionExpression(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/exclusive-gateways/#conditions",target:"_blank",rel:"noopener",title:translate('Conditions documentation'),children:translate('How to define conditions')});},decisionId:function decisionId(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/business-rule-tasks/#defining-a-task",target:"_blank",rel:"noopener",title:translate('Business rule task documentation'),children:translate('How to configure a business rule task')});},formType:function formType(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/guides/utilizing-forms/#connect-your-form-to-a-bpmn-diagram",target:"_blank",rel:"noopener",title:translate('User task form documentation'),children:translate('How to link a form')});},messageSubscriptionCorrelationKey:function messageSubscriptionCorrelationKey(element){var translate=useService('translate');if((0,_ModelUtil.is)(element,'bpmn:ReceiveTask')){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/receive-tasks/#messages",target:"_blank",rel:"noopener",title:translate('Receive task documentation'),children:translate('How to configure a receive task')});}return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/message-events/#messages",target:"_blank",rel:"noopener",title:translate('Message event documentation'),children:translate('How to configure a message event')});},messageName:function messageName(element){var translate=useService('translate');if((0,_ModelUtil.is)(element,'bpmn:StartEvent')&&!isInEventSubProcess(element)){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/message-events/#messages",target:"_blank",rel:"noopener",title:translate('Message event documentation'),children:translate('How to configure a message event')});}},targetProcessId:function targetProcessId(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/call-activities/",target:"_blank",rel:"noopener",title:translate('Call activity documentation'),children:translate('How to call another process')});},taskDefinitionType:function taskDefinitionType(element){var translate=useService('translate');if((0,_ModelUtil.is)(element,'bpmn:ServiceTask')){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/service-tasks/#task-definition",target:"_blank",rel:"noopener",title:translate('Service task documentation'),children:translate('How to configure a service task')});}if((0,_ModelUtil.is)(element,'bpmn:BusinessRuleTask')){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/business-rule-tasks/#defining-a-task",target:"_blank",rel:"noopener",title:translate('Business rule task documentation'),children:translate('How to configure a business rule task')});}if((0,_ModelUtil.is)(element,'bpmn:ScriptTask')){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/script-tasks/#defining-a-task",target:"_blank",rel:"noopener",title:translate('Script task documentation'),children:translate('How to configure a script task')});}if((0,_ModelUtil.is)(element,'bpmn:SendTask')){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/send-tasks/#defining-a-task",target:"_blank",rel:"noopener",title:translate('Send task documentation'),children:translate('How to configure a send task')});}if((0,_ModelUtil.is)(element,'bpmn:ThrowEvent')){return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/message-events/#message-throw-events",target:"_blank",rel:"noopener",title:translate('Message throw event documentation'),children:translate('How to configure a message throw event')});}},'multiInstance-inputCollection':function multiInstanceInputCollection(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/multi-instance/#defining-the-collection-to-iterate-over",target:"_blank",rel:"noopener",title:translate('Multi instance documentation'),children:translate('How to configure a multi instance activity')});},errorCode:function errorCode(element){var translate=useService('translate');return(0,_jsxRuntime.jsx)("a",{href:"https://docs.camunda.io/docs/components/modeler/bpmn/error-events/#defining-the-error",target:"_blank",rel:"noopener",title:translate('Error event documentation'),children:translate('How to configure an error event')});}};// helper ////////////
exports.ZeebeDescriptionProvider=DescriptionProvider;function isInEventSubProcess(element){var bo=(0,_ModelUtil.getBusinessObject)(element),parent=bo.$parent;return(0,_ModelUtil.is)(parent,'bpmn:SubProcess')&&parent.triggeredByEvent;}

},{"@bpmn-io/element-templates-validator":6,"@bpmn-io/extract-process-variables":7,"@bpmn-io/extract-process-variables/zeebe":8,"@bpmn-io/properties-panel":11,"@bpmn-io/properties-panel/preact":13,"@bpmn-io/properties-panel/preact/compat":12,"@bpmn-io/properties-panel/preact/hooks":14,"@bpmn-io/properties-panel/preact/jsx-runtime":15,"array-move":26,"bpmn-js/lib/features/label-editing/LabelUtil":28,"bpmn-js/lib/features/modeling/util/ModelingUtil":29,"bpmn-js/lib/util/DiUtil":30,"bpmn-js/lib/util/ModelUtil":32,"classnames":33,"diagram-js/lib/command/CommandInterceptor":35,"diagram-js/lib/features/keyboard/KeyboardUtil":36,"diagram-js/lib/i18n/translate":37,"diagram-js/lib/util/Collections":39,"ids":45,"min-dash":49,"min-dom":50,"semver-compare":51,"uuid":53}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getLabel", {
  enumerable: true,
  get: function get() {
    return _LabelUtil.getLabel;
  }
});
Object.defineProperty(exports, "setLabel", {
  enumerable: true,
  get: function get() {
    return _LabelUtil.setLabel;
  }
});
var _LabelUtil = require("../../util/LabelUtil");

},{"../../util/LabelUtil":31}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParent = getParent;
Object.defineProperty(exports, "is", {
  enumerable: true,
  get: function get() {
    return _ModelUtil.is;
  }
});
Object.defineProperty(exports, "isAny", {
  enumerable: true,
  get: function get() {
    return _ModelUtil.isAny;
  }
});
var _minDash = require("min-dash");
var _ModelUtil = require("../../../util/ModelUtil");
/**
 * @typedef {import('../../../model/Types').Element} Element
 */

/**
 * Return the parent of the element with any of the given types.
 *
 * @param {Element} element
 * @param {string|string[]} anyType
 *
 * @return {Element|null}
 */
function getParent(element, anyType) {
  if ((0, _minDash.isString)(anyType)) {
    anyType = [anyType];
  }
  while (element = element.parent) {
    if ((0, _ModelUtil.isAny)(element, anyType)) {
      return element;
    }
  }
  return null;
}

},{"../../../util/ModelUtil":32,"min-dash":49}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasCompensateEventDefinition = hasCompensateEventDefinition;
exports.hasErrorEventDefinition = hasErrorEventDefinition;
exports.hasEscalationEventDefinition = hasEscalationEventDefinition;
exports.hasEventDefinition = hasEventDefinition;
exports.isEventSubProcess = isEventSubProcess;
exports.isExpanded = isExpanded;
exports.isInterrupting = isInterrupting;
var _ModelUtil = require("./ModelUtil");
var _minDash = require("min-dash");
/**
 * @typedef {import('../model/Types').Element} Element
 * @typedef {import('../model/Types').ModdleElement} ModdleElement
 */

/**
 * @param {Element} element
 * @param {ModdleElement} [di]
 *
 * @return {boolean}
 */
function isExpanded(element, di) {
  if ((0, _ModelUtil.is)(element, 'bpmn:CallActivity')) {
    return false;
  }
  if ((0, _ModelUtil.is)(element, 'bpmn:SubProcess')) {
    di = di || (0, _ModelUtil.getDi)(element);
    if (di && (0, _ModelUtil.is)(di, 'bpmndi:BPMNPlane')) {
      return true;
    }
    return di && !!di.isExpanded;
  }
  if ((0, _ModelUtil.is)(element, 'bpmn:Participant')) {
    return !!(0, _ModelUtil.getBusinessObject)(element).processRef;
  }
  return true;
}

/**
 * @param {Element} element
 *
 * @return {boolean}
 */
function isInterrupting(element) {
  return element && (0, _ModelUtil.getBusinessObject)(element).isInterrupting !== false;
}

/**
 * @param {Element} element
 *
 * @return {boolean}
 */
function isEventSubProcess(element) {
  return element && !!(0, _ModelUtil.getBusinessObject)(element).triggeredByEvent;
}

/**
 * @param {Element} element
 * @param {string} eventType
 *
 * @return {boolean}
 */
function hasEventDefinition(element, eventType) {
  var eventDefinitions = (0, _ModelUtil.getBusinessObject)(element).eventDefinitions;
  return (0, _minDash.some)(eventDefinitions, function (event) {
    return (0, _ModelUtil.is)(event, eventType);
  });
}

/**
 * @param {Element} element
 *
 * @return {boolean}
 */
function hasErrorEventDefinition(element) {
  return hasEventDefinition(element, 'bpmn:ErrorEventDefinition');
}

/**
 * @param {Element} element
 *
 * @return {boolean}
 */
function hasEscalationEventDefinition(element) {
  return hasEventDefinition(element, 'bpmn:EscalationEventDefinition');
}

/**
 * @param {Element} element
 *
 * @return {boolean}
 */
function hasCompensateEventDefinition(element) {
  return hasEventDefinition(element, 'bpmn:CompensateEventDefinition');
}

},{"./ModelUtil":32,"min-dash":49}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FLOW_LABEL_INDENT = exports.DEFAULT_LABEL_SIZE = void 0;
exports.getExternalLabelBounds = getExternalLabelBounds;
exports.getExternalLabelMid = getExternalLabelMid;
exports.getFlowLabelPosition = getFlowLabelPosition;
exports.getLabel = getLabel;
exports.getWaypointsMid = getWaypointsMid;
exports.hasExternalLabel = hasExternalLabel;
Object.defineProperty(exports, "isLabel", {
  enumerable: true,
  get: function get() {
    return _ModelUtil2.isLabel;
  }
});
exports.isLabelExternal = isLabelExternal;
exports.setLabel = setLabel;
var _minDash = require("min-dash");
var _ModelUtil = require("./ModelUtil");
var _ModelUtil2 = require("diagram-js/lib/util/ModelUtil");
/**
 * @typedef {import('diagram-js/lib/util/Types').Point} Point
 * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
 *
 * @typedef {import('../model/Types').Element} Element
 * @typedef {import('../model/Types').ModdleElement} ModdleElement
 */

var DEFAULT_LABEL_SIZE = {
  width: 90,
  height: 20
};
exports.DEFAULT_LABEL_SIZE = DEFAULT_LABEL_SIZE;
var FLOW_LABEL_INDENT = 15;

/**
 * Return true if the given semantic has an external label.
 *
 * @param {Element} semantic
 *
 * @return {boolean}
 */
exports.FLOW_LABEL_INDENT = FLOW_LABEL_INDENT;
function isLabelExternal(semantic) {
  return (0, _ModelUtil.is)(semantic, 'bpmn:Event') || (0, _ModelUtil.is)(semantic, 'bpmn:Gateway') || (0, _ModelUtil.is)(semantic, 'bpmn:DataStoreReference') || (0, _ModelUtil.is)(semantic, 'bpmn:DataObjectReference') || (0, _ModelUtil.is)(semantic, 'bpmn:DataInput') || (0, _ModelUtil.is)(semantic, 'bpmn:DataOutput') || (0, _ModelUtil.is)(semantic, 'bpmn:SequenceFlow') || (0, _ModelUtil.is)(semantic, 'bpmn:MessageFlow') || (0, _ModelUtil.is)(semantic, 'bpmn:Group');
}

/**
 * Return true if the given element has an external label.
 *
 * @param {Element} element
 *
 * @return {boolean}
 */
function hasExternalLabel(element) {
  return (0, _ModelUtil2.isLabel)(element.label);
}

/**
 * Get the position of a sequence flow label.
 *
 * @param  {Point[]} waypoints
 *
 * @return {Point}
 */
function getFlowLabelPosition(waypoints) {
  // get the waypoints mid
  var mid = waypoints.length / 2 - 1;
  var first = waypoints[Math.floor(mid)];
  var second = waypoints[Math.ceil(mid + 0.01)];

  // get position
  var position = getWaypointsMid(waypoints);

  // calculate angle
  var angle = Math.atan((second.y - first.y) / (second.x - first.x));
  var x = position.x,
    y = position.y;
  if (Math.abs(angle) < Math.PI / 2) {
    y -= FLOW_LABEL_INDENT;
  } else {
    x += FLOW_LABEL_INDENT;
  }
  return {
    x: x,
    y: y
  };
}

/**
 * Get the middle of a number of waypoints.
 *
 * @param  {Point[]} waypoints
 *
 * @return {Point}
 */
function getWaypointsMid(waypoints) {
  var mid = waypoints.length / 2 - 1;
  var first = waypoints[Math.floor(mid)];
  var second = waypoints[Math.ceil(mid + 0.01)];
  return {
    x: first.x + (second.x - first.x) / 2,
    y: first.y + (second.y - first.y) / 2
  };
}

/**
 * Get the middle of the external label of an element.
 *
 * @param {Element} element
 *
 * @return {Point}
 */
function getExternalLabelMid(element) {
  if (element.waypoints) {
    return getFlowLabelPosition(element.waypoints);
  } else if ((0, _ModelUtil.is)(element, 'bpmn:Group')) {
    return {
      x: element.x + element.width / 2,
      y: element.y + DEFAULT_LABEL_SIZE.height / 2
    };
  } else {
    return {
      x: element.x + element.width / 2,
      y: element.y + element.height + DEFAULT_LABEL_SIZE.height / 2
    };
  }
}

/**
 * Return the bounds of an elements label, parsed from the elements DI or
 * generated from its bounds.
 *
 * @param {ModdleElement} di
 * @param {Element} element
 *
 * @return {Rect}
 */
function getExternalLabelBounds(di, element) {
  var mid,
    size,
    bounds,
    label = di.label;
  if (label && label.bounds) {
    bounds = label.bounds;
    size = {
      width: Math.max(DEFAULT_LABEL_SIZE.width, bounds.width),
      height: bounds.height
    };
    mid = {
      x: bounds.x + bounds.width / 2,
      y: bounds.y + bounds.height / 2
    };
  } else {
    mid = getExternalLabelMid(element);
    size = DEFAULT_LABEL_SIZE;
  }
  return (0, _minDash.assign)({
    x: mid.x - size.width / 2,
    y: mid.y - size.height / 2
  }, size);
}

/**
 * @param {ModdleElement} semantic
 *
 * @returns {string}
 */
function getLabelAttr(semantic) {
  if ((0, _ModelUtil.is)(semantic, 'bpmn:FlowElement') || (0, _ModelUtil.is)(semantic, 'bpmn:Participant') || (0, _ModelUtil.is)(semantic, 'bpmn:Lane') || (0, _ModelUtil.is)(semantic, 'bpmn:SequenceFlow') || (0, _ModelUtil.is)(semantic, 'bpmn:MessageFlow') || (0, _ModelUtil.is)(semantic, 'bpmn:DataInput') || (0, _ModelUtil.is)(semantic, 'bpmn:DataOutput')) {
    return 'name';
  }
  if ((0, _ModelUtil.is)(semantic, 'bpmn:TextAnnotation')) {
    return 'text';
  }
  if ((0, _ModelUtil.is)(semantic, 'bpmn:Group')) {
    return 'categoryValueRef';
  }
}

/**
 * @param {ModdleElement} semantic
 *
 * @returns {string}
 */
function getCategoryValue(semantic) {
  var categoryValueRef = semantic['categoryValueRef'];
  if (!categoryValueRef) {
    return '';
  }
  return categoryValueRef.value || '';
}

/**
 * @param {Element} element
 *
 * @return {string}
 */
function getLabel(element) {
  var semantic = element.businessObject,
    attr = getLabelAttr(semantic);
  if (attr) {
    if (attr === 'categoryValueRef') {
      return getCategoryValue(semantic);
    }
    return semantic[attr] || '';
  }
}

/**
 * @param {Element} element
 * @param {string} text
 *
 * @return {Element}
 */
function setLabel(element, text) {
  var semantic = element.businessObject,
    attr = getLabelAttr(semantic);
  if (attr) {
    if (attr === 'categoryValueRef') {
      semantic['categoryValueRef'].value = text;
    } else {
      semantic[attr] = text;
    }
  }
  return element;
}

},{"./ModelUtil":32,"diagram-js/lib/util/ModelUtil":40,"min-dash":49}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBusinessObject = getBusinessObject;
exports.getDi = getDi;
exports.is = is;
exports.isAny = isAny;
var _minDash = require("min-dash");
/**
 * @typedef { import('../model/Types').Element } Element
 * @typedef { import('../model/Types').ModdleElement } ModdleElement
 */

/**
 * Is an element of the given BPMN type?
 *
 * @param  {Element|ModdleElement} element
 * @param  {string} type
 *
 * @return {boolean}
 */
function is(element, type) {
  var bo = getBusinessObject(element);
  return bo && typeof bo.$instanceOf === 'function' && bo.$instanceOf(type);
}

/**
 * Return true if element has any of the given types.
 *
 * @param {Element|ModdleElement} element
 * @param {string[]} types
 *
 * @return {boolean}
 */
function isAny(element, types) {
  return (0, _minDash.some)(types, function (t) {
    return is(element, t);
  });
}

/**
 * Return the business object for a given element.
 *
 * @param {Element|ModdleElement} element
 *
 * @return {ModdleElement}
 */
function getBusinessObject(element) {
  return element && element.businessObject || element;
}

/**
 * Return the di object for a given element.
 *
 * @param {Element} element
 *
 * @return {ModdleElement}
 */
function getDi(element) {
  return element && element.di;
}

},{"min-dash":49}],33:[function(require,module,exports){
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;
	var nativeCodeString = '[native code]';

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
					classes.push(arg.toString());
					continue;
				}

				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = crelt;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string") elt = document.createElement(elt);
  var i = 1,
    next = arguments[1];
  if (next && _typeof(next) == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
      var value = next[name];
      if (typeof value == "string") elt.setAttribute(name, value);else if (value != null) elt[name] = value;
    }
    i++;
  }
  for (; i < arguments.length; i++) add(elt, arguments[i]);
  return elt;
}
function add(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) {} else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++) add(elt, child[i]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

},{}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = CommandInterceptor;
var _minDash = require("min-dash");
/**
 * @typedef {import('../core/Types').ElementLike} ElementLike
 * @typedef {import('../core/EventBus').default} EventBus
 * @typedef {import('./CommandStack').CommandContext} CommandContext
 *
 * @typedef {string|string[]} Events
 * @typedef { (context: CommandContext) => ElementLike[] | void } HandlerFunction
 * @typedef { (context: CommandContext) => void } ComposeHandlerFunction
 */

var DEFAULT_PRIORITY = 1000;

/**
 * A utility that can be used to plug into the command execution for
 * extension and/or validation.
 *
 * @class
 * @constructor
 *
 * @example
 *
 * ```javascript
 * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
 *
 * class CommandLogger extends CommandInterceptor {
 *   constructor(eventBus) {
 *     super(eventBus);
 *
 *   this.preExecute('shape.create', (event) => {
 *     console.log('commandStack.shape-create.preExecute', event);
 *   });
 * }
 * ```
 *
 * @param {EventBus} eventBus
 */
function CommandInterceptor(eventBus) {
  /**
   * @type {EventBus}
   */
  this._eventBus = eventBus;
}
CommandInterceptor.$inject = ['eventBus'];
function unwrapEvent(fn, that) {
  return function (event) {
    return fn.call(that || null, event.context, event.command, event);
  };
}

/**
 * Intercept a command during one of the phases.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {string} [hook] phase to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.on = function (events, hook, priority, handlerFn, unwrap, that) {
  if ((0, _minDash.isFunction)(hook) || (0, _minDash.isNumber)(hook)) {
    that = unwrap;
    unwrap = handlerFn;
    handlerFn = priority;
    priority = hook;
    hook = null;
  }
  if ((0, _minDash.isFunction)(priority)) {
    that = unwrap;
    unwrap = handlerFn;
    handlerFn = priority;
    priority = DEFAULT_PRIORITY;
  }
  if ((0, _minDash.isObject)(unwrap)) {
    that = unwrap;
    unwrap = false;
  }
  if (!(0, _minDash.isFunction)(handlerFn)) {
    throw new Error('handlerFn must be a function');
  }
  if (!(0, _minDash.isArray)(events)) {
    events = [events];
  }
  var eventBus = this._eventBus;
  (0, _minDash.forEach)(events, function (event) {
    // concat commandStack(.event)?(.hook)?
    var fullEvent = ['commandStack', event, hook].filter(function (e) {
      return e;
    }).join('.');
    eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);
  });
};

/**
 * Add a <canExecute> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.canExecute = createHook('canExecute');

/**
 * Add a <preExecute> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.preExecute = createHook('preExecute');

/**
 * Add a <preExecuted> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.preExecuted = createHook('preExecuted');

/**
 * Add a <execute> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.execute = createHook('execute');

/**
 * Add a <executed> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.executed = createHook('executed');

/**
 * Add a <postExecute> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.postExecute = createHook('postExecute');

/**
 * Add a <postExecuted> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.postExecuted = createHook('postExecuted');

/**
 * Add a <revert> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.revert = createHook('revert');

/**
 * Add a <reverted> phase of command interceptor.
 *
 * @param {Events} [events] command(s) to intercept
 * @param {number} [priority]
 * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
 * @param {boolean} [unwrap] whether the event should be unwrapped
 * @param {any} [that]
 */
CommandInterceptor.prototype.reverted = createHook('reverted');

/*
 * Add prototype methods for each phase of command execution (e.g. execute,
 * revert).
 *
 * @param {string} hook
 *
 * @return { (
 *   events?: Events,
 *   priority?: number,
 *   handlerFn: ComposeHandlerFunction|HandlerFunction,
 *   unwrap?: boolean
 * ) => any }
 */
function createHook(hook) {
  /**
   * @this {CommandInterceptor}
   *
   * @param {Events} [events]
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap]
   * @param {any} [that]
   */
  var hookFn = function hookFn(events, priority, handlerFn, unwrap, that) {
    if ((0, _minDash.isFunction)(events) || (0, _minDash.isNumber)(events)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = events;
      events = null;
    }
    this.on(events, hook, priority, handlerFn, unwrap, that);
  };
  return hookFn;
}

},{"min-dash":49}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KEYS_UNDO = exports.KEYS_REDO = exports.KEYS_PASTE = exports.KEYS_COPY = void 0;
exports.hasModifier = hasModifier;
exports.isCmd = isCmd;
exports.isCopy = isCopy;
exports.isKey = isKey;
exports.isPaste = isPaste;
exports.isRedo = isRedo;
exports.isShift = isShift;
exports.isUndo = isUndo;
var _minDash = require("min-dash");
var KEYS_COPY = ['c', 'C'];
exports.KEYS_COPY = KEYS_COPY;
var KEYS_PASTE = ['v', 'V'];
exports.KEYS_PASTE = KEYS_PASTE;
var KEYS_REDO = ['y', 'Y'];
exports.KEYS_REDO = KEYS_REDO;
var KEYS_UNDO = ['z', 'Z'];

/**
 * Returns true if event was triggered with any modifier
 * @param {KeyboardEvent} event
 */
exports.KEYS_UNDO = KEYS_UNDO;
function hasModifier(event) {
  return event.ctrlKey || event.metaKey || event.shiftKey || event.altKey;
}

/**
 * @param {KeyboardEvent} event
 * @return {boolean}
 */
function isCmd(event) {
  // ensure we don't react to AltGr
  // (mapped to CTRL + ALT)
  if (event.altKey) {
    return false;
  }
  return event.ctrlKey || event.metaKey;
}

/**
 * Checks if key pressed is one of provided keys.
 *
 * @param {string|string[]} keys
 * @param {KeyboardEvent} event
 * @return {boolean}
 */
function isKey(keys, event) {
  keys = (0, _minDash.isArray)(keys) ? keys : [keys];
  return keys.indexOf(event.key) !== -1 || keys.indexOf(event.code) !== -1;
}

/**
 * @param {KeyboardEvent} event
 */
function isShift(event) {
  return event.shiftKey;
}

/**
 * @param {KeyboardEvent} event
 */
function isCopy(event) {
  return isCmd(event) && isKey(KEYS_COPY, event);
}

/**
 * @param {KeyboardEvent} event
 */
function isPaste(event) {
  return isCmd(event) && isKey(KEYS_PASTE, event);
}

/**
 * @param {KeyboardEvent} event
 */
function isUndo(event) {
  return isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event);
}

/**
 * @param {KeyboardEvent} event
 */
function isRedo(event) {
  return isCmd(event) && (isKey(KEYS_REDO, event) || isKey(KEYS_UNDO, event) && isShift(event));
}

},{"min-dash":49}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _translate = _interopRequireDefault(require("./translate"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/**
 * @type { import('didi').ModuleDeclaration }
 */
var _default = {
  translate: ['value', _translate["default"]]
};
exports["default"] = _default;

},{"./translate":38}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = translate;
/**
 * @typedef { {
 *   [key: string]: string;
 * } } TranslateReplacements
 */

/**
 * A simple translation stub to be used for multi-language support
 * in diagrams. Can be easily replaced with a more sophisticated
 * solution.
 *
 * @example
 *
 * ```javascript
 * // use it inside any diagram component by injecting `translate`.
 *
 * function MyService(translate) {
 *   alert(translate('HELLO {you}', { you: 'You!' }));
 * }
 * ```
 *
 * @param {string} template to interpolate
 * @param {TranslateReplacements} [replacements] a map with substitutes
 *
 * @return {string} the translated string
 */
function translate(template, replacements) {
  replacements = replacements || {};
  return template.replace(/{([^}]+)}/g, function (_, key) {
    return replacements[key] || '{' + key + '}';
  });
}

},{}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = add;
exports.indexOf = indexOf;
exports.remove = remove;
/**
 * Failsafe remove an element from a collection
 *
 * @param {Array<Object>} [collection]
 * @param {Object} [element]
 *
 * @return {number} the previous index of the element
 */
function remove(collection, element) {
  if (!collection || !element) {
    return -1;
  }
  var idx = collection.indexOf(element);
  if (idx !== -1) {
    collection.splice(idx, 1);
  }
  return idx;
}

/**
 * Fail save add an element to the given connection, ensuring
 * it does not yet exist.
 *
 * @param {Array<Object>} collection
 * @param {Object} element
 * @param {number} [idx]
 */
function add(collection, element, idx) {
  if (!collection || !element) {
    return;
  }
  if (typeof idx !== 'number') {
    idx = -1;
  }
  var currentIdx = collection.indexOf(element);
  if (currentIdx !== -1) {
    if (currentIdx === idx) {
      // nothing to do, position has not changed
      return;
    } else {
      if (idx !== -1) {
        // remove from current position
        collection.splice(currentIdx, 1);
      } else {
        // already exists in collection
        return;
      }
    }
  }
  if (idx !== -1) {
    // insert at specified position
    collection.splice(idx, 0, element);
  } else {
    // push to end
    collection.push(element);
  }
}

/**
 * Fail save get the index of an element in a collection.
 *
 * @param {Array<Object>} collection
 * @param {Object} element
 *
 * @return {number} the index or -1 if collection or element do
 *                  not exist or the element is not contained.
 */
function indexOf(collection, element) {
  if (!collection || !element) {
    return -1;
  }
  return collection.indexOf(element);
}

},{}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConnection = isConnection;
exports.isLabel = isLabel;
exports.isRoot = isRoot;
var _minDash = require("min-dash");
/**
 * Checks whether a value is an instance of Connection.
 *
 * @param {any} value
 *
 * @return {boolean}
 */
function isConnection(value) {
  return (0, _minDash.isObject)(value) && (0, _minDash.has)(value, 'waypoints');
}

/**
 * Checks whether a value is an instance of Label.
 *
 * @param {any} value
 *
 * @return {boolean}
 */
function isLabel(value) {
  return (0, _minDash.isObject)(value) && (0, _minDash.has)(value, 'labelTarget');
}

/**
 * Checks whether a value is an instance of Root.
 *
 * @param {any} value
 *
 * @return {boolean}
 */
function isRoot(value) {
  return (0, _minDash.isObject)(value) && (0, _minDash.isNil)(value.parent);
}

},{"min-dash":49}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeelersEditor = FeelersEditor;
exports.buildSimpleTree = buildSimpleTree;
exports.parser = exports.evaluate = void 0;
var _lr = require("@lezer/lr");
var _highlight = require("@lezer/highlight");
var _feelin = require("feelin");
var _autocomplete = require("@codemirror/autocomplete");
var _commands = require("@codemirror/commands");
var _language = require("@codemirror/language");
var _lint = require("@codemirror/lint");
var _state = require("@codemirror/state");
var _view = require("@codemirror/view");
var _markdown = require("@lezer/markdown");
var _lezerFeel = require("lezer-feel");
var _common = require("@lezer/common");
var _feelLint = require("@bpmn-io/feel-lint");
var _cmTheme = require("@bpmn-io/cm-theme");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
// This file was generated by lezer-generator. You probably shouldn't edit it.
var Feel = 1,
  FeelBlock = 2,
  SimpleTextBlock = 3;

/* global console */

var CHAR_TABLE = {
  '{': 123,
  '}': 125
};
var isClosingFeelScope = function isClosingFeelScope(input) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var isReadingCloseCurrent = input.peek(offset) === CHAR_TABLE['}'];
  var isReadingCloseAhead = input.peek(offset + 1) === CHAR_TABLE['}'];
  var isReadingClose = isReadingCloseCurrent && isReadingCloseAhead;
  return isReadingClose || input.peek(offset) === -1;
};
var feelBlock = new _lr.ExternalTokenizer(function (input, stack) {
  var lookAhead = 0;

  // check if we haven't reached the end of a templating tag
  while (!isClosingFeelScope(input, lookAhead)) {
    lookAhead++;
  }
  if (lookAhead > 0) {
    input.advance(lookAhead);
    input.acceptToken(FeelBlock);
  }
});
var isClosingTextScope = function isClosingTextScope(input) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var isReadingOpenCurrent = input.peek(offset) === CHAR_TABLE['{'];
  var isReadingOpenAhead = input.peek(offset + 1) === CHAR_TABLE['{'];
  var isReadOpen = isReadingOpenCurrent && isReadingOpenAhead;
  return isReadOpen || input.peek(offset) === -1;
};
var simpleTextBlock = new _lr.ExternalTokenizer(function (input, stack) {
  var lookAhead = 0;

  // check if we haven't reached the start of a templating tag
  while (!isClosingTextScope(input, lookAhead)) {
    lookAhead++;
  }
  if (lookAhead > 0) {
    input.advance(lookAhead);
    input.acceptToken(SimpleTextBlock);
  }
});

// Anytime this tokenizer is run, simply tag the rest of the input as FEEL
var feel = new _lr.ExternalTokenizer(function (input, stack) {
  var lookAhead = 0;
  while (input.peek(lookAhead) !== -1) {
    lookAhead++;
  }
  if (lookAhead > 0) {
    input.advance(lookAhead);
    input.acceptToken(Feel);
  }
});
var feelersHighlighting = (0, _highlight.styleTags)({
  ConditionalSpanner: _highlight.tags.special(_highlight.tags.bracket),
  ConditionalSpannerClose: _highlight.tags.special(_highlight.tags.bracket),
  ConditionalSpannerCloseNl: _highlight.tags.special(_highlight.tags.bracket),
  LoopSpanner: _highlight.tags.special(_highlight.tags.bracket),
  LoopSpannerClose: _highlight.tags.special(_highlight.tags.bracket),
  LoopSpannerCloseNl: _highlight.tags.special(_highlight.tags.bracket),
  EmptyInsert: _highlight.tags.special(_highlight.tags.bracket),
  Insert: _highlight.tags.special(_highlight.tags.bracket)
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
var parser = _lr.LRParser.deserialize({
  version: 14,
  states: "$bOQOaOOOfOXO'#CbOOO`'#Cm'#CmOqOWO'#CcOvOWO'#CfOOO`'#Cp'#CpOOO`'#Ci'#CiO{OaO'#ClO!jOSOOQOOOOOO!oOPO,58{O!tOXO,58|OOO`,58|,58|O!|OQO,58}O#ROQO,59QOOO`-E6g-E6gOOO`1G.g1G.gO#WOPO1G.gOOO`1G.h1G.hO#]OaO1G.iO#qOaO1G.lOOO`7+$R7+$RO$VOPO7+$TO$_OPO7+$WOOO`<<Go<<GoOOO`<<Gr<<Gr",
  stateData: "$g~ORUO_WObPOeROgSO^`P~OQYO_ZOc[O~OQ]O~OQ^O~ORUObPOeROgSO^`XW`XX`XZ`X[`X~OPXO~Oc`O~OQaOcbO~OfcO~OfdO~OceO~ORUObPOeROgSOW`PX`P~ORUObPOeROgSOZ`P[`P~OWhOXhO~OZiO[iO~O",
  "goto": "!ZePPPPPfflPPlPPrPPz!TPP!TXQOVcdXTOVcdUVOcdR_VQXOQfcRgdXUOVcd",
  nodeNames: "⚠ Feel FeelBlock SimpleTextBlock Feelers Insert EmptyInsert ConditionalSpanner ConditionalSpannerClose ConditionalSpannerCloseNl LoopSpanner LoopSpannerClose LoopSpannerCloseNl",
  maxTerm: 23,
  propSources: [feelersHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "%X~RR!_!`[#o#pa#q#r$r~aO_~~dP#o#pg~lQb~str!P!Q!{~uQ#]#^{#`#a!^~!OP#Y#Z!R~!UPpq!X~!^Oe~~!aP#c#d!d~!gP#c#d!j~!mP#d#e!p~!sPpq!v~!{Og~~#OQ#]#^#U#`#a#u~#XP#Y#Z#[~#_P#q#r#b~#eP#q#r#h~#mPW~YZ#p~#uOX~~#xP#c#d#{~$OP#c#d$R~$UP#d#e$X~$[P#q#r$_~$bP#q#r$e~$jPZ~YZ$m~$rO[~R$uP#q#r$xR%PPcPfQYZ%SQ%XOfQ",
  tokenizers: [0, 1, feel, feelBlock, simpleTextBlock],
  topRules: {
    "Feelers": [0, 4]
  },
  tokenPrec: 0
});
exports.parser = parser;
function buildSimpleTree(parseTree, templateString) {
  var stack = [{
    children: []
  }];
  var isLeafNode = function isLeafNode(node) {
    return ['SimpleTextBlock', 'Feel', 'FeelBlock'].includes(node.type.name);
  };
  parseTree.iterate({
    enter: function enter(node, pos, type) {
      var nodeRepresentation = {
        name: node.type.name,
        children: []
      };
      if (isLeafNode(node)) {
        nodeRepresentation.content = templateString.slice(node.from, node.to);
      }
      stack.push(nodeRepresentation);
    },
    leave: function leave(node, pos, type) {
      var result = stack.pop();
      var parent = stack[stack.length - 1];
      result.parent = parent;
      parent.children.push(result);
    }
  });
  return stack[0].children[0];
}

/**
 * @typedef {object} EvaluationOptions
 * @property {boolean} [debug=false] - whether to enable debug mode, which displays errors inline instead of throwing them
 * @property {function} [buildDebugString=(e) => `{{ ${e.message.toLowerCase()} }}`] - function that takes an error and returns the string to display in debug mode
 * @property {boolean} [strict=false] - whether to expect strict data types out of our FEEL expression, e.g. boolean for conditionals
 */

/**
 * @param {string} templateString - the template string to evaluate
 * @param {object} [context={}] - the context object to evaluate the template string against
 * @param {EvaluationOptions} [options={}] - options to configure the evaluation
 * @return {string} the evaluated template string
 */
var evaluate = function evaluate(templateString) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$debug = options.debug,
    debug = _options$debug === void 0 ? false : _options$debug,
    _options$buildDebugSt = options.buildDebugString,
    buildDebugString = _options$buildDebugSt === void 0 ? function (e) {
      return "{{ ".concat(e.message.toLowerCase(), " }}");
    } : _options$buildDebugSt,
    _options$strict = options.strict,
    strict = _options$strict === void 0 ? false : _options$strict;
  var parseTree = parser.parse(templateString);
  var simpleTreeRoot = buildSimpleTree(parseTree, templateString);
  var evaluateNode = buildNodeEvaluator(debug, buildDebugString, strict);
  return evaluateNode(simpleTreeRoot, enhanceContext(context, null));
};
exports.evaluate = evaluate;
var buildNodeEvaluator = function buildNodeEvaluator(debug, buildDebugString, strict) {
  var errorHandler = function errorHandler(error) {
    if (debug) {
      return buildDebugString(error);
    }
    throw error;
  };
  var evaluateNodeValue = function evaluateNodeValue(node) {
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    switch (node.name) {
      case 'SimpleTextBlock':
        return node.content;
      case 'Insert':
        {
          var _feel = node.children[0].content;
          try {
            return (0, _feelin.evaluate)(_feel, context);
          } catch (_unused) {
            return errorHandler(new Error("FEEL expression ".concat(_feel, " couldn't be evaluated")));
          }
        }
      case 'EmptyInsert':
        return '';
      case 'Feel':
      case 'FeelBlock':
        {
          try {
            return (0, _feelin.evaluate)(node.content, context);
          } catch (_unused2) {
            return errorHandler(new Error("FEEL expression ".concat(node.content, " couldn't be evaluated")));
          }
        }
      case 'Feelers':
        return node.children.map(function (child) {
          return evaluateNode(child, context);
        }).join('');
      case 'ConditionalSpanner':
        {
          var _feel2 = node.children[0].content;
          var shouldRender;
          try {
            shouldRender = (0, _feelin.evaluate)(_feel2, context);
          } catch (_unused3) {
            return errorHandler(new Error("FEEL expression ".concat(_feel2, " couldn't be evaluated")));
          }
          if (strict && typeof shouldRender !== 'boolean') {
            return errorHandler(new Error("FEEL expression ".concat(_feel2, " expected to evaluate to a boolean")));
          }
          if (shouldRender) {
            var children = node.children.slice(1, node.children.length - 1);
            var innerRender = children.map(function (child) {
              return evaluateNode(child, context);
            }).join('');
            var closeNode = node.children[node.children.length - 1];
            var shouldAddNewline = closeNode.name.endsWith('Nl') && !innerRender.endsWith('\n');
            return innerRender + (shouldAddNewline ? '\n' : '');
          }
          return '';
        }
      case 'LoopSpanner':
        {
          var _feel3 = node.children[0].content;
          var loopArray;
          try {
            loopArray = (0, _feelin.evaluate)(_feel3, context);
          } catch (_unused4) {
            return errorHandler(new Error("FEEL expression ".concat(_feel3, " couldn't be evaluated")));
          }
          if (!Array.isArray(loopArray)) {
            if (strict) {
              return errorHandler(new Error("FEEL expression ".concat(_feel3, " expected to evaluate to an array")));
            }

            // if not strict, we treat undefined/null as an empty array
            else if (loopArray === undefined || loopArray === null) {
              loopArray = [];
            }

            // if not strict, we treat a single item as an array with one item
            else {
              loopArray = [loopArray];
            }
          }
          var childrenToLoop = node.children.slice(1, node.children.length - 1);
          var evaluateChildren = function evaluateChildren(arrayElement, parentContext) {
            var childContext = enhanceContext(arrayElement, parentContext);
            return childrenToLoop.map(function (child) {
              return evaluateNode(child, childContext);
            }).join('');
          };
          var _innerRender = loopArray.map(function (arrayElement) {
            return evaluateChildren(arrayElement, context);
          }).join('');
          var _closeNode = node.children[node.children.length - 1];
          var _shouldAddNewline = _closeNode.name.endsWith('Nl') && !_innerRender.endsWith('\n');
          return _innerRender + (_shouldAddNewline ? '\n' : '');
        }
    }
  };
  var evaluateNode = function evaluateNode(node) {
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    try {
      return evaluateNodeValue(node, context);
    } catch (error) {
      return errorHandler(error);
    }
  };
  return evaluateNode;
};
var enhanceContext = function enhanceContext(context, parentContext) {
  if (_typeof(context) === 'object') {
    return _objectSpread(_objectSpread({
      "this": context,
      parent: parentContext
    }, context), {}, {
      _this_: context,
      _parent_: parentContext
    });
  }
  return {
    "this": context,
    parent: parentContext,
    _this_: context,
    _parent_: parentContext
  };
};
var foldMetadata = {
  ConditionalSpanner: _language.foldInside,
  LoopSpanner: _language.foldInside
};
function createMixedLanguage() {
  var hostLanguage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var _mixedParser = parser.configure({
    wrap: (0, _common.parseMixed)(function (node) {
      if (node.name == 'Feel' || node.name == 'FeelBlock') {
        return {
          parser: _lezerFeel.parser
        };
      }
      if (hostLanguage && node.name == 'SimpleTextBlock') {
        return {
          parser: hostLanguage
        };
      }
      return null;
    }),
    props: [_language.foldNodeProp.add(foldMetadata)]
  });
  return _language.LRLanguage.define({
    parser: _mixedParser
  });
}
var createFeelersLanguageSupport = function createFeelersLanguageSupport(hostLanguageParser) {
  return new _language.LanguageSupport(createMixedLanguage(hostLanguageParser), []);
};

/**
 * Create warnings for empty inserts in the given tree.
 *
 * @param {Tree} syntaxTree
 * @returns {LintMessage[]} array of syntax errors
 */
function lintEmptyInserts(syntaxTree) {
  var lintMessages = [];
  syntaxTree.iterate({
    enter: function enter(node) {
      if (node.type.name === 'EmptyInsert') {
        lintMessages.push({
          from: node.from,
          to: node.to,
          severity: 'warning',
          message: 'this insert is empty and will be ignored',
          type: 'emptyInsert'
        });
      }
    }
  });
  return lintMessages;
}

/**
 * Generates lint messages for the given syntax tree.
 *
 * @param {Tree} syntaxTree
 * @returns {LintMessage[]} array of all lint messages
 */
function lintAll(syntaxTree) {
  var lintMessages = _toConsumableArray(lintEmptyInserts(syntaxTree));
  return lintMessages;
}

/**
 * CodeMirror extension that provides linting for FEEL expressions.
 *
 * @param {EditorView} editorView
 * @returns {Source} CodeMirror linting source
 */
function cmFeelersLinter() {
  var lintFeel = (0, _feelLint.cmFeelLinter)();
  return function (editorView) {
    var feelMessages = lintFeel(editorView);

    // don't lint if the Editor is empty
    if (editorView.state.doc.length === 0) {
      return [];
    }
    var tree = (0, _language.syntaxTree)(editorView.state);
    var feelersMessages = lintAll(tree);
    return [].concat(_toConsumableArray(feelMessages), _toConsumableArray(feelersMessages.map(function (message) {
      return _objectSpread(_objectSpread({}, message), {}, {
        source: 'feelers linter'
      });
    })));
  };
}
var lint = (0, _lint.linter)(cmFeelersLinter());

/**
 * Creates a Feelers editor in the supplied container.
 *
 * @param {Object} config Configuration options for the Feelers editor.
 * @param {DOMNode} [config.container] The DOM node that will contain the editor.
 * @param {DOMNode|String} [config.tooltipContainer] The DOM node or CSS selector string for the tooltip container.
 * @param {String} [config.hostLanguage] The host language for the editor (e.g., 'markdown').
 * @param {Object} [config.hostLanguageParser] A custom parser for the host language.
 * @param {Function} [config.onChange] Callback function that is called when the editor's content changes.
 * @param {Function} [config.onKeyDown] Callback function that is called when a key is pressed within the editor.
 * @param {Function} [config.onLint] Callback function that is called when linting messages are available.
 * @param {Object} [config.contentAttributes] Additional attributes to set on the editor's content element.
 * @param {Boolean} [config.readOnly] Set to true to make the editor read-only.
 * @param {String} [config.value] Initial value of the editor.
 * @param {Boolean} [config.enableGutters] Set to true to enable gutter decorations (e.g., line numbers).
 * @param {Boolean} [config.darkMode] Set to true to use the dark theme for the editor.
 *
 * @returns {Object} editor An instance of the FeelersEditor class.
 */
function FeelersEditor(_ref) {
  var container = _ref.container,
    tooltipContainer = _ref.tooltipContainer,
    hostLanguage = _ref.hostLanguage,
    hostLanguageParser = _ref.hostLanguageParser,
    _ref$onChange = _ref.onChange,
    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
    _ref$onKeyDown = _ref.onKeyDown,
    onKeyDown = _ref$onKeyDown === void 0 ? function () {} : _ref$onKeyDown,
    _ref$onLint = _ref.onLint,
    onLint = _ref$onLint === void 0 ? function () {} : _ref$onLint,
    _ref$contentAttribute = _ref.contentAttributes,
    contentAttributes = _ref$contentAttribute === void 0 ? {} : _ref$contentAttribute,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value,
    _ref$enableGutters = _ref.enableGutters,
    enableGutters = _ref$enableGutters === void 0 ? false : _ref$enableGutters,
    _ref$singleLine = _ref.singleLine,
    singleLine = _ref$singleLine === void 0 ? false : _ref$singleLine,
    _ref$darkMode = _ref.darkMode,
    darkMode = _ref$darkMode === void 0 ? false : _ref$darkMode;
  var changeHandler = _view.EditorView.updateListener.of(function (update) {
    if (update.docChanged) {
      onChange(update.state.doc.toString());
    }
  });
  var lintHandler = _view.EditorView.updateListener.of(function (update) {
    var diagnosticEffects = update.transactions.flatMap(function (t) {
      return t.effects;
    }).filter(function (effect) {
      return effect.is(_lint.setDiagnosticsEffect);
    });
    if (!diagnosticEffects.length) {
      return;
    }
    var messages = diagnosticEffects.flatMap(function (effect) {
      return effect.value;
    });
    onLint(messages);
  });
  var contentAttributesExtension = _view.EditorView.contentAttributes.of(contentAttributes);
  var keyHandler = _view.EditorView.domEventHandlers({
    keydown: onKeyDown
  });
  if (typeof tooltipContainer === 'string') {
    // eslint-disable-next-line no-undef
    tooltipContainer = document.querySelector(tooltipContainer);
  }
  var tooltipLayout = tooltipContainer ? (0, _view.tooltips)({
    tooltipSpace: function tooltipSpace() {
      return tooltipContainer.getBoundingClientRect();
    }
  }) : [];
  var _getHostLanguageParser = function _getHostLanguageParser(hostLanguage) {
    switch (hostLanguage) {
      case 'markdown':
        return _markdown.parser;
      default:
        return null;
    }
  };
  var feelersLanguageSupport = createFeelersLanguageSupport(hostLanguageParser || hostLanguage && _getHostLanguageParser(hostLanguage));
  var extensions = [(0, _language.bracketMatching)(), changeHandler, contentAttributesExtension, (0, _autocomplete.closeBrackets)(), (0, _language.indentOnInput)(), keyHandler, _view.keymap.of(_toConsumableArray(_commands.defaultKeymap)), feelersLanguageSupport, lint, lintHandler, tooltipLayout, darkMode ? _cmTheme.darkTheme : _cmTheme.lightTheme].concat(_toConsumableArray(enableGutters ? [
  // todo: adjust folding boundaries first foldGutter(),
  (0, _view.lineNumbers)()] : []), _toConsumableArray(singleLine ? [_state.EditorState.transactionFilter.of(function (tr) {
    return tr.newDoc.lines > 1 ? [] : tr;
  })] : []));
  if (readOnly) {
    extensions.push(_view.EditorView.editable.of(false));
  }
  if (singleLine && value) {
    value = value.toString().split('\n')[0];
  }
  this._cmEditor = new _view.EditorView({
    state: _state.EditorState.create({
      doc: value,
      extensions: extensions
    }),
    parent: container
  });
  return this;
}

/**
 * Replaces the content of the Editor
 *
 * @param {String} value
 */
FeelersEditor.prototype.setValue = function (value) {
  this._cmEditor.dispatch({
    changes: {
      from: 0,
      to: this._cmEditor.state.doc.length,
      insert: value
    }
  });
};

/**
 * Sets the focus in the editor.
 */
FeelersEditor.prototype.focus = function (position) {
  var cmEditor = this._cmEditor;

  // the Codemirror `focus` method always calls `focus` with `preventScroll`,
  // so we have to focus + scroll manually
  cmEditor.contentDOM.focus();
  cmEditor.focus();
  if (typeof position === 'number') {
    var end = cmEditor.state.doc.length;
    cmEditor.dispatch({
      selection: {
        anchor: position <= end ? position : end
      }
    });
  }
};

/**
 * Returns the current selection ranges. If no text is selected, a single
 * range with the start and end index at the cursor position will be returned.
 *
 * @returns {Object} selection
 * @returns {Array} selection.ranges
 */
FeelersEditor.prototype.getSelection = function () {
  return this._cmEditor.state.selection;
};

},{"@bpmn-io/cm-theme":5,"@bpmn-io/feel-lint":10,"@codemirror/autocomplete":16,"@codemirror/commands":17,"@codemirror/language":18,"@codemirror/lint":19,"@codemirror/state":20,"@codemirror/view":21,"@lezer/common":22,"@lezer/highlight":23,"@lezer/lr":24,"@lezer/markdown":25,"feelin":43,"lezer-feel":42}],42:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeContextKey = normalizeContextKey;
exports.parser = void 0;
exports.trackVariables = trackVariables;
var _lr = require("@lezer/lr");
var _highlight = require("@lezer/highlight");
var _identifiersMap, _prefixedContextStart, _contextStarts, _contextEnds;
function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
// This file was generated by lezer-generator. You probably shouldn't edit it.
var propertyIdentifier = 119,
  identifier = 120,
  nameIdentifier = 121,
  insertSemi = 122,
  expression0 = 126,
  ForExpression = 4,
  forExpressionStart = 129,
  ForInExpression = 7,
  Name = 8,
  Identifier = 9,
  AdditionalIdentifier = 10,
  forExpressionBodyStart = 137,
  IfExpression = 18,
  ifExpressionStart = 138,
  QuantifiedExpression = 22,
  quantifiedExpressionStart = 139,
  QuantifiedInExpression = 26,
  PositiveUnaryTest = 36,
  ArithmeticExpression = 40,
  arithmeticPlusStart = 143,
  arithmeticTimesStart = 144,
  arithmeticExpStart = 145,
  arithmeticUnaryStart = 146,
  VariableName = 47,
  PathExpression = 67,
  pathExpressionStart = 151,
  FilterExpression = 69,
  filterExpressionStart = 152,
  FunctionInvocation = 71,
  functionInvocationStart = 153,
  ParameterName = 75,
  nil = 158,
  NumericLiteral = 78,
  StringLiteral = 79,
  BooleanLiteral = 80,
  List = 88,
  listStart = 169,
  FunctionDefinition = 89,
  functionDefinitionStart = 171,
  Context = 96,
  contextStart = 173,
  ContextEntry = 97,
  PropertyName = 99,
  PropertyIdentifier = 100;

/* global console,process */

var LOG_PARSE = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
var LOG_PARSE_DEBUG = typeof process != 'undefined' && process.env && /\bfparse:dbg\b/.test(process.env.LOG);
var LOG_VARS = typeof process != 'undefined' && process.env && /\bcontext\b/.test(process.env.LOG);
var spaceChars = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
var newlineChars = chars('\n\r');
var additionalNameChars = chars("'./-+*");

/**
 * @param { string } str
 * @return { number[] }
 */
function chars(str) {
  return Array.from(str).map(function (s) {
    return s.charCodeAt(0);
  });
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isStartChar(ch) {
  return ch === 63 // ?
  || ch === 95 // _
  || ch >= 65 && ch <= 90 // A-Z
  || ch >= 97 && ch <= 122 // a-z
  || ch >= 161 && !isPartChar(ch) && !isSpace(ch);
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isAdditional(ch) {
  return additionalNameChars.includes(ch);
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isPartChar(ch) {
  return ch >= 48 && ch <= 57 // 0-9
  || ch === 0xB7 || ch >= 0x0300 && ch <= 0x036F || ch >= 0x203F && ch <= 0x2040;
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isSpace(ch) {
  return spaceChars.includes(ch);
}

// eslint-disable-next-line
function indent(str, spaces) {
  return spaces.concat(str.split(/\n/g).join('\n' + spaces));
}

/**
 * @param { import('@lezer/lr').InputStream } input
 * @param  { number } [offset]
 * @param { boolean } [includeOperators]
 *
 * @return { { token: string, offset: number } | null }
 */
function parseAdditionalSymbol(input) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var next = input.peek(offset);
  if (isAdditional(next)) {
    return {
      offset: 1,
      token: String.fromCharCode(next)
    };
  }
  return null;
}

/**
 * @param { import('@lezer/lr').InputStream } input
 * @param { number } [offset]
 * @param { boolean } [namePart]
 *
 * @return { { token: string, offset: number } | null }
 */
function parseIdentifier(input) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var namePart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  for (var inside = false, _chars = [], i = 0;; i++) {
    var next = input.peek(offset + i);
    if (isStartChar(next) || (inside || namePart) && isPartChar(next)) {
      if (!inside) {
        inside = true;
      }
      _chars.push(next);
    } else {
      if (_chars.length) {
        return {
          token: String.fromCharCode.apply(String, _chars),
          offset: i
        };
      }
      return null;
    }
  }
}

/**
 * @param { import('@lezer/lr').InputStream } input
 * @param  { number } offset
 *
 * @return { { token: string, offset: number } | null }
 */
function parseSpaces(input, offset) {
  for (var inside = false, i = 0;; i++) {
    var next = input.peek(offset + i);
    if (isSpace(next)) {
      if (!inside) {
        inside = true;
      }
    } else {
      if (inside) {
        return {
          token: ' ',
          offset: i
        };
      }
      return null;
    }
  }
}

/**
 * Parse a name from the input and return the first match, if any.
 *
 * @param { import('@lezer/lr').InputStream } input
 * @param { Variables } variables
 *
 * @return { { token: string, offset: number, term: number } | null }
 */
function parseName(input, variables) {
  var contextKeys = variables.contextKeys();
  var start = variables.tokens;
  var _loop = function _loop(_i, _tokens, _nextMatch) {
    var namePart = start.length + _tokens.length > 0;
    var maybeSpace = _tokens.length > 0;
    var match = parseIdentifier(input, _i, namePart) || namePart && parseAdditionalSymbol(input, _i) || maybeSpace && parseSpaces(input, _i);

    // match is required
    if (!match) {
      return {
        v: _nextMatch
      };
    }
    var token = match.token,
      offset = match.offset;
    _i += offset;
    if (token === ' ') {
      i = _i, tokens = _tokens, nextMatch = _nextMatch;
      return "continue";
    }
    _tokens = [].concat(_toConsumableArray(_tokens), [token]);
    var name = [].concat(_toConsumableArray(start), _toConsumableArray(_tokens)).join(' ');
    if (contextKeys.some(function (el) {
      return el === name;
    })) {
      var _token = _tokens[0];
      _nextMatch = {
        token: _token,
        offset: _token.length,
        term: nameIdentifier
      };
    }
    if (dateTimeIdentifiers.some(function (el) {
      return el === name;
    })) {
      var _token2 = _tokens[0];

      // parse date time identifiers as normal
      // identifiers to allow specialization to kick in
      //
      // cf. https://github.com/nikku/lezer-feel/issues/8
      _nextMatch = {
        token: _token2,
        offset: _token2.length,
        term: identifier
      };
    }
    if (!contextKeys.some(function (el) {
      return el.startsWith(name);
    }) && !dateTimeIdentifiers.some(function (el) {
      return el.startsWith(name);
    })) {
      return {
        v: _nextMatch
      };
    }
    i = _i, tokens = _tokens, nextMatch = _nextMatch;
  };
  for (var i = 0, tokens = [], nextMatch = null;;) {
    var _ret = _loop(i, tokens, nextMatch);
    if (_ret === "continue") continue;
    if (_typeof(_ret) === "object") return _ret.v;
  }
}
var identifiersMap = (_identifiersMap = {}, _defineProperty(_identifiersMap, identifier, 'identifier'), _defineProperty(_identifiersMap, nameIdentifier, 'nameIdentifier'), _identifiersMap);
var identifiers = new _lr.ExternalTokenizer(function (input, stack) {
  LOG_PARSE_DEBUG && console.log('%s: T <identifier | nameIdentifier>', input.pos);
  var nameMatch = parseName(input, stack.context);
  var start = stack.context.tokens;
  var match = nameMatch || parseIdentifier(input, 0, start.length > 0);
  if (match) {
    input.advance(match.offset);
    input.acceptToken(nameMatch ? nameMatch.term : identifier);
    LOG_PARSE && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap[nameMatch.term] : 'identifier', match.token);
  }
}, {
  contextual: true
});
var propertyIdentifiers = new _lr.ExternalTokenizer(function (input, stack) {
  LOG_PARSE_DEBUG && console.log('%s: T <propertyIdentifier>', input.pos);
  var start = stack.context.tokens;
  var match = parseIdentifier(input, 0, start.length > 0);
  if (match) {
    input.advance(match.offset);
    input.acceptToken(propertyIdentifier);
    LOG_PARSE && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
  }
});
var insertSemicolon = new _lr.ExternalTokenizer(function (input, stack) {
  LOG_PARSE_DEBUG && console.log('%s: T <insertSemi>', input.pos);
  var offset;
  var insert = false;
  for (offset = 0;; offset++) {
    var _char = input.peek(offset);
    if (spaceChars.includes(_char)) {
      continue;
    }
    if (newlineChars.includes(_char)) {
      insert = true;
    }
    break;
  }
  if (insert) {
    var _identifier = parseIdentifier(input, offset + 1);
    var spaces = parseSpaces(input, offset + 1);
    if (spaces || _identifier && /^(then|else|return|satisfies)$/.test(_identifier.token)) {
      return;
    }
    LOG_PARSE && console.log('%s: MATCH <insertSemi>', input.pos);
    input.acceptToken(insertSemi);
  }
});
var prefixedContextStarts = (_prefixedContextStart = {}, _defineProperty(_prefixedContextStart, functionInvocationStart, 'FunctionInvocation'), _defineProperty(_prefixedContextStart, filterExpressionStart, 'FilterExpression'), _defineProperty(_prefixedContextStart, pathExpressionStart, 'PathExpression'), _prefixedContextStart);
var contextStarts = (_contextStarts = {}, _defineProperty(_contextStarts, contextStart, 'Context'), _defineProperty(_contextStarts, functionDefinitionStart, 'FunctionDefinition'), _defineProperty(_contextStarts, forExpressionStart, 'ForExpression'), _defineProperty(_contextStarts, listStart, 'List'), _defineProperty(_contextStarts, ifExpressionStart, 'IfExpression'), _defineProperty(_contextStarts, quantifiedExpressionStart, 'QuantifiedExpression'), _contextStarts);
var contextEnds = (_contextEnds = {}, _defineProperty(_contextEnds, Context, 'Context'), _defineProperty(_contextEnds, FunctionDefinition, 'FunctionDefinition'), _defineProperty(_contextEnds, ForExpression, 'ForExpression'), _defineProperty(_contextEnds, List, 'List'), _defineProperty(_contextEnds, IfExpression, 'IfExpression'), _defineProperty(_contextEnds, QuantifiedExpression, 'QuantifiedExpression'), _defineProperty(_contextEnds, PathExpression, 'PathExpression'), _defineProperty(_contextEnds, FunctionInvocation, 'FunctionInvocation'), _defineProperty(_contextEnds, FilterExpression, 'FilterExpression'), _defineProperty(_contextEnds, ArithmeticExpression, 'ArithmeticExpression'), _contextEnds);
var ValueProducer = /*#__PURE__*/function () {
  /**
   * @param { Function } fn
   */
  function ValueProducer(fn) {
    _classCallCheck(this, ValueProducer);
    this.fn = fn;
  }
  _createClass(ValueProducer, [{
    key: "get",
    value: function get(variables) {
      return this.fn(variables);
    }

    /**
     * @param { Function }
     *
     * @return { ValueProducer }
     */
  }], [{
    key: "of",
    value: function of(fn) {
      return new ValueProducer(fn);
    }
  }]);
  return ValueProducer;
}();
var dateTimeLiterals = {
  'date and time': 1,
  'date': 1,
  'time': 1,
  'duration': 1
};
var dateTimeIdentifiers = Object.keys(dateTimeLiterals);
var Variables = /*#__PURE__*/function () {
  function Variables() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? 'Expressions' : _ref$name,
      _ref$tokens = _ref.tokens,
      tokens = _ref$tokens === void 0 ? [] : _ref$tokens,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? [] : _ref$children,
      _ref$parent = _ref.parent,
      parent = _ref$parent === void 0 ? null : _ref$parent,
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? {} : _ref$context,
      value = _ref.value,
      raw = _ref.raw;
    _classCallCheck(this, Variables);
    this.name = name;
    this.tokens = tokens;
    this.children = children;
    this.parent = parent;
    this.context = context;
    this.value = value;
    this.raw = raw;
  }
  _createClass(Variables, [{
    key: "enterScope",
    value: function enterScope(name) {
      var childScope = this.of({
        name: name,
        parent: this
      });
      LOG_VARS && console.log('[%s] enter', childScope.path, childScope.context);
      return childScope;
    }
  }, {
    key: "exitScope",
    value: function exitScope(str) {
      if (!this.parent) {
        LOG_VARS && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent(str, '  '));
        return this;
      }
      LOG_VARS && console.log('[%s] exit %o\n%s', this.path, this.context, indent(str, '  '));
      return this.parent.pushChild(this);
    }
  }, {
    key: "token",
    value: function token(part) {
      LOG_VARS && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);
      return this.assign({
        tokens: [].concat(_toConsumableArray(this.tokens), [part])
      });
    }
  }, {
    key: "literal",
    value: function literal(value) {
      LOG_VARS && console.log('[%s] literal %o', this.path, value);
      return this.pushChild(this.of({
        name: 'Literal',
        value: value
      }));
    }

    /**
     * Return computed scope value
     *
     * @return {any}
     */
  }, {
    key: "computedValue",
    value: function computedValue() {
      for (var scope = this;; scope = last(scope.children)) {
        if (!scope) {
          return null;
        }
        if (scope.value) {
          return scope.value;
        }
      }
    }
  }, {
    key: "contextKeys",
    value: function contextKeys() {
      return Object.keys(this.context).map(normalizeContextKey);
    }
  }, {
    key: "path",
    get: function get() {
      var _this$parent, _this$parent$path;
      return ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : (_this$parent$path = _this$parent.path) === null || _this$parent$path === void 0 ? void 0 : _this$parent$path.concat(' > ', this.name)) || this.name;
    }

    /**
     * Return value of variable.
     *
     * @param { string } variable
     * @return { any } value
     */
  }, {
    key: "get",
    value: function get(variable) {
      var names = [variable, variable && normalizeContextKey(variable)];
      var contextKey = Object.keys(this.context).find(function (key) {
        return names.includes(normalizeContextKey(key));
      });
      if (typeof contextKey === 'undefined') {
        return undefined;
      }
      var val = this.context[contextKey];
      if (val instanceof ValueProducer) {
        return val.get(this);
      } else {
        return val;
      }
    }
  }, {
    key: "resolveName",
    value: function resolveName() {
      var variable = this.tokens.join(' ');
      var tokens = [];
      var parentScope = this.assign({
        tokens: tokens
      });
      var variableScope = this.of({
        name: 'VariableName',
        parent: parentScope,
        value: this.get(variable),
        raw: variable
      });
      LOG_VARS && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));
      return parentScope.pushChild(variableScope);
    }
  }, {
    key: "pushChild",
    value: function pushChild(child) {
      if (!child) {
        return this;
      }
      var parent = this.assign({
        children: [].concat(_toConsumableArray(this.children), [child])
      });
      child.parent = parent;
      return parent;
    }
  }, {
    key: "pushChildren",
    value: function pushChildren(children) {
      var parent = this;
      var _iterator = _createForOfIteratorHelper(children),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          parent = parent.pushChild(child);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return parent;
    }
  }, {
    key: "declareName",
    value: function declareName() {
      if (this.tokens.length === 0) {
        throw Error('no tokens to declare name');
      }
      var variableName = this.tokens.join(' ');
      LOG_VARS && console.log('[%s] declareName <%s>', this.path, variableName);
      return this.assign({
        tokens: []
      }).pushChild(this.of({
        name: 'Name',
        value: variableName
      }));
    }
  }, {
    key: "define",
    value: function define(name, value) {
      if (typeof name !== 'string') {
        LOG_VARS && console.log('[%s] no define <%s=%s>', this.path, name, value);
        return this;
      }
      LOG_VARS && console.log('[%s] define <%s=%s>', this.path, name, value);
      var context = _objectSpread(_objectSpread({}, this.context), {}, _defineProperty({}, name, value));
      return this.assign({
        context: context
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
  }, {
    key: "assign",
    value: function assign() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return Variables.of(_objectSpread(_objectSpread({}, this), options));
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
  }, {
    key: "of",
    value: function of() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultOptions = {
        context: this.context,
        parent: this.parent
      };
      return Variables.of(_objectSpread(_objectSpread({}, defaultOptions), options));
    }
  }], [{
    key: "of",
    value: function of(options) {
      var name = options.name,
        _options$tokens = options.tokens,
        tokens = _options$tokens === void 0 ? [] : _options$tokens,
        _options$children = options.children,
        children = _options$children === void 0 ? [] : _options$children,
        _options$parent = options.parent,
        parent = _options$parent === void 0 ? null : _options$parent,
        _options$context = options.context,
        context = _options$context === void 0 ? {} : _options$context,
        value = options.value,
        raw = options.raw;
      return new Variables({
        name: name,
        tokens: _toConsumableArray(tokens),
        children: _toConsumableArray(children),
        context: _objectSpread({}, context),
        parent: parent,
        value: value,
        raw: raw
      });
    }
  }]);
  return Variables;
}();
/**
 * @param { string } name
 *
 * @return { string } normalizedName
 */
function normalizeContextKey(name) {
  return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
}

/**
 * Wrap children of variables under the given named child.
 *
 * @param { Variables } variables
 * @param { string } name
 * @param { string } code
 * @return { Variables }
 */
function wrap(variables, scopeName, code) {
  var parts = variables.children.filter(function (c) {
    return c.name !== scopeName;
  });
  var children = variables.children.filter(function (c) {
    return c.name === scopeName;
  });
  var namePart = parts[0];
  var valuePart = parts[Math.max(1, parts.length - 1)];
  var name = namePart.computedValue();
  var value = (valuePart === null || valuePart === void 0 ? void 0 : valuePart.computedValue()) || null;
  return variables.assign({
    children: children
  }).enterScope(scopeName).pushChildren(parts).exitScope(code).define(name, value);
}

/**
 * @param { any } context
 *
 * @return { ContextTracker<Variables> }
 */
function trackVariables() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var start = Variables.of({
    context: context
  });
  return new _lr.ContextTracker({
    start: start,
    reduce: function reduce(variables, term, stack, input) {
      if (term === IfExpression) {
        var _variables$children$s = variables.children.slice(-2),
          _variables$children$s2 = _slicedToArray(_variables$children$s, 2),
          thenPart = _variables$children$s2[0],
          elsePart = _variables$children$s2[1];
        variables = variables.assign({
          value: _objectSpread(_objectSpread({}, thenPart === null || thenPart === void 0 ? void 0 : thenPart.computedValue()), elsePart === null || elsePart === void 0 ? void 0 : elsePart.computedValue())
        });
      }
      if (term === List) {
        variables = variables.assign({
          value: variables.children.reduce(function (value, child) {
            return _objectSpread(_objectSpread({}, value), child === null || child === void 0 ? void 0 : child.computedValue());
          }, {})
        });
      }
      if (term === FilterExpression) {
        var _variables$children$s3 = variables.children.slice(-2),
          _variables$children$s4 = _slicedToArray(_variables$children$s3, 2),
          sourcePart = _variables$children$s4[0],
          _ = _variables$children$s4[1];
        variables = variables.assign({
          value: sourcePart === null || sourcePart === void 0 ? void 0 : sourcePart.computedValue()
        });
      }
      if (term === FunctionInvocation) {
        var _variables$children = _toArray(variables.children),
          name = _variables$children[0],
          args = _variables$children.slice(1);

        // preserve type information through `get value(context, key)` utility
        if ((name === null || name === void 0 ? void 0 : name.raw) === 'get value') {
          variables = getContextValue(variables, args);
        }
      }
      var start = contextStarts[term];
      if (start) {
        return variables.enterScope(start);
      }
      var prefixedStart = prefixedContextStarts[term];

      // pull <expression> into new <prefixedStart> context
      if (prefixedStart) {
        var _variables = variables,
          currentChildren = _variables.children,
          currentContext = _variables.context;
        var children = currentChildren.slice(0, -1);
        var lastChild = last(currentChildren);
        var newContext = null;
        if (term === pathExpressionStart) {
          newContext = lastChild === null || lastChild === void 0 ? void 0 : lastChild.computedValue();
        }
        if (term === filterExpressionStart) {
          newContext = _objectSpread(_objectSpread(_objectSpread({}, currentContext), lastChild === null || lastChild === void 0 ? void 0 : lastChild.computedValue()), {}, {
            item: lastChild === null || lastChild === void 0 ? void 0 : lastChild.computedValue()
          });
        }
        return variables.assign({
          children: children
        }).enterScope(prefixedStart).pushChild(lastChild).assign({
          context: newContext || currentContext
        });
      }
      var code = input.read(input.pos, stack.pos);
      var end = contextEnds[term];
      if (end) {
        return variables.exitScope(code);
      }
      if (term === ContextEntry) {
        var parts = variables.children.filter(function (c) {
          return c.name !== 'ContextEntry';
        });
        var _name = parts[0];
        var value = last(parts);
        return wrap(variables, 'ContextEntry', code).assign({
          value: _objectSpread(_objectSpread({}, variables.value), {}, _defineProperty({}, _name.computedValue(), value === null || value === void 0 ? void 0 : value.computedValue()))
        });
      }
      if (term === ForInExpression || term === QuantifiedInExpression) {
        return wrap(variables, 'InExpression', code);
      }

      // define <partial> within ForExpression body
      if (term === forExpressionBodyStart) {
        return variables.define('partial', ValueProducer.of(function (variables) {
          var _last;
          return (_last = last(variables.children)) === null || _last === void 0 ? void 0 : _last.computedValue();
        }));
      }
      if (term === ParameterName) {
        var _name2 = last(variables.children).computedValue();

        // TODO: attach type information
        return variables.define(_name2, 1);
      }

      // pull <expression> into ArithmeticExpression child
      if (term === arithmeticPlusStart || term === arithmeticTimesStart || term === arithmeticExpStart) {
        var _children = variables.children.slice(0, -1);
        var _lastChild = last(variables.children);
        return variables.assign({
          children: _children
        }).enterScope('ArithmeticExpression').pushChild(_lastChild);
      }
      if (term === arithmeticUnaryStart) {
        return variables.enterScope('ArithmeticExpression');
      }
      if (term === Identifier || term === AdditionalIdentifier || term === PropertyIdentifier) {
        return variables.token(code);
      }
      if (term === StringLiteral) {
        return variables.literal(code.replace(/^"|"$/g, ''));
      }
      if (term === BooleanLiteral) {
        return variables.literal(code === 'true' ? true : false);
      }
      if (term === NumericLiteral) {
        return variables.literal(parseFloat(code));
      }
      if (term === nil) {
        return variables.literal(null);
      }
      if (term === VariableName) {
        return variables.resolveName();
      }
      if (term === Name || term === PropertyName) {
        return variables.declareName();
      }
      if (term === expression0 || term === PositiveUnaryTest) {
        if (variables.tokens.length > 0) {
          throw new Error('uncleared name');
        }
      }
      if (term === expression0) {
        var parent = variables;
        while (parent.parent) {
          parent = parent.exitScope(code);
        }
        return parent;
      }
      return variables;
    }
  });
}
var variableTracker = trackVariables({});

// helpers //////////////

function getContextValue(variables, args) {
  if (!args.length) {
    return variables.assign({
      value: null
    });
  }
  if (args[0].name === 'Name') {
    args = extractNamedArgs(args, ['m', 'key']);
  }
  if (args.length !== 2) {
    return variables.assign({
      value: null
    });
  }
  var _args = args,
    _args2 = _slicedToArray(_args, 2),
    context = _args2[0],
    key = _args2[1];
  var keyValue = key === null || key === void 0 ? void 0 : key.computedValue();
  var contextValue = context === null || context === void 0 ? void 0 : context.computedValue();
  if (!contextValue || _typeof(contextValue) !== 'object' || typeof keyValue !== 'string') {
    return variables.assign({
      value: null
    });
  }
  return variables.assign({
    value: [normalizeContextKey(keyValue), keyValue].reduce(function (value, keyValue) {
      if (keyValue in contextValue) {
        return contextValue[keyValue];
      }
      return value;
    }, null)
  });
}
function extractNamedArgs(args, argNames) {
  var context = {};
  for (var i = 0; i < args.length; i += 2) {
    var _args$slice = args.slice(i, i + 2),
      _args$slice2 = _slicedToArray(_args$slice, 2),
      name = _args$slice2[0],
      value = _args$slice2[1];
    context[name.value] = value;
  }
  return argNames.map(function (name) {
    return context[name];
  });
}
function last(arr) {
  return arr[arr.length - 1];
}
var feelHighlighting = (0, _highlight.styleTags)({
  StringLiteral: _highlight.tags.string,
  NumericLiteral: _highlight.tags.number,
  BooleanLiteral: _highlight.tags.bool,
  'AtLiteral!': _highlight.tags.special(_highlight.tags.string),
  CompareOp: _highlight.tags.compareOperator,
  ArithOp: _highlight.tags.arithmeticOperator,
  'for if then else some every satisfies between return': _highlight.tags.controlKeyword,
  'in instance of and or': _highlight.tags.operatorKeyword,
  "function": _highlight.tags.definitionKeyword,
  as: _highlight.tags.keyword,
  'Type/...': _highlight.tags.typeName,
  Wildcard: _highlight.tags.special,
  "null": _highlight.tags["null"],
  LineComment: _highlight.tags.lineComment,
  BlockComment: _highlight.tags.blockComment,
  'VariableName! "?"': _highlight.tags.variableName,
  'DateTimeConstructor! SpecialFunctionName!': _highlight.tags["function"](_highlight.tags.special(_highlight.tags.variableName)),
  'List Interval': _highlight.tags.list,
  Context: _highlight.tags.definition(_highlight.tags.literal),
  'Name!': _highlight.tags.definition(_highlight.tags.variableName),
  'Key/Name! ContextEntryType/Name!': _highlight.tags.definition(_highlight.tags.propertyName),
  'PathExpression/VariableName!': _highlight.tags["function"](_highlight.tags.propertyName),
  'FormalParameter/ParameterName!': _highlight.tags["function"](_highlight.tags.definition(_highlight.tags.variableName)),
  '( )': _highlight.tags.paren,
  '[ ]': _highlight.tags.squareBracket,
  '{ }': _highlight.tags.brace,
  '.': _highlight.tags.derefOperator,
  ', ;': _highlight.tags.separator,
  '..': _highlight.tags.punctuation
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
var spec_identifier = {
  __proto__: null,
  "for": 10,
  "in": 30,
  "return": 34,
  "if": 38,
  then: 40,
  "else": 42,
  some: 46,
  every: 48,
  satisfies: 55,
  or: 58,
  and: 62,
  between: 70,
  instance: 86,
  of: 89,
  days: 99,
  time: 101,
  duration: 103,
  years: 105,
  months: 107,
  date: 109,
  list: 115,
  context: 121,
  "function": 128,
  "null": 154,
  "true": 324,
  "false": 324,
  "?": 168,
  external: 184,
  not: 207
};
var parser = _lr.LRParser.deserialize({
  version: 14,
  states: "IWO`QYOOO$gQYOOOOQU'#Ce'#CeO$qQYO'#C`O%zQ^O'#FOOOQQ'#Fd'#FdO'dQYO'#FdO`QYO'#DUOOQU'#Em'#EmO)QQ^O'#D]OOQO'#Fk'#FkO,PQWO'#DuOOQU'#D|'#D|OOQU'#D}'#D}OOQU'#EO'#EOO,UOWO'#ERO,PQWO'#EPOOQU'#EP'#EPOOQU'#Fq'#FqOOQU'#Fo'#FoOOQQ'#Fv'#FvO.yQYO'#FvO0wQYO'#FvOOQU'#ET'#ETO2sQYO'#EVOOQU'#FQ'#FQO4UQ^O'#FQO5hQYO'#EWO5rQWO'#EXOOQP'#GP'#GPO5wQXO'#E`OOQU'#Fz'#FzOOQU'#FP'#FPOOQQ'#Eh'#EhQ`QYOOOOQQ'#FR'#FROOQQ'#F['#F[O2sQYO'#CnOOQQ'#F]'#F]O$qQYO'#CrO6SQYO'#DvOOQU'#Fp'#FpO6XQYO'#EQOOQO'#EQ'#EQO2sQYO'#EUO`QYO'#ETOOQO'#F}'#F}O7bQYO'#DQO8UQWO'#F`OOQO'#DS'#DSO8aQYO'#FdQOQWOOO8hQWOOO9[QYO'#CdO9iQYO'#FTOOQQ'#Cc'#CcO9nQYO'#FSOOQQ'#Cb'#CbO9vQYO,58zO`QYO,59hOOQQ'#Fa'#FaOOQQ'#Fb'#FbOOQQ'#Fc'#FcO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#Fi'#FiO$qQYO,5:]OOQQ'#Fj'#FjO2sQYO,5:_OOQQ,5;j,5;jO`QYO,59dO`QYO,59fO2sQYO,59hO;fQYO,59hO;mQYO,59rOOQU,5:h,5:hO;rQ^O,59pOOQU-E8k-E8kO>qQYO'#FlOOQU,5:a,5:aOOQU,5:m,5:mOOQU,5:k,5:kO>{QYO,5:qOOQU,5;l,5;lO?SQYO'#FnO?aQWO,5:rO?fQYO,5:sOOQP'#Ed'#EdO@YQXO'#EcOOQO'#Eb'#EbO@aQWO'#EaO@fQWO'#GQO@nQWO,5:zOOQQ-E8f-E8fO@sQYO,59YO9iQYO'#F_OOQQ'#Cv'#CvO@zQYO'#F^OOQQ'#Cu'#CuOASQYO,59^OAXQYO,5:bOA^QYO,5:lOAcQYO,5:pOAjQ^O,5:oO2sQYO'#ElOCSQWO,5;zO2sQYOOOOQR'#Cf'#CfOOQQ'#Ei'#EiOCyQYO,59OO2sQYO,5;oOOQQ'#FW'#FWO$qQYO'#EjODZQYO,5;nO`QYO1G.fOOQQ'#FZ'#FZOEjQ^O1G/SOI]Q^O1G/[OIgQ^O1G/[OK_Q^O1G/[OOQU1G/w1G/wOLtQYO1G/yOMyQ^O1G/OO!!aQ^O1G/QO!$}QYO1G/SO!%UQYO1G/SOOQU1G/S1G/SO!&tQYO1G/^O!'`Q^O'#CdOOQO'#Dy'#DyO!(rQWO'#DxO!(wQWO'#FmOOQO'#Dw'#DwOOQO'#Dz'#DzO!)PQWO,5<WOOQU'#Fy'#FyOOQU1G0]1G0]O2sQYO'#ErO!)UQWO,5<YOOQU'#F|'#F|OOQU1G0^1G0^O!)aQWO'#EZO!)lQWO'#GOOOQO'#EY'#EYO!)tQWO1G0_OOQP'#Et'#EtO!)yQXO,5:}O2sQYO,5:{O!*QQXO'#EuO!*YQWO,5<lOOQU1G0f1G0fO2sQYO1G.tO2sQYO,5;yO$qQYO'#EkO!*bQYO,5;xO`QYO1G.xO!*jQYO1G/|OOQO1G0W1G0WO2sQYO1G0[OOQO,5;W,5;WOOQO-E8j-E8jO!*oQWOOOOQQ-E8g-E8gO!*tQYO'#ClOOQQ1G1Z1G1ZOOQQ,5;U,5;UOOQQ-E8h-E8hO!+RQ^O7+$QOOQU7+%e7+%eO`QYO7+$nO!,kQWO7+$nO!,pQ^O'#D[OOQU'#DZ'#DZO!/oQYO'#D^O!/tQYO'#D^O!/yQYO'#D^O!0OQ`O'#DfO!0TQ`O'#DiO!0YQ`O'#DmOOQU7+$x7+$xO2sQYO,5:dO$qQYO'#EqO!0_QWO,5<XOOQU1G1r1G1rO!0gQYO,5;^OOQO-E8p-E8pO!&tQYO,5:uO$qQYO'#EsO!0tQWO,5<jO!0|QYO7+%yOOQP-E8r-E8rO!1TQYO1G0gOOQO,5;a,5;aOOQO-E8s-E8sO!1_QYO7+$`O!1fQYO1G1eOOQQ,5;V,5;VOOQQ-E8i-E8iO!1pQ^O7+$dOOQO7+%h7+%hO!4WQYO7+%vO2sQYO,59WO!5lQ^O<<HYOOQU<<HY<<HYO$qQYO'#EnO!7OQ^O,59vO!9}QYO,59xO!:SQYO,59xO!:XQYO,59xO!:^QYO,5:QO$qQYO,5:TO!:xQbO,5:XO!;PQYO1G0OOOQO,5;],5;]OOQO-E8o-E8oOOQO1G0a1G0aOOQO,5;_,5;_OOQO-E8q-E8qO!;ZQ^O'#E]OOQU<<Ie<<IeO`QYO<<IeO`QYO<<GzO!<sQ^O'#FjOOQU'#Fw'#FwOOQU<<Ib<<IbO!?rQYO1G.rOOQU,5;Y,5;YOOQU-E8l-E8lO!?|QYO1G/dOOQU1G/d1G/dO!@RQbO'#D]O!@dQ`O'#D[O!@oQ`O1G/lO!@tQWO'#DlO!@yQ`O'#FeOOQO'#Dk'#DkO!ARQ`O1G/oOOQO'#Dp'#DpO!AWQ`O'#FgOOQO'#Do'#DoO!A`Q`O1G/sOOQUAN?PAN?PO!AeQ^OAN=fOOQU7+%O7+%OO!B}Q`O,59vOOQU7+%W7+%WO!:^QYO,5:WO$qQYO'#EoO!CYQ`O,5<POOQU7+%Z7+%ZO!:^QYO'#EpO!CbQ`O,5<RO!CjQ`O7+%_OOQO1G/r1G/rOOQO,5;Z,5;ZOOQO-E8m-E8mOOQO,5;[,5;[OOQO-E8n-E8nO!&tQYO<<HyOOQUAN>eAN>eO!CoQ^O'#FQO2sQYO'#ETO2sQYO,59hO2sQYO,59pO2sQYO,59pO2sQYO,59pO2sQYO,59dO2sQYO,59fO!EvQYO,59hO!E}QYO,5:oO2sQYO1G.fO!FqQYO1G/SO!HxQYO1G/[O!ISQYO1G/[O!JXQYO1G/OO!KyQYO1G/QO2sQYO1G.xO!LsQYO7+$QO2sQYO7+$nO!MgQYO7+%yO!MqQYO7+$dO!NeQYO<<HYO$qQYO'#EnO# RQYO'#E]O2sQYO<<IeO2sQYO<<GzO# uQYOAN=fO!:^QYO<<HyO2sQYO'#DUO#!iQ^O'#DQO9vQYO,58zO#$RQYO,59^O#$WQYO1G/SO#$_QWO1G0_O#$dQYO7+$`O#$kQ`O7+%_O$qQYO'#C`O$qQYO'#CrO2sQYO,59hO?fQYO,5:sO2sQYO1G.tO#$pQ`O1G/sO#$uQWO'#EXO#$zQYO,59YO!:xQbO,5:XO2sQYO'#CnO#%RQ`O'#Dm",
  stateData: "#%W~O#pOS#qOSPOSQOS~OTsOZUO[TOctOgvOhvOr}OueO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~OTsO[TOctOgvOhvOr&pOueO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~OZ!SO#Z!UO~P!|O#lQO#mQO~OZ!^O[!^O]!_O^!_O_!lOm!iOo!jOq!]Or!]Os!kOy!`O{!mO!h!fO#x!dOu$_X~O#n!hO$u!hOT#rXc#rXg#rXh#rX!S#rX!T#rX!U#rX!W#rX!b#rX!f#rX!o#rX!v#rX#R#rX#j#rX#l#rX#m#rX$f#rX$g#rX$h#rX$i#rX~P$yO$f!nOT$WXZ$WX[$WXc$WXg$WXh$WXr$WXu$WX!S$WX!T$WX!U$WX!W$WX!b$WX!f$WX!h$WX!o$WX!v$WX#R$WX#l$WX#m$WX$g$WX$h$WX$i$WX~O#lQO#mQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!b!PX!f!PX!h!PX!o!PX!v!PX#R!PX#j!PX#n!PX#x!PX$f!PX$g!PX$h!PX$i!PX$u!PX#|!PXw!PXd!PX#{!PXa!PX#Q!PXe!PXk!PX~Ou!qO~O$g]O~OT$jXT$lXc$jXc$lXg$jXg$lXh$jXh$lXr$jXr$lXu$jXu$lX!S$jX!S$lX!T$jX!T$lX!U$jX!U$lX!W$jX!W$lX!b$jX!b$lX!f$jX!f$lX!h$jX!h$lX!o$jX!o$lX!v$jX!v$lX#R$jX#R$lX$f$jX$f$lX$g$jX$g$lX$h$jX$h$lX$i$jX$i$lX~OZ$jXZ$lX[$jX[$lX#l$jX#l$lX#m$jX#m$lX~P,ZOT$jXc$jXg$jXh$jXr$jXu$jX!S$jX!T$jX!U$jX!W$jX!b$jX!f$jX!h$jX!o$jX!v$jX#R$jX$f$jX$g$jX$h$jX$i$jX~OT$oXZ$jXZ$oX[$jX[$oXc$oXg$oXh$oXr$oXu$oX!S$oX!T$oX!U$oX!W$oX!b$oX!f$oX!h$oX!o$oX!v$oX#R$oX#l$jX#l$oX#m$jX#m$oX$f$oX$g$oX$h$oX$i$oX~P/gOZUO~P!|O#n!vOZ#tX[#tX]#tX^#tX_#tXm#tXo#tXq#tXr#tXs#tXu#tXy#tX{#tX!f#tX!h#tX#j#tX#x#tX~OT#tXc#tXg#tXh#tX!S#tX!T#tX!U#tX!W#tX!b#tX!o#tX!v#tX#R#tX#l#tX#m#tX#n#tX$f#tX$g#tX$h#tX$i#tX$u#tX~P2zOZUO!f$bP~P!|Ou!yO~O#k!zO$g]O#Q$tP~Oo#XO~Oo#YOu!tX~OZ!^O[!^O]!_O^!_O_&wOm&uOo&vOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~O#jtX#|tXwtX!ftXdtX#{tXatX#QtXetXktX~P6aO#|#]O#j$SXw$SX~O#j#YX~P'dOu#_O~OZ#`O[#`O]#`O^#`O#lQO#mQO#x#`O#y#`O$YWX~O_WXwWX#|WX~P8mO_#dO~O#|#eOa#vX~Oa#hO~OTsOZUO[TOctOgvOhvOr}O!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#rO~P9{O|#tO~O{!mO!h!fO#x!dOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau$_Xyxa!Sxa!Txa!Uxa!Wxa!bxa!fxa!oxa!vxa#Rxa#jxa#lxa#mxa#nxa$fxa$gxa$hxa$ixa$uxa#|xawxadxa#{xaaxa#Qxaexakxa~OZUOw$bP~P!|Ow#|O~P6aO#|$OO!f$bXw$bX~P6aO!f$QO~O#lQO#mQOw$rP~OZ#`O[#`O]#`O^#`O#k!zO#x#`O#y#`O~O$Y#VX~P?qO$Y$YO~O#|$ZO#Q$tX~O#Q$]O~Od$^O~P6aO#|$`Ok$QX~Ok$bO~O!V$cO~O!S$dO~O#{$eO~P6aOT!wac!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$u!wa~P$yO#|#]O#j$Saw$Sa~OZ#`O[#`O]#`O^#`O#lQO#mQO#x#`O#y#`O~O_Wa$YWawWa#|Wa~PC_O#|#eOa#va~OZ!^O[!^O]!_O^!_Oy!`O{!mO!h!fO#x!dO_pimpiopiqpirpispiu$_X!fpi#jpi~OTpicpigpihpi!Spi!Tpi!Upi!Wpi!bpi!opi!vpi#Rpi#lpi#mpi#npi$fpi$gpi$hpi$ipi$upi~PDcOy!`O{!mO!h!fO#x!dOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$uxi~O]!_O^!_O~PF|O]xi^xi~PF|O{!mO!h!fO#x!dOZxi[xi]xi^xi_ximxioxiqxirxisxiu$_X!fxi#jxi#|xiwxidxi#{xiaxi#Qxiexikxi~OTxicxigxihxiyxi!Sxi!Txi!Uxi!Wxi!bxi!oxi!vxi#Rxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$uxi~PIqO!f$oO~P6aOZ!^O[!^O]!_O^!_O_!lOo!jOq!]Or!]Os!kOy!`O{!mO!h!fO#x!dOu$_X~OTlicliglihlimli!Sli!Tli!Uli!Wli!bli!fli!oli!vli#Rli#jli#lli#mli#nli$fli$gli$hli$ili$uli~PL{OZ!^O[!^O]!_O^!_O_!lOq!]Or!]Os!kOy!`O{!mO!h!fO#x!dOu$_X~OTnicnignihnimnioni!Sni!Tni!Uni!Wni!bni!fni!oni!vni#Rni#jni#lni#mni#nni$fni$gni$hni$ini$uni~P! fOZ!^O[!^O]!_O^!_O_&wOm&uOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~Oo$pO~P!$POTsOZUO[TOctOgvOhvOr&pOueO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~P,ZO!R$tO!U$uO!W$vO!Z$wO!^$xO!b$yO#lQO#mQO~OZ#aX[#aX]#aX^#aX_#aXm#aXo#aXq#aXr#aXs#aXu#aXw#aXy#aX{#aX!h#aX#l#aX#m#aX#n#aX#x#aX#|#aX~P8mO$Y${O~O#|$|Ow$aX~Ow%OO~O#|$OO!f$baw$ba~O$Y%ROw!}X#|!}X~O#|%SOw$rX~Ow%UO~O$Y#Va~P?qO#k!zO$g]O~O#|$ZO#Q$ta~O#|$`Ok$Qa~O!T%`O~Ow!TO~O#{%bOa`X#|`X~P6aOTSqcSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$uSq~P$yOw%dO~O#x%eOT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!b!OX!f!OX!h!OX!o!OX!v!OX#R!OX#j!OX#l!OX#m!OX#n!OX$f!OX$g!OX$h!OX$i!OX$u!OX#|!OXw!OXd!OX#{!OXa!OX#Q!OXe!OXk!OX~Oo%gO~Oo%hO~Oo%iO~O![%jO~O![%kO~O![%lO~O#|$|Ow$aa~O!f#fa#|#faw#fa~P6aO#|%SOw$ra~O#O%uO~P`O#Q#Ti#|#Ti~P6aOe%vO~P6aOk$Ri#|$Ri~P6aOTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ufq~P$yOZ!^O[!^O]!_O^!_O_&wOm&uOo&vOq&qOr&qOs'gOy!`O{!mO#x!dOu$_X~Ow%xO!f%xO!h%wO~P!3YOZ!^O[!^O]!_O^!_Oy!`O{!mO!h!fO#x!dO_pympyopyqpyrpyspyu$_X!fpy#jpy~OTpycpygpyhpy!Spy!Tpy!Upy!Wpy!bpy!opy!vpy#Rpy#lpy#mpy#npy$fpy$gpy$hpy$ipy$upy~P!4eO#x%eOT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!b!Oa!f!Oa!h!Oa!o!Oa!v!Oa#R!Oa#j!Oa#l!Oa#m!Oa#n!Oa$f!Oa$g!Oa$h!Oa$i!Oa$u!Oa#|!Oaw!Oad!Oa#{!Oaa!Oa#Q!Oae!Oak!Oa~O!S%}O~O!V%}O~O!S&OO~O!R$tO!U$uO!W$vO!Z$wO!^$xO!b'oO#lQO#mQO~O!X$ZP~P!:^Ow!li#|!li~P6aOT#PXc#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$u#PX~P$yOT$^XZ$^X[$^X]$kX^$kX_$kXc$^Xg$^Xh$^Xm$kXo$kXq$kXr$^Xs$kXu$^Xy$kX{$kX!S$^X!T$^X!U$^X!W$^X!b$^X!f$^X!h$^X!o$^X!v$^X#R$^X#j$kX#l$^X#m$^X#n$kX#x$kX$f$^X$g$^X$h$^X$i$^X$u$kX#|$kXw$kXd$kX#{$kXa$kX#Q$kXe$kXk$kX~Oa`i#|`i~P6aO!T&^O~O#lQO#mQO!X!PX#x!PX#|!PX~O#x'VO!X!OX#|!OX~O!X&`O~O$Y&aO~O#|&bO!X$XX~O!X&dO~O#|&eO!X$ZX~O!X&gO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!bb!R!fb!R!ob!R!vb!R#Rb!R#jb!R#lb!R#mb!R#nb!R$fb!R$gb!R$hb!R$ib!R$ub!R~P$yO#x'VO!X!Oa#|!Oa~O#|&bO!X$Xa~O#|&eO!X$Za~O$[&mO~O#|#tXw#tXd#tX#{#tXa#tX#Q#tXe#tXk#tX~P2zOTsOZUO[TOctOgvOhvOr&pO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#rO~P!D]O#j!wa#|!waw!wa!f!wad!wa#{!waa!wa#Q!wae!wak!wa~P6aO#|piwpidpi#{piapi#Qpiepikpi~PDcOy!`O{!mO!h!fO#x!dOZxi[xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi!fxidxi#{xiaxi#Qxiexikxi~O]!_O^!_O~P!G_Oy!`O~PIqOZ!^O[!^O]!_O^!_O_&wOo&vOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~Omli#jli#|liwli!flidli#{liali#Qlielikli~P!IZOZ!^O[!^O]!_O^!_O_&wOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~Omnioni#jni#|niwni!fnidni#{niani#Qnienikni~P!KOO#jSq#|SqwSq!fSqdSq#{SqaSq#QSqeSqkSq~P6aOZUO#O'XO~P!|O#jfq#|fqwfq!ffqdfq#{fqafq#Qfqefqkfq~P6aO#|pywpydpy#{pyapy#Qpyepykpy~P!4eO#j#PX#|#PXw#PX!f#PXd#PX#{#PXa#PX#Q#PXe#PXk#PX~P6aO#jb!R#|b!Rwb!R!fb!Rdb!R#{b!Rab!R#Qb!Reb!Rkb!R~P6aOTtXctXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$utX~P$yOk'PO~Oo'RO~P!$POw'SO~Oe'YO~P6aO$['[O~O!X'dO~Ou'hO~Od'iO~P6aO!['mO~O",
  "goto": "!$f$uPPPP$vP&Q&W&_&t(sPPPPP(|P$vPPP$vPP)P)VP$vP$vP$vPPP)^P)jP$vP$vPP)s*Y*e*YPPPPPPP*YPP*YP,V,Y*YP,`,f$vP$vP$v,m-w-z.Q-wP.Z/e.Z.Z0v2QP$v3[$v4f4f5p5vP5}PP4f6V6]0r6aP6iP6l6r6y7P7V7]8y9T9Z9a9g9m9s9yPPPPPPPP:P:T=X>c?o?sPP?xPP@O@UAbBnBrBwB|CxDvEvGSPGVPGZHZIZJeJkJn$vJtJtPPPPLOMYM]Ng=XNj! t! w!#T!#X!$c#aiOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ![RR'_'eS!YR'eR$l#eU!WR#e'eU#Sw$`'fY#v!q!y$|%S'hT&S%k&b#zWOPVXhkru|}!]!a!b!c!e!g!i!j!k!l#]#_#c#g#r#t$O$Y$^$_$b$e$p${%R%U%b%e%j%l%u%v&P&a&e&m&p&q&r&s&t&u&v&w&y'P'R'S'V'X'Y'[']'g'i'm'nh!VRw!y#e$`$|%S%k&b'e'f'hU#a!V#b#uR#u!qU#a!V#b#uT$W!{$XR$k#cQ#WwR'`'fS#Uw'fR%]$`U!QP#_#rS#s!l&wR$f#]Q!TPQ$h#_R$q#rQ$z#tQ%p%RQ&R%jU&W%l&e'mQ&h&aT&n&m'[c$s#t%R%j%l&a&e&m'['mrjOVr}!]!a!b!c!i!j!l#g$b$p%U%u%vQ#m!eU$r#t%R&mS%{%e'V[&Q%j%l&a&e'['m!m&oPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR&V%kQ&T%kR&i&bQ&Z%lR'j'mS&X%l'mR&k&e#aYOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR#{!qQ#x!qR%n$|S#w!q$|V$S!y%S'h#abOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#`bOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ!s_T!|n$Z#a`OPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#aaOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#agOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#aoOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ$V!yR'b'hS$T!y'hR%q%SS%t%U'ST&[%u'XQ#OnR%X$ZT!}n$ZS!{n$ZT$W!{$XR!TPQrOR#QrS#b!V#uR$i#bQ#f!YR$m#fQ$a#UR%^$aQ#^!QR$g#^#jXOPVhkru|}!]!a!b!c!e!g!i!j!k!l!q#]#_#c#g#r#t$O$Y$^$_$b$e$p${%R%U%b%e%u%v&m&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nS!pX&P_&P%j%l&a&e'V'['mQ%f$rS%|%f&_R&_&QQ&c&TR&j&cQ&f&XR&l&fQ$}#xR%o$}Q$P!wR%Q$PQ%T$TR%r%TQ$X!{R%V$XQ$[#OR%Y$[TqOrSSOrY!PP#]#_#r&wS!oV']Q!uhS!wk!qQ#RuQ#Z|Q#[}Q#i!]Q#j!aQ#k!bS#l!c&tQ#n!gQ#o!iQ#p!jQ#q!kQ$j#cQ$n#gQ%P$OQ%W$YQ%Z$^Q%[$_Q%_$bQ%a$eQ%c$pQ%m${S%s%U%uQ%z%bQ&]%vQ&x&pQ&z&qQ&{&rQ&|&sQ&}&uQ'O&vQ'Q&yQ'T'PQ'U'RS'W'S'XQ'Z'YQ'^!lQ'a'gQ'c'iR'l'n#apOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nrROVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'ePhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nT!ZR'eV!XR#e'eQ#c!WR$_#SQ#g![R&y'_ruOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'nPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nrwOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'fPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nT#Vw'fV#Tw$`'fV!RP#_#rf!aS#[#i#o#p$n%_%c%s&]'^!X&r!P!u!w#R#Z#n#q$j%P%W%Z%[%a%m%z&x&z&}'O'Q'T'U'W'Z'a'c'lh!bS#[#i#j#o#p$n%_%c%s&]'^!Z&s!P!u!w#R#Z#n#q$j%P%W%Z%[%a%m%z&x&z&{&}'O'Q'T'U'W'Z'a'c'lj!cS#[#i#j#k#o#p$n%_%c%s&]'^!]&t!P!u!w#R#Z#n#q$j%P%W%Z%[%a%m%z&x&z&{&|&}'O'Q'T'U'W'Z'a'c'lrVOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m']Phku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR&U%kT&Y%l'm!{!eS!P!o!u!w#R#Z#[#i#j#k#l#n#o#p#q$j$n%P%W%Z%[%_%a%c%m%s%z&]&x&z&{&|&}'O'Q'T'U'W'Z'^'a'c'l!{!gS!P!o!u!w#R#Z#[#i#j#k#l#n#o#p#q$j$n%P%W%Z%[%_%a%c%m%s%z&]&x&z&{&|&}'O'Q'T'U'W'Z'^'a'c'l#aZOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ!rZR!t`R#y!qQ!xkR#z!q#acOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#a|OPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR%y%a#ahOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR#}!u#akOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR$R!xrlOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'kPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nT$U!y'h#anOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR#Pn",
  nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
  maxTerm: 175,
  context: variableTracker,
  nodeProps: [["group", -17, 4, 18, 22, 28, 30, 32, 40, 42, 67, 69, 71, 84, 85, 87, 88, 89, 96, "Expression", 47, "Expression Expression", -5, 77, 78, 79, 80, 81, "Expression Literal"], ["closedBy", 37, ")", 70, "]", 95, "}"], ["openedBy", 39, "(", 68, "[", 94, "{"]],
  propSources: [feelHighlighting],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 14,
  tokenData: "+l~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx&cxy&hyz&mz{&r{|'P|}'U}!O'Z!O!P'h!P!Q(Q!Q![){![!]*^!]!^*c!^!_*h!_!`$f!`!a*w!b!c+R!}#O+W#P#Q+]#Q#R&z#o#p+b#q#r+g$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY#p~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O#q~~$cP!_!`$f~$kOq~~$pW$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&]<%lO$k~%_O$g~~%bRO;'S$k;'S;=`%k;=`O$k~%pX$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&];=`<%l$k<%lO$k~&`P;=`<%l$k~&hO#y~~&mOu~~&rOw~~&wP^~z{&z~'POy~~'UO[~~'ZO#|~R'`PZP!`!a'cQ'hO$[Q~'mQ#x~!O!P's!Q!['x~'xO#{~~'}P$f~!Q!['x~(VQ]~z{(]!P!Q)d~(`TOz(]z{(o{;'S(];'S;=`)^<%lO(]~(rVOz(]z{(o{!P(]!P!Q)X!Q;'S(];'S;=`)^<%lO(]~)^OQ~~)aP;=`<%l(]~)iSP~OY)dZ;'S)d;'S;=`)u<%lO)d~)xP;=`<%l)d~*QQ$f~!O!P*W!Q![){~*ZP!Q!['x~*cO$Y~~*hO$u~R*oP![QrP!_!`*rP*wOrPR+OP!XQrP!_!`*r~+WO$i~~+]O!h~~+bO!f~~+gO#R~~+lO#Q~",
  tokenizers: [propertyIdentifiers, identifiers, insertSemicolon, 0, 1],
  topRules: {
    "Expressions": [0, 3],
    "UnaryTests": [1, 101]
  },
  dynamicPrecedences: {
    "30": -1,
    "71": -1,
    "73": -1,
    "126": -1
  },
  specialized: [{
    term: 120,
    get: function get(value) {
      return spec_identifier[value] || -1;
    }
  }],
  tokenPrec: 0
});
exports.parser = parser;

}).call(this)}).call(this,require('_process'))
},{"@lezer/highlight":23,"@lezer/lr":24,"_process":4}],43:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evaluate = evaluate;
exports.parseExpressions = parseExpressions;
exports.parseUnaryTests = parseUnaryTests;
exports.unaryTest = unaryTest;
var _luxon = require("luxon");
var _lezerFeel = require("lezer-feel");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function isContext(e) {
  return Object.getPrototypeOf(e) === Object.prototype;
}
function isDateTime(obj) {
  return _luxon.DateTime.isDateTime(obj);
}
function isDuration(obj) {
  return _luxon.Duration.isDuration(obj);
}
function isArray(e) {
  return Array.isArray(e);
}
function isBoolean(e) {
  return typeof e === 'boolean';
}
function getType(e) {
  if (e === null || e === undefined) {
    return 'nil';
  }
  if (isBoolean(e)) {
    return 'boolean';
  }
  if (isNumber(e)) {
    return 'number';
  }
  if (isString(e)) {
    return 'string';
  }
  if (isContext(e)) {
    return 'context';
  }
  if (isArray(e)) {
    return 'list';
  }
  if (isDuration(e)) {
    return 'duration';
  }
  if (isDateTime(e)) {
    if (e.year === 1900 && e.month === 1 && e.day === 1) {
      return 'time';
    }
    if (e.hour === 0 && e.minute === 0 && e.second === 0 && e.millisecond === 0 && e.zone === _luxon.FixedOffsetZone.utcInstance) {
      return 'date';
    }
    return 'date time';
  }
  if (e instanceof Range) {
    return 'range';
  }
  if (e instanceof FunctionWrapper) {
    return 'function';
  }
  return 'literal';
}
function isType(el, type) {
  return getType(el) === type;
}
function typeCast(obj, type) {
  if (isDateTime(obj)) {
    if (type === 'time') {
      return obj.set({
        year: 1900,
        month: 1,
        day: 1
      });
    }
    if (type === 'date') {
      return obj.setZone('utc', {
        keepLocalTime: true
      }).startOf('day');
    }
    if (type === 'date time') {
      return obj;
    }
  }
  return null;
}
var Range = /*#__PURE__*/_createClass(function Range(props) {
  _classCallCheck(this, Range);
  Object.assign(this, props);
});
function isNumber(obj) {
  return typeof obj === 'number';
}
function isString(obj) {
  return typeof obj === 'string';
}
function equals(a, b) {
  if (a === null && b !== null || a !== null && b === null) {
    return false;
  }
  if (isArray(a) && a.length < 2) {
    a = a[0];
  }
  if (isArray(b) && b.length < 2) {
    b = b[0];
  }
  var aType = getType(a);
  var bType = getType(b);
  if (aType !== bType) {
    return null;
  }
  if (aType === 'nil') {
    return true;
  }
  if (aType === 'list') {
    if (a.length !== b.length) {
      return false;
    }
    return a.every(function (element, idx) {
      return equals(element, b[idx]);
    });
  }
  if (aType === 'date time' || aType === 'time' || aType === 'date') {
    return a.toUTC().valueOf() === b.toUTC().valueOf();
  }
  if (aType === 'duration') {
    // years and months duration -> months
    if (Math.abs(a.as('days')) > 180) {
      return Math.trunc(a.minus(b).as('months')) === 0;
    }
    // days and time duration -> seconds
    else {
      return Math.trunc(a.minus(b).as('seconds')) === 0;
    }
  }
  if (aType === 'context') {
    var aEntries = Object.entries(a);
    var bEntries = Object.entries(b);
    if (aEntries.length !== bEntries.length) {
      return false;
    }
    return aEntries.every(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      return key in b && equals(value, b[key]);
    });
  }
  if (aType === 'range') {
    return [[a.start, b.start], [a.end, b.end], [a['start included'], b['start included']], [a['end included'], b['end included']]].every(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        a = _ref4[0],
        b = _ref4[1];
      return a === b;
    });
  }
  if (a == b) {
    return true;
  }
  return aType === bType ? false : null;
}
var FunctionWrapper = /*#__PURE__*/function () {
  function FunctionWrapper(fn, parameterNames) {
    _classCallCheck(this, FunctionWrapper);
    this.fn = fn;
    this.parameterNames = parameterNames;
  }
  _createClass(FunctionWrapper, [{
    key: "invoke",
    value: function invoke(contextOrArgs) {
      var _this$fn;
      var params;
      if (isArray(contextOrArgs)) {
        params = contextOrArgs;
      } else {
        params = this.parameterNames.map(function (n) {
          return contextOrArgs[n];
        });
      }
      return (_this$fn = this.fn).call.apply(_this$fn, [null].concat(_toConsumableArray(params)));
    }
  }]);
  return FunctionWrapper;
}();
function parseParameterNames(fn) {
  if (Array.isArray(fn.$args)) {
    return fn.$args;
  }
  var code = fn.toString();
  var match = /^(?:[^(]*\s*)?\(([^)]+)?\)/.exec(code);
  if (!match) {
    throw new Error('failed to parse params: ' + code);
  }
  var _match = _slicedToArray(match, 2),
    _ = _match[0],
    params = _match[1];
  if (!params) {
    return [];
  }
  return params.split(',').map(function (p) {
    return p.trim();
  });
}
function notImplemented(thing) {
  return new Error("not implemented: ".concat(thing));
}
/**
 * @param {string} name
 * @param {Record<string, any>} context
 *
 * @return {any}
 */
function getFromContext(name, context) {
  if (['nil', 'boolean', 'number', 'string'].includes(getType(context))) {
    return null;
  }
  if (name in context) {
    return context[name];
  }
  var normalizedName = (0, _lezerFeel.normalizeContextKey)(name);
  if (normalizedName in context) {
    return context[normalizedName];
  }
  var entry = Object.entries(context).find(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
      key = _ref6[0];
    return normalizedName === (0, _lezerFeel.normalizeContextKey)(key);
  });
  if (entry) {
    return entry[1];
  }
  return null;
}
function duration(opts) {
  if (typeof opts === 'number') {
    return _luxon.Duration.fromMillis(opts);
  }
  return _luxon.Duration.fromISO(opts);
}
function date() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var zone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (time) {
    if (str) {
      throw new Error('<str> and <time> provided');
    }
    return date("1900-01-01T".concat(time));
  }
  if (typeof str === 'string') {
    if (str.startsWith('-')) {
      throw notImplemented('negative date');
    }
    if (!str.includes('T')) {
      // raw dates are in UTC time zone
      return date(str + 'T00:00:00.000Z');
    }
    if (str.includes('@')) {
      if (zone) {
        throw new Error('<zone> already provided');
      }
      var _str$split = str.split('@'),
        _str$split2 = _slicedToArray(_str$split, 2),
        datePart = _str$split2[0],
        zonePart = _str$split2[1];
      return date(datePart, null, _luxon.Info.normalizeZone(zonePart));
    }
    return _luxon.DateTime.fromISO(str.toUpperCase(), {
      setZone: true,
      zone: zone
    });
  }
  return _luxon.DateTime.now();
}

// 10.3.4 Built-in functions
var builtins = {
  // 10.3.4.1 Conversion functions
  'number': function number() {
    throw notImplemented('number');
  },
  'string': fn(function (from) {
    if (arguments.length !== 1) {
      return null;
    }
    return toString(from);
  }, ['any']),
  // date(from) => date string
  // date(from) => date and time
  // date(year, month, day)
  'date': fn(function (year, month, day, from) {
    if (!from && !isNumber(year)) {
      from = year;
      year = null;
    }
    var d;
    if (isString(from)) {
      d = date(from);
    }
    if (isDateTime(from)) {
      d = from;
    }
    if (year) {
      d = date().setZone('utc').set({
        year: year,
        month: month,
        day: day
      });
    }
    return d && ifValid(d.setZone('utc').startOf('day')) || null;
  }, ['any?', 'number?', 'number?', 'any?']),
  // date and time(from) => date time string
  // date and time(date, time)
  'date and time': fn(function (d, time, from) {
    var dt;
    if (isDateTime(d) && isDateTime(time)) {
      dt = time.set({
        year: d.year,
        month: d.month,
        day: d.day
      });
    }
    if (isString(d)) {
      from = d;
      d = null;
    }
    if (isString(from)) {
      dt = date(from);
    }
    return dt && ifValid(dt) || null;
  }, ['any?', 'time?', 'string?'], ['date', 'time', 'from']),
  // time(from) => time string
  // time(from) => time, date and time
  // time(hour, minute, second, offset?) => ...
  'time': fn(function (hour, minute, second, offset, from) {
    var t;
    if (offset) {
      throw notImplemented('time(..., offset)');
    }
    if (isString(hour) || isDateTime(hour)) {
      from = hour;
      hour = null;
    }
    if (isString(from)) {
      t = date(null, from);
    }
    if (isDateTime(from)) {
      t = from.set({
        year: 1900,
        month: 1,
        day: 1
      });
    }
    if (isNumber(hour)) {
      // TODO: support offset = days and time duration
      t = date().set({
        hour: hour,
        minute: minute,
        second: second
      }).set({
        year: 1900,
        month: 1,
        day: 1,
        millisecond: 0
      });
    }
    return t && ifValid(t) || null;
  }, ['any?', 'number?', 'number?', 'any?', 'any?']),
  'duration': fn(function (from) {
    return ifValid(duration(from));
  }, ['string']),
  'years and months duration': fn(function (from, to) {
    return ifValid(to.diff(from, ['years', 'months']));
  }, ['date', 'date']),
  '@': fn(function (string) {
    var t;
    if (/^-?P/.test(string)) {
      t = duration(string);
    } else if (/^[\d]{1,2}:[\d]{1,2}:[\d]{1,2}/.test(string)) {
      t = date(null, string);
    } else {
      t = date(string);
    }
    return t && ifValid(t) || null;
  }, ['string']),
  'now': fn(function () {
    return date();
  }, []),
  'today': fn(function () {
    return date().startOf('day');
  }, []),
  // 10.3.4.2 Boolean function
  'not': fn(function (bool) {
    return isType(bool, 'boolean') ? !bool : null;
  }, ['any']),
  // 10.3.4.3 String functions
  'substring': fn(function (string, start, length) {
    var _start = start < 0 ? string.length + start : start - 1;
    var arr = Array.from(string);
    return (typeof length !== 'undefined' ? arr.slice(_start, _start + length) : arr.slice(_start)).join('');
  }, ['string', 'number', 'number?'], ['string', 'start position', 'length']),
  'string length': fn(function (string) {
    return countSymbols(string);
  }, ['string']),
  'upper case': fn(function (string) {
    return string.toUpperCase();
  }, ['string']),
  'lower case': fn(function (string) {
    return string.toLowerCase();
  }, ['string']),
  'substring before': fn(function (string, match) {
    var index = string.indexOf(match);
    if (index === -1) {
      return '';
    }
    return string.substring(0, index);
  }, ['string', 'string']),
  'substring after': fn(function (string, match) {
    var index = string.indexOf(match);
    if (index === -1) {
      return '';
    }
    return string.substring(index + match.length);
  }, ['string', 'string']),
  'replace': fn(function (input, pattern, replacement, flags) {
    return input.replace(new RegExp(pattern, 'ug' + (flags || '').replace(/[x]/g, '')), replacement.replace(/\$0/g, '$$&'));
  }, ['string', 'string', 'string', 'string?']),
  'contains': fn(function (string, match) {
    return string.includes(match);
  }, ['string', 'string']),
  'starts with': fn(function (string, match) {
    return string.startsWith(match);
  }, ['string', 'string']),
  'ends with': fn(function (string, match) {
    return string.endsWith(match);
  }, ['string', 'string']),
  'split': fn(function (string, delimiter) {
    return string.split(new RegExp(delimiter, 'u'));
  }, ['string', 'string']),
  // 10.3.4.4 List functions
  'list contains': fn(function (list, element) {
    return list.some(function (el) {
      return matches(el, element);
    });
  }, ['list', 'any?']),
  'count': fn(function (list) {
    return list.length;
  }, ['list']),
  'min': listFn(function (list) {
    return list.reduce(function (min, el) {
      return min === null ? el : Math.min(min, el);
    }, null);
  }, 'number'),
  'max': listFn(function (list) {
    return list.reduce(function (max, el) {
      return max === null ? el : Math.max(max, el);
    }, null);
  }, 'number'),
  'sum': listFn(function (list) {
    return sum(list);
  }, 'number'),
  'mean': listFn(function (list) {
    var s = sum(list);
    return s === null ? s : s / list.length;
  }, 'number'),
  'all': listFn(function (list) {
    var nonBool = false;
    var _iterator = _createForOfIteratorHelper(list),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var o = _step.value;
        if (o === false) {
          return false;
        }
        if (typeof o !== 'boolean') {
          nonBool = true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return nonBool ? null : true;
  }, 'any?'),
  'any': listFn(function (list) {
    var nonBool = false;
    var _iterator2 = _createForOfIteratorHelper(list),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var o = _step2.value;
        if (o === true) {
          return true;
        }
        if (typeof o !== 'boolean') {
          nonBool = true;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return nonBool ? null : false;
  }, 'any?'),
  'sublist': fn(function (list, start, length) {
    var _start = start < 0 ? list.length + start : start - 1;
    return typeof length !== 'undefined' ? list.slice(_start, _start + length) : list.slice(_start);
  }, ['list', 'number', 'number?']),
  'append': fn(function (list) {
    for (var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      items[_key - 1] = arguments[_key];
    }
    return list.concat(items);
  }, ['list', 'any?']),
  'concatenate': fn(function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return args.reduce(function (result, arg) {
      return result.concat(arg);
    }, []);
  }, ['any']),
  'insert before': fn(function (list, position, newItem) {
    return list.slice(0, position - 1).concat([newItem], list.slice(position - 1));
  }, ['list', 'number', 'any?']),
  'remove': fn(function (list, position) {
    return list.slice(0, position - 1).concat(list.slice(position));
  }, ['list', 'number']),
  'reverse': fn(function (list) {
    return list.slice().reverse();
  }, ['list']),
  'index of': fn(function (list, match) {
    return list.reduce(function (result, element, index) {
      if (matches(element, match)) {
        result.push(index + 1);
      }
      return result;
    }, []);
  }, ['list', 'any']),
  'union': fn(function () {
    throw notImplemented('union');
  }, ['list']),
  'distinct values': fn(function (_list) {
    throw notImplemented('distinct values');
  }, ['list']),
  'flatten': fn(function (list) {
    return flatten(list);
  }, ['list']),
  'product': listFn(function (list) {
    if (list.length === 0) {
      return null;
    }
    return list.reduce(function (result, n) {
      return result * n;
    }, 1);
  }, 'number'),
  'median': listFn(function (list) {
    if (list.length === 0) {
      return null;
    }
    return median(list);
  }, 'number'),
  'stddev': listFn(function (list) {
    if (list.length < 2) {
      return null;
    }
    return stddev(list);
  }, 'number'),
  'mode': listFn(function (list) {
    return mode(list);
  }, 'number'),
  // 10.3.4.5 Numeric functions
  'decimal': fn(function (n, scale) {
    if (!scale) {
      return round(n);
    }
    var offset = Math.pow(10, scale);
    return round(n * offset) / offset;
  }, ['number', 'number']),
  'floor': fn(function (n) {
    return Math.floor(n);
  }, ['number']),
  'ceiling': fn(function (n) {
    return Math.ceil(n) + 0;
  }, ['number']),
  'abs': fn(function (n) {
    if (typeof n !== 'number') {
      return null;
    }
    return Math.abs(n);
  }, ['number']),
  'modulo': fn(function (dividend, divisor) {
    if (!divisor) {
      return null;
    }
    var adjust = 1000000000;
    // cf. https://dustinpfister.github.io/2017/09/02/js-whats-wrong-with-modulo/
    //
    // need to round here as using this custom modulo
    // variant is prone to rounding errors
    return Math.round((dividend % divisor + divisor) % divisor * adjust) / adjust;
  }, ['number', 'number']),
  'sqrt': fn(function (number) {
    if (number < 0) {
      return null;
    }
    return Math.sqrt(number);
  }, ['number']),
  'log': fn(function (number) {
    if (number <= 0) {
      return null;
    }
    return Math.log(number);
  }, ['number']),
  'exp': fn(function (number) {
    return Math.exp(number);
  }, ['number']),
  'odd': fn(function (number) {
    return Math.abs(number) % 2 === 1;
  }, ['number']),
  'even': fn(function (number) {
    return Math.abs(number) % 2 === 0;
  }, ['number']),
  // 10.3.4.6 Date and time functions
  'is': fn(function (value1, value2) {
    if (typeof value1 === 'undefined' || typeof value2 === 'undefined') {
      return false;
    }
    return equals(value1, value2);
  }, ['any?', 'any?']),
  // 10.3.4.7 Range Functions
  'before': fn(function (a, b) {
    return before(a, b);
  }, ['any', 'any']),
  'after': fn(function (a, b) {
    return before(b, a);
  }, ['any', 'any']),
  'meets': fn(function (a, b) {
    return meets(a, b);
  }, ['range', 'range']),
  'met by': fn(function (a, b) {
    return meets(b, a);
  }, ['range', 'range']),
  'overlaps': fn(function () {
    throw notImplemented('overlaps');
  }, ['any?']),
  'overlaps before': fn(function () {
    throw notImplemented('overlaps before');
  }, ['any?']),
  'overlaps after': fn(function () {
    throw notImplemented('overlaps after');
  }, ['any?']),
  'finishes': fn(function () {
    throw notImplemented('finishes');
  }, ['any?']),
  'finished by': fn(function () {
    throw notImplemented('finished by');
  }, ['any?']),
  'includes': fn(function () {
    throw notImplemented('includes');
  }, ['any?']),
  'during': fn(function () {
    throw notImplemented('during');
  }, ['any?']),
  'starts': fn(function () {
    throw notImplemented('starts');
  }, ['any?']),
  'started by': fn(function () {
    throw notImplemented('started by');
  }, ['any?']),
  'coincides': fn(function () {
    throw notImplemented('coincides');
  }, ['any?']),
  // 10.3.4.8 Temporal built-in functions
  'day of year': fn(function () {
    throw notImplemented('day of year');
  }, ['any?']),
  'day of week': fn(function () {
    throw notImplemented('day of week');
  }, ['any?']),
  'month of year': fn(function () {
    throw notImplemented('month of year');
  }, ['any?']),
  'week of year': fn(function () {
    throw notImplemented('week of year');
  }, ['any?']),
  // 10.3.4.9 Sort
  'sort': function sort() {
    throw notImplemented('sort');
  },
  // 10.3.4.10 Context function
  'get value': fn(function (m, key) {
    return getFromContext(key, m);
  }, ['context', 'string']),
  'get entries': fn(function (m) {
    if (arguments.length !== 1) {
      return null;
    }
    if (Array.isArray(m)) {
      return null;
    }
    return Object.entries(m).map(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
        key = _ref8[0],
        value = _ref8[1];
      return {
        key: key,
        value: value
      };
    });
  }, ['context']),
  'context': listFn(function (_contexts) {
    throw notImplemented('context');
  }, 'context'),
  'context merge': listFn(function (_contexts) {
    throw notImplemented('context merge');
  }, 'context'),
  'context put': fn(function (_context, _keys, _value) {
    throw notImplemented('context put');
  }, ['context', 'list', 'any'])
};
function matches(a, b) {
  return a === b;
}
var FALSE = {};
function createArgTester(arg) {
  var optional = arg.endsWith('?');
  var type = optional ? arg.substring(0, arg.length - 1) : arg;
  return function (obj) {
    var arr = Array.isArray(obj);
    if (type === 'list') {
      if (arr || optional && typeof obj === 'undefined') {
        return obj;
      } else {
        // implicit conversion obj => [ obj ]
        return [obj];
      }
    }
    if (type !== 'any' && arr && obj.length === 1) {
      // implicit conversion [ obj ] => obj
      obj = obj[0];
    }
    if (type === 'range') {
      return obj instanceof Range ? obj : FALSE;
    }
    var objType = getType(obj);
    if (objType === 'nil') {
      return optional ? obj : FALSE;
    }
    if (type === 'any' || type === objType) {
      return obj;
    }
    return typeCast(obj, type) || FALSE;
  };
}
function createArgsValidator(argDefinitions) {
  var tests = argDefinitions.map(createArgTester);
  return function (args) {
    while (args.length < argDefinitions.length) {
      args.push(undefined);
    }
    return args.reduce(function (result, arg, index) {
      if (result === false) {
        return result;
      }
      var test = tests[index];
      var conversion = test ? test(arg) : arg;
      if (conversion === FALSE) {
        return false;
      }
      result.push(conversion);
      return result;
    }, []);
  };
}
/**
 * @param {Function} fnDefinition
 * @param {string} type
 * @param {string[]} [parameterNames]
 *
 * @return {Function}
 */
function listFn(fnDefinition, type) {
  var parameterNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var tester = createArgTester(type);
  var wrappedFn = function wrappedFn() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    if (args.length === 0) {
      return null;
    }
    // unwrap first arg
    if (Array.isArray(args[0]) && args.length === 1) {
      args = args[0];
    }
    if (!args.every(function (arg) {
      return tester(arg) !== FALSE;
    })) {
      return null;
    }
    return fnDefinition(args);
  };
  wrappedFn.$args = parameterNames || parseParameterNames(fnDefinition);
  return wrappedFn;
}
/**
 * @param {Function} fnDefinition
 * @param {string[]} argDefinitions
 * @param {string[]} [parameterNames]
 *
 * @return {Function}
 */
function fn(fnDefinition, argDefinitions) {
  var parameterNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var checkArgs = createArgsValidator(argDefinitions);
  parameterNames = parameterNames || parseParameterNames(fnDefinition);
  var wrappedFn = function wrappedFn() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    var convertedArgs = checkArgs(args);
    if (!convertedArgs) {
      return null;
    }
    return fnDefinition.apply(void 0, _toConsumableArray(convertedArgs));
  };
  wrappedFn.$args = parameterNames;
  return wrappedFn;
}
function meets(a, b) {
  return [a.end === b.start, a['end included'] === true, b['start included'] === true].every(function (v) {
    return v;
  });
}
function before(a, b) {
  if (a instanceof Range && b instanceof Range) {
    return a.end < b.start || (!a['end included'] || !b['start included']) && a.end == b.start;
  }
  if (a instanceof Range) {
    return a.end < b || !a['end included'] && a.end === b;
  }
  if (b instanceof Range) {
    return b.start > a || !b['start included'] && b.start === a;
  }
  return a < b;
}
function sum(list) {
  return list.reduce(function (sum, el) {
    return sum === null ? el : sum + el;
  }, null);
}
function flatten(_ref9) {
  var _ref10 = _toArray(_ref9),
    x = _ref10[0],
    xs = _ref10.slice(1);
  return x !== undefined ? [].concat(_toConsumableArray(Array.isArray(x) ? flatten(x) : [x]), _toConsumableArray(flatten(xs))) : [];
}
function toKeyString(key) {
  if (typeof key === 'string' && /\W/.test(key)) {
    return toString(key, true);
  }
  return key;
}
function toDeepString(obj) {
  return toString(obj, true);
}
function escapeStr(str) {
  return str.replace(/("|\\)/g, '\\$1');
}
function toString(obj) {
  var wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var _a, _b, _c, _d;
  var type = getType(obj);
  if (type === 'nil') {
    return 'null';
  }
  if (type === 'string') {
    return wrap ? "\"".concat(escapeStr(obj), "\"") : obj;
  }
  if (type === 'boolean' || type === 'number') {
    return String(obj);
  }
  if (type === 'list') {
    return '[' + obj.map(toDeepString).join(', ') + ']';
  }
  if (type === 'context') {
    return '{' + Object.entries(obj).map(function (_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
        key = _ref12[0],
        value = _ref12[1];
      return toKeyString(key) + ': ' + toDeepString(value);
    }).join(', ') + '}';
  }
  if (type === 'duration') {
    return obj.shiftTo('years', 'months', 'days', 'hours', 'minutes', 'seconds').normalize().toISO();
  }
  if (type === 'date time') {
    if ((_a = obj.zone) === null || _a === void 0 ? void 0 : _a.zoneName) {
      return obj.toISO({
        suppressMilliseconds: true,
        includeOffset: false
      }) + '@' + ((_b = obj.zone) === null || _b === void 0 ? void 0 : _b.zoneName);
    }
    return obj.toISO({
      suppressMilliseconds: true
    });
  }
  if (type === 'date') {
    return obj.toISODate();
  }
  if (type === 'range') {
    return '<range>';
  }
  if (type === 'time') {
    if ((_c = obj.zone) === null || _c === void 0 ? void 0 : _c.zoneName) {
      return obj.toISOTime({
        suppressMilliseconds: true,
        includeOffset: false
      }) + '@' + ((_d = obj.zone) === null || _d === void 0 ? void 0 : _d.zoneName);
    }
    return obj.toISOTime({
      suppressMilliseconds: true
    });
  }
  if (type === 'function') {
    return '<function>';
  }
  throw notImplemented('string(' + type + ')');
}
function countSymbols(str) {
  // cf. https://mathiasbynens.be/notes/javascript-unicode
  return str.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '_').length;
}
function round(n) {
  var integral = Math.trunc(n);
  if (n - integral > .5) {
    return integral + 1;
  } else {
    return integral;
  }
}
// adapted from https://stackoverflow.com/a/53577159
function stddev(array) {
  var n = array.length;
  var mean = array.reduce(function (a, b) {
    return a + b;
  }) / n;
  return Math.sqrt(array.map(function (x) {
    return Math.pow(x - mean, 2);
  }).reduce(function (a, b) {
    return a + b;
  }) / (n - 1));
}
function median(array) {
  var n = array.length;
  var sorted = array.slice().sort();
  var mid = n / 2 - 1;
  var index = Math.ceil(mid);
  // even
  if (mid === index) {
    return (sorted[index] + sorted[index + 1]) / 2;
  }
  // uneven
  return sorted[index];
}
function mode(array) {
  if (array.length < 2) {
    return array;
  }
  var buckets = {};
  var _iterator3 = _createForOfIteratorHelper(array),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var n = _step3.value;
      buckets[n] = (buckets[n] || 0) + 1;
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var sorted = Object.entries(buckets).sort(function (a, b) {
    return b[1] - a[1];
  });
  return sorted.filter(function (s) {
    return s[1] === sorted[0][1];
  }).map(function (e) {
    return +e[0];
  });
}
function ifValid(o) {
  return o.isValid ? o : null;
}
function parseExpressions(expression) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _lezerFeel.parser.configure({
    top: 'Expressions',
    contextTracker: (0, _lezerFeel.trackVariables)(context)
  }).parse(expression);
}
function parseUnaryTests(expression) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _lezerFeel.parser.configure({
    top: 'UnaryTests',
    contextTracker: (0, _lezerFeel.trackVariables)(context)
  }).parse(expression);
}
var Interpreter = /*#__PURE__*/function () {
  function Interpreter() {
    _classCallCheck(this, Interpreter);
  }
  _createClass(Interpreter, [{
    key: "_buildExecutionTree",
    value: function _buildExecutionTree(tree, input) {
      var root = {
        args: [],
        nodeInput: input
      };
      var stack = [root];
      tree.iterate({
        enter: function enter(nodeRef) {
          var _nodeRef$type = nodeRef.type,
            isError = _nodeRef$type.isError,
            isSkipped = _nodeRef$type.isSkipped;
          var from = nodeRef.from,
            to = nodeRef.to;
          if (isError) {
            throw new Error("Statement unparseable at [".concat(from, ", ").concat(to, "]"));
          }
          if (isSkipped) {
            return false;
          }
          var nodeInput = input.slice(from, to);
          stack.push({
            nodeInput: nodeInput,
            args: []
          });
        },
        leave: function leave(nodeRef) {
          if (nodeRef.type.isSkipped) {
            return;
          }
          var _stack$pop = stack.pop(),
            nodeInput = _stack$pop.nodeInput,
            args = _stack$pop.args;
          var parent = stack[stack.length - 1];
          var expr = evalNode(nodeRef, nodeInput, args);
          parent.args.push(expr);
        }
      });
      return root.args[root.args.length - 1];
    }
  }, {
    key: "evaluate",
    value: function evaluate(expression) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parseTree = parseExpressions(expression, context);
      var root = this._buildExecutionTree(parseTree, expression);
      return {
        parseTree: parseTree,
        root: root
      };
    }
  }, {
    key: "unaryTest",
    value: function unaryTest(expression) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parseTree = parseUnaryTests(expression, context);
      var root = this._buildExecutionTree(parseTree, expression);
      return {
        parseTree: parseTree,
        root: root
      };
    }
  }]);
  return Interpreter;
}();
var interpreter = new Interpreter();
function unaryTest(expression) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var value = context['?'] || null;
  var _interpreter$unaryTes = interpreter.unaryTest(expression, context),
    root = _interpreter$unaryTes.root;
  // root = fn(ctx) => test(val)
  var test = root(context);
  return test(value);
}
function evaluate(expression) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _interpreter$evaluate = interpreter.evaluate(expression, context),
    root = _interpreter$evaluate.root;
  // root = [ fn(ctx) ]
  var results = root(context);
  if (results.length === 1) {
    return results[0];
  } else {
    return results;
  }
}
function evalNode(node, input, args) {
  switch (node.name) {
    case 'ArithOp':
      return function (context) {
        var nullable = function nullable(op) {
          var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['number'];
          return function (a, b) {
            var left = a(context);
            var right = b(context);
            if (isArray(left)) {
              return null;
            }
            if (isArray(right)) {
              return null;
            }
            var leftType = getType(left);
            var rightType = getType(right);
            if (leftType !== rightType || !types.includes(leftType)) {
              return null;
            }
            return op(left, right);
          };
        };
        switch (input) {
          case '+':
            return nullable(function (a, b) {
              return a + b;
            }, ['string', 'number']);
          case '-':
            return nullable(function (a, b) {
              return a - b;
            });
          case '*':
            return nullable(function (a, b) {
              return a * b;
            });
          case '/':
            return nullable(function (a, b) {
              return !b ? null : a / b;
            });
          case '**':
          case '^':
            return nullable(function (a, b) {
              return Math.pow(a, b);
            });
        }
      };
    case 'CompareOp':
      return tag(function () {
        switch (input) {
          case '>':
            return function (b) {
              return createRange(b, null, false, false);
            };
          case '>=':
            return function (b) {
              return createRange(b, null, true, false);
            };
          case '<':
            return function (b) {
              return createRange(null, b, false, false);
            };
          case '<=':
            return function (b) {
              return createRange(null, b, false, true);
            };
          case '=':
            return function (b) {
              return function (a) {
                return equals(a, b);
              };
            };
          case '!=':
            return function (b) {
              return function (a) {
                return !equals(a, b);
              };
            };
        }
      }, Test('boolean'));
    case 'Wildcard':
      return function (_context) {
        return true;
      };
    case 'null':
      return function (_context) {
        return null;
      };
    case 'Disjunction':
      return tag(function (context) {
        var left = args[0](context);
        var right = args[2](context);
        var matrix = [[true, true, true], [true, false, true], [true, null, true], [false, true, true], [false, false, false], [false, null, null], [null, true, true], [null, false, null], [null, null, null]];
        var a = typeof left === 'boolean' ? left : null;
        var b = typeof right === 'boolean' ? right : null;
        return matrix.find(function (el) {
          return el[0] === a && el[1] === b;
        })[2];
      }, Test('boolean'));
    case 'Conjunction':
      return tag(function (context) {
        var left = args[0](context);
        var right = args[2](context);
        var matrix = [[true, true, true], [true, false, false], [true, null, null], [false, true, false], [false, false, false], [false, null, false], [null, true, null], [null, false, false], [null, null, null]];
        var a = typeof left === 'boolean' ? left : null;
        var b = typeof right === 'boolean' ? right : null;
        return matrix.find(function (el) {
          return el[0] === a && el[1] === b;
        })[2];
      }, Test('boolean'));
    case 'Context':
      return function (context) {
        return args.slice(1, -1).reduce(function (obj, arg) {
          var _arg = arg(Object.assign(Object.assign({}, context), obj)),
            _arg2 = _slicedToArray(_arg, 2),
            key = _arg2[0],
            value = _arg2[1];
          return Object.assign(Object.assign({}, obj), _defineProperty({}, key, value));
        }, {});
      };
    case 'FunctionBody':
      return args[0];
    case 'FormalParameters':
      return args;
    case 'FormalParameter':
      return args[0];
    case 'ParameterName':
      return args.join(' ');
    case 'FunctionDefinition':
      return function (context) {
        var parameterNames = args[2];
        var fnBody = args[4];
        return wrapFunction(function () {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          var fnContext = parameterNames.reduce(function (context, name, idx) {
            // support positional parameters
            context[name] = args[idx];
            return context;
          }, Object.assign({}, context));
          return fnBody(fnContext);
        }, parameterNames);
      };
    case 'ContextEntry':
      return function (context) {
        var key = typeof args[0] === 'function' ? args[0](context) : args[0];
        var value = args[1](context);
        return [key, value];
      };
    case 'Key':
      return args[0];
    case 'Identifier':
      return input;
    case 'SpecialFunctionName':
      return function (context) {
        return getBuiltin(input);
      };
    // preserve spaces in name, but compact multiple
    // spaces into one (token)
    case 'Name':
      return input.replace(/\s{2,}/g, ' ');
    case 'VariableName':
      return function (context) {
        var name = args.join(' ');
        return getBuiltin(name) || getFromContext(name, context);
      };
    case 'QualifiedName':
      return function (context) {
        return args.reduce(function (context, arg) {
          return arg(context);
        }, context);
      };
    case '?':
      return function (context) {
        return getFromContext('?', context);
      };
    // expression
    // expression ".." expression
    case 'IterationContext':
      return function (context) {
        var a = args[0](context);
        var b = args[1] && args[1](context);
        return b ? createRange(a, b) : a;
      };
    case 'Type':
      return args[0];
    case 'InExpressions':
      return function (context) {
        var iterationContexts = args.map(function (ctx) {
          return ctx(context);
        });
        if (iterationContexts.some(function (ctx) {
          return getType(ctx) !== 'list';
        })) {
          return null;
        }
        return cartesianProduct(iterationContexts).map(function (ctx) {
          if (!isArray(ctx)) {
            ctx = [ctx];
          }
          return Object.assign.apply(Object, [{}, context].concat(_toConsumableArray(ctx)));
        });
      };
    // Name kw<"in"> Expr
    case 'InExpression':
      return function (context) {
        return extractValue(context, args[0], args[2]);
      };
    case 'SpecialType':
      throw notImplemented('SpecialType');
    case 'InstanceOfExpression':
      return tag(function (context) {
        var a = args[0](context);
        var b = args[3](context);
        return a instanceof b;
      }, Test('boolean'));
    case 'every':
      return tag(function (context) {
        return function (_contexts, _condition) {
          var contexts = _contexts(context);
          if (getType(contexts) !== 'list') {
            return contexts;
          }
          return contexts.every(function (ctx) {
            return isTruthy(_condition(ctx));
          });
        };
      }, Test('boolean'));
    case 'some':
      return tag(function (context) {
        return function (_contexts, _condition) {
          var contexts = _contexts(context);
          if (getType(contexts) !== 'list') {
            return contexts;
          }
          return contexts.some(function (ctx) {
            return isTruthy(_condition(ctx));
          });
        };
      }, Test('boolean'));
    case 'NumericLiteral':
      return tag(function (_context) {
        return input.includes('.') ? parseFloat(input) : parseInt(input);
      }, 'number');
    case 'BooleanLiteral':
      return tag(function (_context) {
        return input === 'true' ? true : false;
      }, 'boolean');
    case 'StringLiteral':
      return tag(function (_context) {
        return parseString(input);
      }, 'string');
    case 'PositionalParameters':
      return function (context) {
        return args.map(function (arg) {
          return arg(context);
        });
      };
    case 'NamedParameter':
      return function (context) {
        var name = args[0];
        var value = args[1](context);
        return [name, value];
      };
    case 'NamedParameters':
      return function (context) {
        return args.reduce(function (args, arg) {
          var _arg3 = arg(context),
            _arg4 = _slicedToArray(_arg3, 2),
            name = _arg4[0],
            value = _arg4[1];
          args[name] = value;
          return args;
        }, {});
      };
    case 'DateTimeConstructor':
      return function (context) {
        return getBuiltin(input);
      };
    case 'DateTimeLiteral':
      return function (context) {
        // AtLiteral
        if (args.length === 1) {
          return args[0](context);
        }
        // FunctionInvocation
        else {
          var wrappedFn = wrapFunction(args[0](context));
          if (!wrappedFn) {
            throw new Error("Failed to evaluate ".concat(input, ": Target is not a function"));
          }
          var contextOrArgs = args[2](context);
          return wrappedFn.invoke(contextOrArgs);
        }
      };
    case 'AtLiteral':
      return function (context) {
        var wrappedFn = wrapFunction(getBuiltin('@'));
        if (!wrappedFn) {
          throw new Error("Failed to evaluate ".concat(input, ": Target is not a function"));
        }
        return wrappedFn.invoke([args[0](context)]);
      };
    case 'FunctionInvocation':
      return function (context) {
        var wrappedFn = wrapFunction(args[0](context));
        if (!wrappedFn) {
          throw new Error("Failed to evaluate ".concat(input, ": Target is not a function"));
        }
        var contextOrArgs = args[2](context);
        return wrappedFn.invoke(contextOrArgs);
      };
    case 'IfExpression':
      return function () {
        var ifCondition = args[1];
        var thenValue = args[3];
        var elseValue = args[5];
        var type = coalecenseTypes(thenValue, elseValue);
        return tag(function (context) {
          if (isTruthy(ifCondition(context))) {
            return thenValue(context);
          } else {
            return elseValue ? elseValue(context) : null;
          }
        }, type);
      }();
    case 'Parameters':
      return args.length === 3 ? args[1] : function (_context) {
        return [];
      };
    case 'Comparison':
      return function (context) {
        var operator = args[1];
        // expression !compare kw<"in"> PositiveUnaryTest |
        // expression !compare kw<"in"> !unaryTest "(" PositiveUnaryTests ")"
        if (operator === 'in') {
          return compareIn(args[0](context), (args[3] || args[2])(context));
        }
        // expression !compare kw<"between"> expression kw<"and"> expression
        if (operator === 'between') {
          var start = args[2](context);
          var end = args[4](context);
          if (start === null || end === null) {
            return null;
          }
          return createRange(start, end).includes(args[0](context));
        }
        // expression !compare CompareOp<"=" | "!="> expression |
        // expression !compare CompareOp<Gt | Gte | Lt | Lte> expression |
        var left = args[0](context);
        var right = args[2](context);
        var test = operator()(right);
        return compareValue(test, left);
      };
    case 'QuantifiedExpression':
      return function (context) {
        var testFn = args[0](context);
        var contexts = args[1];
        var condition = args[3];
        return testFn(contexts, condition);
      };
    // DMN 1.2 - 10.3.2.14
    // kw<"for"> commaSep1<InExpression<IterationContext>> kw<"return"> expression
    case 'ForExpression':
      return function (context) {
        var extractor = args[args.length - 1];
        var iterationContexts = args[1](context);
        if (getType(iterationContexts) !== 'list') {
          return iterationContexts;
        }
        var partial = [];
        var _iterator4 = _createForOfIteratorHelper(iterationContexts),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var ctx = _step4.value;
            partial.push(extractor(Object.assign(Object.assign({}, ctx), {
              partial: partial
            })));
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        return partial;
      };
    case 'ArithmeticExpression':
      return function () {
        // binary expression (a + b)
        if (args.length === 3) {
          var _args = _slicedToArray(args, 3),
            a = _args[0],
            op = _args[1],
            b = _args[2];
          return tag(function (context) {
            return op(context)(a, b);
          }, coalecenseTypes(a, b));
        }
        // unary expression (-b)
        if (args.length === 2) {
          var _args2 = _slicedToArray(args, 2),
            _op = _args2[0],
            value = _args2[1];
          return tag(function (context) {
            return _op(context)(function () {
              return 0;
            }, value);
          }, value.type);
        }
      }();
    case 'PositiveUnaryTest':
      return args[0];
    case 'ParenthesizedExpression':
      return args[1];
    case 'PathExpression':
      return function (context) {
        var pathTarget = coerceSingleton(args[0](context));
        var pathProp = args[1];
        if (isArray(pathTarget)) {
          return pathTarget.map(pathProp).filter(function (e) {
            return e !== null;
          });
        } else {
          return pathProp(pathTarget);
        }
      };
    // expression !filter "[" expression "]"
    case 'FilterExpression':
      return function (context) {
        var target = args[0](context);
        var filterFn = args[2];
        var filterTarget = isArray(target) ? target : [target];
        // null[..]
        if (target === null) {
          return null;
        }
        // a[1]
        if (filterFn.type === 'number') {
          var idx = filterFn(context);
          var value = filterTarget[idx < 0 ? filterTarget.length + idx : idx - 1];
          if (typeof value === 'undefined') {
            return null;
          } else {
            return value;
          }
        }
        // a[true]
        if (filterFn.type === 'boolean') {
          if (filterFn(context)) {
            return filterTarget;
          } else {
            return [];
          }
        }
        if (filterFn.type === 'string') {
          var _value2 = filterFn(context);
          return filterTarget.filter(function (el) {
            return el === _value2;
          });
        }
        // a[test]
        return filterTarget.map(function (el) {
          var iterationContext = Object.assign(Object.assign(Object.assign({}, context), {
            item: el
          }), el);
          var result = filterFn(iterationContext);
          // test is fn(val) => boolean SimpleUnaryTest
          if (typeof result === 'function') {
            result = result(el);
          }
          if (result instanceof Range) {
            result = result.includes(el);
          }
          if (result === true) {
            return el;
          }
          return result;
        }).filter(isTruthy);
      };
    case 'SimplePositiveUnaryTest':
      return tag(function (context) {
        // <Interval>
        if (args.length === 1) {
          return args[0](context);
        }
        // <CompareOp> <Expr>
        return args[0](context)(args[1](context));
      }, 'test');
    case 'List':
      return function (context) {
        return args.slice(1, -1).map(function (arg) {
          return arg(context);
        });
      };
    case 'Interval':
      return tag(function (context) {
        var left = args[1](context);
        var right = args[2](context);
        var startIncluded = left !== null && args[0] === '[';
        var endIncluded = right !== null && args[3] === ']';
        return createRange(left, right, startIncluded, endIncluded);
      }, Test('boolean'));
    case 'PositiveUnaryTests':
    case 'Expressions':
      return function (context) {
        return args.map(function (a) {
          return a(context);
        });
      };
    case 'UnaryTests':
      return function (context) {
        return function () {
          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var negate = args[0] === 'not';
          var tests = negate ? args.slice(2, -1) : args;
          var matches = tests.map(function (test) {
            return test(context);
          }).flat(1).map(function (test) {
            if (isArray(test)) {
              return test.includes(value);
            }
            if (test === null) {
              return null;
            }
            if (typeof test === 'boolean') {
              return test;
            }
            return compareValue(test, value);
          }).reduce(combineResult, undefined);
          return matches === null ? null : negate ? !matches : matches;
        };
      };
    default:
      return node.name;
  }
}
function getBuiltin(name, _context) {
  return getFromContext(name, builtins);
}
function extractValue(context, prop, _target) {
  var target = _target(context);
  if (['list', 'range'].includes(getType(target))) {
    return target.map(function (t) {
      return _defineProperty({}, prop, t);
    });
  }
  return null;
}
function compareIn(value, tests) {
  if (!isArray(tests)) {
    if (getType(tests) === 'nil') {
      return null;
    }
    tests = [tests];
  }
  return tests.some(function (test) {
    return compareValue(test, value);
  });
}
function compareValue(test, value) {
  if (typeof test === 'function') {
    return test(value);
  }
  if (test instanceof Range) {
    return test.includes(value);
  }
  return equals(test, value);
}
var chars = Array.from('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
function isTyped(type, values) {
  return values.some(function (e) {
    return getType(e) === type;
  }) && values.every(function (e) {
    return e === null || getType(e) === type;
  });
}
var nullRange = new Range({
  start: null,
  end: null,
  'start included': false,
  'end included': false,
  map: function map() {
    return [];
  },
  includes: function includes() {
    return null;
  }
});
function createRange(start, end) {
  var startIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var endIncluded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  if (isTyped('string', [start, end])) {
    return createStringRange(start, end, startIncluded, endIncluded);
  }
  if (isTyped('number', [start, end])) {
    return createNumberRange(start, end, startIncluded, endIncluded);
  }
  if (isTyped('duration', [start, end])) {
    throw notImplemented('range<duration>');
  }
  if (isTyped('time', [start, end])) {
    throw notImplemented('range<time>');
  }
  if (isTyped('date time', [start, end])) {
    throw notImplemented('range<date and time>');
  }
  if (isTyped('date', [start, end])) {
    throw notImplemented('range<date>');
  }
  if (start === null && end === null) {
    return nullRange;
  }
  throw new Error("unsupported range: ".concat(start, "..").concat(end));
}
function noopMap() {
  return function () {
    throw new Error('unsupported range operation: map');
  };
}
function valuesMap(values) {
  return function (fn) {
    return values.map(fn);
  };
}
function valuesIncludes(values) {
  return function (value) {
    return values.includes(value);
  };
}
function numberMap(start, end, startIncluded, endIncluded) {
  var direction = start > end ? -1 : 1;
  return function (fn) {
    var result = [];
    for (var i = start;; i += direction) {
      if (i === 0 && !startIncluded) {
        continue;
      }
      if (i === end && !endIncluded) {
        break;
      }
      result.push(fn(i));
      if (i === end) {
        break;
      }
    }
    return result;
  };
}
function includesStart(n, inclusive) {
  if (inclusive) {
    return function (value) {
      return n <= value;
    };
  } else {
    return function (value) {
      return n < value;
    };
  }
}
function includesEnd(n, inclusive) {
  if (inclusive) {
    return function (value) {
      return n >= value;
    };
  } else {
    return function (value) {
      return n > value;
    };
  }
}
function anyIncludes(start, end, startIncluded, endIncluded) {
  var tests = [];
  if (start === null && end === null) {
    return function () {
      return null;
    };
  }
  if (start !== null && end !== null) {
    if (start > end) {
      tests = [includesStart(end, endIncluded), includesEnd(start, startIncluded)];
    } else {
      tests = [includesStart(start, startIncluded), includesEnd(end, endIncluded)];
    }
  } else if (end !== null) {
    tests = [includesEnd(end, endIncluded)];
  } else if (start !== null) {
    tests = [includesStart(start, startIncluded)];
  }
  return function (value) {
    return value === null ? null : tests.every(function (t) {
      return t(value);
    });
  };
}
function createStringRange(start, end) {
  var startIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var endIncluded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  if (start !== null && !chars.includes(start)) {
    throw new Error('illegal range start: ' + start);
  }
  if (end !== null && !chars.includes(end)) {
    throw new Error('illegal range end: ' + end);
  }
  var values;
  if (start !== null && end !== null) {
    var startIdx = chars.indexOf(start);
    var endIdx = chars.indexOf(end);
    var direction = startIdx > endIdx ? -1 : 1;
    if (startIncluded === false) {
      startIdx += direction;
    }
    if (endIncluded === false) {
      endIdx -= direction;
    }
    values = chars.slice(startIdx, endIdx + 1);
  }
  var map = values ? valuesMap(values) : noopMap();
  var includes = values ? valuesIncludes(values) : anyIncludes(start, end, startIncluded, endIncluded);
  return new Range({
    start: start,
    end: end,
    'start included': startIncluded,
    'end included': endIncluded,
    map: map,
    includes: includes
  });
}
function createNumberRange(start, end, startIncluded, endIncluded) {
  var map = start !== null && end !== null ? numberMap(start, end, startIncluded, endIncluded) : noopMap();
  var includes = anyIncludes(start, end, startIncluded, endIncluded);
  return new Range({
    start: start,
    end: end,
    'start included': startIncluded,
    'end included': endIncluded,
    map: map,
    includes: includes
  });
}
function cartesianProduct(arrays) {
  if (arrays.some(function (arr) {
    return getType(arr) === 'nil';
  })) {
    return null;
  }
  var f = function f(a, b) {
    var _ref14;
    return (_ref14 = []).concat.apply(_ref14, _toConsumableArray(a.map(function (d) {
      return b.map(function (e) {
        return [].concat(d, e);
      });
    })));
  };
  var cartesian = function cartesian(a, b) {
    for (var _len6 = arguments.length, c = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
      c[_key6 - 2] = arguments[_key6];
    }
    return b ? cartesian.apply(void 0, [f(a, b)].concat(c)) : a || [];
  };
  return cartesian.apply(void 0, _toConsumableArray(arrays));
}
function coalecenseTypes(a, b) {
  if (!b) {
    return a.type;
  }
  if (a.type === b.type) {
    return a.type;
  }
  return 'any';
}
function tag(fn, type) {
  return Object.assign(fn, {
    type: type,
    toString: function toString() {
      return "TaggedFunction[".concat(type, "] ").concat(Function.prototype.toString.call(fn));
    }
  });
}
function combineResult(result, match) {
  if (!result) {
    return match;
  }
  return result;
}
function isTruthy(obj) {
  return obj !== false && obj !== null;
}
function Test(type) {
  return "Test<".concat(type, ">");
}
/**
 * @param {Function} fn
 * @param {string[]} [parameterNames]
 *
 * @return {FunctionWrapper}
 */
function wrapFunction(fn) {
  var parameterNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (!fn) {
    return null;
  }
  if (fn instanceof FunctionWrapper) {
    return fn;
  }
  if (fn instanceof Range) {
    return new FunctionWrapper(function (value) {
      return fn.includes(value);
    }, ['value']);
  }
  return new FunctionWrapper(fn, parameterNames || parseParameterNames(fn));
}
function coerceSingleton(values) {
  if (Array.isArray(values) && values.length === 1) {
    return values[0];
  } else {
    return values;
  }
}
function parseString(str) {
  if (str.startsWith('"')) {
    str = str.slice(1);
  }
  if (str.endsWith('"')) {
    str = str.slice(0, -1);
  }
  return str.replace(/(\\")|(\\\\)|(\\u[a-fA-F0-9]{5,6})|((?:\\u[a-fA-F0-9]{1,4})+)/ig, function (substring) {
    for (var _len7 = arguments.length, groups = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      groups[_key7 - 1] = arguments[_key7];
    }
    var quotes = groups[0],
      escape = groups[1],
      codePoint = groups[2],
      charCodes = groups[3];
    if (quotes) {
      return '"';
    }
    if (escape) {
      return '\\';
    }
    var escapePattern = /\\u([a-fA-F0-9]+)/ig;
    if (codePoint) {
      var codePointMatch = escapePattern.exec(codePoint);
      return String.fromCodePoint(parseInt(codePointMatch[1], 16));
    }
    if (charCodes) {
      var _chars = [];
      var charCodeMatch;
      while ((charCodeMatch = escapePattern.exec(substring)) !== null) {
        _chars.push(parseInt(charCodeMatch[1], 16));
      }
      return String.fromCharCode.apply(String, _chars);
    }
    throw new Error('illegal match');
  });
}

},{"lezer-feel":44,"luxon":48}],44:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"@lezer/highlight":23,"@lezer/lr":24,"_process":4,"dup":42}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}
var hat_1 = createCommonjsModule(function (module) {
  var hat = module.exports = function (bits, base) {
    if (!base) base = 16;
    if (bits === undefined) bits = 128;
    if (bits <= 0) return '0';
    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
    for (var i = 2; digits === Infinity; i *= 2) {
      digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
    }
    var rem = digits - Math.floor(digits);
    var res = '';
    for (var i = 0; i < Math.floor(digits); i++) {
      var x = Math.floor(Math.random() * base).toString(base);
      res = x + res;
    }
    if (rem) {
      var b = Math.pow(base, rem);
      var x = Math.floor(Math.random() * b).toString(base);
      res = x + res;
    }
    var parsed = parseInt(res, base);
    if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
      return hat(bits, base);
    } else return res;
  };
  hat.rack = function (bits, base, expandBy) {
    var fn = function fn(data) {
      var iters = 0;
      do {
        if (iters++ > 10) {
          if (expandBy) bits += expandBy;else throw new Error('too many ID collisions, use more bits');
        }
        var id = hat(bits, base);
      } while (Object.hasOwnProperty.call(hats, id));
      hats[id] = data;
      return id;
    };
    var hats = fn.hats = {};
    fn.get = function (id) {
      return fn.hats[id];
    };
    fn.set = function (id, value) {
      fn.hats[id] = value;
      return fn;
    };
    fn.bits = bits || 128;
    fn.base = base || 16;
    return fn;
  };
});

/**
 * Create a new id generator / cache instance.
 *
 * You may optionally provide a seed that is used internally.
 *
 * @param {Seed} seed
 */

function Ids(seed) {
  if (!(this instanceof Ids)) {
    return new Ids(seed);
  }
  seed = seed || [128, 36, 1];
  this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
}
/**
 * Generate a next id.
 *
 * @param {Object} [element] element to bind the id to
 *
 * @return {String} id
 */

Ids.prototype.next = function (element) {
  return this._seed(element || true);
};
/**
 * Generate a next id with a given prefix.
 *
 * @param {Object} [element] element to bind the id to
 *
 * @return {String} id
 */

Ids.prototype.nextPrefixed = function (prefix, element) {
  var id;
  do {
    id = prefix + this.next(true);
  } while (this.assigned(id)); // claim {prefix}{random}

  this.claim(id, element); // return

  return id;
};
/**
 * Manually claim an existing id.
 *
 * @param {String} id
 * @param {String} [element] element the id is claimed by
 */

Ids.prototype.claim = function (id, element) {
  this._seed.set(id, element || true);
};
/**
 * Returns true if the given id has already been assigned.
 *
 * @param  {String} id
 * @return {Boolean}
 */

Ids.prototype.assigned = function (id) {
  return this._seed.get(id) || false;
};
/**
 * Unclaim an id.
 *
 * @param  {String} id the id to unclaim
 */

Ids.prototype.unclaim = function (id) {
  delete this._seed.hats[id];
};
/**
 * Clear all claimed ids.
 */

Ids.prototype.clear = function () {
  var hats = this._seed.hats,
    id;
  for (id in hats) {
    this.unclaim(id);
  }
};
var _default = Ids;
exports["default"] = _default;

},{}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expressionsLanguage = void 0;
exports.feel = feel;
exports.unaryTestsLanguage = exports.snippets = exports.feelLanguage = void 0;
var _lezerFeel = require("lezer-feel");
var _language = require("@codemirror/language");
var _autocomplete = require("@codemirror/autocomplete");
// / A collection of FEEL-related
// / [snippets](#autocomplete.snippet).
var snippets = [/*@__PURE__*/(0, _autocomplete.snippetCompletion)('function(${params}) ${body}', {
  label: 'function',
  detail: 'definition',
  type: 'keyword'
}), /*@__PURE__*/(0, _autocomplete.snippetCompletion)('for ${var} in ${collection} return ${value}', {
  label: 'for',
  detail: 'expression',
  type: 'keyword'
}), /*@__PURE__*/(0, _autocomplete.snippetCompletion)('every ${var} in ${collection} satisfies ${condition}', {
  label: 'every',
  detail: 'quantified expression',
  type: 'keyword'
}), /*@__PURE__*/(0, _autocomplete.snippetCompletion)('some ${var} in ${collection} satisfies ${condition}', {
  label: 'some',
  detail: 'quantified expression',
  type: 'keyword'
}), /*@__PURE__*/(0, _autocomplete.snippetCompletion)('if ${condition} then ${value}', {
  label: 'if',
  detail: 'block',
  type: 'keyword'
}), /*@__PURE__*/(0, _autocomplete.snippetCompletion)('if ${condition} then ${value} else ${other value}', {
  label: 'if',
  detail: '/ else block',
  type: 'keyword'
})];

// / A language provider based on the [Lezer FEEL
// / parser](https://github.com/nikku/lezer-feel), extended with
// / highlighting and indentation information.
exports.snippets = snippets;
var feelLanguage = /*@__PURE__*/_language.LRLanguage.define({
  parser: /*@__PURE__*/_lezerFeel.parser.configure({
    props: [/*@__PURE__*/_language.indentNodeProp.add({
      'Context': /*@__PURE__*/(0, _language.delimitedIndent)({
        closing: '}'
      }),
      'List FilterExpression': /*@__PURE__*/(0, _language.delimitedIndent)({
        closing: ']'
      }),
      'ParenthesizedExpression FunctionInvocation': /*@__PURE__*/(0, _language.delimitedIndent)({
        closing: ')'
      }),
      'ForExpression QuantifiedExpression IfExpression': /*@__PURE__*/(0, _language.continuedIndent)({
        except: /^\s*(then|else|return|satisfies)\b/
      }),
      'FunctionDefinition': /*@__PURE__*/(0, _language.continuedIndent)({
        except: /^\s*(\(|\))/
      })
    }), /*@__PURE__*/_language.foldNodeProp.add({
      Context: _language.foldInside,
      List: _language.foldInside,
      FunctionDefinition: function FunctionDefinition(node) {
        var last = node.getChild(')');
        if (!last) return null;
        return {
          from: last.to,
          to: node.to
        };
      }
    })]
  }),
  languageData: {
    indentOnInput: /^\s*(\)|\}|\]|then|else|return|satisfies)$/,
    commentTokens: {
      line: '//',
      block: {
        open: '/*',
        close: '*/'
      }
    }
  }
});
// / A language provider for TypeScript.
exports.feelLanguage = feelLanguage;
var unaryTestsLanguage = /*@__PURE__*/feelLanguage.configure({
  top: 'UnaryTests'
});
// / Language provider for JSX.
exports.unaryTestsLanguage = unaryTestsLanguage;
var expressionsLanguage = /*@__PURE__*/feelLanguage.configure({
  top: 'Expressions'
});
exports.expressionsLanguage = expressionsLanguage;
var keywords = /*@__PURE__*/'return satisfies then in'.split(' ').map(function (kw) {
  return {
    label: kw,
    type: 'keyword'
  };
});
var dontComplete = ['StringLiteral', 'Name', 'LineComment', 'BlockComment'];
// / FEEL support. Includes [snippet](#lang-feel.snippets)
// / completion.
function feel() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var lang = config.dialect === 'unaryTests' ? unaryTestsLanguage : expressionsLanguage;
  var contextualLang = lang.configure({
    contextTracker: (0, _lezerFeel.trackVariables)(config.context)
  });
  return new _language.LanguageSupport(contextualLang, [feelLanguage.data.of({
    autocomplete: (0, _autocomplete.ifNotIn)(dontComplete, (0, _autocomplete.completeFromList)(snippets.concat(keywords)))
  })]);
}

},{"@codemirror/autocomplete":16,"@codemirror/language":18,"lezer-feel":47}],47:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeContextKey = normalizeContextKey;
exports.parser = void 0;
exports.trackVariables = trackVariables;
var _lr = require("@lezer/lr");
var _highlight = require("@lezer/highlight");
var _identifiersMap, _prefixedContextStart, _contextStarts, _contextEnds;
function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
// This file was generated by lezer-generator. You probably shouldn't edit it.
var propertyIdentifier = 119,
  identifier = 120,
  nameIdentifier = 121,
  insertSemi = 122,
  expression0 = 126,
  ForExpression = 4,
  forExpressionStart = 129,
  ForInExpression = 7,
  Name = 8,
  Identifier = 9,
  AdditionalIdentifier = 10,
  forExpressionBodyStart = 137,
  IfExpression = 18,
  ifExpressionStart = 138,
  QuantifiedExpression = 22,
  quantifiedExpressionStart = 139,
  QuantifiedInExpression = 26,
  PositiveUnaryTest = 36,
  ArithmeticExpression = 40,
  arithmeticPlusStart = 143,
  arithmeticTimesStart = 144,
  arithmeticExpStart = 145,
  arithmeticUnaryStart = 146,
  VariableName = 47,
  PathExpression = 67,
  pathExpressionStart = 151,
  FilterExpression = 69,
  filterExpressionStart = 152,
  FunctionInvocation = 71,
  functionInvocationStart = 153,
  ParameterName = 75,
  nil = 158,
  NumericLiteral = 78,
  StringLiteral = 79,
  BooleanLiteral = 80,
  FunctionDefinition = 89,
  functionDefinitionStart = 165,
  Context = 96,
  contextStart = 167,
  ContextEntry = 97,
  PropertyName = 99,
  PropertyIdentifier = 100;

/* global console,process */

var LOG_PARSE = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
var LOG_PARSE_DEBUG = typeof process != 'undefined' && process.env && /\bfparse:dbg\b/.test(process.env.LOG);
var LOG_VARS = typeof process != 'undefined' && process.env && /\bcontext\b/.test(process.env.LOG);
var spaceChars = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
var newlineChars = chars('\n\r');
var additionalNameChars = chars("'./-+*");

/**
 * @param { string } str
 * @return { number[] }
 */
function chars(str) {
  return Array.from(str).map(function (s) {
    return s.charCodeAt(0);
  });
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isStartChar(ch) {
  return ch === 63 // ?
  || ch === 95 // _
  || ch >= 65 && ch <= 90 // A-Z
  || ch >= 97 && ch <= 122 // a-z
  || ch >= 161 && !isPartChar(ch) && !isSpace(ch);
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isAdditional(ch) {
  return additionalNameChars.includes(ch);
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isPartChar(ch) {
  return ch >= 48 && ch <= 57 // 0-9
  || ch === 0xB7 || ch >= 0x0300 && ch <= 0x036F || ch >= 0x203F && ch <= 0x2040;
}

/**
 * @param { number } ch
 * @return { boolean }
 */
function isSpace(ch) {
  return spaceChars.includes(ch);
}

// eslint-disable-next-line
function indent(str, spaces) {
  return spaces.concat(str.split(/\n/g).join('\n' + spaces));
}

/**
 * @param { import('@lezer/lr').InputStream } input
 * @param  { number } [offset]
 * @param { boolean } [includeOperators]
 *
 * @return { { token: string, offset: number } | null }
 */
function parseAdditionalSymbol(input) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var next = input.peek(offset);
  if (isAdditional(next)) {
    return {
      offset: 1,
      token: String.fromCharCode(next)
    };
  }
  return null;
}

/**
 * @param { import('@lezer/lr').InputStream } input
 * @param { number } [offset]
 * @param { boolean } [namePart]
 *
 * @return { { token: string, offset: number } | null }
 */
function parseIdentifier(input) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var namePart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  for (var inside = false, _chars = [], i = 0;; i++) {
    var next = input.peek(offset + i);
    if (isStartChar(next) || (inside || namePart) && isPartChar(next)) {
      if (!inside) {
        inside = true;
      }
      _chars.push(next);
    } else {
      if (_chars.length) {
        return {
          token: String.fromCharCode.apply(String, _chars),
          offset: i
        };
      }
      return null;
    }
  }
}

/**
 * @param { import('@lezer/lr').InputStream } input
 * @param  { number } offset
 *
 * @return { { token: string, offset: number } | null }
 */
function parseSpaces(input, offset) {
  for (var inside = false, i = 0;; i++) {
    var next = input.peek(offset + i);
    if (isSpace(next)) {
      if (!inside) {
        inside = true;
      }
    } else {
      if (inside) {
        return {
          token: ' ',
          offset: i
        };
      }
      return null;
    }
  }
}

/**
 * Parse a name from the input and return the first match, if any.
 *
 * @param { import('@lezer/lr').InputStream } input
 * @param { Variables } variables
 *
 * @return { { token: string, offset: number, term: number } | null }
 */
function parseName(input, variables) {
  var contextKeys = variables.contextKeys();
  var start = variables.tokens;
  var _loop = function _loop(_i, _tokens, _nextMatch) {
    var namePart = start.length + _tokens.length > 0;
    var maybeSpace = _tokens.length > 0;
    var match = parseIdentifier(input, _i, namePart) || namePart && parseAdditionalSymbol(input, _i) || maybeSpace && parseSpaces(input, _i);

    // match is required
    if (!match) {
      return {
        v: _nextMatch
      };
    }
    var token = match.token,
      offset = match.offset;
    _i += offset;
    if (token === ' ') {
      i = _i, tokens = _tokens, nextMatch = _nextMatch;
      return "continue";
    }
    _tokens = [].concat(_toConsumableArray(_tokens), [token]);
    var name = [].concat(_toConsumableArray(start), _toConsumableArray(_tokens)).join(' ');
    if (contextKeys.some(function (el) {
      return el === name;
    })) {
      var _token = _tokens[0];
      _nextMatch = {
        token: _token,
        offset: _token.length,
        term: nameIdentifier
      };
    }
    if (dateTimeIdentifiers.some(function (el) {
      return el === name;
    })) {
      var _token2 = _tokens[0];

      // parse date time identifiers as normal
      // identifiers to allow specialization to kick in
      //
      // cf. https://github.com/nikku/lezer-feel/issues/8
      _nextMatch = {
        token: _token2,
        offset: _token2.length,
        term: identifier
      };
    }
    if (!contextKeys.some(function (el) {
      return el.startsWith(name);
    }) && !dateTimeIdentifiers.some(function (el) {
      return el.startsWith(name);
    })) {
      return {
        v: _nextMatch
      };
    }
    i = _i, tokens = _tokens, nextMatch = _nextMatch;
  };
  for (var i = 0, tokens = [], nextMatch = null;;) {
    var _ret = _loop(i, tokens, nextMatch);
    if (_ret === "continue") continue;
    if (_typeof(_ret) === "object") return _ret.v;
  }
}
var identifiersMap = (_identifiersMap = {}, _defineProperty(_identifiersMap, identifier, 'identifier'), _defineProperty(_identifiersMap, nameIdentifier, 'nameIdentifier'), _identifiersMap);
var identifiers = new _lr.ExternalTokenizer(function (input, stack) {
  LOG_PARSE_DEBUG && console.log('%s: T <identifier | nameIdentifier>', input.pos);
  var nameMatch = parseName(input, stack.context);
  var start = stack.context.tokens;
  var match = nameMatch || parseIdentifier(input, 0, start.length > 0);
  if (match) {
    input.advance(match.offset);
    input.acceptToken(nameMatch ? nameMatch.term : identifier);
    LOG_PARSE && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap[nameMatch.term] : 'identifier', match.token);
  }
}, {
  contextual: true
});
var propertyIdentifiers = new _lr.ExternalTokenizer(function (input, stack) {
  LOG_PARSE_DEBUG && console.log('%s: T <propertyIdentifier>', input.pos);
  var start = stack.context.tokens;
  var match = parseIdentifier(input, 0, start.length > 0);
  if (match) {
    input.advance(match.offset);
    input.acceptToken(propertyIdentifier);
    LOG_PARSE && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
  }
});
var insertSemicolon = new _lr.ExternalTokenizer(function (input, stack) {
  LOG_PARSE_DEBUG && console.log('%s: T <insertSemi>', input.pos);
  var offset;
  var insert = false;
  for (offset = 0;; offset++) {
    var _char = input.peek(offset);
    if (spaceChars.includes(_char)) {
      continue;
    }
    if (newlineChars.includes(_char)) {
      insert = true;
    }
    break;
  }
  if (insert) {
    var _identifier = parseIdentifier(input, offset + 1);
    var spaces = parseSpaces(input, offset + 1);
    if (spaces || _identifier && /^(then|else|return|satisfies)$/.test(_identifier.token)) {
      return;
    }
    LOG_PARSE && console.log('%s: MATCH <insertSemi>', input.pos);
    input.acceptToken(insertSemi);
  }
});
var prefixedContextStarts = (_prefixedContextStart = {}, _defineProperty(_prefixedContextStart, functionInvocationStart, 'FunctionInvocation'), _defineProperty(_prefixedContextStart, filterExpressionStart, 'FilterExpression'), _defineProperty(_prefixedContextStart, pathExpressionStart, 'PathExpression'), _prefixedContextStart);
var contextStarts = (_contextStarts = {}, _defineProperty(_contextStarts, contextStart, 'Context'), _defineProperty(_contextStarts, functionDefinitionStart, 'FunctionDefinition'), _defineProperty(_contextStarts, forExpressionStart, 'ForExpression'), _defineProperty(_contextStarts, ifExpressionStart, 'IfExpression'), _defineProperty(_contextStarts, quantifiedExpressionStart, 'QuantifiedExpression'), _contextStarts);
var contextEnds = (_contextEnds = {}, _defineProperty(_contextEnds, Context, 'Context'), _defineProperty(_contextEnds, FunctionDefinition, 'FunctionDefinition'), _defineProperty(_contextEnds, ForExpression, 'ForExpression'), _defineProperty(_contextEnds, IfExpression, 'IfExpression'), _defineProperty(_contextEnds, QuantifiedExpression, 'QuantifiedExpression'), _defineProperty(_contextEnds, PathExpression, 'PathExpression'), _defineProperty(_contextEnds, FunctionInvocation, 'FunctionInvocation'), _defineProperty(_contextEnds, FilterExpression, 'FilterExpression'), _defineProperty(_contextEnds, ArithmeticExpression, 'ArithmeticExpression'), _contextEnds);
var ValueProducer = /*#__PURE__*/function () {
  /**
   * @param { Function } fn
   */
  function ValueProducer(fn) {
    _classCallCheck(this, ValueProducer);
    this.fn = fn;
  }
  _createClass(ValueProducer, [{
    key: "get",
    value: function get(variables) {
      return this.fn(variables);
    }

    /**
     * @param { Function }
     *
     * @return { ValueProducer }
     */
  }], [{
    key: "of",
    value: function of(fn) {
      return new ValueProducer(fn);
    }
  }]);
  return ValueProducer;
}();
var dateTimeLiterals = {
  'date and time': 1,
  'date': 1,
  'time': 1,
  'duration': 1
};
var dateTimeIdentifiers = Object.keys(dateTimeLiterals);
var Variables = /*#__PURE__*/function () {
  function Variables() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? 'Expressions' : _ref$name,
      _ref$tokens = _ref.tokens,
      tokens = _ref$tokens === void 0 ? [] : _ref$tokens,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? [] : _ref$children,
      _ref$parent = _ref.parent,
      parent = _ref$parent === void 0 ? null : _ref$parent,
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? {} : _ref$context,
      value = _ref.value,
      raw = _ref.raw;
    _classCallCheck(this, Variables);
    this.name = name;
    this.tokens = tokens;
    this.children = children;
    this.parent = parent;
    this.context = context;
    this.value = value;
    this.raw = raw;
  }
  _createClass(Variables, [{
    key: "enterScope",
    value: function enterScope(name) {
      var childScope = this.of({
        name: name,
        parent: this
      });
      LOG_VARS && console.log('[%s] enter', childScope.path, childScope.context);
      return childScope;
    }
  }, {
    key: "exitScope",
    value: function exitScope(str) {
      if (!this.parent) {
        LOG_VARS && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent(str, '  '));
        return this;
      }
      LOG_VARS && console.log('[%s] exit %o\n%s', this.path, this.context, indent(str, '  '));
      return this.parent.pushChild(this);
    }
  }, {
    key: "token",
    value: function token(part) {
      LOG_VARS && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);
      return this.assign({
        tokens: [].concat(_toConsumableArray(this.tokens), [part])
      });
    }
  }, {
    key: "literal",
    value: function literal(value) {
      LOG_VARS && console.log('[%s] literal %o', this.path, value);
      return this.pushChild(this.of({
        name: 'Literal',
        value: value
      }));
    }

    /**
     * Return computed scope value
     *
     * @return {any}
     */
  }, {
    key: "computedValue",
    value: function computedValue() {
      for (var scope = this;; scope = scope.children.slice(-1)[0]) {
        if (!scope) {
          return null;
        }
        if (scope.value) {
          return scope.value;
        }
      }
    }
  }, {
    key: "contextKeys",
    value: function contextKeys() {
      return Object.keys(this.context).map(normalizeContextKey);
    }
  }, {
    key: "path",
    get: function get() {
      var _this$parent, _this$parent$path;
      return ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : (_this$parent$path = _this$parent.path) === null || _this$parent$path === void 0 ? void 0 : _this$parent$path.concat(' > ', this.name)) || this.name;
    }

    /**
     * Return value of variable.
     *
     * @param { string } variable
     * @return { any } value
     */
  }, {
    key: "get",
    value: function get(variable) {
      var names = [variable, variable && normalizeContextKey(variable)];
      var contextKey = Object.keys(this.context).find(function (key) {
        return names.includes(normalizeContextKey(key));
      });
      if (typeof contextKey === 'undefined') {
        return undefined;
      }
      var val = this.context[contextKey];
      if (val instanceof ValueProducer) {
        return val.get(this);
      } else {
        return val;
      }
    }
  }, {
    key: "resolveName",
    value: function resolveName() {
      var variable = this.tokens.join(' ');
      var tokens = [];
      var parentScope = this.assign({
        tokens: tokens
      });
      var variableScope = this.of({
        name: 'VariableName',
        parent: parentScope,
        value: this.get(variable),
        raw: variable
      });
      LOG_VARS && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));
      return parentScope.pushChild(variableScope);
    }
  }, {
    key: "pushChild",
    value: function pushChild(child) {
      if (!child) {
        return this;
      }
      var parent = this.assign({
        children: [].concat(_toConsumableArray(this.children), [child])
      });
      child.parent = parent;
      return parent;
    }
  }, {
    key: "pushChildren",
    value: function pushChildren(children) {
      var parent = this;
      var _iterator = _createForOfIteratorHelper(children),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          parent = parent.pushChild(child);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return parent;
    }
  }, {
    key: "declareName",
    value: function declareName() {
      if (this.tokens.length === 0) {
        throw Error('no tokens to declare name');
      }
      var variableName = this.tokens.join(' ');
      LOG_VARS && console.log('[%s] declareName <%s>', this.path, variableName);
      return this.assign({
        tokens: []
      }).pushChild(this.of({
        name: 'Name',
        value: variableName
      }));
    }
  }, {
    key: "define",
    value: function define(name, value) {
      if (typeof name !== 'string') {
        LOG_VARS && console.log('[%s] no define <%s=%s>', this.path, name, value);
        return this;
      }
      LOG_VARS && console.log('[%s] define <%s=%s>', this.path, name, value);
      var context = _objectSpread(_objectSpread({}, this.context), {}, _defineProperty({}, name, value));
      return this.assign({
        context: context
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
  }, {
    key: "assign",
    value: function assign() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return Variables.of(_objectSpread(_objectSpread({}, this), options));
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
  }, {
    key: "of",
    value: function of() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultOptions = {
        context: this.context,
        parent: this.parent
      };
      return Variables.of(_objectSpread(_objectSpread({}, defaultOptions), options));
    }
  }], [{
    key: "of",
    value: function of(options) {
      var name = options.name,
        _options$tokens = options.tokens,
        tokens = _options$tokens === void 0 ? [] : _options$tokens,
        _options$children = options.children,
        children = _options$children === void 0 ? [] : _options$children,
        _options$parent = options.parent,
        parent = _options$parent === void 0 ? null : _options$parent,
        _options$context = options.context,
        context = _options$context === void 0 ? {} : _options$context,
        value = options.value,
        raw = options.raw;
      return new Variables({
        name: name,
        tokens: _toConsumableArray(tokens),
        children: _toConsumableArray(children),
        context: _objectSpread({}, context),
        parent: parent,
        value: value,
        raw: raw
      });
    }
  }]);
  return Variables;
}();
/**
 * @param { string } name
 *
 * @return { string } normalizedName
 */
function normalizeContextKey(name) {
  return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
}

/**
 * Wrap children of variables under the given named child.
 *
 * @param { Variables } variables
 * @param { string } name
 * @param { string } code
 * @return { Variables }
 */
function wrap(variables, scopeName, code) {
  var parts = variables.children.filter(function (c) {
    return c.name !== scopeName;
  });
  var children = variables.children.filter(function (c) {
    return c.name === scopeName;
  });
  var namePart = parts[0];
  var valuePart = parts[Math.max(1, parts.length - 1)];
  var name = namePart.computedValue();
  var value = (valuePart === null || valuePart === void 0 ? void 0 : valuePart.computedValue()) || null;
  return variables.assign({
    children: children
  }).enterScope(scopeName).pushChildren(parts).exitScope(code).define(name, value);
}

/**
 * @param { any } context
 *
 * @return { ContextTracker<Variables> }
 */
function trackVariables() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var start = Variables.of({
    context: context
  });
  return new _lr.ContextTracker({
    start: start,
    reduce: function reduce(variables, term, stack, input) {
      if (term === Context) {
        variables = variables.assign({
          value: variables.context
        });
      }
      if (term === IfExpression) {
        var _variables$children$s = variables.children.slice(-2),
          _variables$children$s2 = _slicedToArray(_variables$children$s, 2),
          thenPart = _variables$children$s2[0],
          elsePart = _variables$children$s2[1];
        variables = variables.assign({
          value: _objectSpread(_objectSpread({}, thenPart === null || thenPart === void 0 ? void 0 : thenPart.computedValue()), elsePart === null || elsePart === void 0 ? void 0 : elsePart.computedValue())
        });
      }
      if (term === FilterExpression) {
        var _variables$children$s3 = variables.children.slice(-2),
          _variables$children$s4 = _slicedToArray(_variables$children$s3, 2),
          sourcePart = _variables$children$s4[0],
          _ = _variables$children$s4[1];
        variables = variables.assign({
          value: sourcePart === null || sourcePart === void 0 ? void 0 : sourcePart.computedValue()
        });
      }
      if (term === FunctionInvocation) {
        var _variables$children = _toArray(variables.children),
          name = _variables$children[0],
          args = _variables$children.slice(1);

        // preserve type information through `get value(context, key)` utility
        if ((name === null || name === void 0 ? void 0 : name.raw) === 'get value') {
          variables = getContextValue(variables, args);
        }
      }
      var start = contextStarts[term];
      if (start) {
        return variables.enterScope(start);
      }
      var prefixedStart = prefixedContextStarts[term];

      // pull <expression> into new <prefixedStart> context
      if (prefixedStart) {
        var children = variables.children.slice(0, -1);
        var lastChild = variables.children.slice(-1)[0];
        return variables.assign({
          children: children
        }).enterScope(prefixedStart).pushChild(lastChild).assign({
          context: _objectSpread(_objectSpread({}, variables.context), lastChild === null || lastChild === void 0 ? void 0 : lastChild.computedValue())
        });
      }
      var code = input.read(input.pos, stack.pos);
      var end = contextEnds[term];
      if (end) {
        return variables.exitScope(code);
      }
      if (term === ContextEntry) {
        return wrap(variables, 'ContextEntry', code);
      }
      if (term === ForInExpression || term === QuantifiedInExpression) {
        return wrap(variables, 'InExpression', code);
      }

      // define <partial> within ForExpression body
      if (term === forExpressionBodyStart) {
        return variables.define('partial', ValueProducer.of(function (variables) {
          var _variables$children2;
          return (_variables$children2 = variables.children[variables.children.length - 1]) === null || _variables$children2 === void 0 ? void 0 : _variables$children2.computedValue();
        }));
      }
      if (term === ParameterName) {
        var _variables$children$s5 = variables.children.slice(-1),
          _variables$children$s6 = _slicedToArray(_variables$children$s5, 1),
          left = _variables$children$s6[0];
        var _name = left.computedValue();

        // TODO: attach type information
        return variables.define(_name, 1);
      }

      // pull <expression> into ArithmeticExpression child
      if (term === arithmeticPlusStart || term === arithmeticTimesStart || term === arithmeticExpStart) {
        var _children = variables.children.slice(0, -1);
        var _lastChild = variables.children.slice(-1)[0];
        return variables.assign({
          children: _children
        }).enterScope('ArithmeticExpression').pushChild(_lastChild);
      }
      if (term === arithmeticUnaryStart) {
        return variables.enterScope('ArithmeticExpression');
      }
      if (term === Identifier || term === AdditionalIdentifier || term === PropertyIdentifier) {
        return variables.token(code);
      }
      if (term === StringLiteral) {
        return variables.literal(code.replace(/^"|"$/g, ''));
      }
      if (term === BooleanLiteral) {
        return variables.literal(code === 'true' ? true : false);
      }
      if (term === NumericLiteral) {
        return variables.literal(parseFloat(code));
      }
      if (term === nil) {
        return variables.literal(null);
      }
      if (term === VariableName) {
        return variables.resolveName();
      }
      if (term === Name || term === PropertyName) {
        return variables.declareName();
      }
      if (term === expression0 || term === PositiveUnaryTest) {
        if (variables.tokens.length > 0) {
          throw new Error('uncleared name');
        }
      }
      if (term === expression0) {
        var parent = variables;
        while (parent.parent) {
          parent = parent.exitScope(code);
        }
        return parent;
      }
      return variables;
    }
  });
}
var variableTracker = trackVariables({});

// helpers //////////////

function getContextValue(variables, args) {
  if (!args.length) {
    return variables.assign({
      value: null
    });
  }
  if (args[0].name === 'Name') {
    args = extractNamedArgs(args, ['m', 'key']);
  }
  if (args.length !== 2) {
    return variables.assign({
      value: null
    });
  }
  var _args = args,
    _args2 = _slicedToArray(_args, 2),
    context = _args2[0],
    key = _args2[1];
  var keyValue = key === null || key === void 0 ? void 0 : key.computedValue();
  var contextValue = context === null || context === void 0 ? void 0 : context.computedValue();
  if (!contextValue || _typeof(contextValue) !== 'object' || typeof keyValue !== 'string') {
    return variables.assign({
      value: null
    });
  }
  return variables.assign({
    value: [normalizeContextKey(keyValue), keyValue].reduce(function (value, keyValue) {
      if (keyValue in contextValue) {
        return contextValue[keyValue];
      }
      return value;
    }, null)
  });
}
function extractNamedArgs(args, argNames) {
  var context = {};
  for (var i = 0; i < args.length; i += 2) {
    var _args$slice = args.slice(i, i + 2),
      _args$slice2 = _slicedToArray(_args$slice, 2),
      name = _args$slice2[0],
      value = _args$slice2[1];
    context[name.value] = value;
  }
  return argNames.map(function (name) {
    return context[name];
  });
}
var feelHighlighting = (0, _highlight.styleTags)({
  StringLiteral: _highlight.tags.string,
  NumericLiteral: _highlight.tags.number,
  BooleanLiteral: _highlight.tags.bool,
  'AtLiteral!': _highlight.tags.special(_highlight.tags.string),
  CompareOp: _highlight.tags.compareOperator,
  ArithOp: _highlight.tags.arithmeticOperator,
  'for if then else some every satisfies between return': _highlight.tags.controlKeyword,
  'in instance of and or': _highlight.tags.operatorKeyword,
  "function": _highlight.tags.definitionKeyword,
  as: _highlight.tags.keyword,
  'Type/...': _highlight.tags.typeName,
  Wildcard: _highlight.tags.special,
  "null": _highlight.tags["null"],
  LineComment: _highlight.tags.lineComment,
  BlockComment: _highlight.tags.blockComment,
  'VariableName! "?"': _highlight.tags.variableName,
  'DateTimeConstructor! SpecialFunctionName!': _highlight.tags["function"](_highlight.tags.special(_highlight.tags.variableName)),
  'List Interval': _highlight.tags.list,
  Context: _highlight.tags.definition(_highlight.tags.literal),
  'Name!': _highlight.tags.definition(_highlight.tags.variableName),
  'Key/Name! ContextEntryType/Name!': _highlight.tags.definition(_highlight.tags.propertyName),
  'PathExpression/VariableName!': _highlight.tags["function"](_highlight.tags.propertyName),
  'FormalParameter/ParameterName!': _highlight.tags["function"](_highlight.tags.definition(_highlight.tags.variableName)),
  '( )': _highlight.tags.paren,
  '[ ]': _highlight.tags.squareBracket,
  '{ }': _highlight.tags.brace,
  '.': _highlight.tags.derefOperator,
  ', ;': _highlight.tags.separator,
  '..': _highlight.tags.punctuation
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
var spec_identifier = {
  __proto__: null,
  "for": 10,
  "in": 30,
  "return": 34,
  "if": 38,
  then: 40,
  "else": 42,
  some: 46,
  every: 48,
  satisfies: 55,
  or: 58,
  and: 62,
  between: 70,
  instance: 86,
  of: 89,
  days: 99,
  time: 101,
  duration: 103,
  years: 105,
  months: 107,
  date: 109,
  list: 115,
  context: 121,
  "function": 128,
  "null": 154,
  "true": 324,
  "false": 324,
  "?": 168,
  external: 184,
  not: 207
};
var parser = _lr.LRParser.deserialize({
  version: 14,
  states: "!%SO`QYOOO$gQYOOOOQU'#Ce'#CeO$qQYO'#C`O%zQ^O'#FOOOQQ'#Fd'#FdO'dQYO'#FdO`QYO'#DUOOQU'#Em'#EmO)QQ^O'#D]OOQO'#Fk'#FkO,PQWO'#DuOOQU'#D|'#D|OOQU'#D}'#D}OOQU'#EO'#EOO,UOWO'#ERO,PQWO'#EPOOQU'#EP'#EPOOQU'#Fq'#FqOOQU'#Fo'#FoOOQU'#ET'#ETO,ZQYO'#EVOOQU'#FQ'#FQO-oQ^O'#FQO/RQYO'#EWO/]QWO'#EXOOQP'#Fy'#FyO/bQXO'#E`OOQU'#Fv'#FvOOQU'#FP'#FPOOQQ'#Eh'#EhQ`QYOOOOQQ'#FR'#FROOQQ'#F['#F[O,ZQYO'#CnOOQQ'#F]'#F]O$qQYO'#CrO/mQYO'#DvOOQU'#Fp'#FpO/rQYO'#EQOOQO'#EQ'#EQO,ZQYO'#EUO`QYO'#ETOOQO'#Fw'#FwO1UQYO'#DQO1lQWO'#F`OOQO'#DS'#DSO1wQYO'#FdQOQWOOO2OQWOOO2rQYO'#CdO3PQYO'#FTOOQQ'#Cc'#CcO3UQYO'#FSOOQQ'#Cb'#CbO3^QYO,58zO`QYO,59hOOQQ'#Fa'#FaOOQQ'#Fb'#FbOOQQ'#Fc'#FcO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#Fi'#FiO$qQYO,5:]OOQQ'#Fj'#FjO,ZQYO,5:_OOQQ,5;j,5;jO`QYO,59dO`QYO,59fO,ZQYO,59hO4|QYO,59hO5TQYO,59rOOQU,5:h,5:hO5YQ^O,59pOOQU-E8k-E8kO8XQYO'#FlOOQU,5:a,5:aOOQU,5:m,5:mOOQU,5:k,5:kO8cQYO,5:qOOQU,5;l,5;lO:nQYO,5:pO:xQWO,5:rO:}QYO,5:sOOQP'#Ed'#EdO;qQXO'#EcOOQO'#Eb'#EbO;xQWO'#EaO;}QWO'#FzO<VQWO,5:zOOQQ-E8f-E8fO=]QYO,59YO3PQYO'#F_OOQQ'#Cv'#CvO=dQYO'#F^OOQQ'#Cu'#CuO=lQYO,59^O=qQYO,5:bO=vQYO,5:lO9jQYO,5:pO={Q^O,5:oO,ZQYO'#ElO?eQWO,5;zO,ZQYOOOOQR'#Cf'#CfOOQQ'#Ei'#EiO@[QYO,59OO,ZQYO,5;oOOQQ'#FW'#FWO$qQYO'#EjO@lQYO,5;nO`QYO1G.fOOQQ'#FZ'#FZO@tQ^O1G/SOCZQ^O1G/[OEpQ^O1G/[OJlQ^O1G/[OOQU1G/w1G/wOKYQYO1G/yOMgQ^O1G/OO!!TQ^O1G/QO!#cQYO1G/SO,ZQYO1G/SOOQU1G/S1G/SO!#jQYO1G/^O!$UQ^O'#CdO!%hQYO'#FnOOQO'#Dy'#DyO!%rQWO'#DxO!%wQWO'#FmOOQO'#Dw'#DwOOQO'#Dz'#DzO!&PQWO,5<WOOQU1G0]1G0]O,ZQYO1G0[O,ZQYO'#ErO!&UQWO,5<YOOQU1G0^1G0^O!&aQWO'#EZO!&lQWO'#FxOOQO'#EY'#EYO!&tQWO1G0_OOQP'#Et'#EtO!&yQXO,5:}O,ZQYO,5:{O!'QQXO'#EuO!'YQWO,5<fOOQU1G0f1G0fO!'bQYO1G.tO,ZQYO,5;yO$qQYO'#EkO!)OQYO,5;xO`QYO1G.xO!)WQYO1G/|OOQO1G0W1G0WOOQO,5;W,5;WOOQO-E8j-E8jO!)]QWOOOOQQ-E8g-E8gO!)bQYO'#ClOOQQ1G1Z1G1ZOOQQ,5;U,5;UOOQQ-E8h-E8hO!)oQ^O7+$QOOQU7+%e7+%eO`QYO7+$nO!+XQYO,5:qO!+`QWO7+$nO!+eQ^O'#D[OOQU'#DZ'#DZO!.dQYO'#D^O!.iQYO'#D^O!.nQYO'#D^O!.sQ`O'#DfO!.xQ`O'#DiO!.}Q`O'#DmOOQU7+$x7+$xO,ZQYO,5:dO$qQYO'#EqO!/SQWO,5<XOOQU1G1r1G1rO!0YQYO7+%vO!0gQYO,5;^OOQO-E8p-E8pO!#jQYO,5:uO$qQYO'#EsO!0tQWO,5<dO!0|QYO7+%yOOQP-E8r-E8rO!1TQYO1G0gOOQO,5;a,5;aOOQO-E8s-E8sO!3tQ^O7+$`O!3{QYO1G1eOOQQ,5;V,5;VOOQQ-E8i-E8iO!4VQ^O7+$dOOQO7+%h7+%hO,ZQYO,59WO!5oQ^O<<HYOOQU<<HY<<HYO$qQYO'#EnO!8UQ^O,59vO!;TQYO,59xO!;YQYO,59xO!;_QYO,59xO!;dQYO,5:QO$qQYO,5:TO!<OQbO,5:XO!<VQYO1G0OOOQO,5;],5;]OOQO-E8o-E8oO!<aQ^O<<IbOOQU<<Ib<<IbOOQO1G0a1G0aOOQO,5;_,5;_OOQO-E8q-E8qO!?`Q^O'#E]OOQU<<Ie<<IeO`QYO<<IeO`QYO<<GzO!@xQYO1G.rOOQU,5;Y,5;YOOQU-E8l-E8lO!ASQYO1G/dOOQU1G/d1G/dO!AXQbO'#D]O!AjQ`O'#D[O!AuQ`O1G/lO!AzQWO'#DlO!BPQ`O'#FeOOQO'#Dk'#DkO!BXQ`O1G/oOOQO'#Dp'#DpO!B^Q`O'#FgOOQO'#Do'#DoO!BfQ`O1G/sOOQUAN?PAN?PO!BkQ^OAN=fOOQU7+%O7+%OO!DTQ`O,59vOOQU7+%W7+%WO!;dQYO,5:WO$qQYO'#EoO!D`Q`O,5<POOQU7+%Z7+%ZO!;dQYO'#EpO!DhQ`O,5<RO!DpQ`O7+%_OOQO1G/r1G/rOOQO,5;Z,5;ZOOQO-E8m-E8mOOQO,5;[,5;[OOQO-E8n-E8nO!#jQYO<<HyOOQUAN>eAN>eO!DuQ^O'#FQO,ZQYO'#ETO,ZQYO,59hO,ZQYO,59pO,ZQYO,59pO,ZQYO,59pO,ZQYO,59dO,ZQYO,59fO!FyQYO,59hO!GQQYO,5:oO,ZQYO1G.fO!GqQYO1G/SO!I_QYO1G/[O!J{QYO1G/[O!MvQYO1G/OO# kQYO1G/QO# {QYO1G.tO,ZQYO1G.xO##iQYO7+$QO,ZQYO7+$nO#$YQYO7+%yO#&QQYO7+$`O#&XQYO7+$`O#&`Q^O7+$`O#&gQYO7+$dO#'WQYO<<HYO$qQYO'#EnO#(tQYO'#E]O,ZQYO<<IeO,ZQYO<<GzO#)eQYOAN=fO!;dQYO<<HyO,ZQYO'#DUO#*UQ^O'#DQO3^QYO,58zO#+nQYO,59YO#+uQYO,59^O#+zQYO1G/SO#,RQWO1G0_O!'bQYO1G.tO#,WQ`O7+%_O# {QYO1G.tO$qQYO'#C`O,ZQYO'#CnO$qQYO'#CrO,ZQYO,59hO:}QYO,5:sO#,]QYO,59YO#,dQ`O1G/sO#,iQYO,59YO#,pQWO'#EXO,ZQYO'#CnO!'bQYO'#ETO!'bQYO,59hO!'bQYO,59pO!'bQYO,59pO!'bQYO,59pO!'bQYO,59dO!'bQYO,59fO#.`QYO,59hO#/hQ^O,5:oO!'bQYO1G.fO#1TQ^O1G/SO#1[Q^O1G/[O#1cQ^O1G/[O#1jQ^O1G/OO#2QQ^O1G/QO!'bQYO1G.xO#2eQ^O7+$QO!'bQYO7+$nO#4QQYO7+%yO#4XQ^O7+$dO#5tQ^O<<HYO!<OQbO,5:XO#5{Q^O'#E]O!'bQYO<<IeP!'bQYO<<GzP#7hQ^OAN=fO#8kQ^O'#DQO,ZQYO'#CnO!'bQYO'#DUO3^QYO,58zO#:WQYO,59^O#:]QYO1G/SO#:dQWO1G0_O#:iQ`O'#DmO# {QYO'#ETO# {QYO,59hO# {QYO,59pO# {QYO,59pO# {QYO,59pO# {QYO,59dO# {QYO,59fO#<XQYO,59hO#=aQYO,5:oO# {QYO1G.fO#>TQYO1G/SO#>[QYO1G/[O#>cQYO1G/[O#>jQYO1G/OO#?QQYO1G/QO# {QYO1G.xO#?eQYO7+$QO# {QYO7+$nO#@XQYO7+%yO#@`QYO7+$dO#ASQYO<<HYO#AZQYO'#E]O# {QYO<<IeP# {QYO<<GzP#A}QYOAN=fO# {QYO'#DUO3^QYO,58zO#CQQYO,59^O#CVQYO1G/SO#C^QWO1G0_O$qQYO'#C`O$qQYO'#CrO,ZQYO,59hO:}QYO,5:sO#CcQWO'#EXO$qQYO'#C`O$qQYO'#CrO#ChQYO'#DQO,ZQYO,59hO:}QYO,5:sO#DRQWO'#EX",
  stateData: "#DW~O#pOS#qOSPOSQOS~OTpOZUO[TOcqOgsOhsOrzOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~OTpO[TOcqOgsOhsOr&lOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~OZ!PO#Z!RO~P!|O#lQO#mQO~OZ!ZO[!ZO]![O^![O_!iOm!fOo!gOq!YOr!YOs!hOy!]O{!jO!h!cO#x!aOu$_X~O#n!eO$o!eOT#rXc#rXg#rXh#rX!S#rX!T#rX!U#rX!W#rX!b#rX!f#rX!o#rX!v#rX#R#rX#j#rX#l#rX#m#rX$f#rX$g#rX$h#rX$i#rX~P$yO$f!kOT$WXZ$WX[$WXc$WXg$WXh$WXr$WXu$WX!S$WX!T$WX!U$WX!W$WX!b$WX!f$WX!h$WX!o$WX!v$WX#R$WX#l$WX#m$WX$g$WX$h$WX$i$WX~O#lQO#mQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!b!PX!f!PX!h!PX!o!PX!v!PX#R!PX#j!PX#n!PX#x!PX$f!PX$g!PX$h!PX$i!PX$o!PX#|!PXw!PX#{!PXd!PXa!PX#Q!PXe!PXk!PX~Ou!nO~O$g]O~OZUO~P!|O#n!sOZ#tX[#tX]#tX^#tX_#tXm#tXo#tXq#tXr#tXs#tXu#tXy#tX{#tX!f#tX!h#tX#j#tX#x#tXe#tX~OT#tXc#tXg#tXh#tX!S#tX!T#tX!U#tX!W#tX!b#tX!o#tX!v#tX#R#tX#l#tX#m#tX#n#tX$f#tX$g#tX$h#tX$i#tX$o#tX~P,bOZUO!f$bP~P!|Ou!vO~O#k!wO$g]O#Q$nP~Oo#UO~Oo#VOu!tX~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOu$_X#jtX#|tXwtX#{tX!ftXdtXatX#QtXktX~O_&sOm&qOo&rOq&mOr&mOs'jO~P/zO#|#YO#j$SXw$SX~O#j#YX~P'dOu#[O~OZ#]O[#]O]#]O^#]O#lQO#mQO#x#]O#y#]O$YWX~O_WXwWX#|WX~P2TO_#aO~O#|#bOa#vX~Oa#eO~OTpOZUO[TOcqOgsOhsOrzO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P3cO|#qO~O{!jO!h!cO#x!aOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau$_Xyxa!Sxa!Txa!Uxa!Wxa!bxa!fxa!oxa!vxa#Rxa#jxa#lxa#mxa#nxa$fxa$gxa$hxa$ixa$oxa#|xawxa#{xadxaaxa#Qxaexakxa~OZUOw$bP~P!|OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOw#zOy!]O{!jO!h!cO#x!aO#{#{Ou$_X~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aO#{#{Ou$_X~O#|#|O!f$bX~P9jO!f$OO~O#lQO#mQOw$lP~OZ#]O[#]O]#]O^#]O#k!wO#x#]O#y#]O~O$Y#VX~P;YO$Y$VO~O#|$WO#Q$nX~O#Q$YO~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aOu$_X~Od$ZO~P<[O#|$]Ok$QX~Ok$_O~O!V$`O~O!S$aO~OT!wac!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$o!wa~P$yO#|#YO#j$Saw$Sa~OZ#]O[#]O]#]O^#]O#lQO#mQO#x#]O#y#]O~O_Wa$YWawWa#|Wa~P?pO#|#bOa#va~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTpi_picpigpihpimpiopiqpirpispiu$_X!Spi!Tpi!Upi!Wpi!bpi!fpi!opi!vpi#Rpi#jpi#lpi#mpi#npi$fpi$gpi$hpi$ipi$opi~O]![O^![Oy!]O{!jO!h!cO#x!aOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxi~Oy!]O{!jO!h!cO#x!aOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxi~O{!jO!h!cO#x!aOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxiexi~Oyxi#|xiwxi#{xidxiaxi#Qxikxi~PHVO!f$kO~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTlicliglihlimliu$_X!Sli!Tli!Uli!Wli!bli!fli!oli!vli#Rli#jli#lli#mli#nli$fli$gli$hli$ili$oli~O_!iOo!gOq!YOr!YOs!hO~PKaOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTnicnignihnimnioniu$_X!Sni!Tni!Uni!Wni!bni!fni!oni!vni#Rni#jni#lni#mni#nni$fni$gni$hni$ini$oni~O_!iOq!YOr!YOs!hO~PMzOZ!ZO[!ZO]![O^![O_&sOm&qOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aOu$_X~Oo$lO~P!!eO!R$qO!U$rO!W$sO!Z$tO!^$uO!b$vO#lQO#mQO~OZ#aX[#aX]#aX^#aX_#aXm#aXo#aXq#aXr#aXs#aXu#aXw#aXy#aX{#aX!h#aX#l#aX#m#aX#n#aX#x#aX#|#aX~P2TO#|#|Ow$bX~P<[O$Y$xO~O#|$yOw$aX~Ow${O~O#|#|O!f$baw$ba~O$Y%POw!}X#|!}X~O#|%QOw$lX~Ow%SO~O$Y#Va~P;YO#k!wO$g]O~O#|$WO#Q$na~OTpOZUO[TOcqOgsOhsOr'qOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~O#|$]Ok$Qa~O!T%^O~Ow!QO~O#{%_Oa`X#|`X~P<[OTSqcSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$oSq~P$yO#|tX~P8cOw%aO~O#x%bOT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!b!OX!f!OX!h!OX!o!OX!v!OX#R!OX#j!OX#l!OX#m!OX#n!OX$f!OX$g!OX$h!OX$i!OX$o!OX#|!OXw!OX#{!OXd!OXa!OX#Q!OXe!OXk!OX~Oo%dO~Oo%eO~Oo%fO~O![%gO~O![%hO~O![%iO~O#|$yOw$aa~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO#x!aOu$_X~Ow%nO!f%nO!h%mO~P!/[O!f#fa#|#faw#fa~P<[O#|%QOw$la~O#O%tO~P`O#Q#Ti#|#Ti~P<[OZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOTbqcbqgbqhbqu$_X!Sbq!Tbq!Ubq!Wbq!bbq!fbq!obq!vbq#Rbq#jbq#lbq#mbq#nbq$fbq$gbq$hbq$ibq$obq~Oe%uO~P!1_Ok$Ri#|$Ri~P<[OTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ofq~P$yOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTpy_pycpygpyhpympyopyqpyrpyspyu$_X!Spy!Tpy!Upy!Wpy!bpy!fpy!opy!vpy#Rpy#jpy#lpy#mpy#npy$fpy$gpy$hpy$ipy$opy~O#x%bOT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!b!Oa!f!Oa!h!Oa!o!Oa!v!Oa#R!Oa#j!Oa#l!Oa#m!Oa#n!Oa$f!Oa$g!Oa$h!Oa$i!Oa$o!Oa#|!Oaw!Oa#{!Oad!Oaa!Oa#Q!Oae!Oak!Oa~O!S%yO~O!V%yO~O!S%zO~O!R$qO!U$rO!W$sO!Z$tO!^$uO!b(dO#lQO#mQO~O!X$ZP~P!;dOw!li#|!li~P<[OT$^XZ$^X[$^X]!xy^!xy_!xyc$^Xg$^Xh$^Xm!xyo!xyq!xyr$^Xs!xyu$^Xy!xy{!xy!S$^X!T$^X!U$^X!W$^X!b$^X!f$^X!h$^X!o$^X!v$^X#R$^X#j!xy#l$^X#m$^X#n!xy#x!xy$f$^X$g$^X$h$^X$i$^X$o!xy#|!xyw!xy#{!xyd!xya!xy#Q!xye!xyk!xy~OT#PXc#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$o#PX~P$yOa`i#|`i~P<[O!T&YO~O#lQO#mQO!X!PX#x!PX#|!PX~O#x'VO!X!OX#|!OX~O!X&[O~O$Y&]O~O#|&^O!X$XX~O!X&`O~O#|&aO!X$ZX~O!X&cO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!bb!R!fb!R!ob!R!vb!R#Rb!R#jb!R#lb!R#mb!R#nb!R$fb!R$gb!R$hb!R$ib!R$ob!R~P$yO#x'VO!X!Oa#|!Oa~O#|&^O!X$Xa~O#|&aO!X$Za~O$[&iO~O#|#tXw#tX#{#tXd#tXa#tX#Q#tXk#tX~P,bOTpOZUO[TOcqOgsOhsOr&lO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P!E`O#j!wa#|!waw!wa#{!wa!f!wad!waa!wa#Q!wak!wa~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aO_pimpiopiqpirpispiu$_X#jpi#|piwpi#{pi!fpidpiapi#Qpikpi~O]![O^![Oy!]O{!jO!h!cO#x!aOZxi[xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi#{xi!fxidxiaxi#Qxikxi~Oy!]O{!jO!h!cO#x!aOZxi[xi]xi^xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi#{xi!fxidxiaxi#Qxikxi~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOmliu$_X#jli#|liwli#{li!flidliali#Qlikli~O_&sOo&rOq&mOr&mOs'jO~P!LiOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOmnioniu$_X#jni#|niwni#{ni!fnidniani#Qnikni~O_&sOq&mOr&mOs'jO~P!NZOTpOZUO[TOcqOgsOhsOr(eOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~O#jSq#|SqwSq#{Sq!fSqdSqaSq#QSqkSq~P<[OZUO#O'XO~P!|OZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X#jbq#|bqwbq#{bq!fbqdbqabq#Qbqkbq~Oe'YO~P#$dOebq~P#$dOebq~P!1_O#jfq#|fqwfq#{fq!ffqdfqafq#Qfqkfq~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aO_pympyopyqpyrpyspyu$_X#jpy#|pywpy#{py!fpydpyapy#Qpykpy~O#j#PX#|#PXw#PX#{#PX!f#PXd#PXa#PX#Q#PXk#PX~P<[O#jb!R#|b!Rwb!R#{b!R!fb!Rdb!Rab!R#Qb!Rkb!R~P<[OTtXctXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$otX~P$yOd&{O~P<[Ok&|O~Oo'OO~P!!eOw'PO~O$['[O~Od'dO~P<[O!X'eO~Od'fO~P<[Ou'kO~OTpOZUO[TOcqOgsOhsOr'qO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P#,uOZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOu$_X~OT!wac!wae!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$o!wa~P#.gOepi~P@tOexi~PCZOexi~PEpO_'xOo'wOq'rOr'rOs)]Oeli~PKaO_'xOq'rOr'rOs)]Oeni~PMzOTSqcSqeSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$oSq~P#.gO#O(YO~P!'bOTfqcfqefqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ofq~P#.gOepy~P!5oOT#PXc#PXe#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$o#PX~P#.gOZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOu$_X~Qb!RTtXctXetXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$otX~P#.gOk(QO~Oo(SO~P!!eOw(TO~O![(WO~OTpOZUO[TOcqOgsOhsOr(eO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P#:nOZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X~Oe!wa#j!wa#|!waw!wa#{!wa!f!wad!waa!wa#Q!wak!wa~P#<`Oepi~P!GqOexi~P!I_Oexi~P!J{O_(lOo(kOq(fOr(fOs)VOeli~P!LiO_(lOq(fOr(fOs)VOeni~P!NZOeSq#jSq#|SqwSq#{Sq!fSqdSqaSq#QSqkSq~P#<`O#O({O~P# {Oefq#jfq#|fqwfq#{fq!ffqdfqafq#Qfqkfq~P#<`Oepy~P#'WOe#PX#j#PX#|#PXw#PX#{#PX!f#PXd#PXa#PX#Q#PXk#PX~P#<`OZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X~Qb!Rk(tO~Oo(vO~P!!eOw(wO~Ou)WO~O_(lOm(jOo(kOq(fOr(fOs)VOetX~P/zOu)^O~O",
  "goto": "!7p$oPPPP$pP&p&|'V'r*mPPPPP*vP$pPPP$pPP*y+VP$pP$pP$pPPP+`P+nP$pP$pPP+w,^,i,^PPPPPPP,^PP,^P/P/S,^P/Y/`$pP$pP$p/g1g1j1p1gP1{3{1{1{6S8SP$p:S$p<S<S>S>`P>iPP<S>u>{6O?PP?XP?[?b?i?o?u?{B_BiBoBuB{CSCYC`PPPPPPPPCfCjHvJvL|MSPPMZPPMaMm! s!#y!$P!$W!$]!%y!'k!)a!+gP!+jP!+n!-`!/Q!1Q!1W!1Z$p!1a!1aPPPPHv!3a!5g!5m!7m${fOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!XRQ'_'gQ(`)YR)P)TW!VR'g)T)YR$h#bY!TR#b'g)T)YY#Pt$]'i)U)Z^#t!n!v$y%Q'k)W)^T&O%h&^%fWOPVXehoryz!Y!^!_!`!b!d!f!g!h!i#Y#[#`#d#o#q#{#|$V$Z$[$_$l$x%P%S%_%b%g%i%t%u%{&]&a&i&l&m&n&o&p&q&r&s&u&{&|'O'P'V'X'Y'[']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(W(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]t!SRt!v#b$]$y%Q%h&^'g'i'k)T)U)W)Y)Z)^U#^!S#_#rR#r!nU#^!S#_#rT$T!x$UR$g#`Q#TtQ'a'iQ(a)ZR)Q)UW#Rt'i)U)ZR%Z$]U}P#[#oW#p!i&s'x(lR$b#YQ!QPQ$d#[R$n#oQ$w#qQ%o%PQ%}%gU&S%i&a(WQ&d&]T&j&i'[c$p#q%P%g%i&]&a&i'[(W!fgOVoz!Y!^!_!`!f!g!i#d$Z$_$l%S%t%u'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_Q#j!bU$o#q%P&iS%w%b'V[%|%g%i&]&a'[(W#e&kPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'f'h'j'p(^(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R&R%hQ&P%hR&e&^Q&V%iR'm(WS&T%i(WR&g&a${YOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R#y!nQ#v!nR%k$yS#u!n$yZ$P!v%Q'k)W)^${bOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]$zbOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!p_T!yk$W${`OPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${aOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${dOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${lOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q$S!vQ'c'kQ(c)^R)S)WW$Q!v'k)W)^R%p%QW%s%S'P(T(wX&W%t'X(Y({Q!{kR%V$WT!zk$WS!xk$WT$T!x$UR!QPQoOR!}oS#_!S#rR$e#_Q#c!VR$i#cQ$^#RR%[$^Q#Z}R$c#Z%UXOPVehoryz!Y!^!_!`!b!d!f!g!h!i!n#Y#[#`#d#o#q#{#|$V$Z$[$_$l$x%P%S%_%b%t%u&i&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]S!mX%{_%{%g%i&]&a'V'[(WQ%c$oS%x%c&ZR&Z%|Q&_&PR&f&_Q&b&TR&h&bQ$z#vR%l$zS#}!t#sR%O#}Q%R$QR%q%RQ$U!xR%T$UQ$X!{R%W$XTnOoSSOoW|P#Y#[&sW!lV'](_)OQ!reQ!thQ#OrQ#WyQ#XzQ#f!YQ#g!^Q#h!_W#i!`&p'u(iQ#k!dQ#l!fQ#m!gQ#n!hQ#s!nQ$f#`Q$j#dQ$m#oQ$|#{Q$}#|Q%U$VQ%X$ZQ%Y$[Q%]$_Q%`$lQ%j$xS%r%S%tQ%v%_Q&X%uQ&t&lQ&v&mQ&w&nQ&x&oQ&y&qQ&z&rQ&}&uQ'Q&{Q'R'fQ'S'dQ'T&|Q'U'OS'W'P'XQ'Z'YQ'^!iQ'`'hQ'b'jQ'l'pQ'n(^Q'y'qQ'{'rQ'|'sQ'}'tQ(O'vQ(P'wQ(R'zQ(U(QQ(V(SS(X(T(YQ([(ZQ(]'xQ(b)]Q(m(eQ(o(fQ(p(gQ(q(hQ(r(jQ(s(kQ(u(nQ(x(tQ(y(vS(z(w({Q(}(|Q)R)VR)[(l${mOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]rROVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'gPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)T&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)Y$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X!WR'g)T)YZ!UR#b'g)T)YQ#`!TR$[#PQ#d!XQ&u'_Q'z(`R(n)PrrOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'hPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r'p$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_s(^&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)OrtOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'iPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)U&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)Z$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X#St'i)U)ZZ#Qt$]'i)U)ZV!OP#[#of!^S#X#f#l#m$j%]%`%r&X'^!`&n|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&y&z&}'T'U'W'Z'`'b'l'n(b)Rh's%X'S'y'{(O(P(R(U(V(X([(]i(g'Q'R(m(o(r(s(u(x(y(z(})[h!_S#X#f#g#l#m$j%]%`%r&X'^!b&o|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&w&y&z&}'T'U'W'Z'`'b'l'n(b)Rj't%X'S'y'{'|(O(P(R(U(V(X([(]k(h'Q'R(m(o(p(r(s(u(x(y(z(})[j!`S#X#f#g#h#l#m$j%]%`%r&X'^!d&p|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&w&x&y&z&}'T'U'W'Z'`'b'l'n(b)Rl'u%X'S'y'{'|'}(O(P(R(U(V(X([(]m(i'Q'R(m(o(p(q(r(s(u(x(y(z(})[rVOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p']Pehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r(_$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_s)O&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)OR&Q%hT&U%i(W$_!bS|!l!r!t#O#W#X#f#g#h#i#k#l#m#n#s$f$j$m$|$}%U%X%Y%]%`%j%r%v&X&t&v&w&x&y&z&}'Q'R'S'T'U'W'Z'^'`'b'l'n'y'{'|'}(O(P(R(U(V(X([(](b(m(o(p(q(r(s(u(x(y(z(})R)[$_!dS|!l!r!t#O#W#X#f#g#h#i#k#l#m#n#s$f$j$m$|$}%U%X%Y%]%`%j%r%v&X&t&v&w&x&y&z&}'Q'R'S'T'U'W'Z'^'`'b'l'n'y'{'|'}(O(P(R(U(V(X([(](b(m(o(p(q(r(s(u(x(y(z(})R)[${ZOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!oZR!q`R#w!nQ!uhR#x!n${cOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]riOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'oPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)X&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)_$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X$R!v'k)W)^${kOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R!|k",
  nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
  maxTerm: 169,
  context: variableTracker,
  nodeProps: [["group", -17, 4, 18, 22, 28, 30, 32, 40, 42, 67, 69, 71, 84, 85, 87, 88, 89, 96, "Expression", 47, "Expression Expression", -5, 77, 78, 79, 80, 81, "Expression Literal"], ["closedBy", 37, ")", 70, "]", 95, "}"], ["openedBy", 39, "(", 68, "[", 94, "{"]],
  propSources: [feelHighlighting],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 14,
  tokenData: "+l~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx&cxy&hyz&mz{&r{|'P|}'U}!O'Z!O!P'h!P!Q(Q!Q![){![!]*^!]!^*c!^!_*h!_!`$f!`!a*w!b!c+R!}#O+W#P#Q+]#Q#R&z#o#p+b#q#r+g$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY#p~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O#q~~$cP!_!`$f~$kOq~~$pW$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&]<%lO$k~%_O$g~~%bRO;'S$k;'S;=`%k;=`O$k~%pX$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&];=`<%l$k<%lO$k~&`P;=`<%l$k~&hO#y~~&mOu~~&rOw~~&wP^~z{&z~'POy~~'UO[~~'ZO#|~R'`PZP!`!a'cQ'hO$[Q~'mQ#x~!O!P's!Q!['x~'xO#{~~'}P$f~!Q!['x~(VQ]~z{(]!P!Q)d~(`TOz(]z{(o{;'S(];'S;=`)^<%lO(]~(rVOz(]z{(o{!P(]!P!Q)X!Q;'S(];'S;=`)^<%lO(]~)^OQ~~)aP;=`<%l(]~)iSP~OY)dZ;'S)d;'S;=`)u<%lO)d~)xP;=`<%l)d~*QQ$f~!O!P*W!Q![){~*ZP!Q!['x~*cO$Y~~*hO$o~R*oP![QrP!_!`*rP*wOrPR+OP!XQrP!_!`*r~+WO$i~~+]O!h~~+bO!f~~+gO#R~~+lO#Q~",
  tokenizers: [propertyIdentifiers, identifiers, insertSemicolon, 0, 1],
  topRules: {
    "Expressions": [0, 3],
    "UnaryTests": [1, 101]
  },
  dynamicPrecedences: {
    "30": -1,
    "71": -1,
    "73": -1,
    "126": -1
  },
  specialized: [{
    term: 120,
    get: function get(value) {
      return spec_identifier[value] || -1;
    }
  }],
  tokenPrec: 0
});
exports.parser = parser;

}).call(this)}).call(this,require('_process'))
},{"@lezer/highlight":23,"@lezer/lr":24,"_process":4}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

// these aren't really private, but nor are they really useful to document
/**
 * @private
 */
var LuxonError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(LuxonError, _Error);
  function LuxonError() {
    return _Error.apply(this, arguments) || this;
  }
  return LuxonError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @private
 */
var InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {
  _inheritsLoose(InvalidDateTimeError, _LuxonError);
  function InvalidDateTimeError(reason) {
    return _LuxonError.call(this, "Invalid DateTime: " + reason.toMessage()) || this;
  }
  return InvalidDateTimeError;
}(LuxonError);

/**
 * @private
 */
var InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {
  _inheritsLoose(InvalidIntervalError, _LuxonError2);
  function InvalidIntervalError(reason) {
    return _LuxonError2.call(this, "Invalid Interval: " + reason.toMessage()) || this;
  }
  return InvalidIntervalError;
}(LuxonError);

/**
 * @private
 */
var InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {
  _inheritsLoose(InvalidDurationError, _LuxonError3);
  function InvalidDurationError(reason) {
    return _LuxonError3.call(this, "Invalid Duration: " + reason.toMessage()) || this;
  }
  return InvalidDurationError;
}(LuxonError);

/**
 * @private
 */
var ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {
  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);
  function ConflictingSpecificationError() {
    return _LuxonError4.apply(this, arguments) || this;
  }
  return ConflictingSpecificationError;
}(LuxonError);

/**
 * @private
 */
var InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {
  _inheritsLoose(InvalidUnitError, _LuxonError5);
  function InvalidUnitError(unit) {
    return _LuxonError5.call(this, "Invalid unit " + unit) || this;
  }
  return InvalidUnitError;
}(LuxonError);

/**
 * @private
 */
var InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {
  _inheritsLoose(InvalidArgumentError, _LuxonError6);
  function InvalidArgumentError() {
    return _LuxonError6.apply(this, arguments) || this;
  }
  return InvalidArgumentError;
}(LuxonError);

/**
 * @private
 */
var ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {
  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);
  function ZoneIsAbstractError() {
    return _LuxonError7.call(this, "Zone is an abstract class") || this;
  }
  return ZoneIsAbstractError;
}(LuxonError);

/**
 * @private
 */

var n = "numeric",
  s = "short",
  l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s
};
var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l
};
var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

/**
 * @interface
 */
var Zone = /*#__PURE__*/function () {
  function Zone() {}
  var _proto = Zone.prototype;
  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  _proto.offsetName = function offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */;
  _proto.formatOffset = function formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */;
  _proto.offset = function offset(ts) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */;
  _proto.equals = function equals(otherZone) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */;
  _createClass(Zone, [{
    key: "type",
    get:
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    function get() {
      throw new ZoneIsAbstractError();
    }

    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */
  }, {
    key: "name",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "ianaName",
    get: function get() {
      return this.name;
    }

    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */
  }, {
    key: "isUniversal",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "isValid",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }]);
  return Zone;
}();

var singleton$1 = null;

/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */
var SystemZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(SystemZone, _Zone);
  function SystemZone() {
    return _Zone.apply(this, arguments) || this;
  }
  var _proto = SystemZone.prototype;
  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
      locale = _ref.locale;
    return parseZoneInfo(ts, format, locale);
  }

  /** @override **/;
  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }

  /** @override **/;
  _proto.offset = function offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }

  /** @override **/;
  _proto.equals = function equals(otherZone) {
    return otherZone.type === "system";
  }

  /** @override **/;
  _createClass(SystemZone, [{
    key: "type",
    get: /** @override **/
    function get() {
      return "system";
    }

    /** @override **/
  }, {
    key: "name",
    get: function get() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }

    /** @override **/
  }, {
    key: "isUniversal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "instance",
    get:
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    function get() {
      if (singleton$1 === null) {
        singleton$1 = new SystemZone();
      }
      return singleton$1;
    }
  }]);
  return SystemZone;
}(Zone);

var dtfCache = {};
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
  }
  return dtfCache[zone];
}
var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6
};
function hackyOffset(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, ""),
    parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
    fMonth = parsed[1],
    fDay = parsed[2],
    fYear = parsed[3],
    fadOrBc = parsed[4],
    fHour = parsed[5],
    fMinute = parsed[6],
    fSecond = parsed[7];
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}
function partsOffset(dtf, date) {
  var formatted = dtf.formatToParts(date);
  var filled = [];
  for (var i = 0; i < formatted.length; i++) {
    var _formatted$i = formatted[i],
      type = _formatted$i.type,
      value = _formatted$i.value;
    var pos = typeToPos[type];
    if (type === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}
var ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */
var IANAZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(IANAZone, _Zone);
  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  IANAZone.create = function create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }
    return ianaZoneCache[name];
  }

  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */;
  IANAZone.resetCache = function resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }

  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
   * @return {boolean}
   */;
  IANAZone.isValidSpecifier = function isValidSpecifier(s) {
    return this.isValidZone(s);
  }

  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */;
  IANAZone.isValidZone = function isValidZone(zone) {
    if (!zone) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", {
        timeZone: zone
      }).format();
      return true;
    } catch (e) {
      return false;
    }
  };
  function IANAZone(name) {
    var _this;
    _this = _Zone.call(this) || this;
    /** @private **/
    _this.zoneName = name;
    /** @private **/
    _this.valid = IANAZone.isValidZone(name);
    return _this;
  }

  /** @override **/
  var _proto = IANAZone.prototype;
  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
      locale = _ref.locale;
    return parseZoneInfo(ts, format, locale, this.name);
  }

  /** @override **/;
  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }

  /** @override **/;
  _proto.offset = function offset(ts) {
    var date = new Date(ts);
    if (isNaN(date)) return NaN;
    var dtf = makeDTF(this.name);
    var _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),
      year = _ref2[0],
      month = _ref2[1],
      day = _ref2[2],
      adOrBc = _ref2[3],
      hour = _ref2[4],
      minute = _ref2[5],
      second = _ref2[6];
    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    }

    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
    var adjustedHour = hour === 24 ? 0 : hour;
    var asUTC = objToLocalTS({
      year: year,
      month: month,
      day: day,
      hour: adjustedHour,
      minute: minute,
      second: second,
      millisecond: 0
    });
    var asTS = +date;
    var over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }

  /** @override **/;
  _proto.equals = function equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }

  /** @override **/;
  _createClass(IANAZone, [{
    key: "type",
    get: function get() {
      return "iana";
    }

    /** @override **/
  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }

    /** @override **/
  }, {
    key: "isUniversal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return this.valid;
    }
  }]);
  return IANAZone;
}(Zone);

var _excluded = ["base"],
  _excluded2 = ["padTo", "floor"];

// todo - remap caching

var intlLFCache = {};
function getCachedLF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var key = JSON.stringify([locString, opts]);
  var dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}
var intlDTCache = {};
function getCachedDTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var key = JSON.stringify([locString, opts]);
  var dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}
var intlNumCache = {};
function getCachedINF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var key = JSON.stringify([locString, opts]);
  var inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}
var intlRelCache = {};
function getCachedRTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var _opts = opts;
    _opts.base;
    var cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, _excluded); // exclude `base` from the options
  var key = JSON.stringify([locString, cacheKeyOpts]);
  var inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}
var sysLocaleCache = null;
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}
function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:

  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u

  // private subtags and unicode subtags have ordering requirements,
  // and we're not properly parsing this, so just strip out the
  // private ones if they exist.
  var xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }
  var uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    var options;
    var selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      var smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }
    var _options = options,
      numberingSystem = _options.numberingSystem,
      calendar = _options.calendar;
    return [selectedStr, numberingSystem, calendar];
  }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }
    if (outputCalendar) {
      localeStr += "-ca-" + outputCalendar;
    }
    if (numberingSystem) {
      localeStr += "-nu-" + numberingSystem;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}
function mapMonths(f) {
  var ms = [];
  for (var i = 1; i <= 12; i++) {
    var dt = DateTime.utc(2016, i, 1);
    ms.push(f(dt));
  }
  return ms;
}
function mapWeekdays(f) {
  var ms = [];
  for (var i = 1; i <= 7; i++) {
    var dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}
function listStuff(loc, length, defaultOK, englishFn, intlFn) {
  var mode = loc.listingMode(defaultOK);
  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}
function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}

/**
 * @private
 */
var PolyNumberFormatter = /*#__PURE__*/function () {
  function PolyNumberFormatter(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;
    opts.padTo;
      opts.floor;
      var otherOpts = _objectWithoutPropertiesLoose(opts, _excluded2);
    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      var intlOpts = _extends({
        useGrouping: false
      }, opts);
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }
  var _proto = PolyNumberFormatter.prototype;
  _proto.format = function format(i) {
    if (this.inf) {
      var fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(_fixed, this.padTo);
    }
  };
  return PolyNumberFormatter;
}();
/**
 * @private
 */
var PolyDateFormatter = /*#__PURE__*/function () {
  function PolyDateFormatter(dt, intl, opts) {
    this.opts = opts;
    this.originalZone = undefined;
    var z = undefined;
    if (this.opts.timeZone) {
      // Don't apply any workarounds if a timeZone is explicitly provided in opts
      this.dt = dt;
    } else if (dt.zone.type === "fixed") {
      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
      // That is why fixed-offset TZ is set to that unless it is:
      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
      // 2. Unsupported by the browser:
      //    - some do not support Etc/
      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
      var gmtOffset = -1 * (dt.offset / 60);
      var offsetZ = gmtOffset >= 0 ? "Etc/GMT+" + gmtOffset : "Etc/GMT" + gmtOffset;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
        // we manually apply the offset and substitute the zone as needed.
        z = "UTC";
        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({
          minutes: dt.offset
        });
        this.originalZone = dt.zone;
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else if (dt.zone.type === "iana") {
      this.dt = dt;
      z = dt.zone.name;
    } else {
      // Custom zones can have any offset / offsetName so we just manually
      // apply the offset and substitute the zone as needed.
      z = "UTC";
      this.dt = dt.setZone("UTC").plus({
        minutes: dt.offset
      });
      this.originalZone = dt.zone;
    }
    var intlOpts = _extends({}, this.opts);
    intlOpts.timeZone = intlOpts.timeZone || z;
    this.dtf = getCachedDTF(intl, intlOpts);
  }
  var _proto2 = PolyDateFormatter.prototype;
  _proto2.format = function format() {
    if (this.originalZone) {
      // If we have to substitute in the actual zone name, we have to use
      // formatToParts so that the timezone can be replaced.
      return this.formatToParts().map(function (_ref) {
        var value = _ref.value;
        return value;
      }).join("");
    }
    return this.dtf.format(this.dt.toJSDate());
  };
  _proto2.formatToParts = function formatToParts() {
    var _this = this;
    var parts = this.dtf.formatToParts(this.dt.toJSDate());
    if (this.originalZone) {
      return parts.map(function (part) {
        if (part.type === "timeZoneName") {
          var offsetName = _this.originalZone.offsetName(_this.dt.ts, {
            locale: _this.dt.locale,
            format: _this.opts.timeZoneName
          });
          return _extends({}, part, {
            value: offsetName
          });
        } else {
          return part;
        }
      });
    }
    return parts;
  };
  _proto2.resolvedOptions = function resolvedOptions() {
    return this.dtf.resolvedOptions();
  };
  return PolyDateFormatter;
}();
/**
 * @private
 */
var PolyRelFormatter = /*#__PURE__*/function () {
  function PolyRelFormatter(intl, isEnglish, opts) {
    this.opts = _extends({
      style: "long"
    }, opts);
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }
  var _proto3 = PolyRelFormatter.prototype;
  _proto3.format = function format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  };
  _proto3.formatToParts = function formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  };
  return PolyRelFormatter;
}();
/**
 * @private
 */
var Locale = /*#__PURE__*/function () {
  Locale.fromOpts = function fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
  };
  Locale.create = function create(locale, numberingSystem, outputCalendar, defaultToEN) {
    if (defaultToEN === void 0) {
      defaultToEN = false;
    }
    var specifiedLocale = locale || Settings.defaultLocale;
    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
    var localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    var numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    var outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
  };
  Locale.resetCache = function resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  };
  Locale.fromObject = function fromObject(_temp) {
    var _ref2 = _temp === void 0 ? {} : _temp,
      locale = _ref2.locale,
      numberingSystem = _ref2.numberingSystem,
      outputCalendar = _ref2.outputCalendar;
    return Locale.create(locale, numberingSystem, outputCalendar);
  };
  function Locale(locale, numbering, outputCalendar, specifiedLocale) {
    var _parseLocaleString = parseLocaleString(locale),
      parsedLocale = _parseLocaleString[0],
      parsedNumberingSystem = _parseLocaleString[1],
      parsedOutputCalendar = _parseLocaleString[2];
    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = {
      format: {},
      standalone: {}
    };
    this.monthsCache = {
      format: {},
      standalone: {}
    };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }
  var _proto4 = Locale.prototype;
  _proto4.listingMode = function listingMode() {
    var isActuallyEn = this.isEnglish();
    var hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  };
  _proto4.clone = function clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
    }
  };
  _proto4.redefaultToEN = function redefaultToEN(alts) {
    if (alts === void 0) {
      alts = {};
    }
    return this.clone(_extends({}, alts, {
      defaultToEN: true
    }));
  };
  _proto4.redefaultToSystem = function redefaultToSystem(alts) {
    if (alts === void 0) {
      alts = {};
    }
    return this.clone(_extends({}, alts, {
      defaultToEN: false
    }));
  };
  _proto4.months = function months$1(length, format, defaultOK) {
    var _this2 = this;
    if (format === void 0) {
      format = false;
    }
    if (defaultOK === void 0) {
      defaultOK = true;
    }
    return listStuff(this, length, defaultOK, months, function () {
      var intl = format ? {
          month: length,
          day: "numeric"
        } : {
          month: length
        },
        formatStr = format ? "format" : "standalone";
      if (!_this2.monthsCache[formatStr][length]) {
        _this2.monthsCache[formatStr][length] = mapMonths(function (dt) {
          return _this2.extract(dt, intl, "month");
        });
      }
      return _this2.monthsCache[formatStr][length];
    });
  };
  _proto4.weekdays = function weekdays$1(length, format, defaultOK) {
    var _this3 = this;
    if (format === void 0) {
      format = false;
    }
    if (defaultOK === void 0) {
      defaultOK = true;
    }
    return listStuff(this, length, defaultOK, weekdays, function () {
      var intl = format ? {
          weekday: length,
          year: "numeric",
          month: "long",
          day: "numeric"
        } : {
          weekday: length
        },
        formatStr = format ? "format" : "standalone";
      if (!_this3.weekdaysCache[formatStr][length]) {
        _this3.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {
          return _this3.extract(dt, intl, "weekday");
        });
      }
      return _this3.weekdaysCache[formatStr][length];
    });
  };
  _proto4.meridiems = function meridiems$1(defaultOK) {
    var _this4 = this;
    if (defaultOK === void 0) {
      defaultOK = true;
    }
    return listStuff(this, undefined, defaultOK, function () {
      return meridiems;
    }, function () {
      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
      // for AM and PM. This is probably wrong, but it's makes parsing way easier.
      if (!_this4.meridiemCache) {
        var intl = {
          hour: "numeric",
          hourCycle: "h12"
        };
        _this4.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {
          return _this4.extract(dt, intl, "dayperiod");
        });
      }
      return _this4.meridiemCache;
    });
  };
  _proto4.eras = function eras$1(length, defaultOK) {
    var _this5 = this;
    if (defaultOK === void 0) {
      defaultOK = true;
    }
    return listStuff(this, length, defaultOK, eras, function () {
      var intl = {
        era: length
      };

      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.
      if (!_this5.eraCache[length]) {
        _this5.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {
          return _this5.extract(dt, intl, "era");
        });
      }
      return _this5.eraCache[length];
    });
  };
  _proto4.extract = function extract(dt, intlOpts, field) {
    var df = this.dtFormatter(dt, intlOpts),
      results = df.formatToParts(),
      matching = results.find(function (m) {
        return m.type.toLowerCase() === field;
      });
    return matching ? matching.value : null;
  };
  _proto4.numberFormatter = function numberFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }
    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  };
  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {
    if (intlOpts === void 0) {
      intlOpts = {};
    }
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  };
  _proto4.relFormatter = function relFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  };
  _proto4.listFormatter = function listFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }
    return getCachedLF(this.intl, opts);
  };
  _proto4.isEnglish = function isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  };
  _proto4.equals = function equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  };
  _createClass(Locale, [{
    key: "fastNumbers",
    get: function get() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }
      return this.fastNumbersCached;
    }
  }]);
  return Locale;
}();

var singleton = null;

/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */
var FixedOffsetZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(FixedOffsetZone, _Zone);
  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  FixedOffsetZone.instance = function instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }

  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */;
  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {
    if (s) {
      var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }
    return null;
  };
  function FixedOffsetZone(offset) {
    var _this;
    _this = _Zone.call(this) || this;
    /** @private **/
    _this.fixed = offset;
    return _this;
  }

  /** @override **/
  var _proto = FixedOffsetZone.prototype;
  /** @override **/
  _proto.offsetName = function offsetName() {
    return this.name;
  }

  /** @override **/;
  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.fixed, format);
  }

  /** @override **/;
  /** @override **/
  _proto.offset = function offset() {
    return this.fixed;
  }

  /** @override **/;
  _proto.equals = function equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }

  /** @override **/;
  _createClass(FixedOffsetZone, [{
    key: "type",
    get: function get() {
      return "fixed";
    }

    /** @override **/
  }, {
    key: "name",
    get: function get() {
      return this.fixed === 0 ? "UTC" : "UTC" + formatOffset(this.fixed, "narrow");
    }
  }, {
    key: "ianaName",
    get: function get() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return "Etc/GMT" + formatOffset(-this.fixed, "narrow");
      }
    }
  }, {
    key: "isUniversal",
    get: function get() {
      return true;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "utcInstance",
    get:
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    function get() {
      if (singleton === null) {
        singleton = new FixedOffsetZone(0);
      }
      return singleton;
    }
  }]);
  return FixedOffsetZone;
}(Zone);

/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */
var InvalidZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(InvalidZone, _Zone);
  function InvalidZone(zoneName) {
    var _this;
    _this = _Zone.call(this) || this;
    /**  @private */
    _this.zoneName = zoneName;
    return _this;
  }

  /** @override **/
  var _proto = InvalidZone.prototype;
  /** @override **/
  _proto.offsetName = function offsetName() {
    return null;
  }

  /** @override **/;
  _proto.formatOffset = function formatOffset() {
    return "";
  }

  /** @override **/;
  _proto.offset = function offset() {
    return NaN;
  }

  /** @override **/;
  _proto.equals = function equals() {
    return false;
  }

  /** @override **/;
  _createClass(InvalidZone, [{
    key: "type",
    get: function get() {
      return "invalid";
    }

    /** @override **/
  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }

    /** @override **/
  }, {
    key: "isUniversal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return false;
    }
  }]);
  return InvalidZone;
}(Zone);

/**
 * @private
 */
function normalizeZone(input, defaultZone) {
  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    var lowered = input.toLowerCase();
    if (lowered === "default") return defaultZone;else if (lowered === "local" || lowered === "system") return SystemZone.instance;else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

var now = function now() {
    return Date.now();
  },
  defaultZone = "system",
  defaultLocale = null,
  defaultNumberingSystem = null,
  defaultOutputCalendar = null,
  twoDigitCutoffYear = 60,
  throwOnInvalid;

/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */
var Settings = /*#__PURE__*/function () {
  function Settings() {}
  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  Settings.resetCaches = function resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  };
  _createClass(Settings, null, [{
    key: "now",
    get:
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    function get() {
      return now;
    }

    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */,
    set: function set(n) {
      now = n;
    }

    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */
  }, {
    key: "defaultZone",
    get:
    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    function get() {
      return normalizeZone(defaultZone, SystemZone.instance);
    }

    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */,
    set: function set(zone) {
      defaultZone = zone;
    }
  }, {
    key: "defaultLocale",
    get: function get() {
      return defaultLocale;
    }

    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */,
    set: function set(locale) {
      defaultLocale = locale;
    }

    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
  }, {
    key: "defaultNumberingSystem",
    get: function get() {
      return defaultNumberingSystem;
    }

    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */,
    set: function set(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }

    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
  }, {
    key: "defaultOutputCalendar",
    get: function get() {
      return defaultOutputCalendar;
    }

    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */,
    set: function set(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }

    /**
     * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     */
  }, {
    key: "twoDigitCutoffYear",
    get: function get() {
      return twoDigitCutoffYear;
    }

    /**
     * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century
     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
     * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50
     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50
     */,
    set: function set(cutoffYear) {
      twoDigitCutoffYear = cutoffYear % 100;
    }

    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
  }, {
    key: "throwOnInvalid",
    get: function get() {
      return throwOnInvalid;
    }

    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */,
    set: function set(t) {
      throwOnInvalid = t;
    }
  }]);
  return Settings;
}();

/**
 * @private
 */

// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}

// CAPABILITIES

function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}

// OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }
  return arr.reduce(function (best, next) {
    var pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce(function (a, k) {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}

// x % n but takes the sign of n instead of x
function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}
function padStart(input, n) {
  if (n === void 0) {
    n = 2;
  }
  var isNeg = input < 0;
  var padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n, "0");
  } else {
    padded = ("" + input).padStart(n, "0");
  }
  return padded;
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}
function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseFloat(string);
  }
}
function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    var f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero) {
  if (towardZero === void 0) {
    towardZero = false;
  }
  var factor = Math.pow(10, digits),
    rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}

// DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  var modMonth = floorMod(month - 1, 12) + 1,
    modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}

// covert a calendar object to a local timestamp (epoch, but with the offset baked in)
function objToLocalTS(obj) {
  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);

  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
    // so if obj.year is in 99, but obj.day makes it roll over into year 100,
    // the calculations done by Date.UTC are using year 2000 - which is incorrect
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}
function weeksInWeekYear(weekYear) {
  var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,
    last = weekYear - 1,
    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
  return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
}

// PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone) {
  if (timeZone === void 0) {
    timeZone = null;
  }
  var date = new Date(ts),
    intlOpts = {
      hourCycle: "h23",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  var modified = _extends({
    timeZoneName: offsetFormat
  }, intlOpts);
  var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {
    return m.type.toLowerCase() === "timezonename";
  });
  return parsed ? parsed.value : null;
}

// signedOffset('-5', '30') -> -330
function signedOffset(offHourStr, offMinuteStr) {
  var offHour = parseInt(offHourStr, 10);

  // don't || this because we want to preserve -0
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  var offMin = parseInt(offMinuteStr, 10) || 0,
    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}

// COERCION

function asNumber(value) {
  var numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError("Invalid unit value " + value);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  var normalized = {};
  for (var u in obj) {
    if (hasOwnProperty(obj, u)) {
      var v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}
function formatOffset(offset, format) {
  var hours = Math.trunc(Math.abs(offset / 60)),
    minutes = Math.trunc(Math.abs(offset % 60)),
    sign = offset >= 0 ? "+" : "-";
  switch (format) {
    case "short":
      return "" + sign + padStart(hours, 2) + ":" + padStart(minutes, 2);
    case "narrow":
      return "" + sign + hours + (minutes > 0 ? ":" + minutes : "");
    case "techie":
      return "" + sign + padStart(hours, 2) + padStart(minutes, 2);
    default:
      throw new RangeError("Value format " + format + " is out of range for property format");
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}

/**
 * @private
 */

var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return [].concat(monthsNarrow);
    case "short":
      return [].concat(monthsShort);
    case "long":
      return [].concat(monthsLong);
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
var weekdaysLong = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [].concat(weekdaysNarrow);
    case "short":
      return [].concat(weekdaysShort);
    case "long":
      return [].concat(weekdaysLong);
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return [].concat(erasNarrow);
    case "short":
      return [].concat(erasShort);
    case "long":
      return [].concat(erasLong);
    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric, narrow) {
  if (numeric === void 0) {
    numeric = "always";
  }
  if (narrow === void 0) {
    narrow = false;
  }
  var units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  var lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    var isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : "next " + units[unit][0];
      case -1:
        return isDay ? "yesterday" : "last " + units[unit][0];
      case 0:
        return isDay ? "today" : "this " + units[unit][0];
    }
  }

  var isInPast = Object.is(count, -0) || count < 0,
    fmtValue = Math.abs(count),
    singular = fmtValue === 1,
    lilUnits = units[unit],
    fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? fmtValue + " " + fmtUnit + " ago" : "in " + fmtValue + " " + fmtUnit;
}

function stringifyTokens(splits, tokenToString) {
  var s = "";
  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {
    var token = _step.value;
    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }
  return s;
}
var _macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};

/**
 * @private
 */
var Formatter = /*#__PURE__*/function () {
  Formatter.create = function create(locale, opts) {
    if (opts === void 0) {
      opts = {};
    }
    return new Formatter(locale, opts);
  };
  Formatter.parseFormat = function parseFormat(fmt) {
    // white-space is always considered a literal in user-provided formats
    // the " " token has a special meaning (see unitForToken)

    var current = null,
      currentFull = "",
      bracketed = false;
    var splits = [];
    for (var i = 0; i < fmt.length; i++) {
      var c = fmt.charAt(i);
      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed || /^\s+$/.test(currentFull),
            val: currentFull
          });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({
            literal: /^\s+$/.test(currentFull),
            val: currentFull
          });
        }
        currentFull = c;
        current = c;
      }
    }
    if (currentFull.length > 0) {
      splits.push({
        literal: bracketed || /^\s+$/.test(currentFull),
        val: currentFull
      });
    }
    return splits;
  };
  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {
    return _macroTokenToFormatOpts[token];
  };
  function Formatter(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }
  var _proto = Formatter.prototype;
  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    var df = this.systemLoc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.format();
  };
  _proto.formatDateTime = function formatDateTime(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var df = this.loc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.format();
  };
  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var df = this.loc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.formatToParts();
  };
  _proto.formatInterval = function formatInterval(interval, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var df = this.loc.dtFormatter(interval.start, _extends({}, this.opts, opts));
    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
  };
  _proto.resolvedOptions = function resolvedOptions(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var df = this.loc.dtFormatter(dt, _extends({}, this.opts, opts));
    return df.resolvedOptions();
  };
  _proto.num = function num(n, p) {
    if (p === void 0) {
      p = 0;
    }
    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }
    var opts = _extends({}, this.opts);
    if (p > 0) {
      opts.padTo = p;
    }
    return this.loc.numberFormatter(opts).format(n);
  };
  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {
    var _this = this;
    var knownEnglish = this.loc.listingMode() === "en",
      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
      string = function string(opts, extract) {
        return _this.loc.extract(dt, opts, extract);
      },
      formatOffset = function formatOffset(opts) {
        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
          return "Z";
        }
        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
      },
      meridiem = function meridiem() {
        return knownEnglish ? meridiemForDateTime(dt) : string({
          hour: "numeric",
          hourCycle: "h12"
        }, "dayperiod");
      },
      month = function month(length, standalone) {
        return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
          month: length
        } : {
          month: length,
          day: "numeric"
        }, "month");
      },
      weekday = function weekday(length, standalone) {
        return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
          weekday: length
        } : {
          weekday: length,
          month: "long",
          day: "numeric"
        }, "weekday");
      },
      maybeMacro = function maybeMacro(token) {
        var formatOpts = Formatter.macroTokenToFormatOpts(token);
        if (formatOpts) {
          return _this.formatWithSystemDefault(dt, formatOpts);
        } else {
          return token;
        }
      },
      era = function era(length) {
        return knownEnglish ? eraForDateTime(dt, length) : string({
          era: length
        }, "era");
      },
      tokenToString = function tokenToString(token) {
        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles
        switch (token) {
          // ms
          case "S":
            return _this.num(dt.millisecond);
          case "u":
          // falls through
          case "SSS":
            return _this.num(dt.millisecond, 3);
          // seconds
          case "s":
            return _this.num(dt.second);
          case "ss":
            return _this.num(dt.second, 2);
          // fractional seconds
          case "uu":
            return _this.num(Math.floor(dt.millisecond / 10), 2);
          case "uuu":
            return _this.num(Math.floor(dt.millisecond / 100));
          // minutes
          case "m":
            return _this.num(dt.minute);
          case "mm":
            return _this.num(dt.minute, 2);
          // hours
          case "h":
            return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
          case "hh":
            return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
          case "H":
            return _this.num(dt.hour);
          case "HH":
            return _this.num(dt.hour, 2);
          // offset
          case "Z":
            // like +6
            return formatOffset({
              format: "narrow",
              allowZ: _this.opts.allowZ
            });
          case "ZZ":
            // like +06:00
            return formatOffset({
              format: "short",
              allowZ: _this.opts.allowZ
            });
          case "ZZZ":
            // like +0600
            return formatOffset({
              format: "techie",
              allowZ: _this.opts.allowZ
            });
          case "ZZZZ":
            // like EST
            return dt.zone.offsetName(dt.ts, {
              format: "short",
              locale: _this.loc.locale
            });
          case "ZZZZZ":
            // like Eastern Standard Time
            return dt.zone.offsetName(dt.ts, {
              format: "long",
              locale: _this.loc.locale
            });
          // zone
          case "z":
            // like America/New_York
            return dt.zoneName;
          // meridiems
          case "a":
            return meridiem();
          // dates
          case "d":
            return useDateTimeFormatter ? string({
              day: "numeric"
            }, "day") : _this.num(dt.day);
          case "dd":
            return useDateTimeFormatter ? string({
              day: "2-digit"
            }, "day") : _this.num(dt.day, 2);
          // weekdays - standalone
          case "c":
            // like 1
            return _this.num(dt.weekday);
          case "ccc":
            // like 'Tues'
            return weekday("short", true);
          case "cccc":
            // like 'Tuesday'
            return weekday("long", true);
          case "ccccc":
            // like 'T'
            return weekday("narrow", true);
          // weekdays - format
          case "E":
            // like 1
            return _this.num(dt.weekday);
          case "EEE":
            // like 'Tues'
            return weekday("short", false);
          case "EEEE":
            // like 'Tuesday'
            return weekday("long", false);
          case "EEEEE":
            // like 'T'
            return weekday("narrow", false);
          // months - standalone
          case "L":
            // like 1
            return useDateTimeFormatter ? string({
              month: "numeric",
              day: "numeric"
            }, "month") : _this.num(dt.month);
          case "LL":
            // like 01, doesn't seem to work
            return useDateTimeFormatter ? string({
              month: "2-digit",
              day: "numeric"
            }, "month") : _this.num(dt.month, 2);
          case "LLL":
            // like Jan
            return month("short", true);
          case "LLLL":
            // like January
            return month("long", true);
          case "LLLLL":
            // like J
            return month("narrow", true);
          // months - format
          case "M":
            // like 1
            return useDateTimeFormatter ? string({
              month: "numeric"
            }, "month") : _this.num(dt.month);
          case "MM":
            // like 01
            return useDateTimeFormatter ? string({
              month: "2-digit"
            }, "month") : _this.num(dt.month, 2);
          case "MMM":
            // like Jan
            return month("short", false);
          case "MMMM":
            // like January
            return month("long", false);
          case "MMMMM":
            // like J
            return month("narrow", false);
          // years
          case "y":
            // like 2014
            return useDateTimeFormatter ? string({
              year: "numeric"
            }, "year") : _this.num(dt.year);
          case "yy":
            // like 14
            return useDateTimeFormatter ? string({
              year: "2-digit"
            }, "year") : _this.num(dt.year.toString().slice(-2), 2);
          case "yyyy":
            // like 0012
            return useDateTimeFormatter ? string({
              year: "numeric"
            }, "year") : _this.num(dt.year, 4);
          case "yyyyyy":
            // like 000012
            return useDateTimeFormatter ? string({
              year: "numeric"
            }, "year") : _this.num(dt.year, 6);
          // eras
          case "G":
            // like AD
            return era("short");
          case "GG":
            // like Anno Domini
            return era("long");
          case "GGGGG":
            return era("narrow");
          case "kk":
            return _this.num(dt.weekYear.toString().slice(-2), 2);
          case "kkkk":
            return _this.num(dt.weekYear, 4);
          case "W":
            return _this.num(dt.weekNumber);
          case "WW":
            return _this.num(dt.weekNumber, 2);
          case "o":
            return _this.num(dt.ordinal);
          case "ooo":
            return _this.num(dt.ordinal, 3);
          case "q":
            // like 1
            return _this.num(dt.quarter);
          case "qq":
            // like 01
            return _this.num(dt.quarter, 2);
          case "X":
            return _this.num(Math.floor(dt.ts / 1000));
          case "x":
            return _this.num(dt.ts);
          default:
            return maybeMacro(token);
        }
      };
    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  };
  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {
    var _this2 = this;
    var tokenToField = function tokenToField(token) {
        switch (token[0]) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
            return "hour";
          case "d":
            return "day";
          case "w":
            return "week";
          case "M":
            return "month";
          case "y":
            return "year";
          default:
            return null;
        }
      },
      tokenToString = function tokenToString(lildur) {
        return function (token) {
          var mapped = tokenToField(token);
          if (mapped) {
            return _this2.num(lildur.get(mapped), token.length);
          } else {
            return token;
          }
        };
      },
      tokens = Formatter.parseFormat(fmt),
      realTokens = tokens.reduce(function (found, _ref) {
        var literal = _ref.literal,
          val = _ref.val;
        return literal ? found : found.concat(val);
      }, []),
      collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {
        return t;
      }));
    return stringifyTokens(tokens, tokenToString(collapsed));
  };
  return Formatter;
}();

var Invalid = /*#__PURE__*/function () {
  function Invalid(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }
  var _proto = Invalid.prototype;
  _proto.toMessage = function toMessage() {
    if (this.explanation) {
      return this.reason + ": " + this.explanation;
    } else {
      return this.reason;
    }
  };
  return Invalid;
}();

/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
function combineRegexes() {
  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {
    regexes[_key] = arguments[_key];
  }
  var full = regexes.reduce(function (f, r) {
    return f + r.source;
  }, "");
  return RegExp("^" + full + "$");
}
function combineExtractors() {
  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    extractors[_key2] = arguments[_key2];
  }
  return function (m) {
    return extractors.reduce(function (_ref, ex) {
      var mergedVals = _ref[0],
        mergedZone = _ref[1],
        cursor = _ref[2];
      var _ex = ex(m, cursor),
        val = _ex[0],
        zone = _ex[1],
        next = _ex[2];
      return [_extends({}, mergedVals, val), zone || mergedZone, next];
    }, [{}, null, 1]).slice(0, 2);
  };
}
function parse(s) {
  if (s == null) {
    return [null, null];
  }
  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    patterns[_key3 - 1] = arguments[_key3];
  }
  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {
    var _patterns$_i = _patterns[_i],
      regex = _patterns$_i[0],
      extractor = _patterns$_i[1];
    var m = regex.exec(s);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
}
function simpleParse() {
  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    keys[_key4] = arguments[_key4];
  }
  return function (match, cursor) {
    var ret = {};
    var i;
    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}

// ISO and SQL parsing
var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = "(?:" + offsetRegex.source + "?(?:\\[(" + ianaRegex.source + ")\\])?)?";
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp("" + isoTimeBaseRegex.source + isoExtendedZone);
var isoTimeExtensionRegex = RegExp("(?:T" + isoTimeRegex.source + ")?");
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
var sqlTimeRegex = RegExp(isoTimeBaseRegex.source + " ?(?:" + offsetRegex.source + "|(" + ianaRegex.source + "))?");
var sqlTimeExtensionRegex = RegExp("(?: " + sqlTimeRegex.source + ")?");
function int(match, pos, fallback) {
  var m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}
function extractISOYmd(match, cursor) {
  var item = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}
function extractISOTime(match, cursor) {
  var item = {
    hours: int(match, cursor, 0),
    minutes: int(match, cursor + 1, 0),
    seconds: int(match, cursor + 2, 0),
    milliseconds: parseMillis(match[cursor + 3])
  };
  return [item, null, cursor + 4];
}
function extractISOOffset(match, cursor) {
  var local = !match[cursor] && !match[cursor + 1],
    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
    zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}
function extractIANAZone(match, cursor) {
  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
}

// ISO time parsing

var isoTimeOnly = RegExp("^T?" + isoTimeBaseRegex.source + "$");

// ISO duration parsing

var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function extractISODuration(match) {
  var s = match[0],
    yearStr = match[1],
    monthStr = match[2],
    weekStr = match[3],
    dayStr = match[4],
    hourStr = match[5],
    minuteStr = match[6],
    secondStr = match[7],
    millisecondsStr = match[8];
  var hasNegativePrefix = s[0] === "-";
  var negativeSeconds = secondStr && secondStr[0] === "-";
  var maybeNegate = function maybeNegate(num, force) {
    if (force === void 0) {
      force = false;
    }
    return num !== undefined && (force || num && hasNegativePrefix) ? -num : num;
  };
  return [{
    years: maybeNegate(parseFloating(yearStr)),
    months: maybeNegate(parseFloating(monthStr)),
    weeks: maybeNegate(parseFloating(weekStr)),
    days: maybeNegate(parseFloating(dayStr)),
    hours: maybeNegate(parseFloating(hourStr)),
    minutes: maybeNegate(parseFloating(minuteStr)),
    seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
    milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
  }];
}

// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that
var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
}

// RFC 2822/5322
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match) {
  var weekdayStr = match[1],
    dayStr = match[2],
    monthStr = match[3],
    yearStr = match[4],
    hourStr = match[5],
    minuteStr = match[6],
    secondStr = match[7],
    obsOffset = match[8],
    milOffset = match[9],
    offHourStr = match[10],
    offMinuteStr = match[11],
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  var offset;
  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }
  return [result, new FixedOffsetZone(offset)];
}
function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}

// http date

var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
  rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match) {
  var weekdayStr = match[1],
    dayStr = match[2],
    monthStr = match[3],
    yearStr = match[4],
    hourStr = match[5],
    minuteStr = match[6],
    secondStr = match[7],
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function extractASCII(match) {
  var weekdayStr = match[1],
    monthStr = match[2],
    dayStr = match[3],
    hourStr = match[4],
    minuteStr = match[5],
    secondStr = match[6],
    yearStr = match[7],
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);

/*
 * @private
 */

function parseISODate(s) {
  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s) {
  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}
var extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s) {
  return parse(s, [isoTimeOnly, extractISOTimeOnly]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s) {
  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}

var INVALID$2 = "Invalid Duration";

// unit conversion constants
var lowOrderMatrix = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1000
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1000
    },
    hours: {
      minutes: 60,
      seconds: 60 * 60,
      milliseconds: 60 * 60 * 1000
    },
    minutes: {
      seconds: 60,
      milliseconds: 60 * 1000
    },
    seconds: {
      milliseconds: 1000
    }
  },
  casualMatrix = _extends({
    years: {
      quarters: 4,
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1000
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      seconds: 91 * 24 * 60 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1000
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1000
    }
  }, lowOrderMatrix),
  daysInYearAccurate = 146097.0 / 400,
  daysInMonthAccurate = 146097.0 / 4800,
  accurateMatrix = _extends({
    years: {
      quarters: 4,
      months: 12,
      weeks: daysInYearAccurate / 7,
      days: daysInYearAccurate,
      hours: daysInYearAccurate * 24,
      minutes: daysInYearAccurate * 24 * 60,
      seconds: daysInYearAccurate * 24 * 60 * 60,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate / 28,
      days: daysInYearAccurate / 4,
      hours: daysInYearAccurate * 24 / 4,
      minutes: daysInYearAccurate * 24 * 60 / 4,
      seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
    },
    months: {
      weeks: daysInMonthAccurate / 7,
      days: daysInMonthAccurate,
      hours: daysInMonthAccurate * 24,
      minutes: daysInMonthAccurate * 24 * 60,
      seconds: daysInMonthAccurate * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
    }
  }, lowOrderMatrix);

// units ordered by size
var orderedUnits$1 = ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"];
var reverseUnits = orderedUnits$1.slice(0).reverse();

// clone really means "create another instance just like this one, but with these changes"
function clone$1(dur, alts, clear) {
  if (clear === void 0) {
    clear = false;
  }
  // deep merge for vals
  var conf = {
    values: clear ? alts.values : _extends({}, dur.values, alts.values || {}),
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix
  };
  return new Duration(conf);
}
function antiTrunc(n) {
  return n < 0 ? Math.floor(n) : Math.ceil(n);
}

// NB: mutates parameters
function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
  var conv = matrix[toUnit][fromUnit],
    raw = fromMap[fromUnit] / conv,
    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
    // ok, so this is wild, but see the matrix in the tests
    added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
  toMap[toUnit] += added;
  fromMap[fromUnit] -= added * conv;
}

// NB: mutates parameters
function normalizeValues(matrix, vals) {
  reverseUnits.reduce(function (previous, current) {
    if (!isUndefined(vals[current])) {
      if (previous) {
        convert(matrix, vals, previous, vals, current);
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}

// Remove all properties with a value of 0 from an object
function removeZeroes(vals) {
  var newVals = {};
  for (var _i = 0, _Object$entries = Object.entries(vals); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _Object$entries[_i],
      key = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}

/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */
var Duration = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Duration(config) {
    var accurate = config.conversionAccuracy === "longterm" || false;
    var matrix = accurate ? accurateMatrix : casualMatrix;
    if (config.matrix) {
      matrix = config.matrix;
    }

    /**
     * @access private
     */
    this.values = config.values;
    /**
     * @access private
     */
    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */
    this.invalid = config.invalid || null;
    /**
     * @access private
     */
    this.matrix = matrix;
    /**
     * @access private
     */
    this.isLuxonDuration = true;
  }

  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  Duration.fromMillis = function fromMillis(count, opts) {
    return Duration.fromObject({
      milliseconds: count
    }, opts);
  }

  /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the custom conversion system to use
   * @return {Duration}
   */;
  Duration.fromObject = function fromObject(obj, opts) {
    if (opts === void 0) {
      opts = {};
    }
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got " + (obj === null ? "null" : typeof obj));
    }
    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy,
      matrix: opts.matrix
    });
  }

  /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */;
  Duration.fromDurationLike = function fromDurationLike(durationLike) {
    if (isNumber(durationLike)) {
      return Duration.fromMillis(durationLike);
    } else if (Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError("Unknown duration argument " + durationLike + " of type " + typeof durationLike);
    }
  }

  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the preset conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */;
  Duration.fromISO = function fromISO(text, opts) {
    var _parseISODuration = parseISODuration(text),
      parsed = _parseISODuration[0];
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }

  /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */;
  Duration.fromISOTime = function fromISOTime(text, opts) {
    var _parseISOTimeOnly = parseISOTimeOnly(text),
      parsed = _parseISOTimeOnly[0];
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }

  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */;
  Duration.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }
    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({
        invalid: invalid
      });
    }
  }

  /**
   * @private
   */;
  Duration.normalizeUnit = function normalizeUnit(unit) {
    var normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }

  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */;
  Duration.isDuration = function isDuration(o) {
    return o && o.isLuxonDuration || false;
  }

  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */;
  var _proto = Duration.prototype;
  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * Tokens can be escaped by wrapping with single quotes.
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    var fmtOpts = _extends({}, opts, {
      floor: opts.round !== false && opts.floor !== false
    });
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID$2;
  }

  /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
   * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */;
  _proto.toHuman = function toHuman(opts) {
    var _this = this;
    if (opts === void 0) {
      opts = {};
    }
    var l = orderedUnits$1.map(function (unit) {
      var val = _this.values[unit];
      if (isUndefined(val)) {
        return null;
      }
      return _this.loc.numberFormatter(_extends({
        style: "unit",
        unitDisplay: "long"
      }, opts, {
        unit: unit.slice(0, -1)
      })).format(val);
    }).filter(function (n) {
      return n;
    });
    return this.loc.listFormatter(_extends({
      type: "conjunction",
      style: opts.listStyle || "narrow"
    }, opts)).format(l);
  }

  /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */;
  _proto.toObject = function toObject() {
    if (!this.isValid) return {};
    return _extends({}, this.values);
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */;
  _proto.toISO = function toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;
    var s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */;
  _proto.toISOTime = function toISOTime(opts) {
    if (opts === void 0) {
      opts = {};
    }
    if (!this.isValid) return null;
    var millis = this.toMillis();
    if (millis < 0 || millis >= 86400000) return null;
    opts = _extends({
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended"
    }, opts);
    var value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
    var fmt = opts.format === "basic" ? "hhmm" : "hh:mm";
    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
      fmt += opts.format === "basic" ? "ss" : ":ss";
      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
        fmt += ".SSS";
      }
    }
    var str = value.toFormat(fmt);
    if (opts.includePrefix) {
      str = "T" + str;
    }
    return str;
  }

  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */;
  _proto.toJSON = function toJSON() {
    return this.toISO();
  }

  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */;
  _proto.toString = function toString() {
    return this.toISO();
  }

  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */;
  _proto.toMillis = function toMillis() {
    return this.as("milliseconds");
  }

  /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */;
  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }

  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */;
  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration),
      result = {};
    for (var _i2 = 0, _orderedUnits = orderedUnits$1; _i2 < _orderedUnits.length; _i2++) {
      var k = _orderedUnits[_i2];
      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }
    return clone$1(this, {
      values: result
    }, true);
  }

  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */;
  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }

  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */;
  _proto.mapUnits = function mapUnits(fn) {
    if (!this.isValid) return this;
    var result = {};
    for (var _i3 = 0, _Object$keys = Object.keys(this.values); _i3 < _Object$keys.length; _i3++) {
      var k = _Object$keys[_i3];
      result[k] = asNumber(fn(this.values[k], k));
    }
    return clone$1(this, {
      values: result
    }, true);
  }

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */;
  _proto.get = function get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }

  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */;
  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var mixed = _extends({}, this.values, normalizeObject(values, Duration.normalizeUnit));
    return clone$1(this, {
      values: mixed
    });
  }

  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */;
  _proto.reconfigure = function reconfigure(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
      locale = _ref.locale,
      numberingSystem = _ref.numberingSystem,
      conversionAccuracy = _ref.conversionAccuracy,
      matrix = _ref.matrix;
    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem
    });
    var opts = {
      loc: loc,
      matrix: matrix,
      conversionAccuracy: conversionAccuracy
    };
    return clone$1(this, opts);
  }

  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */;
  _proto.as = function as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }

  /**
   * Reduce this Duration to its canonical representation in its current units.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @return {Duration}
   */;
  _proto.normalize = function normalize() {
    if (!this.isValid) return this;
    var vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone$1(this, {
      values: vals
    }, true);
  }

  /**
   * Rescale units to its largest representation
   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
   * @return {Duration}
   */;
  _proto.rescale = function rescale() {
    if (!this.isValid) return this;
    var vals = removeZeroes(this.normalize().shiftToAll().toObject());
    return clone$1(this, {
      values: vals
    }, true);
  }

  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */;
  _proto.shiftTo = function shiftTo() {
    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {
      units[_key] = arguments[_key];
    }
    if (!this.isValid) return this;
    if (units.length === 0) {
      return this;
    }
    units = units.map(function (u) {
      return Duration.normalizeUnit(u);
    });
    var built = {},
      accumulated = {},
      vals = this.toObject();
    var lastUnit;
    for (var _i4 = 0, _orderedUnits2 = orderedUnits$1; _i4 < _orderedUnits2.length; _i4++) {
      var k = _orderedUnits2[_i4];
      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        var own = 0;

        // anything we haven't boiled down yet should get boiled to this unit
        for (var ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        }

        // plus anything that's already in this unit
        if (isNumber(vals[k])) {
          own += vals[k];
        }
        var i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1000 - i * 1000) / 1000;

        // plus anything further down the chain that should be rolled up in to this
        for (var down in vals) {
          if (orderedUnits$1.indexOf(down) > orderedUnits$1.indexOf(k)) {
            convert(this.matrix, vals, down, built, k);
          }
        }
        // otherwise, keep it in the wings to boil it later
      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    }

    // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty
    for (var key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }
    return clone$1(this, {
      values: built
    }, true).normalize();
  }

  /**
   * Shift this Duration to all available units.
   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
   * @return {Duration}
   */;
  _proto.shiftToAll = function shiftToAll() {
    if (!this.isValid) return this;
    return this.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds");
  }

  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */;
  _proto.negate = function negate() {
    if (!this.isValid) return this;
    var negated = {};
    for (var _i5 = 0, _Object$keys2 = Object.keys(this.values); _i5 < _Object$keys2.length; _i5++) {
      var k = _Object$keys2[_i5];
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }
    return clone$1(this, {
      values: negated
    }, true);
  }

  /**
   * Get the years.
   * @type {number}
   */;
  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    if (!this.loc.equals(other.loc)) {
      return false;
    }
    function eq(v1, v2) {
      // Consider 0 and undefined as equal
      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
      return v1 === v2;
    }
    for (var _i6 = 0, _orderedUnits3 = orderedUnits$1; _i6 < _orderedUnits3.length; _i6++) {
      var u = _orderedUnits3[_i6];
      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }
    return true;
  };
  _createClass(Duration, [{
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }

    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */
  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
  }, {
    key: "years",
    get: function get() {
      return this.isValid ? this.values.years || 0 : NaN;
    }

    /**
     * Get the quarters.
     * @type {number}
     */
  }, {
    key: "quarters",
    get: function get() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }

    /**
     * Get the months.
     * @type {number}
     */
  }, {
    key: "months",
    get: function get() {
      return this.isValid ? this.values.months || 0 : NaN;
    }

    /**
     * Get the weeks
     * @type {number}
     */
  }, {
    key: "weeks",
    get: function get() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }

    /**
     * Get the days.
     * @type {number}
     */
  }, {
    key: "days",
    get: function get() {
      return this.isValid ? this.values.days || 0 : NaN;
    }

    /**
     * Get the hours.
     * @type {number}
     */
  }, {
    key: "hours",
    get: function get() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }

    /**
     * Get the minutes.
     * @type {number}
     */
  }, {
    key: "minutes",
    get: function get() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }

    /**
     * Get the seconds.
     * @return {number}
     */
  }, {
    key: "seconds",
    get: function get() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }

    /**
     * Get the milliseconds.
     * @return {number}
     */
  }, {
    key: "milliseconds",
    get: function get() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }

    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */
  }, {
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }

    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */
  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */
  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);
  return Duration;
}();

var INVALID$1 = "Invalid Interval";

// checks if the start is equal to or before the end
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=" + start.toISO() + " and end=" + end.toISO());
  } else {
    return null;
  }
}

/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */
var Interval = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Interval(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */
    this.e = config.end;
    /**
     * @access private
     */
    this.invalid = config.invalid || null;
    /**
     * @access private
     */
    this.isLuxonInterval = true;
  }

  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */
  Interval.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }
    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({
        invalid: invalid
      });
    }
  }

  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */;
  Interval.fromDateTimes = function fromDateTimes(start, end) {
    var builtStart = friendlyDateTime(start),
      builtEnd = friendlyDateTime(end);
    var validateError = validateStartEnd(builtStart, builtEnd);
    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }

  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */;
  Interval.after = function after(start, duration) {
    var dur = Duration.fromDurationLike(duration),
      dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }

  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */;
  Interval.before = function before(end, duration) {
    var dur = Duration.fromDurationLike(duration),
      dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }

  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */;
  Interval.fromISO = function fromISO(text, opts) {
    var _split = (text || "").split("/", 2),
      s = _split[0],
      e = _split[1];
    if (s && e) {
      var start, startIsValid;
      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }
      var end, endIsValid;
      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }
      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }
      if (startIsValid) {
        var dur = Duration.fromISO(e, opts);
        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        var _dur = Duration.fromISO(s, opts);
        if (_dur.isValid) {
          return Interval.before(end, _dur);
        }
      }
    }
    return Interval.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
  }

  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */;
  Interval.isInterval = function isInterval(o) {
    return o && o.isLuxonInterval || false;
  }

  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */;
  var _proto = Interval.prototype;
  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  _proto.length = function length(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }
    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;
  }

  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @return {number}
   */;
  _proto.count = function count(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }
    if (!this.isValid) return NaN;
    var start = this.start.startOf(unit),
      end = this.end.startOf(unit);
    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
  }

  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */;
  _proto.hasSame = function hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }

  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */;
  _proto.isEmpty = function isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }

  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */;
  _proto.isAfter = function isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }

  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */;
  _proto.isBefore = function isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }

  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */;
  _proto.contains = function contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }

  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */;
  _proto.set = function set(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
      start = _ref.start,
      end = _ref.end;
    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }

  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */;
  _proto.splitAt = function splitAt() {
    var _this = this;
    if (!this.isValid) return [];
    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }
    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {
        return _this.contains(d);
      }).sort(),
      results = [];
    var s = this.s,
      i = 0;
    while (s < this.e) {
      var added = sorted[i] || this.e,
        next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }
    return results;
  }

  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */;
  _proto.splitBy = function splitBy(duration) {
    var dur = Duration.fromDurationLike(duration);
    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }
    var s = this.s,
      idx = 1,
      next;
    var results = [];
    while (s < this.e) {
      var added = this.start.plus(dur.mapUnits(function (x) {
        return x * idx;
      }));
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      idx += 1;
    }
    return results;
  }

  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */;
  _proto.divideEqually = function divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }

  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */;
  _proto.overlaps = function overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }

  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */;
  _proto.abutsStart = function abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }

  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */;
  _proto.abutsEnd = function abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }

  /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */;
  _proto.engulfs = function engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }

  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */;
  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    return this.s.equals(other.s) && this.e.equals(other.e);
  }

  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */;
  _proto.intersection = function intersection(other) {
    if (!this.isValid) return this;
    var s = this.s > other.s ? this.s : other.s,
      e = this.e < other.e ? this.e : other.e;
    if (s >= e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }

  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */;
  _proto.union = function union(other) {
    if (!this.isValid) return this;
    var s = this.s < other.s ? this.s : other.s,
      e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }

  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {Array} intervals
   * @return {Array}
   */;
  Interval.merge = function merge(intervals) {
    var _intervals$sort$reduc = intervals.sort(function (a, b) {
        return a.s - b.s;
      }).reduce(function (_ref2, item) {
        var sofar = _ref2[0],
          current = _ref2[1];
        if (!current) {
          return [sofar, item];
        } else if (current.overlaps(item) || current.abutsStart(item)) {
          return [sofar, current.union(item)];
        } else {
          return [sofar.concat([current]), item];
        }
      }, [[], null]),
      found = _intervals$sort$reduc[0],
      final = _intervals$sort$reduc[1];
    if (final) {
      found.push(final);
    }
    return found;
  }

  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */;
  Interval.xor = function xor(intervals) {
    var _Array$prototype;
    var start = null,
      currentCount = 0;
    var results = [],
      ends = intervals.map(function (i) {
        return [{
          time: i.s,
          type: "s"
        }, {
          time: i.e,
          type: "e"
        }];
      }),
      flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),
      arr = flattened.sort(function (a, b) {
        return a.time - b.time;
      });
    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {
      var i = _step.value;
      currentCount += i.type === "s" ? 1 : -1;
      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }
        start = null;
      }
    }
    return Interval.merge(results);
  }

  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */;
  _proto.difference = function difference() {
    var _this2 = this;
    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      intervals[_key2] = arguments[_key2];
    }
    return Interval.xor([this].concat(intervals)).map(function (i) {
      return _this2.intersection(i);
    }).filter(function (i) {
      return i && !i.isEmpty();
    });
  }

  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */;
  _proto.toString = function toString() {
    if (!this.isValid) return INVALID$1;
    return "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")";
  }

  /**
   * Returns a localized string representing this Interval. Accepts the same options as the
   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
   * is browser-specific, but in general it will return an appropriate representation of the
   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
   * specified.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
   * Intl.DateTimeFormat constructor options.
   * @param {Object} opts - Options to override the configuration of the start DateTime.
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
   * @return {string}
   */;
  _proto.toLocaleString = function toLocaleString(formatOpts, opts) {
    if (formatOpts === void 0) {
      formatOpts = DATE_SHORT;
    }
    if (opts === void 0) {
      opts = {};
    }
    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID$1;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */;
  _proto.toISO = function toISO(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISO(opts) + "/" + this.e.toISO(opts);
  }

  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */;
  _proto.toISODate = function toISODate() {
    if (!this.isValid) return INVALID$1;
    return this.s.toISODate() + "/" + this.e.toISODate();
  }

  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */;
  _proto.toISOTime = function toISOTime(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISOTime(opts) + "/" + this.e.toISOTime(opts);
  }

  /**
   * Returns a string representation of this Interval formatted according to the specified format
   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
   * formatting tool.
   * @param {string} dateFormat - The format string. This string formats the start and end time.
   * See {@link DateTime#toFormat} for details.
   * @param {Object} opts - Options.
   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
   * representations.
   * @return {string}
   */;
  _proto.toFormat = function toFormat(dateFormat, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
      _ref3$separator = _ref3.separator,
      separator = _ref3$separator === void 0 ? " – " : _ref3$separator;
    if (!this.isValid) return INVALID$1;
    return "" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);
  }

  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */;
  _proto.toDuration = function toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }

  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */;
  _proto.mapEndpoints = function mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  };
  _createClass(Interval, [{
    key: "start",
    get: function get() {
      return this.isValid ? this.s : null;
    }

    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */
  }, {
    key: "end",
    get: function get() {
      return this.isValid ? this.e : null;
    }

    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */
  }, {
    key: "isValid",
    get: function get() {
      return this.invalidReason === null;
    }

    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */
  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */
  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);
  return Interval;
}();

/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */
var Info = /*#__PURE__*/function () {
  function Info() {}
  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  Info.hasDST = function hasDST(zone) {
    if (zone === void 0) {
      zone = Settings.defaultZone;
    }
    var proto = DateTime.now().setZone(zone).set({
      month: 12
    });
    return !zone.isUniversal && proto.offset !== proto.set({
      month: 6
    }).offset;
  }

  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */;
  Info.isValidIANAZone = function isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }

  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */;
  Info.normalizeZone = function normalizeZone$1(input) {
    return normalizeZone(input, Settings.defaultZone);
  }

  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */;
  Info.months = function months(length, _temp) {
    if (length === void 0) {
      length = "long";
    }
    var _ref = _temp === void 0 ? {} : _temp,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? null : _ref$locale,
      _ref$numberingSystem = _ref.numberingSystem,
      numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,
      _ref$locObj = _ref.locObj,
      locObj = _ref$locObj === void 0 ? null : _ref$locObj,
      _ref$outputCalendar = _ref.outputCalendar,
      outputCalendar = _ref$outputCalendar === void 0 ? "gregory" : _ref$outputCalendar;
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }

  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */;
  Info.monthsFormat = function monthsFormat(length, _temp2) {
    if (length === void 0) {
      length = "long";
    }
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
      _ref2$locale = _ref2.locale,
      locale = _ref2$locale === void 0 ? null : _ref2$locale,
      _ref2$numberingSystem = _ref2.numberingSystem,
      numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,
      _ref2$locObj = _ref2.locObj,
      locObj = _ref2$locObj === void 0 ? null : _ref2$locObj,
      _ref2$outputCalendar = _ref2.outputCalendar,
      outputCalendar = _ref2$outputCalendar === void 0 ? "gregory" : _ref2$outputCalendar;
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }

  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */;
  Info.weekdays = function weekdays(length, _temp3) {
    if (length === void 0) {
      length = "long";
    }
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
      _ref3$locale = _ref3.locale,
      locale = _ref3$locale === void 0 ? null : _ref3$locale,
      _ref3$numberingSystem = _ref3.numberingSystem,
      numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem,
      _ref3$locObj = _ref3.locObj,
      locObj = _ref3$locObj === void 0 ? null : _ref3$locObj;
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }

  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */;
  Info.weekdaysFormat = function weekdaysFormat(length, _temp4) {
    if (length === void 0) {
      length = "long";
    }
    var _ref4 = _temp4 === void 0 ? {} : _temp4,
      _ref4$locale = _ref4.locale,
      locale = _ref4$locale === void 0 ? null : _ref4$locale,
      _ref4$numberingSystem = _ref4.numberingSystem,
      numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem,
      _ref4$locObj = _ref4.locObj,
      locObj = _ref4$locObj === void 0 ? null : _ref4$locObj;
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }

  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */;
  Info.meridiems = function meridiems(_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
      _ref5$locale = _ref5.locale,
      locale = _ref5$locale === void 0 ? null : _ref5$locale;
    return Locale.create(locale).meridiems();
  }

  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */;
  Info.eras = function eras(length, _temp6) {
    if (length === void 0) {
      length = "short";
    }
    var _ref6 = _temp6 === void 0 ? {} : _temp6,
      _ref6$locale = _ref6.locale,
      locale = _ref6$locale === void 0 ? null : _ref6$locale;
    return Locale.create(locale, null, "gregory").eras(length);
  }

  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * @example Info.features() //=> { relative: false }
   * @return {Object}
   */;
  Info.features = function features() {
    return {
      relative: hasRelative()
    };
  };
  return Info;
}();

function dayDiff(earlier, later) {
  var utcDayStart = function utcDayStart(dt) {
      return dt.toUTC(0, {
        keepLocalTime: true
      }).startOf("day").valueOf();
    },
    ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
  var differs = [["years", function (a, b) {
    return b.year - a.year;
  }], ["quarters", function (a, b) {
    return b.quarter - a.quarter + (b.year - a.year) * 4;
  }], ["months", function (a, b) {
    return b.month - a.month + (b.year - a.year) * 12;
  }], ["weeks", function (a, b) {
    var days = dayDiff(a, b);
    return (days - days % 7) / 7;
  }], ["days", dayDiff]];
  var results = {};
  var earlier = cursor;
  var lowestOrder, highWater;
  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {
    var _differs$_i = _differs[_i],
      unit = _differs$_i[0],
      differ = _differs$_i[1];
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);
      if (highWater > later) {
        results[unit]--;
        cursor = earlier.plus(results);
      } else {
        cursor = highWater;
      }
    }
  }
  return [cursor, results, highWater, lowestOrder];
}
function _diff (earlier, later, units, opts) {
  var _highOrderDiffs = highOrderDiffs(earlier, later, units),
    cursor = _highOrderDiffs[0],
    results = _highOrderDiffs[1],
    highWater = _highOrderDiffs[2],
    lowestOrder = _highOrderDiffs[3];
  var remainingMillis = later - cursor;
  var lowerOrderUnits = units.filter(function (u) {
    return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0;
  });
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      var _cursor$plus;
      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[lowestOrder] = 1, _cursor$plus));
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  var duration = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    var _Duration$fromMillis;
    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}

var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
};
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  var value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (var key in numberingSystemsUTF16) {
          var _numberingSystemsUTF = numberingSystemsUTF16[key],
            min = _numberingSystemsUTF[0],
            max = _numberingSystemsUTF[1];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex(_ref, append) {
  var numberingSystem = _ref.numberingSystem;
  if (append === void 0) {
    append = "";
  }
  return new RegExp("" + numberingSystems[numberingSystem || "latn"] + append);
}

var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex, post) {
  if (post === void 0) {
    post = function post(i) {
      return i;
    };
  }
  return {
    regex: regex,
    deser: function deser(_ref) {
      var s = _ref[0];
      return post(parseDigits(s));
    }
  };
}
var NBSP = String.fromCharCode(160);
var spaceOrNBSP = "[ " + NBSP + "]";
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s) {
  return s.replace(/\./g, "") // ignore dots that were made optional
  .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
  .toLowerCase();
}
function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: function deser(_ref2) {
        var s = _ref2[0];
        return strings.findIndex(function (i) {
          return stripInsensitivities(s) === stripInsensitivities(i);
        }) + startIndex;
      }
    };
  }
}
function offset(regex, groups) {
  return {
    regex: regex,
    deser: function deser(_ref3) {
      var h = _ref3[1],
        m = _ref3[2];
      return signedOffset(h, m);
    },
    groups: groups
  };
}
function simple(regex) {
  return {
    regex: regex,
    deser: function deser(_ref4) {
      var s = _ref4[0];
      return s;
    }
  };
}
function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token, loc) {
  var one = digitRegex(loc),
    two = digitRegex(loc, "{2}"),
    three = digitRegex(loc, "{3}"),
    four = digitRegex(loc, "{4}"),
    six = digitRegex(loc, "{6}"),
    oneOrTwo = digitRegex(loc, "{1,2}"),
    oneToThree = digitRegex(loc, "{1,3}"),
    oneToSix = digitRegex(loc, "{1,6}"),
    oneToNine = digitRegex(loc, "{1,9}"),
    twoToFour = digitRegex(loc, "{2,4}"),
    fourToSix = digitRegex(loc, "{4,6}"),
    literal = function literal(t) {
      return {
        regex: RegExp(escapeToken(t.val)),
        deser: function deser(_ref5) {
          var s = _ref5[0];
          return s;
        },
        literal: true
      };
    },
    unitate = function unitate(t) {
      if (token.literal) {
        return literal(t);
      }
      switch (t.val) {
        // era
        case "G":
          return oneOf(loc.eras("short", false), 0);
        case "GG":
          return oneOf(loc.eras("long", false), 0);
        // years
        case "y":
          return intUnit(oneToSix);
        case "yy":
          return intUnit(twoToFour, untruncateYear);
        case "yyyy":
          return intUnit(four);
        case "yyyyy":
          return intUnit(fourToSix);
        case "yyyyyy":
          return intUnit(six);
        // months
        case "M":
          return intUnit(oneOrTwo);
        case "MM":
          return intUnit(two);
        case "MMM":
          return oneOf(loc.months("short", true, false), 1);
        case "MMMM":
          return oneOf(loc.months("long", true, false), 1);
        case "L":
          return intUnit(oneOrTwo);
        case "LL":
          return intUnit(two);
        case "LLL":
          return oneOf(loc.months("short", false, false), 1);
        case "LLLL":
          return oneOf(loc.months("long", false, false), 1);
        // dates
        case "d":
          return intUnit(oneOrTwo);
        case "dd":
          return intUnit(two);
        // ordinals
        case "o":
          return intUnit(oneToThree);
        case "ooo":
          return intUnit(three);
        // time
        case "HH":
          return intUnit(two);
        case "H":
          return intUnit(oneOrTwo);
        case "hh":
          return intUnit(two);
        case "h":
          return intUnit(oneOrTwo);
        case "mm":
          return intUnit(two);
        case "m":
          return intUnit(oneOrTwo);
        case "q":
          return intUnit(oneOrTwo);
        case "qq":
          return intUnit(two);
        case "s":
          return intUnit(oneOrTwo);
        case "ss":
          return intUnit(two);
        case "S":
          return intUnit(oneToThree);
        case "SSS":
          return intUnit(three);
        case "u":
          return simple(oneToNine);
        case "uu":
          return simple(oneOrTwo);
        case "uuu":
          return intUnit(one);
        // meridiem
        case "a":
          return oneOf(loc.meridiems(), 0);
        // weekYear (k)
        case "kkkk":
          return intUnit(four);
        case "kk":
          return intUnit(twoToFour, untruncateYear);
        // weekNumber (W)
        case "W":
          return intUnit(oneOrTwo);
        case "WW":
          return intUnit(two);
        // weekdays
        case "E":
        case "c":
          return intUnit(one);
        case "EEE":
          return oneOf(loc.weekdays("short", false, false), 1);
        case "EEEE":
          return oneOf(loc.weekdays("long", false, false), 1);
        case "ccc":
          return oneOf(loc.weekdays("short", true, false), 1);
        case "cccc":
          return oneOf(loc.weekdays("long", true, false), 1);
        // offset/zone
        case "Z":
        case "ZZ":
          return offset(new RegExp("([+-]" + oneOrTwo.source + ")(?::(" + two.source + "))?"), 2);
        case "ZZZ":
          return offset(new RegExp("([+-]" + oneOrTwo.source + ")(" + two.source + ")?"), 2);
        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
        // because we don't have any way to figure out what they are
        case "z":
          return simple(/[a-z_+-/]{1,256}?/i);
        // this special-case "token" represents a place where a macro-token expanded into a white-space literal
        // in this case we accept any non-newline white-space
        case " ":
          return simple(/[^\S\n\r]/);
        default:
          return literal(t);
      }
    };
  var unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}
var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour: {
    numeric: "h",
    "2-digit": "hh"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  },
  timeZoneName: {
    long: "ZZZZZ",
    short: "ZZZ"
  }
};
function tokenForPart(part, formatOpts) {
  var type = part.type,
    value = part.value;
  if (type === "literal") {
    var isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value
    };
  }
  var style = formatOpts[type];
  var val = partTypeStyleToTokenVal[type];
  if (typeof val === "object") {
    val = val[style];
  }
  if (val) {
    return {
      literal: false,
      val: val
    };
  }
  return undefined;
}
function buildRegex(units) {
  var re = units.map(function (u) {
    return u.regex;
  }).reduce(function (f, r) {
    return f + "(" + r.source + ")";
  }, "");
  return ["^" + re + "$", units];
}
function match(input, regex, handlers) {
  var matches = input.match(regex);
  if (matches) {
    var all = {};
    var matchIndex = 1;
    for (var i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        var h = handlers[i],
          groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}
function dateTimeFromMatches(matches) {
  var toField = function toField(token) {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };
  var zone = null;
  var specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }
  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  var vals = Object.keys(matches).reduce(function (r, k) {
    var f = toField(k);
    if (f) {
      r[f] = matches[k];
    }
    return r;
  }, {});
  return [vals, zone, specificOffset];
}
var dummyDateTimeCache = null;
function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }
  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  var tokens = formatOptsToTokens(formatOpts, locale);
  if (tokens == null || tokens.includes(undefined)) {
    return token;
  }
  return tokens;
}
function expandMacroTokens(tokens, locale) {
  var _Array$prototype;
  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {
    return maybeExpandMacroToken(t, locale);
  }));
}

/**
 * @private
 */

function explainFromTokens(locale, input, format) {
  var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
    units = tokens.map(function (t) {
      return unitForToken(t, locale);
    }),
    disqualifyingUnit = units.find(function (t) {
      return t.invalidReason;
    });
  if (disqualifyingUnit) {
    return {
      input: input,
      tokens: tokens,
      invalidReason: disqualifyingUnit.invalidReason
    };
  } else {
    var _buildRegex = buildRegex(units),
      regexString = _buildRegex[0],
      handlers = _buildRegex[1],
      regex = RegExp(regexString, "i"),
      _match = match(input, regex, handlers),
      rawMatches = _match[0],
      matches = _match[1],
      _ref6 = matches ? dateTimeFromMatches(matches) : [null, null, undefined],
      result = _ref6[0],
      zone = _ref6[1],
      specificOffset = _ref6[2];
    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }
    return {
      input: input,
      tokens: tokens,
      regex: regex,
      rawMatches: rawMatches,
      matches: matches,
      result: result,
      zone: zone,
      specificOffset: specificOffset
    };
  }
}
function parseFromTokens(locale, input, format) {
  var _explainFromTokens = explainFromTokens(locale, input, format),
    result = _explainFromTokens.result,
    zone = _explainFromTokens.zone,
    specificOffset = _explainFromTokens.specificOffset,
    invalidReason = _explainFromTokens.invalidReason;
  return [result, zone, specificOffset, invalidReason];
}
function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }
  var formatter = Formatter.create(locale, formatOpts);
  var parts = formatter.formatDateTimeParts(getDummyDateTime());
  return parts.map(function (p) {
    return tokenForPart(p, formatOpts);
  });
}

var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", "you specified " + value + " (of type " + typeof value + ") as a " + unit + ", which is invalid");
}
function dayOfWeek(year, month, day) {
  var d = new Date(Date.UTC(year, month - 1, day));
  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }
  var js = d.getUTCDay();
  return js === 0 ? 7 : js;
}
function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,
    month0 = table.findIndex(function (i) {
      return i < ordinal;
    }),
    day = ordinal - table[month0];
  return {
    month: month0 + 1,
    day: day
  };
}

/**
 * @private
 */

function gregorianToWeek(gregObj) {
  var year = gregObj.year,
    month = gregObj.month,
    day = gregObj.day,
    ordinal = computeOrdinal(year, month, day),
    weekday = dayOfWeek(year, month, day);
  var weekNumber = Math.floor((ordinal - weekday + 10) / 7),
    weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear);
  } else if (weekNumber > weeksInWeekYear(year)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return _extends({
    weekYear: weekYear,
    weekNumber: weekNumber,
    weekday: weekday
  }, timeObject(gregObj));
}
function weekToGregorian(weekData) {
  var weekYear = weekData.weekYear,
    weekNumber = weekData.weekNumber,
    weekday = weekData.weekday,
    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
    yearInDays = daysInYear(weekYear);
  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
    year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),
    month = _uncomputeOrdinal.month,
    day = _uncomputeOrdinal.day;
  return _extends({
    year: year,
    month: month,
    day: day
  }, timeObject(weekData));
}
function gregorianToOrdinal(gregData) {
  var year = gregData.year,
    month = gregData.month,
    day = gregData.day;
  var ordinal = computeOrdinal(year, month, day);
  return _extends({
    year: year,
    ordinal: ordinal
  }, timeObject(gregData));
}
function ordinalToGregorian(ordinalData) {
  var year = ordinalData.year,
    ordinal = ordinalData.ordinal;
  var _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),
    month = _uncomputeOrdinal2.month,
    day = _uncomputeOrdinal2.day;
  return _extends({
    year: year,
    month: month,
    day: day
  }, timeObject(ordinalData));
}
function hasInvalidWeekData(obj) {
  var validYear = isInteger(obj.weekYear),
    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
    validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.week);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
function hasInvalidOrdinalData(obj) {
  var validYear = isInteger(obj.year),
    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
function hasInvalidGregorianData(obj) {
  var validYear = isInteger(obj.year),
    validMonth = integerBetween(obj.month, 1, 12),
    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
function hasInvalidTimeData(obj) {
  var hour = obj.hour,
    minute = obj.minute,
    second = obj.second,
    millisecond = obj.millisecond;
  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,
    validMinute = integerBetween(minute, 0, 59),
    validSecond = integerBetween(second, 0, 59),
    validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

var INVALID = "Invalid DateTime";
var MAX_DATE = 8.64e15;
function unsupportedZone(zone) {
  return new Invalid("unsupported zone", "the zone \"" + zone.name + "\" is not supported");
}

// we cache week data on the DT object and this intermediates the cache
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}

// clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties
function clone(inst, alts) {
  var current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime(_extends({}, current, alts, {
    old: current
  }));
}

// find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  var utcGuess = localTS - o * 60 * 1000;

  // Test whether the zone matches the offset for this ts
  var o2 = tz.offset(utcGuess);

  // If so, offset didn't change and we're done
  if (o === o2) {
    return [utcGuess, o];
  }

  // If not, change the ts by the difference in the offset
  utcGuess -= (o2 - o) * 60 * 1000;

  // If that gives us the local time we want, we're done
  var o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }

  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
}

// convert an epoch timestamp into a calendar object with the given offset
function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;
  var d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
}

// convert a calendar object to a epoch timestamp
function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
}

// create a new DT instance by adding a duration, adjusting for DSTs
function adjustTime(inst, dur) {
  var oPre = inst.o,
    year = inst.c.year + Math.trunc(dur.years),
    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
    c = _extends({}, inst.c, {
      year: year,
      month: month,
      day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
    }),
    millisToAdd = Duration.fromObject({
      years: dur.years - Math.trunc(dur.years),
      quarters: dur.quarters - Math.trunc(dur.quarters),
      months: dur.months - Math.trunc(dur.months),
      weeks: dur.weeks - Math.trunc(dur.weeks),
      days: dur.days - Math.trunc(dur.days),
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds
    }).as("milliseconds"),
    localTS = objToLocalTS(c);
  var _fixOffset = fixOffset(localTS, oPre, inst.zone),
    ts = _fixOffset[0],
    o = _fixOffset[1];
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    // that could have changed the offset by going over a DST, but we want to keep the ts the same
    o = inst.zone.offset(ts);
  }
  return {
    ts: ts,
    o: o
  };
}

// helper useful in turning the results of parsing into real dates
// by handling the zone options
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  var setZone = opts.setZone,
    zone = opts.zone;
  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
    var interpretationZone = parsedZone || zone,
      inst = DateTime.fromObject(parsed, _extends({}, opts, {
        zone: interpretationZone,
        specificOffset: specificOffset
      }));
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", "the input \"" + text + "\" can't be parsed as " + format));
  }
}

// if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details
function toTechFormat(dt, format, allowZ) {
  if (allowZ === void 0) {
    allowZ = true;
  }
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ: allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
}
function _toISODate(o, extended) {
  var longFormat = o.c.year > 9999 || o.c.year < 0;
  var c = "";
  if (longFormat && o.c.year >= 0) c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);
  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}
function _toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  var c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }
  if (o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);
    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }
  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}

// defaults for unspecified units in the supported calendars
var defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  },
  defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  },
  defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };

// Units in the supported calendars, sorted by bigness
var orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
  orderedWeekUnits = ["weekYear", "weekNumber", "weekday", "hour", "minute", "second", "millisecond"],
  orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

// standardize case and plurality in units
function normalizeUnit(unit) {
  var normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
}

// this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.
function quickDT(obj, opts) {
  var zone = normalizeZone(opts.zone, Settings.defaultZone),
    loc = Locale.fromObject(opts),
    tsNow = Settings.now();
  var ts, o;

  // assume we have the higher-order units
  if (!isUndefined(obj.year)) {
    for (var _i = 0, _orderedUnits = orderedUnits; _i < _orderedUnits.length; _i++) {
      var u = _orderedUnits[_i];
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }
    var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    var offsetProvis = zone.offset(tsNow);
    var _objToTS = objToTS(obj, offsetProvis, zone);
    ts = _objToTS[0];
    o = _objToTS[1];
  } else {
    ts = tsNow;
  }
  return new DateTime({
    ts: ts,
    zone: zone,
    loc: loc,
    o: o
  });
}
function diffRelative(start, end, opts) {
  var round = isUndefined(opts.round) ? true : opts.round,
    format = function format(c, unit) {
      c = roundTo(c, round || opts.calendary ? 0 : 2, true);
      var formatter = end.loc.clone(opts).relFormatter(opts);
      return formatter.format(c, unit);
    },
    differ = function differ(unit) {
      if (opts.calendary) {
        if (!end.hasSame(start, unit)) {
          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
        } else return 0;
      } else {
        return end.diff(start, unit).get(unit);
      }
    };
  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }
  for (var _iterator = _createForOfIteratorHelperLoose(opts.units), _step; !(_step = _iterator()).done;) {
    var unit = _step.value;
    var count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }
  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function lastOpts(argList) {
  var opts = {},
    args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}

/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */
var DateTime = /*#__PURE__*/function () {
  /**
   * @access private
   */
  function DateTime(config) {
    var zone = config.zone || Settings.defaultZone;
    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */
    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    var c = null,
      o = null;
    if (!invalid) {
      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
      if (unchanged) {
        var _ref = [config.old.c, config.old.o];
        c = _ref[0];
        o = _ref[1];
      } else {
        var ot = zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }

    /**
     * @access private
     */
    this._zone = zone;
    /**
     * @access private
     */
    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */
    this.invalid = invalid;
    /**
     * @access private
     */
    this.weekData = null;
    /**
     * @access private
     */
    this.c = c;
    /**
     * @access private
     */
    this.o = o;
    /**
     * @access private
     */
    this.isLuxonDateTime = true;
  }

  // CONSTRUCT

  /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */
  DateTime.now = function now() {
    return new DateTime({});
  }

  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */;
  DateTime.local = function local() {
    var _lastOpts = lastOpts(arguments),
      opts = _lastOpts[0],
      args = _lastOpts[1],
      year = args[0],
      month = args[1],
      day = args[2],
      hour = args[3],
      minute = args[4],
      second = args[5],
      millisecond = args[6];
    return quickDT({
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      second: second,
      millisecond: millisecond
    }, opts);
  }

  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */;
  DateTime.utc = function utc() {
    var _lastOpts2 = lastOpts(arguments),
      opts = _lastOpts2[0],
      args = _lastOpts2[1],
      year = args[0],
      month = args[1],
      day = args[2],
      hour = args[3],
      minute = args[4],
      second = args[5],
      millisecond = args[6];
    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      second: second,
      millisecond: millisecond
    }, opts);
  }

  /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */;
  DateTime.fromJSDate = function fromJSDate(date, options) {
    if (options === void 0) {
      options = {};
    }
    var ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }
    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }
    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }

  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */;
  DateTime.fromMillis = function fromMillis(milliseconds, options) {
    if (options === void 0) {
      options = {};
    }
    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError("fromMillis requires a numerical input, but received a " + typeof milliseconds + " with value " + milliseconds);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }

  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */;
  DateTime.fromSeconds = function fromSeconds(seconds, options) {
    if (options === void 0) {
      options = {};
    }
    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }

  /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @return {DateTime}
   */;
  DateTime.fromObject = function fromObject(obj, opts) {
    if (opts === void 0) {
      opts = {};
    }
    obj = obj || {};
    var zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }
    var tsNow = Settings.now(),
      offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow),
      normalized = normalizeObject(obj, normalizeUnit),
      containsOrdinal = !isUndefined(normalized.ordinal),
      containsGregorYear = !isUndefined(normalized.year),
      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
      containsGregor = containsGregorYear || containsGregorMD,
      definiteWeekDef = normalized.weekYear || normalized.weekNumber,
      loc = Locale.fromObject(opts);

    // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;

    // configure ourselves to deal with gregorian dates or week stuff
    var units,
      defaultValues,
      objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits;
      defaultValues = defaultUnitValues;
    }

    // set default values for missing stuff
    var foundFirst = false;
    for (var _iterator2 = _createForOfIteratorHelperLoose(units), _step2; !(_step2 = _iterator2()).done;) {
      var u = _step2.value;
      var v = normalized[u];
      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    }

    // make sure the values we have are in range
    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),
      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
    if (invalid) {
      return DateTime.invalid(invalid);
    }

    // compute the actual time
    var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,
      _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),
      tsFinal = _objToTS2[0],
      offsetFinal = _objToTS2[1],
      inst = new DateTime({
        ts: tsFinal,
        zone: zoneToUse,
        o: offsetFinal,
        loc: loc
      });

    // gregorian data + weekday serves only to validate
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of " + normalized.weekday + " and a date of " + inst.toISO());
    }
    return inst;
  }

  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */;
  DateTime.fromISO = function fromISO(text, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var _parseISODate = parseISODate(text),
      vals = _parseISODate[0],
      parsedZone = _parseISODate[1];
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }

  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */;
  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var _parseRFC2822Date = parseRFC2822Date(text),
      vals = _parseRFC2822Date[0],
      parsedZone = _parseRFC2822Date[1];
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }

  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */;
  DateTime.fromHTTP = function fromHTTP(text, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var _parseHTTPDate = parseHTTPDate(text),
      vals = _parseHTTPDate[0],
      parsedZone = _parseHTTPDate[1];
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }

  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */;
  DateTime.fromFormat = function fromFormat(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }
    var _opts = opts,
      _opts$locale = _opts.locale,
      locale = _opts$locale === void 0 ? null : _opts$locale,
      _opts$numberingSystem = _opts.numberingSystem,
      numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,
      localeToUse = Locale.fromOpts({
        locale: locale,
        numberingSystem: numberingSystem,
        defaultToEN: true
      }),
      _parseFromTokens = parseFromTokens(localeToUse, text, fmt),
      vals = _parseFromTokens[0],
      parsedZone = _parseFromTokens[1],
      specificOffset = _parseFromTokens[2],
      invalid = _parseFromTokens[3];
    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, "format " + fmt, text, specificOffset);
    }
  }

  /**
   * @deprecated use fromFormat instead
   */;
  DateTime.fromString = function fromString(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    return DateTime.fromFormat(text, fmt, opts);
  }

  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */;
  DateTime.fromSQL = function fromSQL(text, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var _parseSQL = parseSQL(text),
      vals = _parseSQL[0],
      parsedZone = _parseSQL[1];
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }

  /**
   * Create an invalid DateTime.
   * @param {DateTime} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */;
  DateTime.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }
    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({
        invalid: invalid
      });
    }
  }

  /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */;
  DateTime.isDateTime = function isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  }

  /**
   * Produce the format string for a set of options
   * @param formatOpts
   * @param localeOpts
   * @returns {string}
   */;
  DateTime.parseFormatForOpts = function parseFormatForOpts(formatOpts, localeOpts) {
    if (localeOpts === void 0) {
      localeOpts = {};
    }
    var tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
    return !tokenList ? null : tokenList.map(function (t) {
      return t ? t.val : null;
    }).join("");
  }

  /**
   * Produce the the fully expanded format token for the locale
   * Does NOT quote characters, so quoted tokens will not round trip correctly
   * @param fmt
   * @param localeOpts
   * @returns {string}
   */;
  DateTime.expandFormat = function expandFormat(fmt, localeOpts) {
    if (localeOpts === void 0) {
      localeOpts = {};
    }
    var expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
    return expanded.map(function (t) {
      return t.val;
    }).join("");
  }

  // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */;
  var _proto = DateTime.prototype;
  _proto.get = function get(unit) {
    return this[unit];
  }

  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */;
  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  _proto.resolvedLocaleOptions = function resolvedLocaleOptions(opts) {
    if (opts === void 0) {
      opts = {};
    }
    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),
      locale = _Formatter$create$res.locale,
      numberingSystem = _Formatter$create$res.numberingSystem,
      calendar = _Formatter$create$res.calendar;
    return {
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: calendar
    };
  }

  // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */;
  _proto.toUTC = function toUTC(offset, opts) {
    if (offset === void 0) {
      offset = 0;
    }
    if (opts === void 0) {
      opts = {};
    }
    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }

  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */;
  _proto.toLocal = function toLocal() {
    return this.setZone(Settings.defaultZone);
  }

  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */;
  _proto.setZone = function setZone(zone, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp,
      _ref2$keepLocalTime = _ref2.keepLocalTime,
      keepLocalTime = _ref2$keepLocalTime === void 0 ? false : _ref2$keepLocalTime,
      _ref2$keepCalendarTim = _ref2.keepCalendarTime,
      keepCalendarTime = _ref2$keepCalendarTim === void 0 ? false : _ref2$keepCalendarTim;
    zone = normalizeZone(zone, Settings.defaultZone);
    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      var newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        var offsetGuess = zone.offset(this.ts);
        var asObj = this.toObject();
        var _objToTS3 = objToTS(asObj, offsetGuess, zone);
        newTS = _objToTS3[0];
      }
      return clone(this, {
        ts: newTS,
        zone: zone
      });
    }
  }

  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */;
  _proto.reconfigure = function reconfigure(_temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
      locale = _ref3.locale,
      numberingSystem = _ref3.numberingSystem,
      outputCalendar = _ref3.outputCalendar;
    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: outputCalendar
    });
    return clone(this, {
      loc: loc
    });
  }

  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */;
  _proto.setLocale = function setLocale(locale) {
    return this.reconfigure({
      locale: locale
    });
  }

  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */;
  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var normalized = normalizeObject(values, normalizeUnit),
      settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday),
      containsOrdinal = !isUndefined(normalized.ordinal),
      containsGregorYear = !isUndefined(normalized.year),
      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
      containsGregor = containsGregorYear || containsGregorMD,
      definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    var mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian(_extends({}, gregorianToWeek(this.c), normalized));
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian(_extends({}, gregorianToOrdinal(this.c), normalized));
    } else {
      mixed = _extends({}, this.toObject(), normalized);

      // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month
      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }
    var _objToTS4 = objToTS(mixed, this.o, this.zone),
      ts = _objToTS4[0],
      o = _objToTS4[1];
    return clone(this, {
      ts: ts,
      o: o
    });
  }

  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */;
  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration);
    return clone(this, adjustTime(this, dur));
  }

  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */;
  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = Duration.fromDurationLike(duration).negate();
    return clone(this, adjustTime(this, dur));
  }

  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */;
  _proto.startOf = function startOf(unit) {
    if (!this.isValid) return this;
    var o = {},
      normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through
      case "quarters":
      case "months":
        o.day = 1;
      // falls through
      case "weeks":
      case "days":
        o.hour = 0;
      // falls through
      case "hours":
        o.minute = 0;
      // falls through
      case "minutes":
        o.second = 0;
      // falls through
      case "seconds":
        o.millisecond = 0;
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      o.weekday = 1;
    }
    if (normalizedUnit === "quarters") {
      var q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }
    return this.set(o);
  }

  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */;
  _proto.endOf = function endOf(unit) {
    var _this$plus;
    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit).minus(1) : this;
  }

  // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */;
  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }
    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID;
  }

  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */;
  _proto.toLocaleString = function toLocaleString(formatOpts, opts) {
    if (formatOpts === void 0) {
      formatOpts = DATE_SHORT;
    }
    if (opts === void 0) {
      opts = {};
    }
    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID;
  }

  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */;
  _proto.toLocaleParts = function toLocaleParts(opts) {
    if (opts === void 0) {
      opts = {};
    }
    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */;
  _proto.toISO = function toISO(_temp3) {
    var _ref4 = _temp3 === void 0 ? {} : _temp3,
      _ref4$format = _ref4.format,
      format = _ref4$format === void 0 ? "extended" : _ref4$format,
      _ref4$suppressSeconds = _ref4.suppressSeconds,
      suppressSeconds = _ref4$suppressSeconds === void 0 ? false : _ref4$suppressSeconds,
      _ref4$suppressMillise = _ref4.suppressMilliseconds,
      suppressMilliseconds = _ref4$suppressMillise === void 0 ? false : _ref4$suppressMillise,
      _ref4$includeOffset = _ref4.includeOffset,
      includeOffset = _ref4$includeOffset === void 0 ? true : _ref4$includeOffset,
      _ref4$extendedZone = _ref4.extendedZone,
      extendedZone = _ref4$extendedZone === void 0 ? false : _ref4$extendedZone;
    if (!this.isValid) {
      return null;
    }
    var ext = format === "extended";
    var c = _toISODate(this, ext);
    c += "T";
    c += _toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */;
  _proto.toISODate = function toISODate(_temp4) {
    var _ref5 = _temp4 === void 0 ? {} : _temp4,
      _ref5$format = _ref5.format,
      format = _ref5$format === void 0 ? "extended" : _ref5$format;
    if (!this.isValid) {
      return null;
    }
    return _toISODate(this, format === "extended");
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */;
  _proto.toISOWeekDate = function toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */;
  _proto.toISOTime = function toISOTime(_temp5) {
    var _ref6 = _temp5 === void 0 ? {} : _temp5,
      _ref6$suppressMillise = _ref6.suppressMilliseconds,
      suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,
      _ref6$suppressSeconds = _ref6.suppressSeconds,
      suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,
      _ref6$includeOffset = _ref6.includeOffset,
      includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,
      _ref6$includePrefix = _ref6.includePrefix,
      includePrefix = _ref6$includePrefix === void 0 ? false : _ref6$includePrefix,
      _ref6$extendedZone = _ref6.extendedZone,
      extendedZone = _ref6$extendedZone === void 0 ? false : _ref6$extendedZone,
      _ref6$format = _ref6.format,
      format = _ref6$format === void 0 ? "extended" : _ref6$format;
    if (!this.isValid) {
      return null;
    }
    var c = includePrefix ? "T" : "";
    return c + _toISOTime(this, format === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
  }

  /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */;
  _proto.toRFC2822 = function toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */;
  _proto.toHTTP = function toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */;
  _proto.toSQLDate = function toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return _toISODate(this, true);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */;
  _proto.toSQLTime = function toSQLTime(_temp6) {
    var _ref7 = _temp6 === void 0 ? {} : _temp6,
      _ref7$includeOffset = _ref7.includeOffset,
      includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,
      _ref7$includeZone = _ref7.includeZone,
      includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone,
      _ref7$includeOffsetSp = _ref7.includeOffsetSpace,
      includeOffsetSpace = _ref7$includeOffsetSp === void 0 ? true : _ref7$includeOffsetSp;
    var fmt = "HH:mm:ss.SSS";
    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }
      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }
    return toTechFormat(this, fmt, true);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */;
  _proto.toSQL = function toSQL(opts) {
    if (opts === void 0) {
      opts = {};
    }
    if (!this.isValid) {
      return null;
    }
    return this.toSQLDate() + " " + this.toSQLTime(opts);
  }

  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */;
  _proto.toString = function toString() {
    return this.isValid ? this.toISO() : INVALID;
  }

  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */;
  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }

  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */;
  _proto.toMillis = function toMillis() {
    return this.isValid ? this.ts : NaN;
  }

  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */;
  _proto.toSeconds = function toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }

  /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */;
  _proto.toUnixInteger = function toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1000) : NaN;
  }

  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */;
  _proto.toJSON = function toJSON() {
    return this.toISO();
  }

  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */;
  _proto.toBSON = function toBSON() {
    return this.toJSDate();
  }

  /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */;
  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }
    if (!this.isValid) return {};
    var base = _extends({}, this.c);
    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }

  /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */;
  _proto.toJSDate = function toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }

  // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */;
  _proto.diff = function diff(otherDateTime, unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }
    if (opts === void 0) {
      opts = {};
    }
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }
    var durOpts = _extends({
      locale: this.locale,
      numberingSystem: this.numberingSystem
    }, opts);
    var units = maybeArray(unit).map(Duration.normalizeUnit),
      otherIsLater = otherDateTime.valueOf() > this.valueOf(),
      earlier = otherIsLater ? this : otherDateTime,
      later = otherIsLater ? otherDateTime : this,
      diffed = _diff(earlier, later, units, durOpts);
    return otherIsLater ? diffed.negate() : diffed;
  }

  /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */;
  _proto.diffNow = function diffNow(unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }
    if (opts === void 0) {
      opts = {};
    }
    return this.diff(DateTime.now(), unit, opts);
  }

  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */;
  _proto.until = function until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }

  /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */;
  _proto.hasSame = function hasSame(otherDateTime, unit) {
    if (!this.isValid) return false;
    var inputMs = otherDateTime.valueOf();
    var adjustedToZone = this.setZone(otherDateTime.zone, {
      keepLocalTime: true
    });
    return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
  }

  /**
   * Equality check
   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */;
  _proto.equals = function equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }

  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */;
  _proto.toRelative = function toRelative(options) {
    if (options === void 0) {
      options = {};
    }
    if (!this.isValid) return null;
    var base = options.base || DateTime.fromObject({}, {
        zone: this.zone
      }),
      padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    var units = ["years", "months", "days", "hours", "minutes", "seconds"];
    var unit = options.unit;
    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = undefined;
    }
    return diffRelative(base, this.plus(padding), _extends({}, options, {
      numeric: "always",
      units: units,
      unit: unit
    }));
  }

  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */;
  _proto.toRelativeCalendar = function toRelativeCalendar(options) {
    if (options === void 0) {
      options = {};
    }
    if (!this.isValid) return null;
    return diffRelative(options.base || DateTime.fromObject({}, {
      zone: this.zone
    }), this, _extends({}, options, {
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    }));
  }

  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */;
  DateTime.min = function min() {
    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.min);
  }

  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */;
  DateTime.max = function max() {
    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      dateTimes[_key2] = arguments[_key2];
    }
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.max);
  }

  // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */;
  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      _options$locale = _options.locale,
      locale = _options$locale === void 0 ? null : _options$locale,
      _options$numberingSys = _options.numberingSystem,
      numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,
      localeToUse = Locale.fromOpts({
        locale: locale,
        numberingSystem: numberingSystem,
        defaultToEN: true
      });
    return explainFromTokens(localeToUse, text, fmt);
  }

  /**
   * @deprecated use fromFormatExplain instead
   */;
  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }
    return DateTime.fromFormatExplain(text, fmt, options);
  }

  // FORMAT PRESETS

  /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */;
  _createClass(DateTime, [{
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }

    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */
  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */
  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */
  }, {
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }

    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */
  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }

    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */
  }, {
    key: "outputCalendar",
    get: function get() {
      return this.isValid ? this.loc.outputCalendar : null;
    }

    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */
  }, {
    key: "zone",
    get: function get() {
      return this._zone;
    }

    /**
     * Get the name of the time zone.
     * @type {string}
     */
  }, {
    key: "zoneName",
    get: function get() {
      return this.isValid ? this.zone.name : null;
    }

    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */
  }, {
    key: "year",
    get: function get() {
      return this.isValid ? this.c.year : NaN;
    }

    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */
  }, {
    key: "quarter",
    get: function get() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }

    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */
  }, {
    key: "month",
    get: function get() {
      return this.isValid ? this.c.month : NaN;
    }

    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */
  }, {
    key: "day",
    get: function get() {
      return this.isValid ? this.c.day : NaN;
    }

    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */
  }, {
    key: "hour",
    get: function get() {
      return this.isValid ? this.c.hour : NaN;
    }

    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */
  }, {
    key: "minute",
    get: function get() {
      return this.isValid ? this.c.minute : NaN;
    }

    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */
  }, {
    key: "second",
    get: function get() {
      return this.isValid ? this.c.second : NaN;
    }

    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */
  }, {
    key: "millisecond",
    get: function get() {
      return this.isValid ? this.c.millisecond : NaN;
    }

    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */
  }, {
    key: "weekYear",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }

    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */
  }, {
    key: "weekNumber",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }

    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */
  }, {
    key: "weekday",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }

    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */
  }, {
    key: "ordinal",
    get: function get() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }

    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */
  }, {
    key: "monthShort",
    get: function get() {
      return this.isValid ? Info.months("short", {
        locObj: this.loc
      })[this.month - 1] : null;
    }

    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */
  }, {
    key: "monthLong",
    get: function get() {
      return this.isValid ? Info.months("long", {
        locObj: this.loc
      })[this.month - 1] : null;
    }

    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */
  }, {
    key: "weekdayShort",
    get: function get() {
      return this.isValid ? Info.weekdays("short", {
        locObj: this.loc
      })[this.weekday - 1] : null;
    }

    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */
  }, {
    key: "weekdayLong",
    get: function get() {
      return this.isValid ? Info.weekdays("long", {
        locObj: this.loc
      })[this.weekday - 1] : null;
    }

    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */
  }, {
    key: "offset",
    get: function get() {
      return this.isValid ? +this.o : NaN;
    }

    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
  }, {
    key: "offsetNameShort",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }

    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
  }, {
    key: "offsetNameLong",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }

    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */
  }, {
    key: "isOffsetFixed",
    get: function get() {
      return this.isValid ? this.zone.isUniversal : null;
    }

    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */
  }, {
    key: "isInDST",
    get: function get() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({
          month: 1,
          day: 1
        }).offset || this.offset > this.set({
          month: 5
        }).offset;
      }
    }

    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */
  }, {
    key: "isInLeapYear",
    get: function get() {
      return isLeapYear(this.year);
    }

    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */
  }, {
    key: "daysInMonth",
    get: function get() {
      return daysInMonth(this.year, this.month);
    }

    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */
  }, {
    key: "daysInYear",
    get: function get() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }

    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */
  }, {
    key: "weeksInWeekYear",
    get: function get() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
  }], [{
    key: "DATE_SHORT",
    get: function get() {
      return DATE_SHORT;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */
  }, {
    key: "DATE_MED",
    get: function get() {
      return DATE_MED;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */
  }, {
    key: "DATE_MED_WITH_WEEKDAY",
    get: function get() {
      return DATE_MED_WITH_WEEKDAY;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */
  }, {
    key: "DATE_FULL",
    get: function get() {
      return DATE_FULL;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */
  }, {
    key: "DATE_HUGE",
    get: function get() {
      return DATE_HUGE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "TIME_SIMPLE",
    get: function get() {
      return TIME_SIMPLE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "TIME_WITH_SECONDS",
    get: function get() {
      return TIME_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "TIME_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_WITH_SHORT_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "TIME_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_WITH_LONG_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */
  }, {
    key: "TIME_24_SIMPLE",
    get: function get() {
      return TIME_24_SIMPLE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */
  }, {
    key: "TIME_24_WITH_SECONDS",
    get: function get() {
      return TIME_24_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */
  }, {
    key: "TIME_24_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_24_WITH_SHORT_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */
  }, {
    key: "TIME_24_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_24_WITH_LONG_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_SHORT",
    get: function get() {
      return DATETIME_SHORT;
    }

    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_SHORT_WITH_SECONDS",
    get: function get() {
      return DATETIME_SHORT_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_MED",
    get: function get() {
      return DATETIME_MED;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_MED_WITH_SECONDS",
    get: function get() {
      return DATETIME_MED_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_MED_WITH_WEEKDAY",
    get: function get() {
      return DATETIME_MED_WITH_WEEKDAY;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_FULL",
    get: function get() {
      return DATETIME_FULL;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_FULL_WITH_SECONDS",
    get: function get() {
      return DATETIME_FULL_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_HUGE",
    get: function get() {
      return DATETIME_HUGE;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
  }, {
    key: "DATETIME_HUGE_WITH_SECONDS",
    get: function get() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }]);
  return DateTime;
}();
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError("Unknown datetime argument: " + dateTimeish + ", of type " + typeof dateTimeish);
  }
}

var VERSION = "3.3.0";

exports.DateTime = DateTime;
exports.Duration = Duration;
exports.FixedOffsetZone = FixedOffsetZone;
exports.IANAZone = IANAZone;
exports.Info = Info;
exports.Interval = Interval;
exports.InvalidZone = InvalidZone;
exports.Settings = Settings;
exports.SystemZone = SystemZone;
exports.VERSION = VERSION;
exports.Zone = Zone;


},{}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assign = assign;
exports.bind = bind;
exports.debounce = debounce;
exports.ensureArray = ensureArray;
exports.every = every;
exports.filter = filter;
exports.find = find;
exports.findIndex = findIndex;
exports.flatten = flatten;
exports.forEach = forEach;
exports.get = get;
exports.groupBy = groupBy;
exports.has = has;
exports.isArray = isArray;
exports.isDefined = isDefined;
exports.isFunction = isFunction;
exports.isNil = isNil;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.isUndefined = isUndefined;
exports.keys = keys;
exports.map = map;
exports.matchPattern = matchPattern;
exports.merge = merge;
exports.omit = omit;
exports.pick = pick;
exports.reduce = reduce;
exports.set = set;
exports.size = size;
exports.some = some;
exports.sortBy = sortBy;
exports.throttle = throttle;
exports.unionBy = void 0;
exports.uniqueBy = uniqueBy;
exports.values = values;
exports.without = without;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * Flatten array, one level deep.
 *
 * @template T
 *
 * @param {T[][]} arr
 *
 * @return {T[]}
 */
function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}
var nativeToString = Object.prototype.toString;
var nativeHasOwnProperty = Object.prototype.hasOwnProperty;
function isUndefined(obj) {
  return obj === undefined;
}
function isDefined(obj) {
  return obj !== undefined;
}
function isNil(obj) {
  return obj == null;
}
function isArray(obj) {
  return nativeToString.call(obj) === '[object Array]';
}
function isObject(obj) {
  return nativeToString.call(obj) === '[object Object]';
}
function isNumber(obj) {
  return nativeToString.call(obj) === '[object Number]';
}

/**
 * @param {any} obj
 *
 * @return {boolean}
 */
function isFunction(obj) {
  var tag = nativeToString.call(obj);
  return tag === '[object Function]' || tag === '[object AsyncFunction]' || tag === '[object GeneratorFunction]' || tag === '[object AsyncGeneratorFunction]' || tag === '[object Proxy]';
}
function isString(obj) {
  return nativeToString.call(obj) === '[object String]';
}

/**
 * Ensure collection is an array.
 *
 * @param {Object} obj
 */
function ensureArray(obj) {
  if (isArray(obj)) {
    return;
  }
  throw new Error('must supply array');
}

/**
 * Return true, if target owns a property with the given key.
 *
 * @param {Object} target
 * @param {String} key
 *
 * @return {Boolean}
 */
function has(target, key) {
  return nativeHasOwnProperty.call(target, key);
}

/**
 * @template T
 * @typedef { (
 *   ((e: T) => boolean) |
 *   ((e: T, idx: number) => boolean) |
 *   ((e: T, key: string) => boolean) |
 *   string |
 *   number
 * ) } Matcher
 */

/**
 * @template T
 * @template U
 *
 * @typedef { (
 *   ((e: T) => U) | string | number
 * ) } Extractor
 */

/**
 * @template T
 * @typedef { (val: T, key: any) => boolean } MatchFn
 */

/**
 * @template T
 * @typedef { T[] } ArrayCollection
 */

/**
 * @template T
 * @typedef { { [key: string]: T } } StringKeyValueCollection
 */

/**
 * @template T
 * @typedef { { [key: number]: T } } NumberKeyValueCollection
 */

/**
 * @template T
 * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection
 */

/**
 * @template T
 * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection
 */

/**
 * Find element in collection.
 *
 * @template T
 * @param {Collection<T>} collection
 * @param {Matcher<T>} matcher
 *
 * @return {Object}
 */
function find(collection, matcher) {
  var matchFn = toMatcher(matcher);
  var match;
  forEach(collection, function (val, key) {
    if (matchFn(val, key)) {
      match = val;
      return false;
    }
  });
  return match;
}

/**
 * Find element index in collection.
 *
 * @template T
 * @param {Collection<T>} collection
 * @param {Matcher<T>} matcher
 *
 * @return {number}
 */
function findIndex(collection, matcher) {
  var matchFn = toMatcher(matcher);
  var idx = isArray(collection) ? -1 : undefined;
  forEach(collection, function (val, key) {
    if (matchFn(val, key)) {
      idx = key;
      return false;
    }
  });
  return idx;
}

/**
 * Filter elements in collection.
 *
 * @template T
 * @param {Collection<T>} collection
 * @param {Matcher<T>} matcher
 *
 * @return {T[]} result
 */
function filter(collection, matcher) {
  var matchFn = toMatcher(matcher);
  var result = [];
  forEach(collection, function (val, key) {
    if (matchFn(val, key)) {
      result.push(val);
    }
  });
  return result;
}

/**
 * Iterate over collection; returning something
 * (non-undefined) will stop iteration.
 *
 * @template T
 * @param {Collection<T>} collection
 * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator
 *
 * @return {T} return result that stopped the iteration
 */
function forEach(collection, iterator) {
  var val, result;
  if (isUndefined(collection)) {
    return;
  }
  var convertKey = isArray(collection) ? toNum : identity;
  for (var key in collection) {
    if (has(collection, key)) {
      val = collection[key];
      result = iterator(val, convertKey(key));
      if (result === false) {
        return val;
      }
    }
  }
}

/**
 * Return collection without element.
 *
 * @template T
 * @param {ArrayCollection<T>} arr
 * @param {Matcher<T>} matcher
 *
 * @return {T[]}
 */
function without(arr, matcher) {
  if (isUndefined(arr)) {
    return [];
  }
  ensureArray(arr);
  var matchFn = toMatcher(matcher);
  return arr.filter(function (el, idx) {
    return !matchFn(el, idx);
  });
}

/**
 * Reduce collection, returning a single result.
 *
 * @template T
 * @template V
 *
 * @param {Collection<T>} collection
 * @param {(result: V, entry: T, index: any) => V} iterator
 * @param {V} result
 *
 * @return {V} result returned from last iterator
 */
function reduce(collection, iterator, result) {
  forEach(collection, function (value, idx) {
    result = iterator(result, value, idx);
  });
  return result;
}

/**
 * Return true if every element in the collection
 * matches the criteria.
 *
 * @param  {Object|Array} collection
 * @param  {Function} matcher
 *
 * @return {Boolean}
 */
function every(collection, matcher) {
  return !!reduce(collection, function (matches, val, key) {
    return matches && matcher(val, key);
  }, true);
}

/**
 * Return true if some elements in the collection
 * match the criteria.
 *
 * @param  {Object|Array} collection
 * @param  {Function} matcher
 *
 * @return {Boolean}
 */
function some(collection, matcher) {
  return !!find(collection, matcher);
}

/**
 * Transform a collection into another collection
 * by piping each member through the given fn.
 *
 * @param  {Object|Array}   collection
 * @param  {Function} fn
 *
 * @return {Array} transformed collection
 */
function map(collection, fn) {
  var result = [];
  forEach(collection, function (val, key) {
    result.push(fn(val, key));
  });
  return result;
}

/**
 * Get the collections keys.
 *
 * @param  {Object|Array} collection
 *
 * @return {Array}
 */
function keys(collection) {
  return collection && Object.keys(collection) || [];
}

/**
 * Shorthand for `keys(o).length`.
 *
 * @param  {Object|Array} collection
 *
 * @return {Number}
 */
function size(collection) {
  return keys(collection).length;
}

/**
 * Get the values in the collection.
 *
 * @param  {Object|Array} collection
 *
 * @return {Array}
 */
function values(collection) {
  return map(collection, function (val) {
    return val;
  });
}

/**
 * Group collection members by attribute.
 *
 * @param {Object|Array} collection
 * @param {Extractor} extractor
 *
 * @return {Object} map with { attrValue => [ a, b, c ] }
 */
function groupBy(collection, extractor) {
  var grouped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  extractor = toExtractor(extractor);
  forEach(collection, function (val) {
    var discriminator = extractor(val) || '_';
    var group = grouped[discriminator];
    if (!group) {
      group = grouped[discriminator] = [];
    }
    group.push(val);
  });
  return grouped;
}
function uniqueBy(extractor) {
  extractor = toExtractor(extractor);
  var grouped = {};
  for (var _len = arguments.length, collections = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    collections[_key - 1] = arguments[_key];
  }
  forEach(collections, function (c) {
    return groupBy(c, extractor, grouped);
  });
  var result = map(grouped, function (val, key) {
    return val[0];
  });
  return result;
}
var unionBy = uniqueBy;

/**
 * Sort collection by criteria.
 *
 * @template T
 *
 * @param {Collection<T>} collection
 * @param {Extractor<T, number | string>} extractor
 *
 * @return {Array}
 */
exports.unionBy = unionBy;
function sortBy(collection, extractor) {
  extractor = toExtractor(extractor);
  var sorted = [];
  forEach(collection, function (value, key) {
    var disc = extractor(value, key);
    var entry = {
      d: disc,
      v: value
    };
    for (var idx = 0; idx < sorted.length; idx++) {
      var d = sorted[idx].d;
      if (disc < d) {
        sorted.splice(idx, 0, entry);
        return;
      }
    }

    // not inserted, append (!)
    sorted.push(entry);
  });
  return map(sorted, function (e) {
    return e.v;
  });
}

/**
 * Create an object pattern matcher.
 *
 * @example
 *
 * ```javascript
 * const matcher = matchPattern({ id: 1 });
 *
 * let element = find(elements, matcher);
 * ```
 *
 * @template T
 *
 * @param {T} pattern
 *
 * @return { (el: any) =>  boolean } matcherFn
 */
function matchPattern(pattern) {
  return function (el) {
    return every(pattern, function (val, key) {
      return el[key] === val;
    });
  };
}

/**
 * @param {string | ((e: any) => any) } extractor
 *
 * @return { (e: any) => any }
 */
function toExtractor(extractor) {
  /**
   * @satisfies { (e: any) => any }
   */
  return isFunction(extractor) ? extractor : function (e) {
    // @ts-ignore: just works
    return e[extractor];
  };
}

/**
 * @template T
 * @param {Matcher<T>} matcher
 *
 * @return {MatchFn<T>}
 */
function toMatcher(matcher) {
  return isFunction(matcher) ? matcher : function (e) {
    return e === matcher;
  };
}
function identity(arg) {
  return arg;
}
function toNum(arg) {
  return Number(arg);
}

/* global setTimeout clearTimeout */

/**
 * @typedef { {
 *   (...args: any[]): any;
 *   flush: () => void;
 *   cancel: () => void;
 * } } DebouncedFunction
 */

/**
 * Debounce fn, calling it only once if the given time
 * elapsed between calls.
 *
 * Lodash-style the function exposes methods to `#clear`
 * and `#flush` to control internal behavior.
 *
 * @param  {Function} fn
 * @param  {Number} timeout
 *
 * @return {DebouncedFunction} debounced function
 */
function debounce(fn, timeout) {
  var timer;
  var lastArgs;
  var lastThis;
  var lastNow;
  function fire(force) {
    var now = Date.now();
    var scheduledDiff = force ? 0 : lastNow + timeout - now;
    if (scheduledDiff > 0) {
      return schedule(scheduledDiff);
    }
    fn.apply(lastThis, lastArgs);
    clear();
  }
  function schedule(timeout) {
    timer = setTimeout(fire, timeout);
  }
  function clear() {
    if (timer) {
      clearTimeout(timer);
    }
    timer = lastNow = lastArgs = lastThis = undefined;
  }
  function flush() {
    if (timer) {
      fire(true);
    }
    clear();
  }

  /**
   * @type { DebouncedFunction }
   */
  function callback() {
    lastNow = Date.now();
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    lastArgs = args;
    lastThis = this;

    // ensure an execution is scheduled
    if (!timer) {
      schedule(timeout);
    }
  }
  callback.flush = flush;
  callback.cancel = clear;
  return callback;
}

/**
 * Throttle fn, calling at most once
 * in the given interval.
 *
 * @param  {Function} fn
 * @param  {Number} interval
 *
 * @return {Function} throttled function
 */
function throttle(fn, interval) {
  var throttling = false;
  return function () {
    if (throttling) {
      return;
    }
    fn.apply(void 0, arguments);
    throttling = true;
    setTimeout(function () {
      throttling = false;
    }, interval);
  };
}

/**
 * Bind function against target <this>.
 *
 * @param  {Function} fn
 * @param  {Object}   target
 *
 * @return {Function} bound function
 */
function bind(fn, target) {
  return fn.bind(target);
}

/**
 * Convenience wrapper for `Object.assign`.
 *
 * @param {Object} target
 * @param {...Object} others
 *
 * @return {Object} the target
 */
function assign(target) {
  for (var _len3 = arguments.length, others = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    others[_key3 - 1] = arguments[_key3];
  }
  return Object.assign.apply(Object, [target].concat(others));
}

/**
 * Sets a nested property of a given object to the specified value.
 *
 * This mutates the object and returns it.
 *
 * @template T
 *
 * @param {T} target The target of the set operation.
 * @param {(string|number)[]} path The path to the nested value.
 * @param {any} value The value to set.
 *
 * @return {T}
 */
function set(target, path, value) {
  var currentTarget = target;
  forEach(path, function (key, idx) {
    if (typeof key !== 'number' && typeof key !== 'string') {
      throw new Error('illegal key type: ' + _typeof(key) + '. Key should be of type number or string.');
    }
    if (key === 'constructor') {
      throw new Error('illegal key: constructor');
    }
    if (key === '__proto__') {
      throw new Error('illegal key: __proto__');
    }
    var nextKey = path[idx + 1];
    var nextTarget = currentTarget[key];
    if (isDefined(nextKey) && isNil(nextTarget)) {
      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
    }
    if (isUndefined(nextKey)) {
      if (isUndefined(value)) {
        delete currentTarget[key];
      } else {
        currentTarget[key] = value;
      }
    } else {
      currentTarget = nextTarget;
    }
  });
  return target;
}

/**
 * Gets a nested property of a given object.
 *
 * @param {Object} target The target of the get operation.
 * @param {(string|number)[]} path The path to the nested value.
 * @param {any} [defaultValue] The value to return if no value exists.
 *
 * @return {any}
 */
function get(target, path, defaultValue) {
  var currentTarget = target;
  forEach(path, function (key) {
    // accessing nil property yields <undefined>
    if (isNil(currentTarget)) {
      currentTarget = undefined;
      return false;
    }
    currentTarget = currentTarget[key];
  });
  return isUndefined(currentTarget) ? defaultValue : currentTarget;
}

/**
 * Pick properties from the given target.
 *
 * @template T
 * @template {any[]} V
 *
 * @param {T} target
 * @param {V} properties
 *
 * @return Pick<T, V>
 */
function pick(target, properties) {
  var result = {};
  var obj = Object(target);
  forEach(properties, function (prop) {
    if (prop in obj) {
      result[prop] = target[prop];
    }
  });
  return result;
}

/**
 * Pick all target properties, excluding the given ones.
 *
 * @template T
 * @template {any[]} V
 *
 * @param {T} target
 * @param {V} properties
 *
 * @return {Omit<T, V>} target
 */
function omit(target, properties) {
  var result = {};
  var obj = Object(target);
  forEach(obj, function (prop, key) {
    if (properties.indexOf(key) === -1) {
      result[key] = prop;
    }
  });
  return result;
}

/**
 * Recursively merge `...sources` into given target.
 *
 * Does support merging objects; does not support merging arrays.
 *
 * @param {Object} target
 * @param {...Object} sources
 *
 * @return {Object} the target
 */
function merge(target) {
  for (var _len4 = arguments.length, sources = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    sources[_key4 - 1] = arguments[_key4];
  }
  if (!sources.length) {
    return target;
  }
  forEach(sources, function (source) {
    // skip non-obj sources, i.e. null
    if (!source || !isObject(source)) {
      return;
    }
    forEach(source, function (sourceVal, key) {
      if (key === '__proto__') {
        return;
      }
      var targetVal = target[key];
      if (isObject(sourceVal)) {
        if (!isObject(targetVal)) {
          // override target[key] with object
          targetVal = {};
        }
        target[key] = merge(targetVal, sourceVal);
      } else {
        target[key] = sourceVal;
      }
    });
  });
  return target;
}

},{}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignStyle = assign;
exports.attr = attr;
exports.classes = classes;
exports.clear = clear;
exports.closest = closest;
exports.event = exports.domify = exports.delegate = void 0;
exports.matches = matches;
exports.query = query;
exports.queryAll = all;
exports.remove = remove;
function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function get() {
            return e[k];
          }
        });
      }
    });
  });
  return Object.freeze(n);
}

/**
 * Flatten array, one level deep.
 *
 * @param {Array<?>} arr
 *
 * @return {Array<?>}
 */

var nativeToString = Object.prototype.toString;
var nativeHasOwnProperty = Object.prototype.hasOwnProperty;
function isUndefined(obj) {
  return obj === undefined;
}
function isArray(obj) {
  return nativeToString.call(obj) === '[object Array]';
}

/**
 * Return true, if target owns a property with the given key.
 *
 * @param {Object} target
 * @param {String} key
 *
 * @return {Boolean}
 */
function has(target, key) {
  return nativeHasOwnProperty.call(target, key);
}

/**
 * Iterate over collection; returning something
 * (non-undefined) will stop iteration.
 *
 * @param  {Array|Object} collection
 * @param  {Function} iterator
 *
 * @return {Object} return result that stopped the iteration
 */
function forEach(collection, iterator) {
  var val, result;
  if (isUndefined(collection)) {
    return;
  }
  var convertKey = isArray(collection) ? toNum : identity;
  for (var key in collection) {
    if (has(collection, key)) {
      val = collection[key];
      result = iterator(val, convertKey(key));
      if (result === false) {
        return val;
      }
    }
  }
}
function identity(arg) {
  return arg;
}
function toNum(arg) {
  return Number(arg);
}

/**
 * Assigns style attributes in a style-src compliant way.
 *
 * @param {Element} element
 * @param {...Object} styleSources
 *
 * @return {Element} the element
 */
function assign(element) {
  var target = element.style;
  for (var _len = arguments.length, styleSources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    styleSources[_key - 1] = arguments[_key];
  }
  forEach(styleSources, function (style) {
    if (!style) {
      return;
    }
    forEach(style, function (value, key) {
      target[key] = value;
    });
  });
  return element;
}

/**
 * Set attribute `name` to `val`, or get attr `name`.
 *
 * @param {Element} el
 * @param {String} name
 * @param {String} [val]
 * @api public
 */
function attr(el, name, val) {
  // get
  if (arguments.length == 2) {
    return el.getAttribute(name);
  }

  // remove
  if (val === null) {
    return el.removeAttribute(name);
  }

  // set
  el.setAttribute(name, val);
  return el;
}

/**
 * Taken from https://github.com/component/classes
 *
 * Without the component bits.
 */

/**
 * toString reference.
 */

var toString = Object.prototype.toString;

/**
 * Wrap `el` in a `ClassList`.
 *
 * @param {Element} el
 * @return {ClassList}
 * @api public
 */

function classes(el) {
  return new ClassList(el);
}

/**
 * Initialize a new ClassList for `el`.
 *
 * @param {Element} el
 * @api private
 */

function ClassList(el) {
  if (!el || !el.nodeType) {
    throw new Error('A DOM element reference is required');
  }
  this.el = el;
  this.list = el.classList;
}

/**
 * Add class `name` if not already present.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.add = function (name) {
  this.list.add(name);
  return this;
};

/**
 * Remove class `name` when present, or
 * pass a regular expression to remove
 * any which match.
 *
 * @param {String|RegExp} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.remove = function (name) {
  if ('[object RegExp]' == toString.call(name)) {
    return this.removeMatching(name);
  }
  this.list.remove(name);
  return this;
};

/**
 * Remove all classes matching `re`.
 *
 * @param {RegExp} re
 * @return {ClassList}
 * @api private
 */

ClassList.prototype.removeMatching = function (re) {
  var arr = this.array();
  for (var i = 0; i < arr.length; i++) {
    if (re.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};

/**
 * Toggle class `name`, can force state via `force`.
 *
 * For browsers that support classList, but do not support `force` yet,
 * the mistake will be detected and corrected.
 *
 * @param {String} name
 * @param {Boolean} force
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.toggle = function (name, force) {
  if ('undefined' !== typeof force) {
    if (force !== this.list.toggle(name, force)) {
      this.list.toggle(name); // toggle again to correct
    }
  } else {
    this.list.toggle(name);
  }
  return this;
};

/**
 * Return an array of classes.
 *
 * @return {Array}
 * @api public
 */

ClassList.prototype.array = function () {
  return Array.from(this.list);
};

/**
 * Check if class `name` is present.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.has = ClassList.prototype.contains = function (name) {
  return this.list.contains(name);
};

/**
 * Remove all children from the given element.
 */
function clear(el) {
  var c;
  while (el.childNodes.length) {
    c = el.childNodes[0];
    el.removeChild(c);
  }
  return el;
}

/**
 * @param { HTMLElement } element
 * @param { String } selector
 *
 * @return { boolean }
 */
function matches(element, selector) {
  return element && typeof element.matches === 'function' && element.matches(selector);
}

/**
 * Closest
 *
 * @param {Element} el
 * @param {String} selector
 * @param {Boolean} checkYourSelf (optional)
 */
function closest(element, selector, checkYourSelf) {
  var currentElem = checkYourSelf ? element : element.parentNode;
  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE && currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {
    if (matches(currentElem, selector)) {
      return currentElem;
    }
    currentElem = currentElem.parentNode;
  }
  return matches(currentElem, selector) ? currentElem : null;
}
var componentEvent = {};
var bind$1, unbind$1, prefix;
function detect() {
  bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent';
  unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent';
  prefix = bind$1 !== 'addEventListener' ? 'on' : '';
}

/**
 * Bind `el` event `type` to `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

var bind_1 = componentEvent.bind = function (el, type, fn, capture) {
  if (!bind$1) detect();
  el[bind$1](prefix + type, fn, capture || false);
  return fn;
};

/**
 * Unbind `el` event `type`'s callback `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

var unbind_1 = componentEvent.unbind = function (el, type, fn, capture) {
  if (!unbind$1) detect();
  el[unbind$1](prefix + type, fn, capture || false);
  return fn;
};
var event = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  bind: bind_1,
  unbind: unbind_1,
  'default': componentEvent
}, [componentEvent]);

/**
 * Module dependencies.
 */

/**
 * Delegate event `type` to `selector`
 * and invoke `fn(e)`. A callback function
 * is returned which may be passed to `.unbind()`.
 *
 * @param {Element} el
 * @param {String} selector
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

// Some events don't bubble, so we want to bind to the capture phase instead
// when delegating.
exports.event = event;
var forceCaptureEvents = ['focus', 'blur'];
function bind(el, selector, type, fn, capture) {
  if (forceCaptureEvents.indexOf(type) !== -1) {
    capture = true;
  }
  return event.bind(el, type, function (e) {
    var target = e.target || e.srcElement;
    e.delegateTarget = closest(target, selector, true);
    if (e.delegateTarget) {
      fn.call(el, e);
    }
  }, capture);
}

/**
 * Unbind event `type`'s callback `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @api public
 */
function unbind(el, type, fn, capture) {
  if (forceCaptureEvents.indexOf(type) !== -1) {
    capture = true;
  }
  return event.unbind(el, type, fn, capture);
}
var delegate = {
  bind: bind,
  unbind: unbind
};

/**
 * Expose `parse`.
 */
exports.delegate = delegate;
var domify = parse;

/**
 * Tests for browser support.
 */

var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== 'undefined') {
  bugTestDiv = document.createElement('div');
  // Setup
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE
  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
  bugTestDiv = undefined;
}

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};
map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];
map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];
map.polyline = map.ellipse = map.polygon = map.circle = map.text = map.line = map.path = map.rect = map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">', '</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);
  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = Object.prototype.hasOwnProperty.call(map, tag) ? map[tag] : map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }
  return fragment;
}
var domify$1 = domify;
exports.domify = domify$1;
function query(selector, el) {
  el = el || document;
  return el.querySelector(selector);
}
function all(selector, el) {
  el = el || document;
  return el.querySelectorAll(selector);
}
function remove(el) {
  el.parentNode && el.parentNode.removeChild(el);
}

},{}],51:[function(require,module,exports){
module.exports = function cmp (a, b) {
    var pa = a.split('.');
    var pb = b.split('.');
    for (var i = 0; i < 3; i++) {
        var na = Number(pa[i]);
        var nb = Number(pb[i]);
        if (na > nb) return 1;
        if (nb > na) return -1;
        if (!isNaN(na) && isNaN(nb)) return 1;
        if (isNaN(na) && !isNaN(nb)) return -1;
    }
    return 0;
};

},{}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleModule = void 0;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var C = "\u037C";
var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol["for"](C);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

// :: - Style modules encapsulate a set of CSS rules defined from
// JavaScript. Their definitions are only available in a given DOM
// root after it has been _mounted_ there with `StyleModule.mount`.
//
// Style modules should be created once and stored somewhere, as
// opposed to re-creating them every time you need them. The amount of
// CSS rules generated for a given DOM root is bounded by the amount
// of style modules that were used. So to avoid leaking rules, don't
// create these dynamically, but treat them as one-time allocations.
var StyleModule = /*#__PURE__*/function () {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  function StyleModule(spec, options) {
    _classCallCheck(this, StyleModule);
    this.rules = [];
    var _ref = options || {},
      finish = _ref.finish;
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec, target, isKeyframes) {
      var local = [],
        isAt = /^@(\w+)\b/.exec(selectors[0]),
        keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec == null) return target.push(selectors[0] + ";");
      for (var prop in spec) {
        var value = spec[prop];
        if (/&/.test(prop)) {
          render(prop.split(/,\s*/).map(function (part) {
            return selectors.map(function (sel) {
              return part.replace(/&/, sel);
            });
          }).reduce(function (a, b) {
            return a.concat(b);
          }), value, target);
        } else if (value && _typeof(value) == "object") {
          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) {
            return "-" + l.toLowerCase();
          }) + ": " + value + ";");
        }
      }
      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (var prop in spec) render(splitSelector(prop), spec[prop], this.rules);
  }

  // :: () → string
  // Returns a string containing the module's CSS rules.
  _createClass(StyleModule, [{
    key: "getRules",
    value: function getRules() {
      return this.rules.join("\n");
    }

    // :: () → string
    // Generate a new unique CSS class name.
  }], [{
    key: "newName",
    value: function newName() {
      var id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36);
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
  }, {
    key: "mount",
    value: function mount(root, modules) {
      (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
    }
  }]);
  return StyleModule;
}();
exports.StyleModule = StyleModule;
var adoptedSet = new Map(); //<Document, StyleSet>
var StyleSet = /*#__PURE__*/function () {
  function StyleSet(root) {
    _classCallCheck(this, StyleSet);
    var doc = root.ownerDocument || root,
      win = doc.defaultView;
    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
      var adopted = adoptedSet.get(doc);
      if (adopted) {
        root.adoptedStyleSheets = [adopted.sheet].concat(_toConsumableArray(root.adoptedStyleSheets));
        return root[SET] = adopted;
      }
      this.sheet = new win.CSSStyleSheet();
      root.adoptedStyleSheets = [this.sheet].concat(_toConsumableArray(root.adoptedStyleSheets));
      adoptedSet.set(doc, this);
    } else {
      this.styleTag = doc.createElement("style");
      var target = root.head || root;
      target.insertBefore(this.styleTag, target.firstChild);
    }
    this.modules = [];
    root[SET] = this;
  }
  _createClass(StyleSet, [{
    key: "mount",
    value: function mount(modules) {
      var sheet = this.sheet;
      var pos = 0 /* Current rule offset */,
        j = 0; /* Index into this.modules */
      for (var i = 0; i < modules.length; i++) {
        var mod = modules[i],
          index = this.modules.indexOf(mod);
        if (index < j && index > -1) {
          // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (var k = 0; k < mod.rules.length; k++) sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }
      if (!sheet) {
        var text = "";
        for (var _i = 0; _i < this.modules.length; _i++) text += this.modules[_i].getRules() + "\n";
        this.styleTag.textContent = text;
      }
    }
  }]);
  return StyleSet;
}(); // Style::Object<union<Style,string>>
//
// A style is an object that, in the simple case, maps CSS property
// names to strings holding their values, as in `{color: "red",
// fontWeight: "bold"}`. The property names can be given in
// camel-case—the library will insert a dash before capital letters
// when converting them to CSS.
//
// If you include an underscore in a property name, it and everything
// after it will be removed from the output, which can be useful when
// providing a property multiple times, for browser compatibility
// reasons.
//
// A property in a style object can also be a sub-selector, which
// extends the current context to add a pseudo-selector or a child
// selector. Such a property should contain a `&` character, which
// will be replaced by the current selector. For example `{"&:before":
// {content: '"hi"'}}`. Sub-selectors and regular properties can
// freely be mixed in a given object. Any property containing a `&` is
// assumed to be a sub-selector.
//
// Finally, a property can specify an @-block to be wrapped around the
// styles defined inside the object that's the property's value. For
// example to create a media query you can do `{"@media screen and
// (min-width: 400px)": {...}}`.

},{}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nil.js":56,"./parse.js":57,"./stringify.js":61,"./v1.js":62,"./v3.js":63,"./v4.js":65,"./v5.js":66,"./validate.js":67,"./version.js":68}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports.default = _default;
},{}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
},{"./validate.js":67}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
},{}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
},{"./validate.js":67}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = require("./stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports.default = _default;
},{"./rng.js":59,"./stringify.js":61}],63:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./md5.js":54,"./v35.js":64}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports["default"] = v35;
var _stringify = require("./stringify.js");
var _parse = _interopRequireDefault(require("./parse.js"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse["default"])(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`

    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)

  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support

  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

},{"./parse.js":57,"./stringify.js":61}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _native = _interopRequireDefault(require("./native.js"));

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = require("./stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./native.js":55,"./rng.js":59,"./stringify.js":61}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./sha1.js":60,"./v35.js":64}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
},{"./regex.js":58}],68:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports.default = _default;
},{"./validate.js":67}],69:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base = void 0;
exports.keyName = keyName;
exports.shift = void 0;
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
exports.base = base;
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: "\""
};
exports.shift = shift;
var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
var brokenModifierNames = mac || chrome && +chrome[1] < 57;

// Fill in the digit keys
for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

// The function keys
for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

// And the alphabetic keys
for (var i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}

// For each code that doesn't have a shift-equivalent, copy the base name
for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
function keyName(event) {
  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  // Edge sometimes produces wrong names (Issue #3)
  if (name == "Esc") name = "Escape";
  if (name == "Del") name = "Delete";
  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
  if (name == "Left") name = "ArrowLeft";
  if (name == "Up") name = "ArrowUp";
  if (name == "Right") name = "ArrowRight";
  if (name == "Down") name = "ArrowDown";
  return name;
}

},{}],70:[function(require,module,exports){
(function (global){(function (){
"use strict";

var _bpmnJsPropertiesPanel = require("bpmn-js-properties-panel");
global.window.BpmnPropertiesPanelModule = _bpmnJsPropertiesPanel.BpmnPropertiesPanelModule;
global.window.BpmnPropertiesProviderModule = _bpmnJsPropertiesPanel.BpmnPropertiesProviderModule;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"bpmn-js-properties-panel":27}]},{},[70]);
